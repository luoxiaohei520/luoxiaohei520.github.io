<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构与算法2</title>
      <link href="/posts/ba945d0d.html"/>
      <url>/posts/ba945d0d.html</url>
      
        <content type="html"><![CDATA[<p>由于上个文件字数到达2w以上，本软件加载比较麻烦，故而新建一个文件用来记录。</p><h1>数据结构与算法</h1><h2 id="9-哈希表">9 哈希表</h2><p>一种数据结构</p><p>一般有hashMap,hashtable</p><p>哈希表，是一种数据结构，主要是key 与value的关系，了解hash表之前，我们需要了解的是哈希表，需要知道哈希函数，在jdk1.8之后，采用的红黑树进行一定的存储，其是根据关键码值而进行访问的数据结构，也就是说，<strong>其通过把关键码映射到表中的一个位置来访问记录，以加快查找的速度，这个映射函数我们称之为散列函数，存放记录的数组叫做散列表。</strong></p><p>hashtable来存储雇员信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashtableDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">hashTable</span> <span class="variable">hashtab</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">hashTable</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">10</span>,<span class="string">&quot;社会虎&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">18</span>,<span class="string">&quot;废物刀&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">26</span>,<span class="string">&quot;黑牛&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">3</span>,<span class="string">&quot;白牛&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">193</span>,<span class="string">&quot;小亮&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">231</span>,<span class="string">&quot;唐老鸭&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">12</span>,<span class="string">&quot;百特曼&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">1</span>,<span class="string">&quot;独爱小尹&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">123</span>,<span class="string">&quot;丽丽&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">126</span>,<span class="string">&quot;带篮子&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">29</span>,<span class="string">&quot;刘墉&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">86</span>,<span class="string">&quot;丁真&quot;</span>);</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">Emp13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>(<span class="number">800</span>,<span class="string">&quot;王冰冰&quot;</span>);<span class="comment">//定义数据</span></span><br><span class="line"></span><br><span class="line">        hashtab.add(Emp1);</span><br><span class="line">        hashtab.add(Emp2);</span><br><span class="line">        hashtab.add(Emp3);</span><br><span class="line">        hashtab.add(Emp4);</span><br><span class="line">        hashtab.add(Emp5);</span><br><span class="line">        hashtab.add(Emp6);</span><br><span class="line">        hashtab.add(Emp7);</span><br><span class="line">        hashtab.add(Emp8);</span><br><span class="line">        hashtab.add(Emp9);</span><br><span class="line">        hashtab.add(Emp10);</span><br><span class="line">        hashtab.add(Emp11);</span><br><span class="line">        hashtab.add(Emp12);</span><br><span class="line">        hashtab.add(Emp13);<span class="comment">//插入数据</span></span><br><span class="line">        </span><br><span class="line">        hashtab.list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建hashtable</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hashTable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">private</span> EmpLinkedList[] empLinkedLists;</span><br><span class="line"><span class="comment">//创建一个构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">hashTable</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.size = size;</span><br><span class="line"><span class="comment">//初始化empLinkedListArray</span></span><br><span class="line">empLinkedLists = <span class="keyword">new</span> <span class="title class_">EmpLinkedList</span>[size];</span><br><span class="line"><span class="comment">//细节，引用类型的变量在声明后如果不初始化那么默认值就是null</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; size; i++) &#123;</span><br><span class="line"><span class="comment">//这个循环体就是在初始化</span></span><br><span class="line">empLinkedLists[i] = <span class="keyword">new</span> <span class="title class_">EmpLinkedList</span>();<span class="comment">//在这里必须要逐一为每个元素实例化</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id % size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加雇员</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Emp emp)</span>&#123;</span><br><span class="line"><span class="comment">//根据员工的id得到该员工应该加入</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> hash(emp.id);</span><br><span class="line">empLinkedLists[num].add(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; size ; i ++ ) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;个链表状况&quot;</span>);</span><br><span class="line">empLinkedLists[i].list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表是</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Emp</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> Emp next;  <span class="comment">//next 默认为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Emp</span><span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Emp next)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个EmpLinkList,表示链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmpLinkedList</span>&#123;</span><br><span class="line"><span class="comment">//投指针，执行第一个Emp,因此我们这个链表的head是直接指向第一个Emp</span></span><br><span class="line"><span class="keyword">private</span> Emp head; <span class="comment">//默认为空</span></span><br><span class="line"><span class="comment">//添加雇员到链表</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//假定，当添加雇员时候，id是自增长，即id的分配总数从小到大的</span></span><br><span class="line"><span class="comment">//因此我们将该雇员直接加入到本链表的最后即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Emp emp)</span> &#123;</span><br><span class="line"><span class="comment">//如果是第一个雇员</span></span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span> ) &#123;</span><br><span class="line">head = emp;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果不是第一个雇员，则使用一个辅助的指针，帮助定位到最后</span></span><br><span class="line"><span class="type">Emp</span> <span class="variable">curEmp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(curEmp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curEmp = curEmp.next; <span class="comment">//后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//退出时直接将emp加入链表</span></span><br><span class="line">curEmp.next = emp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历链表的雇员信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果链表为空</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;当前链表的信息为：&quot;</span>);</span><br><span class="line"><span class="type">Emp</span> <span class="variable">cuEmp</span> <span class="operator">=</span> head ; <span class="comment">//辅助指针</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;id = %d name = %s\n&quot;</span>,cuEmp.id,cuEmp.name);</span><br><span class="line">count ++;</span><br><span class="line"><span class="keyword">if</span>(cuEmp.next == <span class="literal">null</span> ) &#123;</span><br><span class="line"><span class="comment">//说明cuEmp已经是最后的节点</span></span><br><span class="line">System.out.println(<span class="string">&quot;共计有&quot;</span>+ count+ <span class="string">&quot;个&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cuEmp = cuEmp.next;<span class="comment">//后移，遍历</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-数据结构的存储方式">10.数据结构的存储方式</h2><h3 id="10-1二叉树">10.1二叉树</h3><ol><li><p>数组的存储方式的分析<br>**优点：**通过下标方式访问元素，速度快。对于有序数组，还可以使用二分查找提高检索速度。</p><p>**缺点：**如果要检索具体某个值，或者插入值（按照一定顺序）会整体移动，效率较低。</p></li><li><p>链式存储方式的分析</p><p>**优点：**在一定程度上对数组的存储方式有优化（比如：插入一个数值节点，只需要将插入节点，链接到链表中即可，删除效率也很好）</p><p><strong>缺点：<strong>在进行</strong>检索</strong>时，效率仍然比较低，比如（检索某个值，需要从头结点开始遍历）</p></li><li><p>树存储方式的分析</p><p>**优点：**可以提高数据存储，读取的效率，比如利用二叉排序树，既可以保证数据的检索速度，同时也可以保证数据的插入，删除，修改的速度。</p><p>**缺点：**顺序存储可能会浪费空间（在非完全二叉树的时候，但是读取某个特定的节点的时候效率比较高O(0)）;链式存储相对于二叉树，浪费空间较少，但是读取某个结点时效率偏低O(nlogn)。</p></li></ol><h3 id="10-2-二叉树的概率和常用术语">10.2 二叉树的概率和常用术语</h3><p>**满二叉树：**在一个二叉树中，如果所有分支节点都有左孩子节点和右孩子节点，并且叶节点都集中在二叉树中的最下一层，这样的二叉树被称为满二叉树。</p><p>**完全二叉树：**若二叉树中最多只有最下面两层的结点的度数可以小于2，并且最下面一层的叶子节点，都依次排列在该层最左边的位置上，这样的二叉树称为完全二叉树。</p><h4 id="遍历和节点删除">遍历和节点删除</h4><p>二叉树是一种非常重要的数据结构，非常多的数据结构都是基于二叉树的基础演变而来的。对于二叉树有深度遍历和广度遍历，深度遍历有前序、中序以及后序三种遍历方法，广度遍历即我们寻常所说的层次遍历。由于树的定义本身就是递归定义，因此采用递归的方法实现树的三种遍历。</p><ul><li>前序遍历：根结点 --&gt;左子树–&gt;右子树；</li><li>中序遍历：左子树 --&gt;根结点–&gt;右子树；</li><li>后续遍历：左子树 --&gt;右子树–&gt;根结点；</li><li>层次遍历：仅仅需按成次遍历即可；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeDemo</span> &#123;</span><br><span class="line"><span class="comment">//定义一个自定义二叉树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建一个二叉树</span></span><br><span class="line"><span class="comment">//创建一个二叉树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">//创建结点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>, <span class="string">&quot;卢俊义&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>, <span class="string">&quot;吴用&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>, <span class="string">&quot;公孙胜&quot;</span>);</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">5</span>, <span class="string">&quot;关胜&quot;</span>);</span><br><span class="line">        root.setLeft(node2);</span><br><span class="line">        root.setRight(node3);</span><br><span class="line">        node3.setLeft(node4);</span><br><span class="line">        node3.setRight(node5);</span><br><span class="line">        binaryTree.setRoot(root);</span><br><span class="line">        System.out.println(<span class="string">&quot;前序遍历&quot;</span>);</span><br><span class="line">        binaryTree.preOrder();</span><br><span class="line">        System.out.println(<span class="string">&quot;中序遍历&quot;</span>);</span><br><span class="line">        binaryTree.midOrder();</span><br><span class="line">        System.out.println(<span class="string">&quot;后序遍历&quot;</span>);</span><br><span class="line">        binaryTree.postOrder();</span><br><span class="line">        binaryTree.delNode(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除结点3，前序遍历&quot;</span>);</span><br><span class="line">        binaryTree.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义BinaryTree 二叉树</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> HeroNode root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(HeroNode root)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.root = root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.root.preOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;二叉树为空，不能遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">midOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.root.midOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.root.postOrder();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;二叉树为空，无法遍历&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(root != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果只有一个root结点, 这里立即判断root是不是就是要删除结点</span></span><br><span class="line"><span class="keyword">if</span>(root.getNo() == no) &#123;</span><br><span class="line">root = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//递归删除</span></span><br><span class="line">root.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;空树，不能删除~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先创建HeroNode 结点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> HeroNode left; <span class="comment">//默认null</span></span><br><span class="line"><span class="keyword">private</span> HeroNode right; <span class="comment">//默认null</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getLeft</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeft</span><span class="params">(HeroNode left)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> HeroNode <span class="title function_">getRight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRight</span><span class="params">(HeroNode right)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.right = right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);<span class="comment">//先输出父节点</span></span><br><span class="line"><span class="comment">//递归向左子树前序遍历</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.preOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归向右子树前序遍历</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.preOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">midOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//递归向左子树中序遍历</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.midOrder();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);<span class="comment">//输出父节点</span></span><br><span class="line"><span class="comment">//递归向右子树前序遍历</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.midOrder();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//递归向左子树后序遍历</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.postOrder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归向右子树前序遍历</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.postOrder();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="built_in">this</span>);<span class="comment">//输出父节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归删除结点</span></span><br><span class="line"><span class="comment">//1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class="line"><span class="comment">//2.如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delNode</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. 因为我们的二叉树是单向的，所以我们是判断当前结点的子结点是否需要删除结点，而不能去判断当前这个结点是不是需要删除结点.</span></span><br><span class="line"><span class="comment">2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class="line"><span class="comment">3. 如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class="line"><span class="comment">4. 如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除</span></span><br><span class="line"><span class="comment">5.  如果第4步也没有删除结点，则应当向右子树进行递归删除.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//2. 如果当前结点的左子结点不为空，并且左子结点 就是要删除结点，就将this.left = null; 并且就返回(结束递归删除)</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.no == no) &#123;</span><br><span class="line"><span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.如果当前结点的右子结点不为空，并且右子结点 就是要删除结点，就将this.right= null ;并且就返回(结束递归删除)</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.no == no) &#123;</span><br><span class="line"><span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.我们就需要向左子树进行递归删除</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.left.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.则应当向右子树进行递归删除</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.right.delNode(no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-3链式存储">10.3链式存储</h3><p><strong>查找节点</strong>：先对树进行一次遍历，然后找出要找的那个数；因为有三种排序方法，所以查找节点也分为先序查找，中序查找，后序查找；</p><p><strong>删除节点</strong>：由于链式存储，不能找到要删的数直接删除，需要找到他的父节点，然后将指向该数设置为null；所以需要一个变量来指向父节点，找到数后，再断开连接。</p><p>树：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    TreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置根节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取根节点</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.frontShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.middleShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.afterShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序查找</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">frontSearch</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.frontSearch(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个子树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.value == i) &#123;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>节点类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="comment">//节点的权</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">//左儿子</span></span><br><span class="line">    TreeNode leftNode;</span><br><span class="line">    <span class="comment">//右儿子</span></span><br><span class="line">    TreeNode rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置左儿子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeftNode</span><span class="params">(TreeNode leftNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置右儿子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRightNode</span><span class="params">(TreeNode rightNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先遍历当前节点的值</span></span><br><span class="line">        System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//左节点</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            leftNode.frontShow(); <span class="comment">//递归思想</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右节点</span></span><br><span class="line">        <span class="keyword">if</span> (rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            rightNode.frontShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//左节点</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            leftNode.middleShow(); <span class="comment">//递归思想</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先遍历当前节点的值</span></span><br><span class="line">        System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//右节点</span></span><br><span class="line">        <span class="keyword">if</span> (rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            rightNode.middleShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后续遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//左节点</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            leftNode.afterShow(); <span class="comment">//递归思想</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右节点</span></span><br><span class="line">        <span class="keyword">if</span> (rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            rightNode.afterShow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先遍历当前节点的值</span></span><br><span class="line">        System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序查找</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">frontSearch</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//对比当前节点的值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value == i) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            <span class="comment">//当前节点不是要查找的节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//查找左儿子</span></span><br><span class="line">            <span class="keyword">if</span> (leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//查找的话t赋值给target，查不到target还是null</span></span><br><span class="line">                target = leftNode.frontSearch(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果target不为空，说明在左儿子中已经找到</span></span><br><span class="line">            <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果左儿子没有查到，再查找右儿子</span></span><br><span class="line">            <span class="keyword">if</span> (rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                target = rightNode.frontSearch(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个子树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">//判断左儿子</span></span><br><span class="line">        <span class="keyword">if</span> (parent.leftNode != <span class="literal">null</span> &amp;&amp; parent.leftNode.value == i) &#123;</span><br><span class="line">            parent.leftNode = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断右儿子</span></span><br><span class="line">        <span class="keyword">if</span> (parent.rightNode != <span class="literal">null</span> &amp;&amp; parent.rightNode.value == i) &#123;</span><br><span class="line">            parent.rightNode = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果都不是，递归检查并删除左儿子</span></span><br><span class="line">        parent = leftNode;</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            parent.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归检查并删除右儿子</span></span><br><span class="line">        parent = rightNode;</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            parent.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一棵树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">//创建一个根节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//把根节点赋给树</span></span><br><span class="line">        binaryTree.setRoot(root);</span><br><span class="line">        <span class="comment">//创建左,右节点</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rootLeft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">rootRight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//把新建的节点设置为根节点的子节点</span></span><br><span class="line">        root.setLeftNode(rootLeft);</span><br><span class="line">        root.setRightNode(rootRight);</span><br><span class="line">        <span class="comment">//为第二层的左节点创建两个子节点</span></span><br><span class="line">        rootLeft.setLeftNode(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">4</span>));</span><br><span class="line">        rootLeft.setRightNode(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">//为第二层的右节点创建两个子节点</span></span><br><span class="line">        rootRight.setLeftNode(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">6</span>));</span><br><span class="line">        rootRight.setRightNode(<span class="keyword">new</span> <span class="title class_">TreeNode</span>(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先序遍历</span></span><br><span class="line">        binaryTree.frontShow(); <span class="comment">//1 2 4 5 3 6 7</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//中序遍历</span></span><br><span class="line">        binaryTree.middleShow(); <span class="comment">//4 2 5 1 6 3 7</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//后序遍历</span></span><br><span class="line">        binaryTree.afterShow(); <span class="comment">//4 5 2 6 7 3 1</span></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先序查找</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">result</span> <span class="operator">=</span> binaryTree.frontSearch(<span class="number">5</span>);</span><br><span class="line">        System.out.println(result); <span class="comment">//binarytree.TreeNode@1b6d3586</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除一个子树</span></span><br><span class="line">        binaryTree.delete(<span class="number">2</span>);</span><br><span class="line">        binaryTree.frontShow(); <span class="comment">//1 3 6 7 ，2和他的子节点被删除了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-4顺序存储的二叉树">10.4顺序存储的二叉树</h3><p><strong>概述</strong>：顺序存储使用数组的形式实现；由于非完全二叉树会导致数组中出现空缺，有的位置不能填上数字，所以顺序存储二叉树通常情况下只考虑<strong>完全二叉树</strong></p><p><strong>原理</strong>： 顺序存储在数组中是按照第一层第二层一次往下存储的，遍历方式也有先序遍历、中序遍历、后续遍历</p><p><strong>性质</strong>：</p><ul><li>第n个元素的左子节点是：2*n+1；</li><li>第n个元素的右子节点是：2*n+2；</li><li>第n个元素的父节点是：（n-1)/2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayBinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] data = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line"><span class="type">ArrayBinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBinaryTree</span>(data);</span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line">tree.frontShow(); <span class="comment">//1 2 4 5 3 6 7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayBinaryTree</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载先序遍历方法，不用每次传参数了,保证每次从头开始</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">()</span> &#123;</span><br><span class="line">frontShow(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">null</span> || data.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先遍历当前节点的内容</span></span><br><span class="line">System.out.print(data[index] + <span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//处理左子树：2*index+1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * index + <span class="number">1</span> &lt; data.length) &#123;</span><br><span class="line">frontShow(<span class="number">2</span> * index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理右子树：2*index+2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * index + <span class="number">2</span> &lt; data.length) &#123;</span><br><span class="line">frontShow(<span class="number">2</span> * index + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-5线索二叉树">10.5线索二叉树</h3><p><strong>为什么使用线索二叉树？</strong></p><p>当用二叉链表作为二叉树的存储结构时，可以很方便的找到某个结点的左右孩子；但一般情况下，无法直接找到该结点在某种遍历序列中的前驱和后继结点</p><p><strong>原理</strong>：n个结点的二叉链表中含有n+1(2n-(n-1)=n+1个空指针域。利用二叉链表中的空指针域，存放指向结点在某种遍历次序下的前驱和后继结点的指针。</p><p><strong>例如</strong>：某个结点的左孩子为空，则将空的左孩子指针域改为指向其前驱；如果某个结点的右孩子为空，则将空的右孩子指针域改为指向其后继（这种附加的指针称为&quot;线索&quot;）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadedBinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    ThreadedNode root;</span><br><span class="line">    <span class="comment">//用于临时存储前驱节点</span></span><br><span class="line">    <span class="type">ThreadedNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置根节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoot</span><span class="params">(ThreadedNode root)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序线索化二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadNodes</span><span class="params">()</span> &#123;</span><br><span class="line">        threadNodes(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadNodes</span><span class="params">(ThreadedNode node)</span> &#123;</span><br><span class="line">        <span class="comment">//当前节点如果为null，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理左子树</span></span><br><span class="line">        threadNodes(node.leftNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理前驱节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.leftNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//让当前节点的左指针指向前驱节点</span></span><br><span class="line">            node.leftNode = pre;</span><br><span class="line">            <span class="comment">//改变当前节点左指针类型</span></span><br><span class="line">            node.leftType = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理前驱的右指针，如果前驱节点的右指针是null（没有右子树）</span></span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">null</span> &amp;&amp; pre.rightNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//让前驱节点的右指针指向当前节点</span></span><br><span class="line">            pre.rightNode = node;</span><br><span class="line">            <span class="comment">//改变前驱节点的右指针类型</span></span><br><span class="line">            pre.rightType = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每处理一个节点，当前节点是下一个节点的前驱节点</span></span><br><span class="line">        pre = node;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理右子树</span></span><br><span class="line">        threadNodes(node.rightNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历线索二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadIterate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//用于临时存储当前遍历节点</span></span><br><span class="line">        <span class="type">ThreadedNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//循环找到最开始的节点</span></span><br><span class="line">            <span class="keyword">while</span> (node.leftType == <span class="number">0</span>) &#123;</span><br><span class="line">                node = node.leftNode;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//打印当前节点的值</span></span><br><span class="line">            System.out.print(node.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="comment">//如果当前节点的右指针指向的是后继节点，可能后继节点还有后继节点</span></span><br><span class="line">            <span class="keyword">while</span> (node.rightType == <span class="number">1</span>) &#123;</span><br><span class="line">                node = node.rightNode;</span><br><span class="line">                System.out.print(node.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//替换遍历的节点</span></span><br><span class="line">            node = node.rightNode;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取根节点</span></span><br><span class="line">    <span class="keyword">public</span> ThreadedNode <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.frontShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.middleShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.afterShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序查找</span></span><br><span class="line">    <span class="keyword">public</span> ThreadedNode <span class="title function_">frontSearch</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root.frontSearch(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个子树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.value == i) &#123;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadedNode</span> &#123;</span><br><span class="line">    <span class="comment">//节点的权</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">//左儿子</span></span><br><span class="line">    ThreadedNode leftNode;</span><br><span class="line">    <span class="comment">//右儿子</span></span><br><span class="line">    ThreadedNode rightNode;</span><br><span class="line">    <span class="comment">//标识指针类型,1表示指向上一个节点，0</span></span><br><span class="line">    <span class="type">int</span> leftType;</span><br><span class="line">    <span class="type">int</span> rightType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadedNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置左儿子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLeftNode</span><span class="params">(ThreadedNode leftNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.leftNode = leftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置右儿子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRightNode</span><span class="params">(ThreadedNode rightNode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rightNode = rightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先遍历当前节点的值</span></span><br><span class="line">        System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//左节点</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            leftNode.frontShow(); <span class="comment">//递归思想</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右节点</span></span><br><span class="line">        <span class="keyword">if</span> (rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            rightNode.frontShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//左节点</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            leftNode.middleShow(); <span class="comment">//递归思想</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先遍历当前节点的值</span></span><br><span class="line">        System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//右节点</span></span><br><span class="line">        <span class="keyword">if</span> (rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            rightNode.middleShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后续遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//左节点</span></span><br><span class="line">        <span class="keyword">if</span> (leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            leftNode.afterShow(); <span class="comment">//递归思想</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右节点</span></span><br><span class="line">        <span class="keyword">if</span> (rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">            rightNode.afterShow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先遍历当前节点的值</span></span><br><span class="line">        System.out.print(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先序查找</span></span><br><span class="line">    <span class="keyword">public</span> ThreadedNode <span class="title function_">frontSearch</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">ThreadedNode</span> <span class="variable">target</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//对比当前节点的值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value == i) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            <span class="comment">//当前节点不是要查找的节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//查找左儿子</span></span><br><span class="line">            <span class="keyword">if</span> (leftNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//查找的话t赋值给target，查不到target还是null</span></span><br><span class="line">                target = leftNode.frontSearch(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果target不为空，说明在左儿子中已经找到</span></span><br><span class="line">            <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> target;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果左儿子没有查到，再查找右儿子</span></span><br><span class="line">            <span class="keyword">if</span> (rightNode != <span class="literal">null</span>) &#123;</span><br><span class="line">                target = rightNode.frontSearch(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个子树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">ThreadedNode</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">//判断左儿子</span></span><br><span class="line">        <span class="keyword">if</span> (parent.leftNode != <span class="literal">null</span> &amp;&amp; parent.leftNode.value == i) &#123;</span><br><span class="line">            parent.leftNode = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断右儿子</span></span><br><span class="line">        <span class="keyword">if</span> (parent.rightNode != <span class="literal">null</span> &amp;&amp; parent.rightNode.value == i) &#123;</span><br><span class="line">            parent.rightNode = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果都不是，递归检查并删除左儿子</span></span><br><span class="line">        parent = leftNode;</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            parent.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//递归检查并删除右儿子</span></span><br><span class="line">        parent = rightNode;</span><br><span class="line">        <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">            parent.delete(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一棵树</span></span><br><span class="line">        <span class="type">ThreadedBinaryTree</span> <span class="variable">binaryTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadedBinaryTree</span>();</span><br><span class="line">        <span class="comment">//创建一个根节点</span></span><br><span class="line">        <span class="type">ThreadedNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadedNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//把根节点赋给树</span></span><br><span class="line">        binaryTree.setRoot(root);</span><br><span class="line">        <span class="comment">//创建左,右节点</span></span><br><span class="line">        <span class="type">ThreadedNode</span> <span class="variable">rootLeft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadedNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">ThreadedNode</span> <span class="variable">rootRight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadedNode</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//把新建的节点设置为根节点的子节点</span></span><br><span class="line">        root.setLeftNode(rootLeft);</span><br><span class="line">        root.setRightNode(rootRight);</span><br><span class="line">        <span class="comment">//为第二层的左节点创建两个子节点</span></span><br><span class="line">        rootLeft.setLeftNode(<span class="keyword">new</span> <span class="title class_">ThreadedNode</span>(<span class="number">4</span>));</span><br><span class="line">        <span class="type">ThreadedNode</span> <span class="variable">fiveNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadedNode</span>(<span class="number">5</span>);</span><br><span class="line">        rootLeft.setRightNode(fiveNode);</span><br><span class="line">        <span class="comment">//为第二层的右节点创建两个子节点</span></span><br><span class="line">        rootRight.setLeftNode(<span class="keyword">new</span> <span class="title class_">ThreadedNode</span>(<span class="number">6</span>));</span><br><span class="line">        rootRight.setRightNode(<span class="keyword">new</span> <span class="title class_">ThreadedNode</span>(<span class="number">7</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中序遍历</span></span><br><span class="line">        binaryTree.middleShow(); <span class="comment">//4 2 5 1 6 3 7</span></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//中序线索化二叉树</span></span><br><span class="line">        binaryTree.threadNodes();</span><br><span class="line"><span class="comment">//        //获取5的后继节点</span></span><br><span class="line"><span class="comment">//        ThreadedNode afterFive = fiveNode.rightNode;</span></span><br><span class="line"><span class="comment">//        System.out.println(afterFive.value); //1</span></span><br><span class="line">        binaryTree.threadIterate(); <span class="comment">//4 2 5 1 6 3 7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-6二叉排序树">10.6二叉排序树</h3><p><strong>概述</strong>：二叉排序树（Binary Sort Tree）也叫二叉查找树或者是一颗空树，对于二叉树中的任何一个非叶子节点，要求左子节点比当前节点值小，右子节点比当前节点值大</p><p><strong>特点</strong>：</p><ul><li>查找性能与插入删除性能都适中还不错</li><li>中序遍历的结果刚好是从大到小</li></ul><p><strong>创建二叉排序树原理</strong>：其实就是不断地插入节点，然后进行比较。</p><p><strong>删除节点</strong></p><ul><li>删除叶子节点，只需要找到父节点，将父节点与他的连接断开即可</li><li>删除有一个子节点的就需要将他的子节点换到他现在的位置</li><li>删除有两个子节点的节点，需要使用他的前驱节点或者后继节点进行替换，就是左子树最右下方的数（最大的那个）或右子树最左边的树（最小的数）；即离节点值最接近的值；（还要注解要去判断这个值有没有右节点，有就要将右节点移上来）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line">    Node root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="comment">//如果是一颗空树</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.add(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            root.middleShow(root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找节点</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.search(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找父节点</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.searchParent(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//找到这个节点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">target</span> <span class="operator">=</span> search(value);</span><br><span class="line">            <span class="comment">//如果没有这个节点</span></span><br><span class="line">            <span class="keyword">if</span> (target == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到他的父节点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> searchParent(value);</span><br><span class="line">            <span class="comment">//要删除的节点是叶子节点</span></span><br><span class="line">            <span class="keyword">if</span> (target.left == <span class="literal">null</span> &amp;&amp; target.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//要删除的节点是父节点的左子节点</span></span><br><span class="line">                <span class="keyword">if</span> (parent.left.value == value) &#123;</span><br><span class="line">                    parent.left = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//要删除的节点是父节点的右子节点</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    parent.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//要删除的节点有两个子节点的情况</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (target.left != <span class="literal">null</span> &amp;&amp; target.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//删除右子树中值最小的节点，并且获取到值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> deletMin(target.right);</span><br><span class="line">                <span class="comment">//替换目标节点中的值</span></span><br><span class="line">                target.value = min;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//要删除的节点有一个左子节点或右子节点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//有左子节点</span></span><br><span class="line">                <span class="keyword">if</span> (target.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//要删除的节点是父节点的左子节点</span></span><br><span class="line">                    <span class="keyword">if</span> (parent.left.value == value) &#123;</span><br><span class="line">                        parent.left = target.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//要删除的节点是父节点的右子节点</span></span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        parent.right = target.left;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//有右子节点</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//要删除的节点是父节点的左子节点</span></span><br><span class="line">                    <span class="keyword">if</span> (parent.left.value == value) &#123;</span><br><span class="line">                        parent.left = target.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//要删除的节点是父节点的右子节点</span></span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        parent.right = target.right;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一棵树中最小的节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">deletMin</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">target</span> <span class="operator">=</span> node;</span><br><span class="line">        <span class="comment">//递归向左找最小值</span></span><br><span class="line">        <span class="keyword">while</span> (target.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            target = target.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除最小的节点</span></span><br><span class="line">        delete(target.value);</span><br><span class="line">        <span class="keyword">return</span> target.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向子树中添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*判断传入的节点的值比当前紫薯的根节点的值大还是小*/</span></span><br><span class="line">        <span class="comment">//添加的节点比当前节点更小(传给左节点）</span></span><br><span class="line">        <span class="keyword">if</span> (node.value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">            <span class="comment">//如果左节点为空</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不为空</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加的节点比当前节点更大(传给右节点）</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历二叉排序树，结果刚好是从小到大</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        middleShow(node.left);</span><br><span class="line">        System.out.print(node.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        middleShow(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找节点</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value == value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> left.search(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> right.search(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找父节点</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.value == value) || (<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.value == value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.value &gt; value &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &lt; value &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">14</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        <span class="comment">//创建一颗二叉排序树</span></span><br><span class="line">        <span class="type">BinarySortTree</span> <span class="variable">bst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">        <span class="comment">//循环添加</span></span><br><span class="line"><span class="comment">/*        for(int i=0;i&lt; arr.length;i++) &#123;</span></span><br><span class="line"><span class="comment">            bst.add(new Node(arr[i]));</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            bst.add(<span class="keyword">new</span> <span class="title class_">Node</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中序遍历</span></span><br><span class="line">        bst.middleShow(); <span class="comment">//1 3 4 6 7 8 10 13 14</span></span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> bst.search(<span class="number">10</span>);</span><br><span class="line">        System.out.println(node.value);<span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node2</span> <span class="operator">=</span> bst.search(<span class="number">20</span>);</span><br><span class="line">        System.out.println(node2); <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找父节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node3</span> <span class="operator">=</span> bst.searchParent(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node4</span> <span class="operator">=</span> bst.searchParent(<span class="number">14</span>);</span><br><span class="line">        System.out.println(node3.value); <span class="comment">//3</span></span><br><span class="line">        System.out.println(node4.value); <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除叶子节点</span></span><br><span class="line"><span class="comment">//        bst.delete(13);</span></span><br><span class="line"><span class="comment">//        bst.middleShow(); //1 3 4 6 7 8 10 14</span></span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line"><span class="comment">//        //删除只有一个子节点的节点</span></span><br><span class="line"><span class="comment">//        bst.delete(10);</span></span><br><span class="line"><span class="comment">//        bst.middleShow(); //1 3 4 6 7 8 ；10和14都没了</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除有两个子节点的节点</span></span><br><span class="line">        bst.delete(<span class="number">3</span>);</span><br><span class="line">        bst.middleShow(); <span class="comment">//1 4 6 7 8 10 13 14</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="10-7平衡二叉树">10.7平衡二叉树</h3><p>平衡二叉树（Balanced Binary Tree）又被称为AVL树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。这个方案很好的解决了二叉查找树退化成链表的问题，把插入，查找，删除的时间复杂度最好情况和最坏情况都维持在<code>O(logN)</code>。但是频繁旋转会使插入和删除牺牲掉<code>O(logN)</code>左右的时间，不过相对二叉查找树来说，时间上稳定了很多。</p><p><strong>平衡因子 BF</strong></p><ul><li>定义：左子树和右子树高度差</li><li>计算：<code>左子树高度 - 右子树高度的值</code></li><li>别名：简称 BF（Balance Factor）</li><li>一般来说 BF 的绝对值大于 1，,平衡树二叉树就失衡，需要旋转纠正</li></ul><p><strong>最小不平衡子树</strong></p><ul><li>距离插入节点最近的，并且 BF 的绝对值大于 1 的节点为根节点的子树。</li><li>旋转纠正只需要纠正最小不平衡子树即可</li></ul><h4 id="旋转方式">旋转方式</h4><p><strong>2 种旋转方式</strong>:</p><p>左旋 :</p><ul><li>旧根节点为新根节点的左子树</li><li>新根节点的左子树（如果存在）为旧根节点的右子树</li></ul><p>右旋：</p><ul><li>旧根节点为新根节点的右子树</li><li>新根节点的右子树（如果存在）为旧根节点的左子树</li></ul><p><strong>4 种旋转纠正类型</strong>：</p><ul><li>左左型：插入左孩子的左子树，右旋</li><li>右右型：插入右孩子的右子树，左旋</li><li>左右型：插入左孩子的右子树，先左旋，再右旋</li><li>右左型：插入右孩子的左子树，先右旋，再左旋</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前节点高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(left == <span class="literal">null</span> ? <span class="number">0</span> : left.height(), right == <span class="literal">null</span> ? <span class="number">0</span> : right.height()) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取左子树高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left.height();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取右子树高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right.height();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//向子树中添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*判断传入的节点的值比当前紫薯的根节点的值大还是小*/</span></span><br><span class="line">        <span class="comment">//添加的节点比当前节点更小(传给左节点）</span></span><br><span class="line">        <span class="keyword">if</span> (node.value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">            <span class="comment">//如果左节点为空</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不为空</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.left.add(node);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加的节点比当前节点更大(传给右节点）</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.right.add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询是否平衡</span></span><br><span class="line">        <span class="comment">//右旋转</span></span><br><span class="line">        <span class="keyword">if</span> (leftHeight() - rightHeight() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//双旋转，当左子树左边高度小于左子树右边高度时</span></span><br><span class="line">            <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; left.leftHeight() &lt; left.rightHeight()) &#123;</span><br><span class="line">                <span class="comment">//左子树先进行左旋转</span></span><br><span class="line">                left.leftRotate();</span><br><span class="line">                <span class="comment">//整体进行右旋转</span></span><br><span class="line">                rightRotate();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//单旋转</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                rightRotate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左旋转</span></span><br><span class="line">        <span class="keyword">if</span> (leftHeight() - rightHeight() &lt;= -<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//双旋转</span></span><br><span class="line">            <span class="keyword">if</span> (right != <span class="literal">null</span> &amp;&amp; right.rightHeight() &lt; right.leftHeight()) &#123;</span><br><span class="line">                right.rightRotate();</span><br><span class="line">                leftRotate();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//单旋转</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                leftRotate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//右旋转</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个新的节点，值等于当前节点的值</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newRight</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="comment">//把新节点的右子树设置为当前节点的右子树</span></span><br><span class="line">        newRight.right = right;</span><br><span class="line">        <span class="comment">//把新节点的左子树设置为当前节点的左子树的右子树</span></span><br><span class="line">        newRight.left = left.right;</span><br><span class="line">        <span class="comment">//把当前节点的值换位左子节点的值</span></span><br><span class="line">        value = left.value;</span><br><span class="line">        <span class="comment">//把当前节点的左子树设置为左子树的左子树</span></span><br><span class="line">        left = left.left;</span><br><span class="line">        <span class="comment">//把当前节点设置为新节点</span></span><br><span class="line">        right = newRight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//左旋转</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个新的节点，值等于当前节点的值</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newLeft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="comment">//把新节点的左子树设置为当前节点的左子树</span></span><br><span class="line">        newLeft.left = left;</span><br><span class="line">        <span class="comment">//把新节点的右子树设置为当前节点的右子树的左子树</span></span><br><span class="line">        newLeft.right = right.left;</span><br><span class="line">        <span class="comment">//把当前节点的值换位右子节点的值</span></span><br><span class="line">        value = right.value;</span><br><span class="line">        <span class="comment">//把当前节点的右子树设置为右子树的右子树</span></span><br><span class="line">        right = right.right;</span><br><span class="line">        <span class="comment">//把当前节点设置为新节点</span></span><br><span class="line">        left = newLeft;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历二叉排序树，结果刚好是从小到大</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        middleShow(node.left);</span><br><span class="line">        System.out.print(node.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        middleShow(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找节点</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value == value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> left.search(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> right.search(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找父节点</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">searchParent</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.left.value == value) || (<span class="built_in">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.right.value == value)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.value &gt; value &amp;&amp; <span class="built_in">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.left.searchParent(value);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &lt; value &amp;&amp; <span class="built_in">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.right.searchParent(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//创建一颗二叉排序树</span></span><br><span class="line">        <span class="type">BinarySortTree</span> <span class="variable">bst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySortTree</span>();</span><br><span class="line">        <span class="comment">//循环添加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            bst.add(<span class="keyword">new</span> <span class="title class_">Node</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查看高度</span></span><br><span class="line">        System.out.println(bst.root.height()); <span class="comment">//3</span></span><br><span class="line">        <span class="comment">//查看节点值</span></span><br><span class="line">        System.out.println(bst.root.value); <span class="comment">//根节点为4</span></span><br><span class="line">        System.out.println(bst.root.left.value); <span class="comment">//左子节点为2</span></span><br><span class="line">        System.out.println(bst.root.right.value); <span class="comment">//右子节点为5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pdf阅读器</title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1>1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</h1><div class="row">    <embed src="xxx.pdf" width="100%" height="550" type="application/pdf"></div><h1>2.在线链接</h1><div class="row">    <embed src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>系统架构师上午题知识点</title>
      <link href="/posts/7593676.html"/>
      <url>/posts/7593676.html</url>
      
        <content type="html"><![CDATA[<h1>系统架构师</h1><h2 id="计算机组成与体系结构">计算机组成与体系结构</h2><h3 id="计算机系统组成">计算机系统组成</h3><ul><li><p>计算机硬件组成</p><ul><li><p>控制器</p><ul><li>计算机的指挥中心，负责决定执行程序的顺序，给出执行指令时机器各部分所需要的操作控制命令</li><li>程序计数器、指令寄存器、指令译码器、时序产生器、操作控制器</li></ul></li><li><p>运算器</p><ul><li>最少包括3个寄存器和1个算术逻辑单元</li></ul></li><li><p>主存储器</p><ul><li>内存</li></ul></li><li><p>辅助存储器</p><ul><li>硬盘</li></ul></li><li><p>输入设备</p><ul><li>键盘、鼠标、触摸板等</li></ul></li><li><p>输出设备</p><ul><li>显示器、指示灯等</li></ul></li></ul></li><li><p>计算机体系结构分类</p><ul><li><p>冯诺依曼</p><ul><li>指令地址和数据地址在一起</li></ul></li><li><p>哈佛结构</p><ul><li>指令地址和数据地址分开</li></ul></li><li><p>Flynn分类法</p><ul><li>单指令单数据流 SISD</li><li>单指令多数据流 SIMD</li><li>多指令单数据流 MISD</li><li>多指令多数据流 MIMD</li></ul></li></ul></li><li><p>复杂指令集系统与精简指令集系统</p><ul><li><p>CICS复杂指令系统</p><ul><li>指令数据众多</li><li>指令使用频率相差悬殊</li><li>支持多种寻址方式</li><li>变长指令</li><li>指令可以对主存储单元中的数据直接处理</li><li>以微程序控制为主</li></ul></li><li><p>RICS精简指令系统</p><ul><li>指令数量少</li><li>指令寻址方式少，指令格式种类少</li><li>指令长度固定</li><li>以硬布线控制逻辑为主</li><li>单周期指令执行，采用流水线技术</li><li>优化的编译器</li><li>CPU中通用的寄存器数量多，一般32个多则上千个</li></ul></li></ul></li><li><p>总线</p><ul><li>地址总线</li><li>数据总线</li><li>控制总线</li></ul></li></ul><h3 id="存储器系统">存储器系统</h3><ul><li><p>主存储器</p><ul><li>RAM随机存储器</li><li>ROM只读存储器</li></ul></li><li><p>辅存储器</p><ul><li>硬盘</li></ul></li><li><p>cache存储器</p></li></ul><h3 id="流水线">流水线</h3><ul><li><p>流水线周期</p><ul><li>将流水线分割成N段，最耗时的那一段即为流水线的生命周期</li></ul></li><li><p>流水线执行时间计算</p><ul><li><p>流水线周期T，花费时间最长的步骤</p></li><li><p>执行100条指令</p><ul><li>100T+其他步骤的1次时间</li></ul></li></ul></li><li><p>流水线吞吐量</p><ul><li>单位时间内流水线完成的任务量或者数据的结果量</li></ul></li><li><p>流水线加速比</p><ul><li>不使用流水线执行时间 / 使用流水线的执行时间</li></ul></li></ul><h2 id="操作系统">操作系统</h2><h3 id="操作系统的类型与结构">操作系统的类型与结构</h3><ul><li><p>操作系统的定义</p><ul><li>管理计算机硬件和软件资源的系统软件，是计算机的内核和基石</li></ul></li><li><p>操作系统的分类</p><ul><li>批处理操作系统</li><li>分时操作系统</li><li>实时操作系统</li><li>网络操作系统</li><li>分布式操作系统</li></ul></li></ul><h3 id="操作系统的基本原理">操作系统的基本原理</h3><ul><li>进程管理</li><li>存储管理</li><li>设备管理</li><li>文件管理</li><li>作业管理</li></ul><h2 id="数据库系统">数据库系统</h2><h3 id="数据库管理系统的类型">数据库管理系统的类型</h3><h3 id="数据库的模式与范式">数据库的模式与范式</h3><ul><li><p>数据库的结构与模式</p><ul><li><p>外模式/用户模式</p><ul><li>用户与数据库之间的接口，对用户使用数据的表示，类如数据库的表</li></ul></li><li><p>概念模式</p><ul><li>概念模式反映了数据库系统的整体观</li></ul></li><li><p>内模式</p><ul><li>数据库中全体数据的内部表示或底层描述</li></ul></li></ul></li><li><p>数据模型</p><ul><li><p>概念数据模型</p><ul><li>按照用户的观点对数据和信息进行建模，主要用书数据库设计</li></ul></li><li><p>基本数据模型</p><ul><li><p>层次模型</p><ul><li>优点：查询效率高 1：n</li><li>缺点：对 n:n需要辅助实现，且逻辑复杂</li></ul></li><li><p>网状模型</p><ul><li>优点：m：n查询效率高</li><li>缺点：编写应用程序过于复杂</li></ul></li><li><p>关系模型</p></li><li><p>NoSQL</p><ul><li>Not only SQL</li></ul></li></ul></li></ul></li><li><p>关系代数</p><ul><li><p>并</p><ul><li>相当于SQL中的union，A∪B</li></ul></li><li><p>交</p><ul><li>相当于SQL中的intersect，A∩B</li></ul></li><li><p>差</p><ul><li>相当于SQL中的except，A-B</li></ul></li><li><p>投影</p><ul><li>相当于SQL中的select</li></ul></li><li><p>笛卡尔乘积</p><ul><li>等价于SQL中两个表进行笛卡尔积全匹配得到的结果AXB</li></ul></li><li><p>自然连接</p><ul><li>相当于SQL语句中的natural join，A⋈B</li></ul></li><li><p>除</p></li></ul></li><li><p>数据的规范化</p><ul><li><p>第一范式</p><ul><li>属性具有原子性，不可再分</li></ul></li><li><p>第二范式</p><ul><li>记录的唯一性，消除非主键依赖</li></ul></li><li><p>第三范式</p><ul><li>字段的冗余，消除传递依赖</li></ul></li><li><p>BCNF</p><ul><li>鲍尔斯-科得范式</li></ul></li></ul></li><li><p>反范式化</p><ul><li>没有冗余的数据库未必是最好的数据库，增加冗余，以空间换时间</li><li>增加冗余列</li><li>增加派生列</li><li>重新主表</li></ul></li></ul><h3 id="数据库设计">数据库设计</h3><ul><li><p>数据库设计方式</p><ul><li><p>直观设计法</p><ul><li>又称单步逻辑设计法，依赖于设计者的知识、经验和技巧</li></ul></li><li><p>规范设计法</p><ul><li>数据库设计规范，把数据设计分为需求分析，概念结构设计，逻辑结构设计和物理设计4个阶段</li></ul></li><li><p>自动化设计法</p></li></ul></li><li><p>数据设计的基本步骤</p><ul><li><p>需求分析</p><ul><li><p>收集和分析用户对系统的信息需求和处理需求，需求说明文档</p></li><li><p>数据字典</p><ul><li>数据项</li><li>数据结构</li><li>数据流</li><li>数据存储</li><li>处理过程</li></ul></li></ul></li><li><p>概念结构设计</p><ul><li>对需求说明书提供的所有数据和处理要求进行抽象与综合处理。E-R模型，与DBMS无关</li></ul></li><li><p>逻辑结构设计</p><ul><li>将概念数据模型转换成DBMS支持的数据模型，E-R图向关系模型转换</li></ul></li><li><p>物理结构设计</p><ul><li>逻辑模型在物理上实现</li></ul></li></ul></li></ul><h3 id="事物管理">事物管理</h3><ul><li>并发控制</li><li>故障与恢复</li></ul><h3 id="备份与恢复">备份与恢复</h3><ul><li>事物故障</li><li>系统故障</li><li>介质故障</li><li>计算机病毒</li></ul><h3 id="分布式数据库系统">分布式数据库系统</h3><ul><li><p>分布式数据库的概念</p><ul><li>分散的多个数据库单元连接起来组成的一个逻辑上统一的数据库</li></ul></li><li><p>分布式数据的架构</p></li></ul><h3 id="数据仓库">数据仓库</h3><ul><li><p>数据仓库的概念</p><ul><li>主要用于数据分析</li></ul></li><li><p>数据仓库的步骤</p><ul><li><p>抽取</p></li><li><p>转换</p><ul><li>切片、切块</li><li>旋转</li><li>上卷和下钻</li></ul></li><li><p>加载</p></li></ul></li><li><p>数据仓库的实现方法</p><ul><li>MOLAP</li><li>ROLAP</li><li>HOLAP</li></ul></li></ul><h3 id="数据挖掘">数据挖掘</h3><ul><li><p>数据挖掘的概念</p><ul><li>从大量的数据中，挖掘出未知的且具有价值的信息和知识的过程</li></ul></li><li><p>数据挖掘的功能</p></li><li><p>数据挖掘的常用技术</p><ul><li>关联分析</li><li>序列分析</li><li>分类</li><li>预测</li><li>聚类分析</li><li>时间序列分析</li></ul></li><li><p>数据挖掘的流程</p><ul><li>问题定义</li><li>建立数据挖掘库</li><li>调整数据</li><li>模型化</li><li>评价和解析</li></ul></li></ul><h3 id="NoSQL">NoSQL</h3><ul><li>Not only SQL，泛指非关系型数据库</li><li>解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题</li></ul><h3 id="大数据">大数据</h3><ul><li>无法在一定时间内用常规软件工具对其内容进行抓取、管理和处理的数据集合</li></ul><h2 id="计算机网络">计算机网络</h2><h3 id="网络架构与协议">网络架构与协议</h3><ul><li><p>网络互联模型</p><ul><li><p>OSI/RM模型</p><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层 - 数据段</li><li>网络层 - 分组数据包</li><li>数据链路层 - 数据帧(Frame)</li><li>物理层 - 比特(bit)</li></ul></li><li><p>TCP/IP结构模型</p><ul><li>应用层</li><li>传输层</li><li>网络互联层</li><li>网络接口层</li></ul></li></ul></li><li><p>常见的网络协议</p><ul><li><p>应用层协议</p><ul><li>HTTP、FTP、TELNET、SMTP</li><li>DNS、RIP、DHCP</li></ul></li><li><p>传输层协议</p><ul><li>TCP、UDP</li></ul></li><li><p>网络层协议</p><ul><li>IP、ARP</li></ul></li></ul></li><li><p>IPV6</p><ul><li>128位，分为8组，每组4位，2001:0DB8:02de:0000:0000:0000:0000:0e13</li><li>每组的前导0，可以省略。2001:DB8:2de:0:0:0:0:e130:0e13 -&gt; 2001:DB8:2de::e13</li></ul></li></ul><h3 id="局域网与广域网">局域网与广域网</h3><ul><li><p>局域网基础知识</p></li><li><p>无线局域网LAN</p></li><li><p>广域网技术WAN</p></li><li><p>网络接入技术</p><ul><li><p>PSTN接入</p></li><li><p>ISDN接入</p></li><li><p>ADSL接入</p></li><li><p>FTTx+LAN接入</p></li><li><p>同轴电缆</p></li><li><p>光纤接入</p><ul><li>多模光纤</li><li>单模光纤，大容量长距离</li></ul></li></ul></li></ul><h3 id="网络互连与常用设备">网络互连与常用设备</h3><h3 id="网络工程">网络工程</h3><ul><li>网络规划</li><li>网络设计</li><li>网络实施</li></ul><h3 id="网络存储技术">网络存储技术</h3><ul><li><p>直连式存储 DAS</p><ul><li>直接与主机系统相连的存储设备</li></ul></li><li><p>网络存储设备 NAS</p><ul><li>采用直接与网络介质相连的特殊设备实现数据存储机制。跨平台的文件共享功能</li></ul></li><li><p>存储区域网 SAN</p><ul><li>通过专用高速网将一个或多个网络存储设备(如磁盘阵列RAID)和服务器连接起来的专用存储系统</li></ul></li></ul><h3 id="综合布线">综合布线</h3><ul><li>工作区</li><li>配线子系统</li><li>干线系统</li><li>建筑群子系统</li><li>设备间</li><li>管理</li></ul><h2 id="系统性能与评价">系统性能与评价</h2><h3 id="性能指标">性能指标</h3><ul><li><p>计算机</p><ul><li>时钟频率</li><li>高速缓存</li><li>运算速度</li><li>运算精度</li><li>内存的存储容量</li><li>存储器的存取周期</li><li>数据处理速率</li><li>响应时间</li><li>RASIS特性</li><li>平均故障响应时间</li><li>兼容性</li></ul></li><li><p>网络</p><ul><li>设备级性能指标</li><li>网络级性能指标</li><li>应用级性能指标</li><li>用户级性能指标</li><li>吞吐量</li></ul></li><li><p>操作系统</p><ul><li>系统的可靠性</li><li>系统的吞吐量</li><li>系统的相应时间</li><li>系统的资源利用率</li><li>可移植性</li></ul></li><li><p>数据管理系统</p></li><li><p>web服务器</p></li></ul><h3 id="性能计算">性能计算</h3><h3 id="性能设计">性能设计</h3><ul><li><p>阿木达尔定律</p><ul><li>在并行计算中用多处理器的应用加速受限于程序所需的串行时间百分比</li></ul></li><li><p>负载均衡</p></li></ul><h3 id="性能评估">性能评估</h3><ul><li><p>web服务器性能评估</p></li><li><p>基准测试程序</p><ul><li>把应用程序中用得最多、最频繁的核心程序作为评价计算机性能的标准程序。</li></ul></li><li><p>系统监视</p></li></ul><h2 id="开发方法">开发方法</h2><h3 id="软件的生命周期">软件的生命周期</h3><ul><li>软件生命周期分为八个阶段：可行性研究与计划、需求分析、概要设计、详细设计、实现、集成测试、确认测试、使用和维护</li></ul><h3 id="软件开发方法">软件开发方法</h3><ul><li><p>结构化方法SP</p><ul><li><p>介绍</p><ul><li>结构化方法是一种传统的软件开发方法，它是由结构化分析、结构化设计和结构化程序设计三部分有机结合而成。</li><li>自顶向下、逐步求精、采用模块化技术和功能抽象将系统按功能分解为若干模块</li></ul></li><li><p>结构化分析</p><ul><li>着眼于数据流，自顶向下，逐层分解，建立系统的处理流程，以数据流图和数据字典为主要工具，建立系统的逻辑模型</li><li><ol><li>分析当前情况，制作反应当前物理模型的数据流图DFD(dataflow diagram)</li></ol></li><li>2.推到出等价的逻辑模型DFD</li><li><ol start="3"><li>设计新的逻辑系统、生成数据字典和基元描述</li></ol></li><li><ol start="4"><li>建立人机接口，提供可供选择的目标系统的物理DFD</li></ol></li><li><ol start="5"><li>建立各种方案的成本和风险等级，并据此分析</li></ol></li><li><ol start="6"><li>选择一种方案</li></ol></li><li><ol start="7"><li>建立完成的需求规约</li></ol></li></ul></li><li><p>结构化设计</p><ul><li><p>SD方法步骤</p><ul><li><ol><li>评审和细化数据流图</li></ol></li><li><ol start="2"><li>确定数据流图的类型</li></ol></li><li><ol start="3"><li>数据流图映射到软件模块结构，设计模块结构的上层</li></ol></li><li><ol start="4"><li>基于数据流图逐步分析高层模块，设计中下层模块</li></ol></li><li><ol start="5"><li>对模块结构进行优化，得到更合理的软件结构</li></ol></li></ul></li><li><p>SD方法设计原则</p><ul><li><ol><li>每个模块执行一个功能</li></ol></li><li><ol start="2"><li>模块使用过程语句或函数方式调用其他模块</li></ol></li><li><ol start="3"><li>模块间传送参数作为数据使用</li></ol></li><li>4.尽量减少模块间共用信息</li></ul></li></ul></li><li><p>缺点</p><ul><li><ol><li>开发周期长</li></ol></li><li><ol start="2"><li>早期结构化方法注重系统功能，对数据结构兼顾较少</li></ol></li><li><ol start="3"><li>结构化程度较低的系统，在开发初期难于锁定功能要求</li></ol></li></ul></li></ul></li><li><p>面向对象方法</p><ul><li><p>Coad/Yourdon方法（Object-Oriented Analysis and Disign）</p><ul><li><p>Coad/Yourdon的方法是建立在信息模型化、面向对象的程序设计和知识库系统基础之上的。</p></li><li><p>面向对象的分析(OOA)</p><ul><li>顶层架构图、用例和用例图、领域概念模型图构成</li><li>确定类与对象</li><li>标识结构</li><li>定义主题</li><li>定义属性</li><li>定义服务</li></ul></li><li><p>面向对象的设计(OOD)</p><ul><li>设计问题域（细化分析结果）</li><li>设计人机交互部分（设计用户界面）</li><li>设计任务管理部分（确定系统资源的分配）</li><li>设计数据管理部分（确定持久对象的存储）</li></ul></li></ul></li><li><p>Booch方法（Object Oriented Design）</p><ul><li>面向对象的设计中主要强调多次重复和开发者的创造性。方法本身是一组启发性的过程式建议</li><li>在一定抽象层次上表示类与对象</li><li>表示类与对象的语义</li><li>表示类与对象之间的关系(继承、实例化、使用等)</li><li>实现类与对象</li></ul></li><li><p>OMT方法-对象建模技术（Object Modeling Technique）</p><ul><li>4个活动：分析、系统设计、对象设计和实现</li></ul></li><li><p>OOSE-面向对象的软件工程（Object-Oriented Software Engineering）</p><ul><li><p>使用事例驱动的面向对象开发方法。OOSE方法采用5类模型来建立目标系统</p></li><li><ol><li>需求模型</li></ol><ul><li>领域对象模型和界面描述支持</li></ul></li><li><ol start="2"><li>分析模型</li></ol><ul><li>在需求模型基础上建立的，建立在系统生命期中可维护、有逻辑、健壮的结构</li></ul></li><li><ol start="3"><li>设计模型</li></ol><ul><li>精化分析模型并考虑当前的实现环境</li></ul></li><li><ol start="4"><li>实现模型</li></ol><ul><li>实现块的代码</li></ul></li><li><ol start="5"><li>测试模型</li></ol><ul><li>从底层的单元测试延申到高层的系统测试</li></ul></li></ul></li></ul></li><li><p>原型方法</p><ul><li>明确并完善需求、探索设计选择方案、发展为最终的产品</li></ul></li><li><p>逆向工程</p><ul><li><p>逆向工程：</p><ul><li><p>分析程序，力图在比源代码更高的抽象层次上建立程序的表示过程</p></li><li><p>实现级</p><ul><li>程序的抽象语法树、符号表等信息</li></ul></li><li><p>结构级</p><ul><li>程序间的关系，调用图、结构图、视图等</li></ul></li><li><p>功能级</p><ul><li>功能及程序段之间关系的信息</li></ul></li><li><p>领域级</p><ul><li>实体与应用领域概念之间关系</li></ul></li></ul></li><li><p>再工程</p><ul><li>修复和改造工程</li></ul></li><li><p>软件重构</p><ul><li>不改变软件的功能和外部可见性的情况下，改善软件的结构，提高软件的清晰性、可拓展性和可重用性</li></ul></li></ul></li></ul><h3 id="软件开发模型">软件开发模型</h3><ul><li><p>瀑布模型</p><ul><li><p>从一个特定阶段流向下一个阶段</p></li><li><p>适合于需求明确的项目</p></li><li><p>缺点：</p><ul><li><ol><li>上一个阶段的错误会流转到下一个阶段，放大错误</li></ol></li><li><ol start="2"><li>难以适应变化</li></ol></li><li><ol start="3"><li>结果需要等所有阶段完成后才知道</li></ol></li></ul></li></ul></li><li><p>演化模型</p><ul><li>演化模型可以看做若干个瀑布模型的迭代</li></ul></li><li><p>螺旋模型</p><ul><li><p>螺旋模型分为四个阶段：需求定义，风险分析，功能实现和评审</p></li><li><p>适合用于庞大而复杂、具有高风险的系统</p></li><li><p>缺点</p><ul><li><ol><li>需要具有想当丰富的风险评估经验和专业知识</li></ol></li><li><ol start="2"><li>过多的迭代次数会增加开发成本，延时交付时间</li></ol></li></ul></li></ul></li><li><p>增量模型</p><ul><li><p>适用</p><ul><li>在系统架构成熟，风险较低的适合，可以用增量的方式进行系统开发。</li></ul></li><li><p>介绍</p><ul><li>增量开发模型开发中，每一个版本都是一个完整的版本，版本的时间增量要均匀</li></ul></li></ul></li><li><p>原型法</p><ul><li><p>适用</p><ul><li>用户需求不明确或者技术架构中存在很多不可知因素的适合</li></ul></li><li><p>介绍</p><ul><li>每一个迭代都是一个完整的生命周期</li></ul></li></ul></li><li><p>构件组装模型</p><ul><li><p>适用</p></li><li><p>介绍</p><ul><li><p>构件的开发过程</p><ul><li>需求分析和定义</li><li>体系结构设计</li><li>构件库建立</li><li>应用软件构建</li><li>测试和发布</li></ul></li></ul></li><li><p>优点</p><ul><li>构件让系统的拓展变得更加容易；设计良好的构件容易被重用，降低软件开发成本</li></ul></li><li><p>缺点</p><ul><li>对构件的设计需要经验丰富的架构师；考虑软件重用时往往在其他方面做出让步，如性能。</li></ul></li></ul></li></ul><h3 id="统一过程UP">统一过程UP</h3><ul><li><p>UP二维模型</p><ul><li>4个阶段，初始、细化、构建、交付</li></ul></li><li><p>UP生命周期</p><ul><li>4个里程碑：目标里程碑、架构里程碑、能力里程碑、发布里程碑</li></ul></li><li><p>UP的 特点</p><ul><li><ol><li>UP时一个迭代的二维模型，在生命周期的每一个阶段都可以进行需求、设计等活动</li></ol></li><li><ol start="2"><li>可以采用演化模型或者增量模型</li></ol></li><li><ol start="3"><li>UP的迭代容易控制开发风险</li></ol></li><li><ol start="4"><li>虽然UP时一个迭代开发模型，但是本身不属于敏捷开发</li></ol></li><li><ol start="5"><li>在实践应用中可以根据具体问题对UP进行裁剪，从而适应各种软件规模和开发团队</li></ol></li><li>最核心：用例驱动，以架构为中心，迭代和增量</li></ul></li></ul><h3 id="敏捷开发">敏捷开发</h3><ul><li><p>极限编程</p><ul><li>价值观：沟通、简单、反馈、勇气</li></ul></li><li><p>水晶方法Crystal</p><ul><li>强调不同的项目，采用不同的策略</li></ul></li><li><p>Scrum并列争球</p><ul><li>迭代，30天一个迭代周期，按需求优先级实现</li><li>产品代办事项列表梳理，Sprint计划会议、每日scrum会议、Srpint评审会议、Sprint回顾会议</li></ul></li><li><p>功能驱动开发FDD</p><ul><li>将开发人员分类</li></ul></li></ul><h3 id="软件重用">软件重用</h3><ul><li><p>横向重用</p><ul><li><p>不同应用领域中的软件元素</p><ul><li>标准函数库</li></ul></li></ul></li><li><p>纵向重用</p><ul><li>共性应用领域间的软部分</li></ul></li></ul><h3 id="基于架构的软件设计ABSD">基于架构的软件设计ABSD</h3><ul><li><p>ABSD（Architecture-Based Software Design）方法</p><ul><li>强调由商业、质量和功能需求的组合驱动软件架构设计</li><li>ABSD自顶向下、递归细化的软件开发方法，以软件系统功能的分解为基础，通过选择架构风格实现质量和商业需求，并强调在架构设计过程中使用软件架构模板</li></ul></li><li><p>基于架构的软件开发模型</p><ul><li><p>架构需求</p><ul><li>明确用户对目标软件系统在功能、行为、性能、设计约束等方面的期望</li><li><ol><li>需求获取</li></ol></li><li><ol start="2"><li>标识构件活动，获得系统基本结构，分组，打包成构件</li></ol></li><li><ol start="3"><li>架构需求评审</li></ol></li></ul></li><li><p>架构设计</p><ul><li>迭代的过程，利用架构需求生成并调整架构策略</li><li><ol><li>提出架构模型</li></ol></li><li><ol start="2"><li>将已标识的构件映射到架构中</li></ol></li><li><ol start="3"><li>分析构件之间的相互作用</li></ol></li><li><ol start="4"><li>产生系统架构</li></ol></li><li><ol start="5"><li>设计评审</li></ol></li></ul></li><li><p>架构文档化</p><ul><li>架构规格说明书</li><li>测试架构需求的质量设计说明书</li></ul></li><li><p>架构复审</p><ul><li>评价架构是否能够满足需求、质量属性需求是否在架构中得以体现，层次是否清晰，构件划分是否合理等。（客户代表和领域专家）</li></ul></li><li><p>架构实现</p><ul><li>架构分析和设计</li><li>构件实现</li><li>构件组装</li><li>系统测试</li></ul></li><li><p>演化</p><ul><li>解决用户在系统开发过程中发生的需求变更问题</li><li><ol><li>架构演化计划</li></ol></li><li><ol start="2"><li>构件变动</li></ol></li><li><ol start="3"><li>更新构件的相互作用</li></ol></li><li><ol start="4"><li>构件的组装与测试和技术评审</li></ol></li></ul></li></ul></li></ul><h3 id="形式化方法">形式化方法</h3><ul><li>形式化方法式借助数据的方法来解决软件工程领域问题，主要包括建立精确的数学模型以及对模型的分析活动。</li><li><ol><li>基础概念</li></ol></li><li><ol start="2"><li>形式化方法与面向对象方的结合</li></ol></li><li><ol start="3"><li>工具开发</li></ol></li></ul><h2 id="系统规划">系统规划</h2><h3 id="项目的提出与选择">项目的提出与选择</h3><ul><li><p>项目的立项目标和动机</p><ul><li><ol><li>基础研究并获取技术</li></ol></li><li><ol start="2"><li>进行应用研发并获取产品</li></ol></li><li><ol start="3"><li>提供技术服务</li></ol></li><li><ol start="4"><li>信息技术产品的使用者</li></ol></li></ul></li><li><p>项目的选择和确定</p></li><li><p>项目的提出和选择结果</p></li></ul><h3 id="可行性研究和效益分析">可行性研究和效益分析</h3><ul><li><p>可行性研究内容</p><ul><li>经济可行性</li><li>技术可行性</li><li>法律可行性</li><li>执行可行性</li><li>方案选择</li></ul></li><li><p>成本效益分析</p></li><li><p>可行性分析报告</p></li></ul><h3 id="方案的制定和改进">方案的制定和改进</h3><h3 id="新旧继续的分析和比较">新旧继续的分析和比较</h3><ul><li><p>遗留系统的评价方法</p><ul><li>商业价值评价</li><li>外部环境评价</li><li>应用软件评价</li></ul></li><li><p>遗留系统的演化策略</p><ul><li><ol><li>淘汰策略 - 低水平低价值</li></ol></li><li><ol start="2"><li>继承策略 - 低水平高价值</li></ol></li><li><ol start="3"><li>改造策略 - 高水平高价值</li></ol></li><li><ol start="4"><li>集成策略 - 高水平低价值</li></ol></li></ul></li></ul><h2 id="系统分析与设计方法">系统分析与设计方法</h2><h3 id="定义问题与归结模型">定义问题与归结模型</h3><ul><li><p>问题分析</p><ul><li><p>目标是在开发之前对要解决的问题有一个更透彻的理解</p></li><li><p>在问题定义上达成共识</p><ul><li><ol><li>问题概述</li></ol></li><li><ol start="2"><li>问题影响</li></ol></li><li><ol start="3"><li>问题结果</li></ol></li><li><ol start="4"><li>问题优点</li></ol></li></ul></li><li><p>理解问题本质</p><ul><li>鱼骨图</li><li>帕累托图分析问题的本质</li></ul></li><li><p>确定项目干系人和用户</p></li><li><p>定义系统的边界</p><ul><li><p>系统的边界指解决方案系统和现实世界之间的边界</p></li><li><ol><li>上下文范围图</li></ol><ul><li>数据流图中的顶层图，反应领域信息模型，能够让读者宏观的了解系统</li></ul></li><li><ol start="2"><li>用例模型</li></ol></li></ul></li><li><p>确定系统实现的约束</p></li></ul></li><li><p>问题定义</p><ul><li><p>目标</p><ul><li>目标是构建系统的原因，他是最高层的用户需求，是业务上的需要</li></ul></li><li><p>功能需求</p><ul><li>指明系统必须要做的事情，只有这些行为的存在，才有系统的存在的价值</li></ul></li><li><p>非功能需求</p><ul><li>指观感需求、易用性需求、性能需求、可操作性需求、可维护性和可移植性需求、安全性需求、文化和正常需求、法律需求</li></ul></li></ul></li></ul><h3 id="需求分析与软件设计">需求分析与软件设计</h3><ul><li><p>需求分析的任务与过程</p><ul><li><p>问题识别</p><ul><li>发现需求、描述需求</li></ul></li><li><p>分析与综合</p><ul><li>对问题今昔分析，然后在此基础上整合出解决方案</li></ul></li><li><p>编制需求分析文档</p><ul><li>需求规格说明书：对已确定的需求进行稳定化描述</li></ul></li><li><p>需求分析评审</p><ul><li>对功能的正确性、完整性和清晰性，以及其他需求进行评价</li></ul></li></ul></li><li><p>需求获取方法</p><ul><li>用户访谈</li><li>用户调查</li><li>现场观摩</li><li>阅读历史文档</li><li>联合讨论会</li></ul></li><li><p>需求定义</p><ul><li><p>严格定义方法</p></li><li><p>原型方法</p><ul><li>先实现一个满足用户基本需求的原型，再由用户在开发过程中提出更好的需求，根据用户要求不断对系统进行改进。这里面有迭代的思想</li></ul></li><li><p>编写软件需求说明书SRS</p></li></ul></li><li><p>如何进行系统设计</p><ul><li>组件的独立性：例外的识别和处理；防错和容错</li></ul></li><li><p>软件设计的任务与活动</p><ul><li>概要设计、详细设计</li></ul></li></ul><h3 id="常用的分析方法">常用的分析方法</h3><ul><li><p>面向数据流 - 结构化分析与设计</p><ul><li><p>一种面向数据流的需求分析和设计方法，适用于分析和设计大型数据处理系统，是一种简单的方法</p></li><li><p>结构化分析</p><ul><li>基本思想是自顶向下逐层分解</li></ul></li><li><p>结构化设计</p><ul><li>架构设计</li><li>接口设计</li><li>数据设计</li><li>过程设计</li></ul></li><li><p>模块设计</p><ul><li>模块独立化原则</li><li>信息隐藏原则</li></ul></li></ul></li><li><p>面向对象 - 面向对象的分析与设计</p><ul><li><p>面向对象的基本概念</p><ul><li><p>对象和类</p><ul><li>实体类：映射需求中的每个实体</li><li>边界类：用于封装用例内、外的信息或数据流</li><li>控制类：用于控制用例工作的类</li></ul></li><li><p>继承和范化</p></li><li><p>多态</p></li><li><p>模板类</p><ul><li>类属类，用来实现参数多态机制</li></ul></li><li><p>消息和消息通信</p><ul><li>消息：向对象发出的服务请求</li></ul></li></ul></li><li><p>面向对象分析</p><ul><li><p>介绍</p><ul><li>面向对象分析的目标是开发一系列模型，这些模型描述计算机软件，当它工作时以满足一组客户定义的需求</li></ul></li><li><p>OOA/OOD方法</p></li><li><p>Booch方法</p></li><li><p>OMT方法</p></li><li><p>OOSE方法</p></li></ul></li><li><p>统一建模语言UML</p><ul><li><p>用例图</p><ul><li>从用户角度描述了系统的功能，并指出各个功能的执行者</li></ul></li><li><p>类图</p><ul><li>用例图抽象成类，描述类的内部结构和类与类之间的关系</li><li>泛化：继承关系</li><li>实现：类与接口</li><li>关联：拥有关系</li><li>聚合：整体与部分，部分离开整体而单独存在</li><li>组合：整体与部分，部分不能离开整体</li><li>依赖</li></ul></li><li><p>对象图</p><ul><li>各个对象在交互过程中某一时刻的状态</li></ul></li><li><p>序列图</p><ul><li>交互图的一种，对象之间消息发送的先后顺序</li></ul></li><li><p>协作图</p><ul><li>交互图的一种，收发消息的对象的组织关系</li></ul></li><li><p>状态图</p><ul><li>一种由状态、变迁、事件和活动组成的状态机</li></ul></li><li><p>活动图</p><ul><li>状态图的一种特殊情况</li></ul></li><li><p>构件图</p><ul><li>系统中构件与构件之间，类或接口与构件之间的关系图</li></ul></li><li><p>部署图</p><ul><li>物理设备以及之间的连接关系</li></ul></li></ul></li></ul></li><li><p>面向数据结构 - jackson方法</p></li><li><p>结构化数据系统开发 - DSSD方法</p></li></ul><h3 id="用户界面设计">用户界面设计</h3><ul><li>用户界面设计原则</li><li>用户界面设计过程</li></ul><h3 id="工作流设计">工作流设计</h3><ul><li><p>工作流设计概念</p><ul><li>工作流是一类能够完全或者部分自动执行的过程，根据一系列过程规则、文档、信息或任务在不同的执行者之间传递、执行</li></ul></li><li><p>工作流管理系统 WFMC</p><ul><li>在工作流形式化表示的驱动下，通过软件的执行而完成工作流定义、管理及执行的系统，其主要目标是对业务过程中各活动发生的先后次序及与活动相关的相应人力或信息资源的调用进行管理，而实现业务过程的自动化</li></ul></li></ul><h3 id="简单分布式计算机应用系统设计">简单分布式计算机应用系统设计</h3><h3 id="系统运行环境的集成与设计">系统运行环境的集成与设计</h3><ul><li><p>集中式系统</p><ul><li>所有的操作都集中于一台主机中，而操作员必须在主机的附近操作，结果也在附近给出</li></ul></li><li><p>分布式系统</p></li><li><p>C/S结构</p></li><li><p>多层结构</p></li></ul><h3 id="系统过渡计划">系统过渡计划</h3><ul><li>直接过渡</li><li>并行过渡</li><li>阶段过渡</li></ul><h2 id="软件架构设计">软件架构设计</h2><h3 id="软件架构概述">软件架构概述</h3><ul><li><p>软件架构的定义</p><ul><li>软件架构是指一个系统的基础组织，它具体体现在：系统的构件，构件之间、构件与环境之间的关系，以及指导其设计和演化的原则</li></ul></li><li><p>软件架构的重要性</p><ul><li><ol><li>项目关系人之间的交流平台</li></ol></li><li><ol start="2"><li>早期设计决策</li></ol></li><li><ol start="3"><li>在较高层面实现软件复用</li></ol></li><li><ol start="4"><li>架构对开发的指导与规范意义</li></ol></li></ul></li><li><p>架构的模型</p><ul><li><p>结构模型</p><ul><li>这种方法以架构的构件、连接件和其他概念来刻画结构，并力图通过结构来反映系统的重要语义内容，包括系统的配置、约束、隐含的假设条件、风格、性质</li></ul></li><li><p>框架模型</p><ul><li>框架模型与结构模型类似，但它不太侧重描述结构的细节而更侧重于整体的结构</li></ul></li><li><p>动态模型</p><ul><li>动态模型是对结构或框架模型的补充，研究系统”大颗粒“的行为性质</li></ul></li><li><p>过程模型</p><ul><li>过程模型研究构造系统的步骤和过程</li></ul></li><li><p>功能模型</p><ul><li>功能模型：架构由一组功能构件按层次组成，且下层向上层提供服务</li></ul></li><li><p>4+1视图模型</p><ul><li><p>场景视图</p><ul><li>从用户角度、识别业务需求，描述业务场景，是架构设计的起点和终点</li></ul></li><li><p>逻辑视图</p><ul><li>从对象角度，构建对象模型，用以确立逻辑分层、模块划分、模块功能、模块间依赖关系等</li></ul></li><li><p>开发/实现视图</p><ul><li>从开发角度，描述软件在开发环境下的静态组织(程序包、应用的统一框架，引用的类库、SDK和中间件等)，并规范和约束开发环境的结构</li></ul></li><li><p>过程/进程视图</p><ul><li>从进程角度，描述系统的并发和同步设计。旨在解决进程、线程、并发、同步、通信等方面的问题</li></ul></li><li><p>物理视图</p><ul><li>从部署的角度，描述软硬件的映射关系，以及系统在分布/部署上的设计</li></ul></li></ul></li></ul></li></ul><h3 id="架构需求与软件质量属性">架构需求与软件质量属性</h3><ul><li><p>软件质量属性</p></li><li><p>6个质量属性及实现</p><ul><li><p>可用性</p><ul><li>错误检测：命令/响应；心跳；异常</li><li>错误恢复：表决；主动冗余</li><li>错误预防：从服务中删除；事务；进程监视</li></ul></li><li><p>可修改性</p><ul><li>局部化修改</li><li>防止连锁反应；信息隐藏、限制通信路径；仲裁者使用</li></ul></li><li><p>性能</p><ul><li>资源需求：控制资源使用</li><li>资源管理：引入并发，增加可用资源</li><li>资源仲裁：固定优先级资源调度、动态优化级调度</li></ul></li><li><p>安全性</p><ul><li>抵抗攻击：对用户身份验证、对用户进行授权、维护数据的机密性、维护完整性。</li><li>检测攻击</li><li>从攻击中恢复</li></ul></li><li><p>可测试性</p></li><li><p>易用性</p></li></ul></li></ul><h3 id="软件架构风格">软件架构风格</h3><ul><li><p>软件架构风格分类</p></li><li><p>数据流风格</p><ul><li><p>批处理风格</p><ul><li>批处理风格，每一步都是独立的，且每一步都是顺序执行的。例如BAT程序</li></ul></li><li><p>管道-过滤器风格</p><ul><li>UNIX Sheel程序</li></ul></li></ul></li><li><p>调用返回风格</p><ul><li>主程序-子程序</li><li>面向对象风格</li><li>层次结构风格</li></ul></li><li><p>独立构件风格</p><ul><li><p>进程通信</p><ul><li>构件是独立的，连接件传递消息</li></ul></li><li><p>事件驱动</p><ul><li>构件不直接调用一个过程，而是触发或者广播一个或多个事件驱动</li></ul></li></ul></li><li><p>虚拟机风格</p><ul><li><p>解释器</p><ul><li>通常包括解析工作的解析引擎，一个包含被解析的代码存储区，一个记录解析引擎当前工作状态和数据结构，以及记录源代码被解析执行的进度的数据结构</li></ul></li><li><p>基于规则</p></li></ul></li><li><p>仓库风格</p><ul><li><p>数据库系统</p><ul><li><ol><li>重要数据共享，保存当前系统的数据状态</li></ol></li><li><ol start="2"><li>多个独立处理元素，处理元素对数据进行操作</li></ol></li></ul></li><li><p>超文本系统</p></li><li><p>黑板风格</p><ul><li>主要应用与信号处理领域或者松耦合代理数据共享存取</li></ul></li></ul></li></ul><h3 id="层次系统架构风格">层次系统架构风格</h3><ul><li><p>二层及三层C/S架构风格</p></li><li><p>B/S架构风格</p></li><li><p>MVC架构风格</p><ul><li><p>Model</p><ul><li>应用状态和业务功能的封装，可以裂解为同时包含数据和行为的领域模型</li></ul></li><li><p>View</p><ul><li>实现可视化界面的呈现，并捕捉最终用户的交互逻辑</li></ul></li><li><p>Controller</p><ul><li>完成响应的UI逻辑，设计业务功能的调用，调用对应的Model</li></ul></li></ul></li></ul><h3 id="面向服务的架构">面向服务的架构</h3><ul><li><p>SOA(Service Oriented Architecture)概述</p><ul><li><p>所有的功能都定义成了独立的服务。所有的服务通过服务总线或者流程管理器来连接。SOA是一种架构设计模式</p></li><li><p>设计原则</p><ul><li><ol><li>明确定义的接口</li></ol></li><li><ol start="2"><li>模块化</li></ol></li><li>3… 粗粒度</li><li><ol start="4"><li>松耦合</li></ol></li><li><ol start="5"><li>互操作性，兼容和策略声明</li></ol></li></ul></li></ul></li><li><p>SOA关键技术</p><ul><li><p>UDDI</p><ul><li><p>UDDI(Universal Description and Integration)统一描述、发现和集成。</p><ul><li>注册和查找服务</li></ul></li></ul></li><li><p>WSDL</p><ul><li><p>Web服务描述语言</p><ul><li>WSDL是一个XML文档，用于说明一组SOAP消息以及如何交换这些消息</li></ul></li></ul></li><li><p>SOAP</p><ul><li><p>简单对象访问协议(http+xml)</p><ul><li>SOAP是Web service的通信协议，用于在网络应用程序之间进行结构化数据交换</li></ul></li></ul></li><li><p>REST</p><ul><li>http+json：表示状态转移；是一种用http和xml进行基于web通信的技术，降低开发的复杂性、提供可伸缩性。</li></ul></li></ul></li><li><p>SOA的实现方法</p><ul><li>Web Service</li><li>企业服务总线ESB</li><li>服务注册表</li></ul></li><li><p>微服务</p><ul><li>微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分成一组小的服务，每个服务运行独立的自己的进程中，服务之间互相协调、互相配合，为用户提供最终价值</li></ul></li></ul><h3 id="架构设计">架构设计</h3><h3 id="软件架构文档化">软件架构文档化</h3><ul><li>记录软件架构的活动，架构编档的过程</li></ul><h3 id="软件架构评估">软件架构评估</h3><ul><li><p>简介</p><ul><li>对架构分析、评估的技术，对架构策略的选取和决策</li></ul></li><li><p>架构评估的方法</p><ul><li>基于调查列表</li><li>基于场景的方式</li><li>基于度量的方式</li></ul></li><li><p>架构的权衡分析法ATAM</p><ul><li><p>3个概念</p><ul><li><ol><li>软件质量属性</li></ol><ul><li>性能</li><li>可靠性</li><li>可用性</li><li>安全性</li><li>可修改性</li></ul></li><li><ol start="2"><li>敏感点和权衡点</li></ol></li><li><ol start="3"><li>风险承担者</li></ol></li></ul></li><li><p>步骤</p><ul><li><ol><li>描述ATAM方法</li></ol></li><li><ol start="2"><li>描述商业动机</li></ol></li><li><ol start="3"><li>描述架构体系结构</li></ol></li><li><ol start="4"><li>确定架构体系结构方法</li></ol></li><li><ol start="5"><li>生成质量属性效用树</li></ol></li><li><ol start="6"><li>分析架构方法</li></ol><ul><li>确定架构上的有风险决策，无风险决策、敏感点和权衡点</li></ul></li><li><ol start="7"><li>集体讨论，确定场景优先级</li></ol></li><li><ol start="8"><li>分析架构方法，重复6</li></ol></li><li><ol start="9"><li>结果描述</li></ol></li></ul></li></ul></li><li><p>成本效益分析法</p></li></ul><h3 id="构件及复用">构件及复用</h3><ul><li><p>商用构件标准化规范</p><ul><li>三大主流中间件技术平台</li><li>CORBA</li><li>J2EE</li><li>DNA</li></ul></li><li><p>应用系统簇与构件系统</p></li><li><p>基于复用开发的组织结构</p></li></ul><h3 id="产品线及系统演化">产品线及系统演化</h3><ul><li><p>复用与产品线</p></li><li><p>基础产品线的架构</p></li><li><p>产品线的开发模型</p></li><li><p>特定领域的软件架构DSSA</p><ul><li><p>领域分析</p><ul><li>获得领域模型</li></ul></li><li><p>领域设计</p><ul><li>获得DSSA</li></ul></li><li><p>领域实现</p><ul><li>依据领域模型和DSSA开发于组织可复用信息</li></ul></li></ul></li><li><p>软件及系统的演化</p><ul><li><ol><li>需求变动归类</li></ol></li><li>2.制定架构演化计划</li><li><ol start="3"><li>修改、增加或删除构件</li></ol></li><li><ol start="4"><li>更新构件的相互作用</li></ol></li><li><ol start="5"><li>构件组装与测试</li></ol></li><li><ol start="6"><li>技术评审</li></ol></li><li><ol start="7"><li>产生演化后的架构</li></ol></li></ul></li></ul><h3 id="软件架构视图">软件架构视图</h3><ul><li>软件视图的分类</li><li>模块视图类型</li><li>C&amp;S视图及其风格</li><li>分配视图类及其风格</li><li>各视图类型间的映射关系</li></ul><h2 id="设计模式23种">设计模式23种</h2><h3 id="创建型">创建型</h3><ul><li><p>工厂方法 Factroy</p><ul><li>动态生产对象</li></ul></li><li><p>抽象工厂 Abstract Factory</p><ul><li>生产成系列对象</li></ul></li><li><p>构建器/生成器 Builder</p><ul><li>复杂对象构造</li></ul></li><li><p>原型模式 Prototype</p><ul><li>克隆对象</li></ul></li><li><p>单例模式 Singleton</p><ul><li>单实例</li></ul></li></ul><h3 id="结构型">结构型</h3><ul><li><p>适配器 Adapter</p><ul><li>转换接口</li></ul></li><li><p>桥接模式 Bridge</p><ul><li>将抽象部分和它的实现部分分离</li></ul></li><li><p>组合模式 Composite</p><ul><li>表示“整体-部分”的层次结构</li></ul></li><li><p>装饰器 Decorator</p><ul><li>动态附加职责</li></ul></li><li><p>外观模式 Facade</p><ul><li>对外统一接口</li></ul></li><li><p>享元模式 Flyweight</p><ul><li>提供大量细粒度对象共享的方式</li></ul></li><li><p>代理模式 Proxy</p><ul><li>快捷方式</li></ul></li></ul><h3 id="行为型">行为型</h3><ul><li><p>责任链 Chain of Responsibility</p><ul><li>传递职责</li></ul></li><li><p>命令模式 Command</p><ul><li>请求封装成对象，日志记录</li></ul></li><li><p>解释器 Interpreter</p><ul><li>虚拟机机制，根据文法表示来解释语言中句子</li></ul></li><li><p>迭代器 Iterator</p><ul><li>顺序访问一个聚合对象中的各个元素</li></ul></li><li><p>中介者 Mediator</p><ul><li>用一个中介对象来封装一系列的对象交互</li></ul></li><li><p>备忘录Memento</p><ul><li>在不破坏封装性的前提下，捕获一个对象的内部状态，游戏存档</li></ul></li><li><p>观察者 Observer</p><ul><li>当一个对象的状态发生改变，所有依赖它的对象都得到通知并自动更新</li></ul></li><li><p>状态模式 State</p><ul><li>允许一个对象在其内部状态改变时改变它的行为</li></ul></li><li><p>策略模式 Strategy</p><ul><li>多方案切换</li></ul></li><li><p>模板方法 Template</p><ul><li>子类不改变算法结构，即可重新定义</li></ul></li><li><p>访问者 Visitor</p><ul><li>数据与操作分离，使得在不改变个元素的类的前提下定义作用于这些元素的新操作</li></ul></li></ul><h2 id="测试评审方法">测试评审方法</h2><h3 id="完全评审">完全评审</h3><ul><li>对整个项目中的所有测试用例进行评审</li></ul><h3 id="有选择性的评审">有选择性的评审</h3><ul><li>只对部分测试用例进行评审</li></ul><h3 id="指标评审法">指标评审法</h3><ul><li>测试用例的评审覆盖率达到多少</li></ul><h2 id="嵌入式系统设计">嵌入式系统设计</h2><h2 id="开发管理">开发管理</h2><h3 id="项目管理">项目管理</h3><ul><li>概念阶段</li><li>开发阶段</li><li>实施阶段</li><li>结束阶段</li></ul><h3 id="范围管理">范围管理</h3><ul><li><p>创建工作分解结构(WBS)</p><ul><li>管理层</li><li>技术层</li></ul></li></ul><h3 id="成本管理">成本管理</h3><ul><li><p>成本估算</p><ul><li>自顶向下的估算法</li><li>自底向上的估算法</li><li>差别估算法</li></ul></li><li><p>成本预算</p></li><li><p>净值分析</p></li></ul><h3 id="时间管理">时间管理</h3><ul><li><p>活动排序</p></li><li><p>活动历时估算</p><ul><li>软件项目的工作量</li><li>德尔菲法</li><li>类比估算法</li><li>功能点估算法</li></ul></li><li><p>关键路径法</p></li><li><p>计划评审技术</p></li><li><p>甘特图和时间网络图</p></li><li><p>进度控制</p></li></ul><h3 id="配置管理">配置管理</h3><h3 id="质量管理">质量管理</h3><h3 id="风险管理">风险管理</h3><h3 id="软件运行与评价">软件运行与评价</h3><h3 id="软件过程改进">软件过程改进</h3><ul><li><p>CMM-软件过程能力成熟模型</p><ul><li><p>初始级</p><ul><li>软件工程管理制度缺乏，过程缺乏定义、混论无序</li></ul></li><li><p>可重复级</p><ul><li>基于类似的项目经验，建立了基本的项目管理制度，采取了一定的资源控制手段</li></ul></li><li><p>已定义级</p><ul><li>软件过程文档化、标准化、可按照需求改进开发过程，采用评审方法保证软件质量</li></ul></li><li><p>已管理级</p><ul><li>所有过程建立相应的度量方式和明确的度量指标，度量式详尽且可用于理解和控制软件过程的</li></ul></li><li><p>优化级</p><ul><li>可根据执行过程的反馈来改善下一步的执行过程，优化执行步骤，指令和效率稳步提升和改进</li></ul></li></ul></li><li><p>CMMI-能力成熟模型集成</p></li></ul><h2 id="信息系统的基础知识">信息系统的基础知识</h2><h2 id="基于中间件的开发">基于中间件的开发</h2><h3 id="中间件是基础软件的一大类，属于可复用软件的范畴。操作系统-网络-数据-中间件-应用程序">中间件是基础软件的一大类，属于可复用软件的范畴。操作系统/网络/数据 -&gt; 中间件 -&gt; 应用程序</h3><h3 id="RPC-远程调用过程">RPC-远程调用过程</h3><ul><li>使应用程序中的过程，调用远程应用程序的过程，就像本地调用一样</li></ul><h3 id="MOM-面向消息的中间件">MOM-面向消息的中间件</h3><ul><li>使分布式应用程序可以通过发送和接收消息来进行通信和交换数据</li></ul><h3 id="ORB-对象请求代理">ORB-对象请求代理</h3><ul><li>使应用程序的对象能够在异类网络之间分布和共享</li></ul><h2 id="安全性和保密性设计">安全性和保密性设计</h2><h3 id="信息系统安全体系">信息系统安全体系</h3><ul><li><p>安全系统架构</p><ul><li><p>安全服务</p><ul><li>认证</li><li>访问控制</li><li>数据机密性</li><li>数据完整性</li><li>不可否认服务</li></ul></li><li><p>特定的安全机制</p><ul><li>机密机制</li><li>数字签名</li><li>访问控制机制</li><li>数据完整性</li><li>认证交换机制</li><li>流量填充机制</li><li>路由控制机制</li><li>公证机制</li></ul></li><li><p>普遍性的安全机制</p><ul><li>可信功能度</li><li>安全标记</li><li>事件检测</li><li>安全审计跟踪</li><li>安全恢复</li></ul></li></ul></li><li><p>安全保护等级</p><ul><li>用户自主保护级</li><li>系统审计保护级</li><li>安全标记保护级</li><li>结构化保护级</li><li>访问验证保护级</li></ul></li><li><p>信息安全保障系统</p><ul><li>MIS+S系统</li><li>S-MIS系统</li><li>S2-MIS系统</li></ul></li><li><p>可信计算机系统</p><ul><li><p>D类</p><ul><li>最小保护</li></ul></li><li><p>C类</p><ul><li>自主保护，自主访问控制和审计跟踪</li></ul></li><li><p>B类</p><ul><li>强制安全保护</li></ul></li><li><p>A类</p><ul><li>验证设计</li></ul></li></ul></li></ul><h3 id="数据安全与保密">数据安全与保密</h3><ul><li><p>加密体制</p><ul><li><p>对称加密</p><ul><li>FEAL、IDEA、DES</li></ul></li><li><p>非对称加密</p><ul><li>RSA</li></ul></li></ul></li><li><p>PKI与数字签名</p></li><li><p>数字信封</p></li><li><p>PGP</p></li><li><p>数字水印</p></li></ul><h3 id="计算机网络安全">计算机网络安全</h3><ul><li><p>网络安全设计</p><ul><li>木桶原则</li><li>整体性安全</li><li>安全性评价与平衡原则</li><li>标准化与一致性原则</li><li>技术与管理相结合原则</li><li>筹划规划</li><li>等级性原则</li><li>动态发展原则</li><li>易操作性原则</li></ul></li><li><p>单点登录技术</p></li><li><p>无线设备安全性</p></li><li><p>防火墙</p><ul><li>网络级防火墙</li><li>应用级防火墙</li></ul></li><li><p>入侵检测</p></li><li><p>虚拟专用网(VPN)</p><ul><li>安全隧道技术</li><li>加解密技术</li><li>密钥管理技术</li><li>身份认证技术</li><li>访问控制技术</li></ul></li></ul><h3 id="电子商务安全">电子商务安全</h3><ul><li>SSL-传输层安全协议</li><li>SET-安全电子交易协议</li></ul><h3 id="安全管理">安全管理</h3><ul><li><p>安全策略</p></li><li><p>安全体系</p><ul><li>病毒与木马扫描</li><li>安全扫描</li><li>日志审计系统</li><li>安全审计</li><li>个人信息控制</li><li>安全管理制度</li></ul></li></ul><h3 id="计算机操作安全">计算机操作安全</h3><h3 id="系统备份与恢复">系统备份与恢复</h3><ul><li><p>业务持续规划</p><ul><li>灾难恢复规划</li><li>业务恢复规划</li><li>危机管理规划</li></ul></li></ul><h2 id="系统可靠性分析与设计">系统可靠性分析与设计</h2><h3 id="可靠性定义">可靠性定义</h3><ul><li>系统在规定的时间及规定的环境条件下，完成规定功能的能力，也就是系统无故障运行的概率</li></ul><h3 id="可靠性指标">可靠性指标</h3><ul><li>平均无故障时间(MTTF)</li><li>平均故障修复时间(MTTR)</li><li>平均故障间隔时间(MTBF)</li><li>系统可用性</li></ul><h3 id="可靠性计算">可靠性计算</h3><ul><li><p>串联系统</p><ul><li>R1xR2XR3</li></ul></li><li><p>并联系统</p><ul><li>1-(1-R1)(1-R2)</li></ul></li></ul><h3 id="可靠性设计">可靠性设计</h3><ul><li><p>冗余设计</p><ul><li><p>结构冗余</p><ul><li><p>静态冗余</p><ul><li>表决和比较来屏蔽系统中出现的错误</li></ul></li><li><p>动态冗余</p><ul><li>多模块待机储备，检查到工作模块出问题，就备用模块来顶替</li></ul></li><li><p>混合冗余</p></li></ul></li><li><p>信息冗余</p><ul><li>除正常功能所需信息外，添加一些信息保证信息完整性</li></ul></li><li><p>时间冗余</p><ul><li>重复执行指令或程序</li></ul></li></ul></li><li><p>软件容错</p><ul><li><p>恢复块方法</p><ul><li>一种动态的故障屏蔽技术，采用后向恢复策略</li></ul></li><li><p>N版本程序设计</p><ul><li>一种静态的故障屏蔽技术，采用向前恢复测率（表决）</li></ul></li><li><p>防卫式程序设计</p><ul><li>程序中包含错误检查代码和错误恢复代码</li></ul></li></ul></li><li><p>集群技术</p><ul><li>两台以上的节点机(服务器)构成的一种松散耦合的计算节点集合</li></ul></li></ul><h2 id="软件知识产权与法律法规">软件知识产权与法律法规</h2><h3 id="著作权法">著作权法</h3><h3 id="计算机软件保护条例">计算机软件保护条例</h3><h3 id="招投标法">招投标法</h3><h3 id="专利权">专利权</h3><h3 id="不正当竞争">不正当竞争</h3><h3 id="商标法">商标法</h3><h2 id="标准化知识">标准化知识</h2><h3 id="国际标准IEC、ISO">国际标准IEC、ISO</h3><h3 id="国家标准GB">国家标准GB</h3><h3 id="行业标准（NY农业，JC建材）">行业标准（NY农业，JC建材）</h3><h3 id="地方标准">地方标准</h3><h3 id="企业标准-Q">企业标准 Q</h3><h2 id="应用数学">应用数学</h2><h3 id="图论">图论</h3><ul><li><p>最小生成树</p><ul><li>普利姆算法</li><li>克鲁斯卡尔算法</li></ul></li><li><p>最短路径</p></li><li><p>关键路径</p></li></ul><h3 id="运筹学">运筹学</h3><ul><li>线性规划</li><li>对策论(竞赛论/博弈论)</li><li>决策论</li></ul><h2 id="虚拟化、云计算、物联网">虚拟化、云计算、物联网</h2>]]></content>
      
      
      <categories>
          
          <category> 架构师 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构师 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/posts/4b0178e0.html"/>
      <url>/posts/4b0178e0.html</url>
      
        <content type="html"><![CDATA[<h1>数据结构与算法</h1><h2 id="1-线性存储与非线性存储">1 线性存储与非线性存储</h2><h3 id="1-1-线性结构">1.1 线性结构</h3><ol><li><strong>线性结构</strong>：特点数据元素直接存在一对一的线性关系</li><li>线性结构有两种不同的存储结构，顺序存储（数组）和链式存储结构（链表）。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的。</li><li>链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存方的数据元素以及相邻元素的地址信息。</li><li>线性结构常见的有：数组，队列，链表和栈。</li></ol><h3 id="1-2-非线性结构">1.2 非线性结构</h3><p>非线性结构：二维数组，多维数组，广义表，树结构，图结构。</p><h2 id="2-数组">2 数组</h2><h3 id="2-1-稀疏数组">2.1 稀疏数组</h3><p>当一个数组中大部分元素为0的时候，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><p>稀疏数组处理的方式：</p><ol><li>记录数组一共有<strong>几行几列，有多少个不同</strong>的值。</li><li>把具有不同的元素的行列及值记录在一个小规模数组中，从而缩小程序的规模。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 稀疏数组 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建一个原始的二维数组</span></span><br><span class="line"><span class="comment">//0 ：表示没有棋子，1表示黑子，2表示白字</span></span><br><span class="line"><span class="type">int</span> chessArr1[][] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">chessArr1[<span class="number">1</span>][<span class="number">2</span>] =<span class="number">1</span>;</span><br><span class="line">chessArr1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//输出原始数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;原始的二维为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> [] row : chessArr1) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> data: row) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d   &quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将二维数组转稀疏数组</span></span><br><span class="line"><span class="comment">// 1先遍历二维数组得到0数据的个数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span> ; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span> ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">sum ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建对应的稀疏数组</span></span><br><span class="line"><span class="type">int</span> sparseArr[][] = <span class="keyword">new</span> <span class="title class_">int</span> [sum +<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//给稀疏数组赋值</span></span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">sparseArr[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历二维数组，将非0的值存放到sparseArr中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(chessArr1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">count ++;</span><br><span class="line">sparseArr[count][<span class="number">0</span>] = i; </span><br><span class="line">sparseArr[count][<span class="number">1</span>] = j;</span><br><span class="line">sparseArr[count][<span class="number">2</span>] = chessArr1[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出稀疏数组的形式</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;得到的稀疏数组&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sparseArr.length ; i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d\t%d\t%d\t\n&quot;</span>,sparseArr[i][<span class="number">0</span>],sparseArr[i][<span class="number">1</span>],sparseArr[i][<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将稀疏数组回复为原来的数组</span></span><br><span class="line"><span class="comment">//第一步，先读取稀疏数组的第一行，根据第一行的数据创建原始的二维数组</span></span><br><span class="line"><span class="type">int</span> chessArr2[][] = <span class="keyword">new</span> <span class="title class_">int</span> [sparseArr[<span class="number">0</span>][<span class="number">0</span>]][sparseArr[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"><span class="comment">//第二部，在稀疏数组后的几行的数据从第二行开始，并赋值给原始的二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">1</span>; i &lt; sparseArr.length; i++) &#123;</span><br><span class="line"> chessArr2[sparseArr[i][<span class="number">0</span>]][sparseArr[i][<span class="number">1</span>]] = sparseArr[i][<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出恢复后的二维数组</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;恢复后的二维数组&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> [] row : chessArr2) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> data: row) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;%d   &quot;</span>,data);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-队列">3 队列</h2><h3 id="3-1-队列">3.1 队列</h3><ol><li><p>队列是一有序列表，可以使用数组或者是链表来实现.</p></li><li><p>遵循先入先从的原则。</p><p>==一般我们采用rear 指针和front指针进行操作。==</p></li></ol><h3 id="3-2队列的模拟">3.2队列的模拟</h3><p>队列是有序列表，使用数组结构来存储队列的数据。</p><p>队列的入队一般使用addQueue,addQueue的处理需要两个步骤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayQueueDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建一个对象</span></span><br><span class="line">ArrayQueue  aq=<span class="keyword">new</span> <span class="title class_">ArrayQueue</span>(<span class="number">3</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;<span class="comment">//用于接收用户数据</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//输出一个菜单</span></span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;s(show):显示队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;e(exit):退出队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;g(get):从队列取出数据&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;h(head):查看队列头的数据&quot;</span>);</span><br><span class="line">key = sc.next().charAt(<span class="number">0</span>);<span class="comment">//接去第一个字符</span></span><br><span class="line"><span class="keyword">switch</span>(key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:  <span class="comment">//展示队列数据</span></span><br><span class="line">aq.showQueue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>: <span class="comment">//向队列添加数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">aq.addQueue(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>: <span class="comment">//获得队列的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> aq.getQueue();</span><br><span class="line">System.out.printf(<span class="string">&quot;取出的数据实%d\n&quot;</span>,res);</span><br><span class="line">aq.getQueue();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>: <span class="comment">//查看队列头的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> aq.headQueue();</span><br><span class="line">System.out.printf(<span class="string">&quot;取出的数据实%d\n&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>: <span class="comment">//代表要退出</span></span><br><span class="line">sc.close();</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;程序退出&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用数组模拟队列，编写一个ArrayQueue类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayQueue</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxSize;<span class="comment">//设置数组的最大容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> front;<span class="comment">//队列头</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> rear;<span class="comment">//队列尾部</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> [] arr;<span class="comment">//该数据用于存放数据，模拟队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建队列的构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayQueue</span><span class="params">(<span class="type">int</span> arrMaxSize)</span> &#123;</span><br><span class="line">maxSize = arrMaxSize;</span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span> [maxSize];</span><br><span class="line">front  = -<span class="number">1</span>;  <span class="comment">//指向队列头部，指向队列头的前一个位置</span></span><br><span class="line">rear = -<span class="number">1</span>; <span class="comment">//指向队列尾部，队列尾部包含对象最后一个数据，通俗的讲就是队列最后一个位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否满</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNull</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rear == front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据是否添加到队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addQueue</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">//判读队列是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列满，不能加入数据&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">rear ++ ; <span class="comment">//让rear 后移动</span></span><br><span class="line">arr[rear] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判读队列的数据，出队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判读队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isNull()) &#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列为空，不能获取数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">front ++;</span><br><span class="line"><span class="keyword">return</span> arr[front];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列所有数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//将数组数据遍历</span></span><br><span class="line"><span class="keyword">if</span>(isNull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列为空，没有数据&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++ ) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示队列的头数据，注意不是取出数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">headQueue</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span>(isNull()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;队列空，没有数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[front + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处存在一个问题，就是我们只能使用一次，无法对队列进行多次使用。</p><p>将这个数组使用算法改变成为一个环形队列 方式，采用取模的方式。</p><h3 id="3-3-判断队列为空队列为满">3.3 判断队列为空队列为满</h3><p>==front == rear 代表队列为空。==</p><p>当指针rear 小于队列的最大下标maxSize - 1,则将数据存入rear锁指向的数组元素中，否则无法存入数据</p><p>==rear == maxSize -1 代表队列已满==</p><h3 id="3-4-使用数组模拟环形队列">3.4 使用数组模拟环形队列</h3><p>思路：</p><ol><li><p>front 变量的含义做一个调整：front就指向队列的第一个元素，也就是说arr[front]就是队列的第一个元素。</p><p>front的初始值为0；</p></li><li><p>rear变量的含义做一个调整：rear指向队列的最后一个元素的后一个位置，因为希望空出一个空间作为约定。rear 的初始值为0；</p></li><li><p>当队列满时，条件是<code>(rear + 1)%maxSize == front</code> 此时满。</p></li><li><p>当队列为空的条件，rear == front 空</p></li><li><p>当这样分析后，此时队列中有效的数据的个数是 <code>(rear + maxSize - front)%maxSize //rear=1 front=0</code></p></li><li><p>以上我们就可以按照我们的思路对原来的代码进行修改。</p></li></ol><h2 id="4-链表">4. 链表</h2><p>链表是有序的列表：</p><ol><li>链表是以<strong>节点</strong>的方式来存储的，是一<strong>种链式存储的</strong>方法存储。</li><li>每个节点包<strong>含data域，next域</strong>，指向下一个节点。</li><li>链表的<strong>各个节点不一定是连续存储</strong></li><li>链表分<strong>带头节点的链表和不带头结点</strong>的链表，根据实际的需求来确定。</li></ol><h3 id="4-1-单向链表">4.1 单向链表</h3><p>head 节点</p><h5 id="单向链表的实现">单向链表的实现</h5><ol><li>不存放具体的数据</li><li>作用就是表示单链表头next</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedListDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>,<span class="string">&quot;松江&quot;</span>,<span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>,<span class="string">&quot;卢俊义&quot;</span>,<span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>,<span class="string">&quot;吴用&quot;</span>,<span class="string">&quot;智多星&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>,<span class="string">&quot;林冲&quot;</span>,<span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>();</span><br><span class="line">singleLinkedList.add(hero1);</span><br><span class="line">singleLinkedList.add(hero2);</span><br><span class="line">singleLinkedList.add(hero3);</span><br><span class="line">singleLinkedList.add(hero4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示链表</span></span><br><span class="line">singleLinkedList.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个SingleLinkedList来管理我们的英雄</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个头结点，一般上头结点不要动</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点到单向链表</span></span><br><span class="line"><span class="comment">//思路，当不考虑编号顺序时</span></span><br><span class="line"><span class="comment">//1 找到当前链表的最后节点</span></span><br><span class="line"><span class="comment">//2,将最后这个节点的nex指向新节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历temo</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表的最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环后，temp就指向链表的最后</span></span><br><span class="line"><span class="comment">//将最后这个节点的next指向新的节点</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示链表【遍历】</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判读是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头结点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line"><span class="type">HeroNode</span>  <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否是否链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,如果不后移将进入死循环</span></span><br><span class="line">temp = temp.next ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个heroNode ,每个HeroNode对象就是一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickName;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, nickName=&quot;</span> + nickName + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前，我们需要添加相关节点的进行有序添加。</p><h5 id="有序添加">有序添加</h5><p>需要按照编号的顺序添加：</p><ol><li>首先找到新天节点的节点的位置，是通过辅助变量(指针)，通过遍历来搞定</li><li>新的节点 <code>next=temp.next</code></li><li>将<code>temp.next=新节点</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedListDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>,<span class="string">&quot;松江&quot;</span>,<span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>,<span class="string">&quot;卢俊义&quot;</span>,<span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>,<span class="string">&quot;吴用&quot;</span>,<span class="string">&quot;智多星&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>,<span class="string">&quot;林冲&quot;</span>,<span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero1);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero2);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero3);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero4);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">singleLinkedList.addByOrder(hero3);</span><br><span class="line">singleLinkedList.addByOrder(hero1);</span><br><span class="line">singleLinkedList.addByOrder(hero4);</span><br><span class="line">singleLinkedList.addByOrder(hero2);</span><br><span class="line">singleLinkedList.addByOrder(hero2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示链表</span></span><br><span class="line">singleLinkedList.list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个SingleLinkedList来管理我们的英雄</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个头结点，一般上头结点不要动</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点到单向链表</span></span><br><span class="line"><span class="comment">//思路，当不考虑编号顺序时</span></span><br><span class="line"><span class="comment">//1 找到当前链表的最后节点</span></span><br><span class="line"><span class="comment">//2,将最后这个节点的nex指向新节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历temo</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表的最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环后，temp就指向链表的最后</span></span><br><span class="line"><span class="comment">//将最后这个节点的next指向新的节点</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class="line"><span class="comment">//如果有这个排名，则添加失败，并给出提示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"><span class="comment">//因为头结点不能动，因此我们仍然通过一个辅助指针（变量）来帮助找到添加的位置</span></span><br><span class="line"><span class="comment">//因为单链表，因为我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;  <span class="comment">//false标记添加的编号是否存在，默认为false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123; <span class="comment">//说明此时temp处于链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.next.no &gt; heroNode.no) &#123;</span><br><span class="line"><span class="comment">//此时位置找到，就在temp的后边插入</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">flag = <span class="literal">true</span>;  <span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;  <span class="comment">//后移，变量当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//不能添加，说明编号存在</span></span><br><span class="line">System.out.printf(<span class="string">&quot;准备插入的英雄的编号%d，已经存在,无法添加\n&quot;</span>,heroNode.no);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入到链表中，temp后边</span></span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示链表【遍历】</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判读是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头结点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line"><span class="type">HeroNode</span>  <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否是否链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,如果不后移将进入死循环</span></span><br><span class="line">temp = temp.next ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个heroNode ,每个HeroNode对象就是一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickName;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, nickName=&quot;</span> + nickName + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改链表中的参数">修改链表中的参数</h5><ol><li>先找到该节点，通过遍历。</li><li><code>temp.name = newHeroNode.name;temp.nickName=newHeroNode.nickName;</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedListDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>,<span class="string">&quot;松江&quot;</span>,<span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>,<span class="string">&quot;卢俊义&quot;</span>,<span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>,<span class="string">&quot;吴用&quot;</span>,<span class="string">&quot;智多星&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>,<span class="string">&quot;林冲&quot;</span>,<span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero1);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero2);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero3);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero4);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">singleLinkedList.addByOrder(hero3);</span><br><span class="line">singleLinkedList.addByOrder(hero1);</span><br><span class="line">singleLinkedList.addByOrder(hero4);</span><br><span class="line">singleLinkedList.addByOrder(hero2);</span><br><span class="line">singleLinkedList.addByOrder(hero2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;修改之前的&quot;</span>);</span><br><span class="line">singleLinkedList.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试修改节点的代码</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">newHeroNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>,<span class="string">&quot;小卢&quot;</span>,<span class="string">&quot;玉麒麟···&quot;</span>);</span><br><span class="line">singleLinkedList.update(newHeroNode);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;修改之后的的链表情况&quot;</span>);</span><br><span class="line"><span class="comment">//显示链表</span></span><br><span class="line">singleLinkedList.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个SingleLinkedList来管理我们的英雄</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个头结点，一般上头结点不要动</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点到单向链表</span></span><br><span class="line"><span class="comment">//思路，当不考虑编号顺序时</span></span><br><span class="line"><span class="comment">//1 找到当前链表的最后节点</span></span><br><span class="line"><span class="comment">//2,将最后这个节点的nex指向新节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历temo</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表的最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环后，temp就指向链表的最后</span></span><br><span class="line"><span class="comment">//将最后这个节点的next指向新的节点</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class="line"><span class="comment">//如果有这个排名，则添加失败，并给出提示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"><span class="comment">//因为头结点不能动，因此我们仍然通过一个辅助指针（变量）来帮助找到添加的位置</span></span><br><span class="line"><span class="comment">//因为单链表，因为我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;  <span class="comment">//false标记添加的编号是否存在，默认为false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123; <span class="comment">//说明此时temp处于链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.next.no &gt; heroNode.no) &#123;</span><br><span class="line"><span class="comment">//此时位置找到，就在temp的后边插入</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">flag = <span class="literal">true</span>;  <span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;  <span class="comment">//后移，变量当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//不能添加，说明编号存在</span></span><br><span class="line">System.out.printf(<span class="string">&quot;准备插入的英雄的编号%d，已经存在,无法添加\n&quot;</span>,heroNode.no);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入到链表中，temp后边</span></span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修该节点的信息，根据no编号来修改，即no编号不能更改</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1 根据newHeroNode的no来修改便可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode newHeroNode)</span> &#123;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line"><span class="comment">//定义一个辅助变量</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//已经变量完链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no) &#123;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickName = newHeroNode.nickName;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">System.out.printf(<span class="string">&quot;没有找到编号%d的节点，不能修改\n&quot;</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示链表【遍历】</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判读是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头结点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line"><span class="type">HeroNode</span>  <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否是否链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,如果不后移将进入死循环</span></span><br><span class="line">temp = temp.next ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个heroNode ,每个HeroNode对象就是一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickName;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, nickName=&quot;</span> + nickName + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除节点">删除节点</h5><p>从单链表中删除一个节点的思路</p><ol><li>删除节点之前，我们需要将有关节点先找到需要删除的这个节点的前一个节点temp</li><li><code>temp.next = temp.next.next;</code></li><li>被删除的节点将不会有其他的指向，会被JVM垃圾回收机制回收。</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkedListDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//创建节点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">1</span>,<span class="string">&quot;松江&quot;</span>,<span class="string">&quot;及时雨&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>,<span class="string">&quot;卢俊义&quot;</span>,<span class="string">&quot;玉麒麟&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">3</span>,<span class="string">&quot;吴用&quot;</span>,<span class="string">&quot;智多星&quot;</span>);</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">4</span>,<span class="string">&quot;林冲&quot;</span>,<span class="string">&quot;豹子头&quot;</span>);</span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero1);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero2);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero3);</span></span><br><span class="line"><span class="comment">singleLinkedList.add(hero4);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">singleLinkedList.addByOrder(hero3);</span><br><span class="line">singleLinkedList.addByOrder(hero1);</span><br><span class="line">singleLinkedList.addByOrder(hero4);</span><br><span class="line">singleLinkedList.addByOrder(hero2);</span><br><span class="line">singleLinkedList.addByOrder(hero2);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;修改之前的&quot;</span>);</span><br><span class="line">singleLinkedList.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试修改节点的代码</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">newHeroNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">2</span>,<span class="string">&quot;小卢&quot;</span>,<span class="string">&quot;玉麒麟···&quot;</span>);</span><br><span class="line">singleLinkedList.update(newHeroNode);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;修改之后的的链表情况&quot;</span>);</span><br><span class="line"><span class="comment">//显示链表</span></span><br><span class="line">singleLinkedList.list();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个节点</span></span><br><span class="line">singleLinkedList.del(<span class="number">4</span>);</span><br><span class="line">singleLinkedList.del(<span class="number">1</span>);</span><br><span class="line">singleLinkedList.del(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//删除后的链表情况</span></span><br><span class="line">System.out.println(<span class="string">&quot;删除后的链表情况。。。&quot;</span>);</span><br><span class="line">singleLinkedList.list();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个SingleLinkedList来管理我们的英雄</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span>&#123;</span><br><span class="line"><span class="comment">//先初始化一个头结点，一般上头结点不要动</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加节点到单向链表</span></span><br><span class="line"><span class="comment">//思路，当不考虑编号顺序时</span></span><br><span class="line"><span class="comment">//1 找到当前链表的最后节点</span></span><br><span class="line"><span class="comment">//2,将最后这个节点的nex指向新节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历temo</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表的最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环后，temp就指向链表的最后</span></span><br><span class="line"><span class="comment">//将最后这个节点的next指向新的节点</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class="line"><span class="comment">//如果有这个排名，则添加失败，并给出提示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addByOrder</span><span class="params">(HeroNode heroNode)</span> &#123;</span><br><span class="line"><span class="comment">//因为头结点不能动，因此我们仍然通过一个辅助指针（变量）来帮助找到添加的位置</span></span><br><span class="line"><span class="comment">//因为单链表，因为我们找的temp是位于添加位置的前一个节点，否则插入不了</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;  <span class="comment">//false标记添加的编号是否存在，默认为false</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123; <span class="comment">//说明此时temp处于链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.next.no &gt; heroNode.no) &#123;</span><br><span class="line"><span class="comment">//此时位置找到，就在temp的后边插入</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.next.no == heroNode.no) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明希望添加的heroNode的编号已然存在</span></span><br><span class="line">flag = <span class="literal">true</span>;  <span class="comment">//说明编号存在</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;  <span class="comment">//后移，变量当前链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag的值</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//不能添加，说明编号存在</span></span><br><span class="line">System.out.printf(<span class="string">&quot;准备插入的英雄的编号%d，已经存在,无法添加\n&quot;</span>,heroNode.no);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//插入到链表中，temp后边</span></span><br><span class="line">heroNode.next = temp.next;</span><br><span class="line">temp.next = heroNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修该节点的信息，根据no编号来修改，即no编号不能更改</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1 根据newHeroNode的no来修改便可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode newHeroNode)</span> &#123;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line"><span class="comment">//定义一个辅助变量</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//已经变量完链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no) &#123;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickName = newHeroNode.nickName;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">System.out.printf(<span class="string">&quot;没有找到编号%d的节点，不能修改\n&quot;</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="comment">//TODO 思路</span></span><br><span class="line"><span class="comment">//1. head不动，故而我们需要一个temp辅助节点找到等待删除节点的前一个节点</span></span><br><span class="line"><span class="comment">//2.我们在比较的时候，是temp.next.no和需要删除的节点的no比较</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//标志是否找到待删除节点的</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.next.no == no) &#123;</span><br><span class="line"><span class="comment">//找到待删除节点的前一个节点temp</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//temp后移，遍历</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//找到</span></span><br><span class="line"><span class="comment">//可以删除</span></span><br><span class="line">temp.next = temp.next.next;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;要删除的节点%d不存在\n&quot;</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示链表【遍历】</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判读是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头结点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line"><span class="type">HeroNode</span>  <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否是否链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,如果不后移将进入死循环</span></span><br><span class="line">temp = temp.next ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个heroNode ,每个HeroNode对象就是一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickName;</span><br><span class="line"><span class="keyword">public</span> HeroNode next;<span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, nickName=&quot;</span> + nickName + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表面试题：">链表面试题：</h5><p>面试题，获取单链表的节点个数(如果是带头结点的链表，需求不统计头结点)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 链表的头节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的就是有效节点的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLength</span><span class="params">(HeroNode head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123; <span class="comment">//空链表</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义一个辅助的变量,这里我们没有统计头结点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">length ++ ;</span><br><span class="line">cur = cur.next; <span class="comment">//遍历</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line">main:</span><br><span class="line"><span class="comment">//测试一下头节点的个数</span></span><br><span class="line">System.out.println(<span class="string">&quot;有效的节点个数为： &quot;</span>+getLength(singleLinkedList.getHead()));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查找单链表中的倒数第k个节点【新浪面试题】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//思路：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编写一个方法，接受head节点，同时接受一个index</span></span><br><span class="line"><span class="comment"> * index表示倒数第index个节点</span></span><br><span class="line"><span class="comment"> * 先将链表从头到尾遍历，得到链表的总的长度getLength</span></span><br><span class="line"><span class="comment"> * 得到size后，我们从链表的第一个开始遍历（size-index）个，就可以得到</span></span><br><span class="line"><span class="comment"> * 如果找到了，则返回该节点，否则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HeroNode <span class="title function_">findLastIndexNode</span><span class="params">(HeroNode head,<span class="type">int</span> index)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断如果链表为空，则返回null</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一个遍历得到的链表的长度的个数(节点个数)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> getLength(head);</span><br><span class="line"><span class="comment">//第二次遍历size-index位置，就是我们倒数的第k个节点</span></span><br><span class="line"><span class="comment">//先做一个index的校验</span></span><br><span class="line"><span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义给辅助变量 for循环定位倒数的index</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - index; i++) &#123;</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">main:</span><br><span class="line"><span class="comment">//测试一些看是否得到倒数第k个节点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">res</span> <span class="operator">=</span> findLastIndexNode(singleLinkedList.getHead(), <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;res=&quot;</span> + res);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>单链表的反转【腾讯面试，难度适中】</p><ol><li>先定义一个节点<code>reverseHead = new HeroNodeHead</code>的最前端。</li><li>从头到尾便利原来的指针，每遍历一个节点，就将其取出，并放在新的链表reverseHead的最前端。</li><li>原来的链表<code>head.next = reverseHead.next</code>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将单链表反转</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseList</span><span class="params">(HeroNode head)</span> &#123;</span><br><span class="line"><span class="comment">//如果当前链表为空，或者只有一个节点，无需反转，直接返回就行。</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个辅助的指针(变量)，帮助我们遍历原来的链表</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//指向当前节点[cur]的下一节点</span></span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">reverseHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//遍历原来的链表，每遍历一个节点，就将其取出，并在新的链表reverseHead的最前端</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TODO 思考</span></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">next = cur.next; <span class="comment">//先暂时保存当前节点的下一节点，因为后面需要使用</span></span><br><span class="line">cur.next = reverseHead.next; <span class="comment">//将cur的下一个节点指向新的链表的最前端</span></span><br><span class="line">reverseHead.next = cur; <span class="comment">//将cur链接到新的链表上</span></span><br><span class="line">cur = next; <span class="comment">//让cur后移</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将head.next指向reverseHead.next，此时就实现单链表的反转</span></span><br><span class="line">head.next = reverseHead.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line"><span class="comment">//测试一下单链表的反转功能</span></span><br><span class="line">System.out.println(<span class="string">&quot;此时这个时候是原先链表&quot;</span>);</span><br><span class="line">singleLinkedList.list();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转链表</span></span><br><span class="line">System.out.println(<span class="string">&quot;反转后的单链表&quot;</span>);</span><br><span class="line">reverseList(singleLinkedList.getHead());</span><br><span class="line">singleLinkedList.list();</span><br></pre></td></tr></table></figure><p>从尾到头打印单链表 【方式1，反向遍历，方式2：stack栈】</p><p>思路：</p><ol><li><p>上面的题要求就是逆序打印单链表。</p></li><li><p>方式1：先将单链表进行反转，然后在遍历就行，但是这样会破坏原来的单链表的结构，<strong>不可取</strong>。</p></li><li><p>方式2：可以利用栈这个数据结构，将各个节点压入栈中，然后利用栈的<strong>先进后出</strong>的特点，实现逆序打印的效果。此方式不会影响链表的结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从尾到头打印单链表</span></span><br><span class="line"><span class="comment">//使用方式2：也就是将链表中所有元素添加到栈中，然后通过栈将所有元素反转，利用栈的特点，实现逆序打印</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(HeroNode head)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ; <span class="comment">//空链表，不能打印</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建要给的一个栈，将各个节点压入栈便可。</span></span><br><span class="line">Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;HeroNode&gt;();</span><br><span class="line"><span class="type">HeroNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="comment">//将链表的所有节点压入栈中</span></span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">null</span>) &#123;</span><br><span class="line">stack.push(cur);</span><br><span class="line">cur = cur.next; <span class="comment">// cur后移，这样就可以压入下一个节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将栈中的节点进行打印，pop 出栈</span></span><br><span class="line"><span class="keyword">while</span>(stack.size() &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">System.out.println(stack.pop());  <span class="comment">//stack的特点是先进后出的特点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main:</span><br><span class="line">System.out.println(<span class="string">&quot;逆序打印单链表,此时没有改变链表的结构。。。&quot;</span>);</span><br><span class="line">reversePrint(singleLinkedList.getHead());</span><br></pre></td></tr></table></figure></li></ol><p>合并两个有序的单链表，合并之后的链表仍然井然有序【习题】</p><p>单链表存在的问题：</p><ol><li>单链表不能实现自我删除，其查找的方向只能是一个方向而双向链表可以向前或者向后查找</li><li>单向链表不能自我删除，需要靠辅助节点，而双向链表，可以自我删除，所以前面我们单链表删除时节点，总是找到temp的下一个节点来删除。</li></ol><h3 id="4-2-双向链表">4.2 双向链表</h3><p>双向链表：</p><p>所谓双向链表</p><p>通俗的讲就是可以从两端进行查找。</p><p>分析双向链表的遍历，添加，修改，删除的操作思路</p><ol><li>遍历的方式和单链表一样，只是可以向前查找，也可以向后查找。</li><li>添加（默认添加搭配双向链表的最后）<ol><li>先找到双向链表的最后这个节点</li><li><code>temp.next = newHeroNode</code></li><li><code>newHeroNode.pre = temp;</code></li></ol></li><li>修改的思路和原理的单向链表一样</li><li>删除<ol><li>因为是双向链表，因此我们可以实现自我删除某个节点</li><li>直接找到要删除的这个节点，比如temp</li><li><code>temp.pre.next = temp.next;</code></li><li><code>temp.next.pre = temp.pre;</code></li></ol></li></ol><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkListDemo</span> &#123;</span><br><span class="line"><span class="comment">//双向链表的测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;双向链表的测试：&quot;</span>);</span><br><span class="line"><span class="comment">//先创建节点</span></span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;黑脸麻瓜&quot;</span>);</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;红脸堇瓜&quot;</span>);</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;白脸冬瓜&quot;</span>);</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;绿脸西瓜&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">DoubleLinkList</span> <span class="variable">doubleLinkList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleLinkList</span>();</span><br><span class="line">doubleLinkList.add(hero1);</span><br><span class="line">doubleLinkList.add(hero2);</span><br><span class="line">doubleLinkList.add(hero3);</span><br><span class="line">doubleLinkList.add(hero4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">doubleLinkList.list();</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">newHeroNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">2</span>,<span class="string">&quot;得力&quot;</span>,<span class="string">&quot;自研菲亚&quot;</span>);</span><br><span class="line">doubleLinkList.update(newHeroNode);</span><br><span class="line">System.out.println(<span class="string">&quot;修改后的结果：&quot;</span>);</span><br><span class="line">doubleLinkList.list();</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">doubleLinkList.del(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;删除后的结果：&quot;</span>);</span><br><span class="line">doubleLinkList.list();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个双向链表的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkList</span>&#123;</span><br><span class="line"><span class="comment">//通单向链表一样,创建一个头节点，头结点不要动，不存放具体数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">HeroNode2</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span>(<span class="number">0</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> HeroNode2 <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历双向链表的方法和单向链表一样。</span></span><br><span class="line"><span class="comment">//显示链表【遍历】</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判读是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为头结点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line"><span class="type">HeroNode2</span>  <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//判断是否是否链表最后</span></span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出节点的信息</span></span><br><span class="line">System.out.println(temp);</span><br><span class="line"><span class="comment">//将next后移,如果不后移将进入死循环</span></span><br><span class="line">temp = temp.next ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加一个节点到双向链表的最后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(HeroNode2 heroNode)</span> &#123;</span><br><span class="line"><span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历temo</span></span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//遍历链表，找到最后</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//找到链表的最后</span></span><br><span class="line"><span class="keyword">if</span>(temp.next == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果没有找到最后，将temp后移</span></span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环后，temp就指向链表的最后</span></span><br><span class="line"><span class="comment">//此时形成一个双向链表</span></span><br><span class="line">temp.next = heroNode;</span><br><span class="line">heroNode.pre = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改一个节点的内容</span></span><br><span class="line"><span class="comment">//双向链表的节点内容修改和单向链表几乎一样</span></span><br><span class="line"><span class="comment">//只是节点的类型改成了HeroNode2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(HeroNode2 newHeroNode)</span> &#123;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line"><span class="comment">//定义一个辅助变量</span></span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//已经变量完链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == newHeroNode.no) &#123;</span><br><span class="line"><span class="comment">//找到了</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据flag判断是否找到要修改的节点</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">temp.name = newHeroNode.name;</span><br><span class="line">temp.nickName = newHeroNode.nickName;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//没有找到</span></span><br><span class="line">System.out.printf(<span class="string">&quot;没有找到编号%d的节点，不能修改\n&quot;</span>,newHeroNode.no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从双向链表中删除一个节点</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1 对于双向链表，我们可以直接找到要删除的这个节点</span></span><br><span class="line"><span class="comment">//2 找到后，自我删除即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="comment">//判断当前链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;链表为空，无法删除&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next; <span class="comment">//辅助变量(指针)</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//标志是否找到待删除节点的</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp == <span class="literal">null</span>) &#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp.no == no) &#123;</span><br><span class="line"><span class="comment">//找到待删除节点的前一个节点temp</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = temp.next;<span class="comment">//temp后移，遍历</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断flag</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="comment">//找到</span></span><br><span class="line"><span class="comment">//可以删除</span></span><br><span class="line"><span class="comment">//temp.next = temp.next.next; 【单向链表的删除方式】</span></span><br><span class="line">temp.pre.next = temp.next;</span><br><span class="line"><span class="comment">//此时以下代码存在问题，如果是下一个节点，就不需要执行下边语句，否则将会产生空指针问题。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(temp.next != <span class="literal">null</span>) &#123;</span><br><span class="line">temp.next.pre = temp.pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;要删除的节点%d不存在\n&quot;</span>,no);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode2</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="keyword">public</span> String nickName;</span><br><span class="line"><span class="keyword">public</span> HeroNode2 next; <span class="comment">//指向后一个节点，默认为null</span></span><br><span class="line"><span class="keyword">public</span> HeroNode2 pre; <span class="comment">//指向前一个节点,默认为null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">(<span class="type">int</span> no, String name, String nickName)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HeroNode2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;HeroNode2 [no=&quot;</span> + no + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, nickName=&quot;</span> + nickName </span><br><span class="line">+ <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>习题：</p><p>双向链表的第二种添加方式，按照编号顺序（提示，按照单链表的顺序进行添加即可，稍作修改）;</p><h3 id="4-3-单向环形链表：">4.3 单向环形链表：</h3><p>约瑟夫问题：设编号为1,2,…n,的n个人围坐在一圈，约定编号为k(1&lt;= k &lt;=m)的人从1开始报数，数到从1开始报数，数到m的那个人出列，他的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p><blockquote><p>n = 5,即有5个人</p><p>k =1，从第一个人开始报数</p><p>m=2,数2下。</p></blockquote><p>思路：</p><ol><li>先创建第一个节点，让first指向该节点，并形成环形</li><li>后面当我们没创建一个新的节点，就将该节点加入到已有的环形链表即可。</li></ol><p>遍历环形链表：</p><ol><li><p>先让一个辅助指针（变量） curBoy，指向first节点</p></li><li><p>然后通过一个while循环该环形链表即可，<code>curBoy.next == first;</code></p></li><li><p>根据用户的输入，生成一个小孩出圈的顺序，事先应该指向环形链表的最后这个节点。</p><p>​补充：小孩报数之前，先让first和helper移动 k -1 次</p></li><li><p>当小孩报数时，让first和helper指针同时移动m -1次</p></li><li><p>这个时候就可以将first指向的小孩节点出圈；</p><ol><li>first = first.next</li><li>helper.next =first;</li></ol><p>原来first指向的节点就没有任何引用，就会被垃圾回收机制回收</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Josepfu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试看构建环形队列和遍历是否正确</span></span><br><span class="line"><span class="type">CircleSinglelinkedList</span> <span class="variable">circleSinglelinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CircleSinglelinkedList</span>();</span><br><span class="line">circleSinglelinkedList.addBoy(<span class="number">10</span>); <span class="comment">//加入5个小孩节点</span></span><br><span class="line">circleSinglelinkedList.showBoy();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试小孩出圈是否正确</span></span><br><span class="line">circleSinglelinkedList.countBoy(<span class="number">1</span>, <span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个环形的单向链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CircleSinglelinkedList</span>&#123;</span><br><span class="line"><span class="comment">//创建一个first节点，当前没有编号</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Boy</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//添加小孩节点，构建一个环形的链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBoy</span><span class="params">(<span class="type">int</span> nums)</span> &#123;</span><br><span class="line"><span class="comment">//nums 做一个数据校验</span></span><br><span class="line"><span class="keyword">if</span>(nums &lt; <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;nums的值不正确&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Boy</span> <span class="variable">curBoy</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">// 辅助指针，帮助构建环形链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用for来创建我们的环形链表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums; i++) &#123;</span><br><span class="line"><span class="comment">//根据编号创建小孩节点</span></span><br><span class="line"><span class="type">Boy</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boy</span>(i);</span><br><span class="line"><span class="comment">//如果是第一个小孩</span></span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">first = boy;</span><br><span class="line">first.setNext(first); <span class="comment">//构成循环</span></span><br><span class="line">curBoy = first; <span class="comment">// 让curBoy指向第一个小孩</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">curBoy.setNext(boy);<span class="comment">//</span></span><br><span class="line">boy.setNext(first);</span><br><span class="line">curBoy = boy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历当前环境</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showBoy</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判断链表是否为空</span></span><br><span class="line"><span class="keyword">if</span>(first == <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有任何小孩...&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为first不能动，因此我们仍然使用一个辅助指针完成遍历</span></span><br><span class="line"><span class="type">Boy</span> <span class="variable">curBoy</span> <span class="operator">=</span> first;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;小孩的编号 %d \n&quot;</span>,curBoy.getNo());</span><br><span class="line"><span class="keyword">if</span>(curBoy.getNext() == first) &#123; <span class="comment">//说明已经遍历完成</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">curBoy = curBoy.getNext(); <span class="comment">//将curBoy后移</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据用户的输入，计算出小孩出圈的顺序</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNo 表示第几个小孩开始计数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> countNum 表示数多少下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 表示最初有多少个小孩子在圈中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countBoy</span><span class="params">(<span class="type">int</span> startNo,<span class="type">int</span> countNum, <span class="type">int</span> nums)</span> &#123;</span><br><span class="line"><span class="comment">//先对数据进行校验</span></span><br><span class="line"><span class="keyword">if</span>(first == <span class="literal">null</span> || startNo &lt; <span class="number">1</span> || startNo &gt; nums) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;参数输入错误，请重写输入：&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建要给辅助指针，帮助完成小孩出圈</span></span><br><span class="line"><span class="type">Boy</span> <span class="variable">helper</span> <span class="operator">=</span> first;</span><br><span class="line"><span class="comment">//需求创建一个辅助指针(变量) helper，事先应该指向环形链表的最后这个节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper.getNext() == first) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小孩报数前，先让first和helper移动 k - 1次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; startNo - <span class="number">1</span>; j++) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当小孩报数的时候，让first和helper指针同时移动 m - 1次，然后出圈</span></span><br><span class="line"><span class="comment">//这里是一个循环操作，知道圈中只有一个节点</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(helper == first) &#123;</span><br><span class="line"><span class="comment">//说明圈中只有一个节点</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让first和helper指针同时移动countNum - 1;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; countNum -<span class="number">1</span>; j++ ) &#123;</span><br><span class="line">first = first.getNext();</span><br><span class="line">helper = helper.getNext();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这时first指向的节点，就是要出圈的小孩节点</span></span><br><span class="line">System.out.printf(<span class="string">&quot;小孩%d出圈\n&quot;</span>,first.getNo());</span><br><span class="line"><span class="comment">//此时将first指向的小孩节点出圈</span></span><br><span class="line">first = first.getNext();</span><br><span class="line">helper.setNext(first); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">&quot;最后留在圈中的小孩编号%d\n&quot;</span>,first.getNo());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boy</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> no;<span class="comment">//编号</span></span><br><span class="line"><span class="keyword">private</span> Boy next; <span class="comment">//指向下一个节点，默认为null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Boy</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span><span class="params">(<span class="type">int</span> no)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.no = no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Boy <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Boy next)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Boy [no=&quot;</span> + no + <span class="string">&quot;, next=&quot;</span> + next + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-栈">5.栈</h2><ol><li><p>栈的英文Stack</p></li><li><p>栈是一种<strong>先入后出</strong>(FILO - First in Last Out)的有序列表</p></li><li><p>栈是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行特殊线性表。允许插入和删除的一端，为变化的一端称为<strong>栈顶</strong>（Top）,另一端为固定的一端，称为<strong>栈底</strong>（Bottom）;</p></li><li><p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最后放入的元素最后删除。</p></li><li><p>入栈<strong>push</strong>,出栈<strong>pop</strong>。</p><ol><li>子程序的调用：在跳往子程序前，会先加个下一个指令的地址存放到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</li><li>处理递归调用，所谓递归，就是方法自己调用自己本身。与子程序的调用类似，只是除了存储下一个指令的地址外，也将参数，区域变量等数据存入堆栈中。</li><li>表达式的转换[中缀表达式转后缀表达式]与求值。</li><li>二叉树的变量</li><li>图形的深度优先(depth-first)搜索法。</li></ol></li></ol><h3 id="5-1-栈的模拟实现">5.1 栈的模拟实现</h3><p>实现栈的思路：</p><ol><li>使用数组来模拟栈</li><li>定义一个top来模拟栈顶，初始化为 -1；</li><li>入栈的操作，当有数据加入栈时，<code>top++ ; stack[top] = data;</code></li><li>出栈的操作，<code>int value = stack[top]; top -- ;return value;</code></li></ol><p>反正有错误，bug一直都有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStackDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试一下ArrayStack是否正确</span></span><br><span class="line"><span class="comment">//先创建一个ArrayStack对象，表示栈</span></span><br><span class="line"><span class="type">ArrayStack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack</span>(<span class="number">4</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//控制是否退出菜单</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(loop) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;show：表示展示栈&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;exit：表示退出栈&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;push：表示添加数据到栈&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;pop：表示从栈取出数据&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的操作&quot;</span>);</span><br><span class="line">key = sc.next();</span><br><span class="line"><span class="keyword">switch</span>(key) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">stack.list();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;push&quot;</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">stack.push(value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;pop&quot;</span>:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">System.out.printf(<span class="string">&quot;出栈的数据是%d\n&quot;</span>,res);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">sc.close();</span><br><span class="line">loop = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;程序退出了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个ArrayStack表示栈</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxSize;<span class="comment">//栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] stack;<span class="comment">//数组，数组模拟栈，数据就房子该数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span>-<span class="number">1</span>; <span class="comment">//top表示栈顶，初始化为-1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayStack</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="built_in">this</span>.maxSize];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆满</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈-push</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">top ++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈-pop,将栈顶的数据进行返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//先判断是否为空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈空，没有数据···&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[top];</span><br><span class="line">top --;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示栈的情况【遍历栈】，遍历是需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈空，没有数据···&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;stack[%d]=%d\n&quot;</span>,i,stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-使用栈实现计算机">5.2 使用栈实现计算机</h3><p>试题： 使用栈完成表达式7 * 2 * 2 - 5  + 1 - 5 + 3 - 4 =？</p><p>思路：</p><ol><li>通过一个index值(索引).来变量我们的表达式</li><li>如果我们发现是一个数字就直接入栈</li><li>如果发现扫描到的是一个符号，就分如下情况进行分析<ol><li>如果发现当前符号为空，则直接入栈</li><li>如果符号栈有操作符，就进行比较，如果当前的操作符的优先级小于或者等于栈中的操作符。这个时候就需要从数栈中pop出两个数，在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符插入符号栈</li><li>如果当前符号栈中有操作符，就进行比较，如果当前操作符的优先级小于或者等于栈中的操作符，就需要从数栈中pop出两个数，在从符号栈中pop一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈，如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈。</li></ol></li><li>当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运行。</li><li>最后在数栈只有一个数子，就是表达式的结果。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//根据前面老师思路，完成表达式的运算</span></span><br><span class="line"><span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="string">&quot;3-2*1+1&quot;</span>; <span class="comment">// //如何处理多位数的问题？</span></span><br><span class="line"><span class="comment">//创建两个栈，数栈，一个符号栈</span></span><br><span class="line"><span class="type">ArrayStack2</span> <span class="variable">numStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack2</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">ArrayStack2</span> <span class="variable">operStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack2</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//定义需要的相关变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//用于扫描</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">oper</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>; <span class="comment">//将每次扫描得到char保存到ch</span></span><br><span class="line"><span class="type">String</span> <span class="variable">keepNum</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>; <span class="comment">//用于拼接 多位数</span></span><br><span class="line"><span class="comment">//开始while循环的扫描expression</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//依次得到expression 的每一个字符</span></span><br><span class="line">ch = expression.substring(index, index+<span class="number">1</span>).charAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//判断ch是什么，然后做相应的处理</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isOper(ch)) &#123;<span class="comment">//如果是运算符</span></span><br><span class="line"><span class="comment">//判断当前的符号栈是否为空</span></span><br><span class="line"><span class="keyword">if</span>(!operStack.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数,</span></span><br><span class="line"><span class="comment">//在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class="line"><span class="keyword">if</span>(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())) &#123;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line"><span class="comment">//把运算的结果如数栈</span></span><br><span class="line">numStack.push(res);</span><br><span class="line"><span class="comment">//然后将当前的操作符入符号栈</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果当前的操作符的优先级大于栈中的操作符， 就直接入符号栈.</span></span><br><span class="line">operStack.push(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果为空直接入符号栈..</span></span><br><span class="line">operStack.push(ch); <span class="comment">// 1 + 3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//如果是数，则直接入数栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//numStack.push(ch - 48); //? &quot;1+3&quot; &#x27;1&#x27; =&gt; 1</span></span><br><span class="line"><span class="comment">//分析思路</span></span><br><span class="line"><span class="comment">//1. 当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span></span><br><span class="line"><span class="comment">//2. 在处理数，需要向expression的表达式的index 后再看一位,如果是数就进行扫描，如果是符号才入栈</span></span><br><span class="line"><span class="comment">//3. 因此我们需要定义一个变量 字符串，用于拼接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//处理多位数</span></span><br><span class="line">keepNum += ch;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class="line"><span class="keyword">if</span> (index == expression.length() - <span class="number">1</span>) &#123;</span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span></span><br><span class="line"><span class="comment">//注意是看后一位，不是index++</span></span><br><span class="line"><span class="keyword">if</span> (operStack.isOper(expression.substring(index+<span class="number">1</span>,index+<span class="number">2</span>).charAt(<span class="number">0</span>))) &#123;</span><br><span class="line"><span class="comment">//如果后一位是运算符，则入栈 keepNum = &quot;1&quot; 或者 &quot;123&quot;</span></span><br><span class="line">numStack.push(Integer.parseInt(keepNum));</span><br><span class="line"><span class="comment">//重要的!!!!!!, keepNum清空</span></span><br><span class="line">keepNum = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让index + 1, 并判断是否扫描到expression最后.</span></span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= expression.length()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当表达式扫描完毕，就顺序的从 数栈和符号栈中pop出相应的数和符号，并运行.</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//如果符号栈为空，则计算到最后的结果, 数栈中只有一个数字【结果】</span></span><br><span class="line"><span class="keyword">if</span>(operStack.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">num1 = numStack.pop();</span><br><span class="line">num2 = numStack.pop();</span><br><span class="line">oper = operStack.pop();</span><br><span class="line">res = numStack.cal(num1, num2, oper);</span><br><span class="line">numStack.push(res);<span class="comment">//入栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数栈的最后数，pop出，就是结果</span></span><br><span class="line"><span class="type">int</span> <span class="variable">res2</span> <span class="operator">=</span> numStack.pop();</span><br><span class="line">System.out.printf(<span class="string">&quot;表达式 %s = %d&quot;</span>, expression, res2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先创建一个栈,直接使用前面创建好</span></span><br><span class="line"><span class="comment">//定义一个 ArrayStack2 表示栈, 需要扩展功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack3</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxSize; <span class="comment">// 栈的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] stack; <span class="comment">// 数组，数组模拟栈，数据就放在该数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">// top表示栈顶，初始化为-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayStack3</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="built_in">this</span>.maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加一个方法，可以返回当前栈顶的值, 但是不是真正的pop</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> stack[top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈满</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//栈空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈-push</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="comment">//先判断栈是否满</span></span><br><span class="line"><span class="keyword">if</span>(isFull()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">top++;</span><br><span class="line">stack[top] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈-pop, 将栈顶的数据返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//先判断栈是否空</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;栈空，没有数据~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[top];</span><br><span class="line">top--;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示栈的情况[遍历栈]， 遍历时，需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈空，没有数据~~&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要从栈顶开始显示数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;stack[%d]=%d\n&quot;</span>, i, stack[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回运算符的优先级，优先级是程序员来确定, 优先级使用数字表示</span></span><br><span class="line"><span class="comment">//数字越大，则优先级就越高.</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">priority</span><span class="params">(<span class="type">int</span> oper)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(oper == <span class="string">&#x27;*&#x27;</span> || oper == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (oper == <span class="string">&#x27;+&#x27;</span> || oper == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 假定目前的表达式只有 +, - , * , /</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是不是一个运算符</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOper</span><span class="params">(<span class="type">char</span> val)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> val == <span class="string">&#x27;+&#x27;</span> || val == <span class="string">&#x27;-&#x27;</span> || val == <span class="string">&#x27;*&#x27;</span> || val == <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2, <span class="type">int</span> oper)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// res 用于存放计算的结果</span></span><br><span class="line"><span class="keyword">switch</span> (oper) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">res = num1 + num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">res = num2 - num1;<span class="comment">// 注意顺序</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">res = num1 * num2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">res = num2 / num1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-前缀、中缀、后缀表达式（逆波兰表达式）">5.3 前缀、中缀、后缀表达式（逆波兰表达式）</h3><p>从右往左扫描表达式，遇到数子时，将数字压入栈中，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算。一般情况中缀表达式是我们人为确定的表达式，但是计算机无法识别，故而我们需要将中缀表达式调整为后缀表达式。</p><p>从左到右表达式最右端，最后运算得出的值即为表达式的结果。</p><blockquote><p>​ * 思路：</p><ul><li>1.从左到右扫描，将3和4压入栈中</li><li>2.遇到 + 运算符，因此弹出4和3(4为栈顶元素，3为次顶元素)，计算出3+4的值，得到7，在将7压入栈中</li><li>3.将5入栈</li><li>4.接下来是<em>运算符，因此弹出5和7，计算7</em>5=35，将35入栈。</li><li>5.将6入栈</li><li>6.最后是 - 运算符，计算出35 -6 的值，即29，由此得出最终结果</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 逆波兰表达式 &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//先定义给逆波兰表达式</span></span><br><span class="line"><span class="comment">//(3+4)*5-6 =&gt; 3 4 + 5 * 6 -</span></span><br><span class="line"><span class="comment">//说明为了方便，逆波兰表达式的数字和符号使用空格隔开</span></span><br><span class="line"><span class="type">String</span> <span class="variable">suffixExpression</span> <span class="operator">=</span> <span class="string">&quot;15 4 + 5 * 6 -&quot;</span>;</span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">// 1. 先将 3 4 + 5 * 6 -  =&gt; 放到ArrayList中</span></span><br><span class="line"><span class="comment">// 2 将 ArrayList 传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class="line">List&lt;String&gt; rpnList = getListString(suffixExpression);</span><br><span class="line">System.out.println(<span class="string">&quot;逆波兰表达式：&quot;</span> + rpnList);</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> calculate(rpnList);</span><br><span class="line">System.out.println(<span class="string">&quot;计算的结果为：&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将一个逆波兰表达式，依次将数据和运算符放到ArrayList中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getListString</span><span class="params">(String suffixExpression)</span>&#123;</span><br><span class="line"><span class="comment">//将suffixExpression 分割</span></span><br><span class="line">String [] split = suffixExpression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String ele : split) &#123;</span><br><span class="line">list.add(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完成对逆波兰表达式的运算。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1.从左到右扫描，将3和4压入栈中</span></span><br><span class="line"><span class="comment"> * 2.遇到 + 运算符，因此弹出4和3(4为栈顶元素，3为次顶元素)，计算出3+4的值，得到7，在将7压入栈中</span></span><br><span class="line"><span class="comment"> * 3.将5入栈</span></span><br><span class="line"><span class="comment"> * 4.接下来是*运算符，因此弹出5和7，计算7*5=35，将35入栈。</span></span><br><span class="line"><span class="comment"> * 5.将6入栈</span></span><br><span class="line"><span class="comment"> * 6.最后是 - 运算符，计算出35 -6 的值，即29，由此得出最终结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(List&lt;String&gt; ls)</span> &#123;</span><br><span class="line"><span class="comment">//创建给栈，只需要一个栈即可</span></span><br><span class="line">Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"><span class="comment">//遍历 ls</span></span><br><span class="line"><span class="keyword">for</span>(String item : ls) &#123;</span><br><span class="line"><span class="comment">//这里使用正则表达式来读取数</span></span><br><span class="line"><span class="keyword">if</span>(item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123; <span class="comment">//匹配的是多位数</span></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//pop出两位数，并运算，再入栈</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(item.equals(<span class="string">&quot;+&quot;</span>)) &#123;</span><br><span class="line">res = num1 + num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">res = num1 - num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">res = num1 * num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">res = num1 / num2;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;运算符有误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把res入栈</span></span><br><span class="line">stack.push(<span class="string">&quot;&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后留在stack中的数据是运算结果</span></span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-4-中缀表达式转换为后缀表达式">5.4 中缀表达式转换为后缀表达式</h3><p>实际开发中，我们需要将中缀表达式转换为后缀表达式</p><p>中缀表达式转后缀表达式的思路步骤</p><ol><li>初始化两个栈，运算符s1和存储中间结果的栈s2</li><li>从左到右扫描中缀表达式；</li><li>遇到操作运算符时，将其压s2;</li><li>遇到运算符时，比较其与s1栈顶运算符的优先级<ol><li>如果s1为空，或栈顶运算符为左括号“(”，则直接将次运算符入栈；</li><li>否则，若优先级比栈顶运算符的高，也将运算符压入s1</li><li>否则将s1栈顶的运算符弹出并压入到s2中，再次转到（4-1）与s1中新的栈顶运算符相比较；</li></ol></li><li>遇到括号<ol><li>如果是左括号“（”,则直接压入s1</li><li>如果是右括号“）”,则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃。</li></ol></li><li>重复步骤2至5，直到表达式的最右边</li><li>将s1中剩余的运算符依次弹出并压入s2</li><li>依次弹出s2中元素并输出，结果的逆序即为中缀表达式对应的后缀表达式。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 逆波兰表达式 &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先定义给逆波兰表达式</span></span><br><span class="line"><span class="comment">//(3+4)*5-6 =&gt; 3 4 + 5 * 6 -</span></span><br><span class="line"><span class="comment">//说明为了方便，逆波兰表达式的数字和符号使用空格隔开</span></span><br><span class="line"><span class="type">String</span> <span class="variable">suffixExpression</span> <span class="operator">=</span> <span class="string">&quot;15 4 + 5 * 6 -&quot;</span>;</span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">// 1. 先将 3 4 + 5 * 6 -  =&gt; 放到ArrayList中</span></span><br><span class="line"><span class="comment">// 2 将 ArrayList 传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; rpnList = getListString(suffixExpression);</span><br><span class="line">System.out.println(<span class="string">&quot;逆波兰表达式：&quot;</span> + rpnList);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> calculate(rpnList);</span><br><span class="line">System.out.println(<span class="string">&quot;计算的结果为：&quot;</span> + res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=========================以上是中缀表达式====================&quot;</span>);</span><br><span class="line"><span class="comment">//此时我们完成一个中缀表达式转成后缀表达式的功能</span></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1.  1+((2+3)*4)-5 =&gt; 1 2 3 + 4 * + 5 -</span></span><br><span class="line"><span class="comment">//2 因为直接对str进行操作，不方便，因此将1+((2+3)*4)-5 中缀表达式转换为对应的List</span></span><br><span class="line"><span class="comment">// 即&quot;1+((2+3)*4)-5&quot; =&gt; ArrayList[1,+,(,(,2,+,3),*,4),-,5]</span></span><br><span class="line"><span class="comment">//3 将 得到的中缀表达式对应的List =&gt;后缀表达式对应的List</span></span><br><span class="line"><span class="comment">//即ArrayList[1, +, (, (, 2, +, 3, ), *, 4, ), -, 5]=&gt;ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">experssion</span> <span class="operator">=</span> <span class="string">&quot;1+((2+3)*4)-5&quot;</span>;</span><br><span class="line">List&lt;String&gt; infixExpressionList = toInfixExpressionList(experssion);</span><br><span class="line">System.out.println(<span class="string">&quot;中缀表达式对应的List &quot;</span> + infixExpressionList);</span><br><span class="line">List&lt;String&gt; parseSuffixExpressionList = parseSuffixExpressionList(infixExpressionList);</span><br><span class="line">System.out.println(<span class="string">&quot;后缀表达式对应的List&quot;</span> + parseSuffixExpressionList);</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">&quot;expression=%d&quot;</span>,calculate(parseSuffixExpressionList));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将 得到的中缀表达式对应的List =&gt;后缀表达式对应的List</span></span><br><span class="line"><span class="comment">//即ArrayList[1, +, (, (, 2, +, 3, ), *, 4, ), -, 5]=&gt;ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">parseSuffixExpressionList</span><span class="params">(List&lt;String&gt; ls)</span>&#123;</span><br><span class="line"><span class="comment">//定义两个栈</span></span><br><span class="line">Stack&lt;String&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;String&gt;(); <span class="comment">//符号栈</span></span><br><span class="line"><span class="comment">//说明：因为s2这个栈，在整个转换过程中，没有pop()操作，后面我们还需要逆序排序</span></span><br><span class="line"><span class="comment">//因此这样比较麻烦，此时我们就不同Stack&lt;String&gt; 直接使用List&lt;String&gt; s2</span></span><br><span class="line"><span class="comment">//Stack&lt;String&gt; s2  = new Stack&lt;String&gt;();//存储中间结果的栈S2</span></span><br><span class="line">List&lt;String&gt; s2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();<span class="comment">//存储中间结果的List2</span></span><br><span class="line"><span class="comment">//遍历ls</span></span><br><span class="line"><span class="keyword">for</span>(String item : ls) &#123;</span><br><span class="line"><span class="comment">//如果是一个数，加入s2</span></span><br><span class="line"><span class="keyword">if</span>(item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123;</span><br><span class="line">s2.add(item);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">s1.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">&quot;)&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//如果是右括号&quot;)&quot;，则依次弹出s1栈顶的运算符，并压入s2,直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class="line"><span class="keyword">while</span>(!s1.peek().equals(<span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line">s1.pop();  <span class="comment">//将（弹出s1栈，消除小括号</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//当item的优先级小于栈顶运算符，将s1栈顶的运算符弹出并加入到s2中，再次转到（4.1）与s1中新的栈顶运算符相比较</span></span><br><span class="line"><span class="keyword">while</span>(s1.size() != <span class="number">0</span> &amp;&amp; Operation.getValue(s1.peek()) &gt;= Operation.getValue(item)) &#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还需要将item压入栈</span></span><br><span class="line">s1.push(item);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class="line"><span class="keyword">while</span>(s1.size() != <span class="number">0</span>) &#123;</span><br><span class="line">s2.add(s1.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s2;  <span class="comment">//注意是因为存放到List，因此按顺序输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法：将中缀表达式转换为对应的List</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">toInfixExpressionList</span><span class="params">(String s)</span>&#123;</span><br><span class="line"><span class="comment">//定义一个List,存放中缀表达式 对应的内容</span></span><br><span class="line">List&lt;String&gt; ls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//这个是个指针，用于遍历中缀表达式字符串</span></span><br><span class="line">String str;<span class="comment">//对多位数的拼接到一个字符，就放入到c</span></span><br><span class="line"><span class="type">char</span> c; <span class="comment">//每遍历到一个字符，就放入到c</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//如果c是一个非数字，则需要加入的ls中</span></span><br><span class="line"><span class="keyword">if</span>((c=s.charAt(i)) &lt; <span class="number">48</span> || (c=s.charAt(i))&gt; <span class="number">57</span>)&#123;</span><br><span class="line">ls.add(<span class="string">&quot;&quot;</span>+c );</span><br><span class="line">i++;<span class="comment">//i需要后移</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果是一个数，需要考虑多位数问题</span></span><br><span class="line">str = <span class="string">&quot;&quot;</span>;<span class="comment">//先将str置成&quot;&quot; &#x27;0&#x27;[48]-&gt; &#x27;9&#x27;[57]</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= <span class="number">48</span> &amp;&amp; (c=s.charAt(i)) &lt;= <span class="number">57</span>) &#123;</span><br><span class="line">str += c; <span class="comment">//拼接</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">ls.add(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(i &lt; s.length());</span><br><span class="line"><span class="keyword">return</span> ls;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个逆波兰表达式，依次将数据和运算符放到ArrayList中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getListString</span><span class="params">(String suffixExpression)</span>&#123;</span><br><span class="line"><span class="comment">//将suffixExpression 分割</span></span><br><span class="line">String [] split = suffixExpression.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String ele : split) &#123;</span><br><span class="line">list.add(ele);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成对逆波兰表达式的运算。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思路：</span></span><br><span class="line"><span class="comment"> * 1.从左到右扫描，将3和4压入栈中</span></span><br><span class="line"><span class="comment"> * 2.遇到 + 运算符，因此弹出4和3(4为栈顶元素，3为次顶元素)，计算出3+4的值，得到7，在将7压入栈中</span></span><br><span class="line"><span class="comment"> * 3.将5入栈</span></span><br><span class="line"><span class="comment"> * 4.接下来是*运算符，因此弹出5和7，计算7*5=35，将35入栈。</span></span><br><span class="line"><span class="comment"> * 5.将6入栈</span></span><br><span class="line"><span class="comment"> * 6.最后是 - 运算符，计算出35 -6 的值，即29，由此得出最终结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(List&lt;String&gt; ls)</span> &#123;</span><br><span class="line"><span class="comment">//创建给栈，只需要一个栈即可</span></span><br><span class="line">Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line"><span class="comment">//遍历 ls</span></span><br><span class="line"><span class="keyword">for</span>(String item : ls) &#123;</span><br><span class="line"><span class="comment">//这里使用正则表达式来读取数</span></span><br><span class="line"><span class="keyword">if</span>(item.matches(<span class="string">&quot;\\d+&quot;</span>)) &#123; <span class="comment">//匹配的是多位数</span></span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//pop出两位数，并运算，再入栈</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(stack.pop());</span><br><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(item.equals(<span class="string">&quot;+&quot;</span>)) &#123;</span><br><span class="line">res = num1 + num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">res = num1 - num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">res = num1 * num2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">res = num1 / num2;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;运算符有误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把res入栈</span></span><br><span class="line">stack.push(<span class="string">&quot;&quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后留在stack中的数据是运算结果</span></span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个类来返回一个运算符对应的优先级</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Operation</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ADD</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">SUB</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MUL</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DIV</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个方法，返回对应的优先级数字</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(String operation)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span>  <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(operation) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">result = ADD;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">result = SUB;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">result = MUL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">result = DIV;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">System.out.println(<span class="string">&quot;不存在该运算符&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-递归">6.递归</h2><ol><li><p>递归就是方法自己调用自己</p></li><li><p>递归调用规则：</p><ol><li>当程序执行到一个方法时，就会开辟一个独立的空间（栈）</li><li>方法的局部变量是独立的，不会相互影响，比如n变量</li><li>如果方法中使用的是引用类型变量(比如说数组)，就会共享该引用类型的数据</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，出现栈溢出也就是<code>StackOverFlowError</code>。</li><li>当一个方法执行完毕，或者遇到return,就会返回，遵循谁调用，就将结果返回给谁，同时当方法执行完毕后返回时，该方法也就执行完毕。</li></ol></li></ol><h3 id="6-1-使用递归解决迷宫问题：">6.1 使用递归解决迷宫问题：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiGong</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建一个二维数组模拟迷宫</span></span><br><span class="line"><span class="comment">//地图</span></span><br><span class="line"><span class="type">int</span> [][] map = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line"><span class="comment">//使用1表示墙</span></span><br><span class="line"><span class="comment">//上下全是墙壁</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//左右全是墙壁</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ ) &#123;</span><br><span class="line">map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出地图</span></span><br><span class="line">System.out.println(<span class="string">&quot;当前地图为：&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span> ; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ;j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//使用递归回溯给小球找路</span></span><br><span class="line"><span class="comment">setWay(map, 1, 1);</span></span><br><span class="line"><span class="comment">//输出地图</span></span><br><span class="line"><span class="comment">System.out.println(&quot;小球走过，并标识：&quot;);</span></span><br><span class="line"><span class="comment">//输出新的地图，小球走过，并标识</span></span><br><span class="line"><span class="comment">for(int i = 0; i &lt; 8 ; i ++) &#123;</span></span><br><span class="line"><span class="comment">for(int j = 0 ;j &lt; 7; j++) &#123;</span></span><br><span class="line"><span class="comment">System.out.print(map[i][j] + &quot; &quot;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归回溯给小球找路</span></span><br><span class="line">setWay1(map, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//输出地图</span></span><br><span class="line">System.out.println(<span class="string">&quot;小球改变方式，并标识：&quot;</span>);</span><br><span class="line"><span class="comment">//输出新的地图，小球走过，并标识</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span> ; i ++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ;j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">System.out.print(map[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line"><span class="comment">//说明：</span></span><br><span class="line"><span class="comment">//1.如果小球能到map[6][5]的位置说明通路找到了。</span></span><br><span class="line"><span class="comment">//当map[i][j]为0说明该点没有走过   当为1，表示墙;2 表示通路可以走，3表示该位置以及走过，但是走不通</span></span><br><span class="line"><span class="comment">//在走迷宫的时候，需要确定一个策略(方法)下 -&gt;右 -&gt;上-&gt;左边，如果改点走不通，在回溯</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 表示传如的地图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 表示从哪个位置开始找，表示横坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j 表示坐标，表示纵坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到通路，就返回为true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">setWay</span><span class="params">(<span class="type">int</span> [][] map,<span class="type">int</span> i , <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123; <span class="comment">//通路已经找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[i][j] == <span class="number">0</span>) &#123;  <span class="comment">//如果当前这个点还没有走过</span></span><br><span class="line"><span class="comment">//按照策略 下 -&gt; 右 -&gt;上-&gt;左走</span></span><br><span class="line">map[i][j] = <span class="number">2</span>;<span class="comment">//假定该点是可以走通</span></span><br><span class="line"><span class="keyword">if</span>(setWay(map,i+<span class="number">1</span>,j)) &#123; <span class="comment">//往下走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j + <span class="number">1</span>)) &#123;<span class="comment">//向右</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i - <span class="number">1</span>, j)) &#123;<span class="comment">//向上</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map, i, j -<span class="number">1</span>)) &#123;  <span class="comment">//向左走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//说明该点走不通</span></span><br><span class="line">map[i][j] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果map[i][j] != 0,可能是 1,2,3</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line"><span class="comment">//说明：</span></span><br><span class="line"><span class="comment">//1.如果小球能到map[6][5]的位置说明通路找到了。</span></span><br><span class="line"><span class="comment">//当map[i][j]为0说明该点没有走过   当为1，表示墙;2 表示通路可以走，3表示该位置以及走过，但是走不通</span></span><br><span class="line"><span class="comment">//在走迷宫的时候，需要确定一个策略(方法)上 -&gt;右 -&gt;下-&gt;左边，如果改点走不通，在回溯</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 表示传如的地图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 表示从哪个位置开始找，表示横坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j 表示坐标，表示纵坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果找到通路，就返回为true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">setWay1</span><span class="params">(<span class="type">int</span> [][] map,<span class="type">int</span> i , <span class="type">int</span> j)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>) &#123; <span class="comment">//通路已经找到</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(map[i][j] == <span class="number">0</span>) &#123;  <span class="comment">//如果当前这个点还没有走过</span></span><br><span class="line"><span class="comment">//按照策略 上 -&gt; 右 -&gt;下-&gt;左走</span></span><br><span class="line">map[i][j] = <span class="number">2</span>;<span class="comment">//假定该点是可以走通</span></span><br><span class="line"><span class="keyword">if</span>(setWay1(map, i - <span class="number">1</span>,j)) &#123; <span class="comment">//往上走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay1(map, i, j + <span class="number">1</span>)) &#123;<span class="comment">//向右</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay1(map, i + <span class="number">1</span>, j)) &#123;<span class="comment">//向下</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay1(map, i, j -<span class="number">1</span>)) &#123;  <span class="comment">//向左走</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//说明该点走不通</span></span><br><span class="line">map[i][j] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//如果map[i][j] != 0,可能是 1,2,3</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-八皇后问题递归思路和实现">6.2 八皇后问题递归思路和实现</h3><p>八皇后问题算法思路分析：</p><p>1）第一个皇后先放第一行第一列</p><p>2）第二个皇后放在第二行第一列、然后判断是否OK，如果不OK，继续放在第二列、第三列、依次把所有列都放完，找到一个合适</p><p>3）继续第三个皇后，还是第一列、第二列…….直到第8个皇后也能放在一个不冲突的位置，算是找到了一个正确解</p><p>4）当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到.</p><p>5）然后回头继续第一个皇后放第二列，后面继续循环执行1，2，3，4的步骤</p><p>说明：理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 八皇后问题</span></span><br><span class="line"><span class="comment"> * 描述，要求每个皇后不在同一行，同一列，并且不在同一斜线上</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 老胡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023年4月8日</span></span><br><span class="line"><span class="comment"> * Company 暂无</span></span><br><span class="line"><span class="comment"> * Email 2844135670@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EightQueenQuestions</span> &#123;</span><br><span class="line"><span class="comment">//定义一个max表示有多少个皇后</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//定义数组array,保存皇后位置放置的结果，比如arr=&#123;0,4,7,5,2,6,1,3&#125;</span></span><br><span class="line"><span class="type">int</span> [] array = <span class="keyword">new</span> <span class="title class_">int</span>[max];</span><br><span class="line"><span class="comment">//定义一共有多少种解法</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span> ; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试一把，8皇后是否正确</span></span><br><span class="line"><span class="type">EightQueenQuestions</span> <span class="variable">queue8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EightQueenQuestions</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;哪行哪列代表数字,&quot;</span></span><br><span class="line">+ <span class="string">&quot;比如0 4 7 5 2 6 1 3，&quot;</span></span><br><span class="line">+ <span class="string">&quot;0表示第0行0列，&quot;</span></span><br><span class="line">+<span class="string">&quot;4表示第1行4列，&quot;</span></span><br><span class="line">+<span class="string">&quot;5表示第2行6列，&quot;</span></span><br><span class="line">+<span class="string">&quot;以此类推。&quot;</span>);</span><br><span class="line">queue8.check(<span class="number">0</span>);</span><br><span class="line">System.out.printf(<span class="string">&quot;共计有%d种解法&quot;</span>,count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写一个方法，放置第n个皇后</span></span><br><span class="line"><span class="comment">//注意到：check是每一次递归时，进入check中都有for(int i = 0; i &lt; max ; i ++)，因此会有回溯</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(n == max ) &#123;</span><br><span class="line"><span class="comment">//n = 8 ，其实是8个皇后就放好了</span></span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//依次放入皇后，并判断是否冲突</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; max; i ++) &#123;<span class="comment">//不冲突</span></span><br><span class="line"><span class="comment">//先把当前这个皇后n,放到该行的第1列</span></span><br><span class="line">array[n] = i;</span><br><span class="line"><span class="keyword">if</span>(judge(n)) &#123;</span><br><span class="line"><span class="comment">//接着放置n + 1皇后，即开始递归</span></span><br><span class="line">check(n+<span class="number">1</span>); <span class="comment">//如果有8个皇后，我们将调用8次</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果是冲突就继续执行array[n] = i; 即将第n个皇后放置在本行的后移一个位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看当我们放置第n个皇后，就去检测该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 表示第n个皇后</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">judge</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; n ; i ++) &#123;</span><br><span class="line"><span class="comment">//说明一下</span></span><br><span class="line"><span class="comment">//array[i] == array[n] 表示判断第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class="line"><span class="comment">//Math.abs(n-i) == Math.abs(array[n] -  array[i]) 表示判断第n个皇后时候和第i个皇后是否在同一斜线</span></span><br><span class="line"><span class="comment">// n = 1 放置第2列 n = 1 array[1] = 1</span></span><br><span class="line"><span class="comment">//Math.abs(1 - 0)  == 1 Math.abs(array[n] - array[i]) = Math.abs(1-0) = 1;</span></span><br><span class="line"><span class="comment">//判断是否在同一行，其实没有必要，因为每次都在递增</span></span><br><span class="line"><span class="keyword">if</span>(array[i] == array[n] || Math.abs(n-i) == Math.abs(array[n] -  array[i])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个方法，可以将皇后摆放的位置输出</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">count ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">System.out.print(array[i] + <span class="string">&quot; &quot;</span> );</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-排序">7. 排序</h2><h3 id="7-1-8种基本排序">7.1 8种基本排序</h3><ol><li>排序也称为排序算法，排序是一组数据，按照指定的顺序进行排列的过程。</li><li>排序的分类：<ol><li>内部排序：将需要处理的所有数据都加载到内部存储器中进行排序</li><li>外部排序：数据量过大，无法全部加载到内存中，需要借助外部存储进行排序</li></ol></li><li>常见的排序算法的分类：<ol><li>内部排序：<ol><li>插入排序：<ol><li>直接插入排序</li><li>希尔排序</li></ol></li><li>选择排序<ol><li>简单选择排序</li><li>堆排序</li></ol></li><li>交换排序<ol><li>冒泡排序</li><li>快速排序</li></ol></li><li>归并排序</li><li>基数排序</li></ol></li><li>外部排序：内存和外存排序</li></ol></li></ol><h3 id="7-2时间复杂度">7.2时间复杂度</h3><p>算法的时间复杂度</p><p>一般我们度量一个程序执行时间的两种方法</p><ol><li><p>事后统计：这种方法可行，但是存在两个问题，一是想要对设计的算法的运行性能进行评测，需要实际运行该程序，二是所得时间的统计量依赖于计算机的硬件，软件等环境因素，这种方式要求在同一台计算机的相同状态下运行，才能比较那个算法速度更快。</p></li><li><p>事前估算法：通过分析某个算法的时间复杂度来判断哪个算法更优。</p></li></ol><p>1）一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用f(n）表示，若有某个辅助函数f(n），便得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f（n）是T（n）的同数量级函数。记作T（n）=O(f(n))，称O(f(n))为算法的渐进间复杂度，简称时间复杂度。</p><p>2）T（n）不同，但时间复杂度可能相同。如：T（n）=n^2+7n+6与T（n）=3n^2+2n+2它们的（n）不同，但时间复杂度相同，都为O(n^2)。</p><p>3）计算时间复杂度的方法：</p><ul><li><p>用常数1代替运行时间中的所有加法常数 T(n) = n^2 + 7n + 6; =&gt;T(n) = n^2 + 7n + 1</p></li><li><p>修改后的运行次数函数中，只保留最高阶项</p><p>T(n) = n^2 + 7n + 1 =&gt; T(n) = n^2</p></li><li><p>去除最高阶项的系数T(n) =3n^2 =&gt;O(n^2)</p></li></ul><ol><li><p>常数阶O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">++ i;</span><br><span class="line">j++ ;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> i + j;</span><br></pre></td></tr></table></figure></li><li><p>对数阶O(log2n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    i=i*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性阶O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n ; ++ i)&#123;</span><br><span class="line">    j = i;</span><br><span class="line">    j ++;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>线性对数阶O(nlog2n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; m &lt; n; m++ )&#123;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)&#123;</span><br><span class="line">        i *= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>平方阶O(n^2)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;= n; i ++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt;= n; j++)&#123;</span><br><span class="line">        j = i;</span><br><span class="line">        j ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>立方阶O(n^3)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>()&#123;</span><br><span class="line">    <span class="keyword">for</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>()&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>k次方阶O(n^k)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n层<span class="keyword">for</span>()&#123;</span><br><span class="line">    <span class="keyword">for</span>()&#123;</span><br><span class="line">        <span class="keyword">for</span>()&#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指数阶O(2^n)</p></li></ol><p>依次往下时间复杂度增长</p><table><thead><tr><th>排序法</th><th>平均时间</th><th>最差情况</th><th>稳定度</th><th>空间复杂度</th><th>备注</th></tr></thead><tbody><tr><td>冒泡</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>1</td><td>n小比较好</td></tr><tr><td>交换</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>1</td><td>n小比较好</td></tr><tr><td>选择</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>1</td><td>n小比较好</td></tr><tr><td>插入</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>1</td><td>大部分已排序的较好</td></tr><tr><td>基数</td><td>O(logRB)</td><td>O(logRB)</td><td>稳定</td><td>1</td><td>B是真数(0-9),R是基数（个十百）</td></tr><tr><td>shell</td><td>O(nlogn)</td><td>O(n^s)  1&lt;s&lt;2</td><td>不稳定</td><td>1</td><td>s是所选分组</td></tr><tr><td>快速</td><td>O(nlogn)</td><td>O(n^2)</td><td>不稳定</td><td>O(nlogn)</td><td>n大时较好</td></tr><tr><td>归并</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(1)</td><td>n大时较好</td></tr><tr><td>堆</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td><td>n大时候较好</td></tr></tbody></table><h3 id="7-3-排序算法的实现与设计">7.3 排序算法的实现与设计</h3><h4 id="7-3-1-冒泡排序">7.3.1 冒泡排序</h4><p>思想：</p><p>冒泡排序通过对排序序列从前往后(从下标较小的元素开始)，依次比较相邻元素的值，若发现逆序则交换，使值较大大元素慢慢从前往后移，就像水底气泡一样慢慢往上冒。</p><p>优化：</p><p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志flag判断元素是否进行过交换。从而减少不必要的比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">3</span>,<span class="number">9</span>,-<span class="number">1</span>,<span class="number">10</span>,-<span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">//冒泡排序的过程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一趟排序，就是将最大的数排在最后</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//临时变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arr.length -<span class="number">1</span> ; i ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt; arr.length -<span class="number">1</span> -i; j ++) &#123;</span><br><span class="line"><span class="comment">//如果前面这个数比后面的数更大，则交换</span></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"><span class="comment">/*System.out.println(&quot;第一回排序后的数组&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//第二会排序，就是将第二大的数排在倒数第二位</span></span><br><span class="line"><span class="comment">for(int j = 0 ; j &lt; arr.length -1 - 1; j ++ ) &#123;</span></span><br><span class="line"><span class="comment">//如果前面这个数比后面的数更大，则交换</span></span><br><span class="line"><span class="comment">if(arr[j]&gt;arr[j+1]) &#123;</span></span><br><span class="line"><span class="comment">temp = arr[j];</span></span><br><span class="line"><span class="comment">arr[j] = arr[j+1];</span></span><br><span class="line"><span class="comment">arr[j+1] = temp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第二回排序后的数组&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//第三会排序，就是将第三大的数排在倒数第三位</span></span><br><span class="line"><span class="comment">for(int j = 0 ; j &lt; arr.length -1 - 2; j ++ ) &#123;</span></span><br><span class="line"><span class="comment">//如果前面这个数比后面的数更大，则交换</span></span><br><span class="line"><span class="comment">if(arr[j]&gt;arr[j+1]) &#123;</span></span><br><span class="line"><span class="comment">temp = arr[j];</span></span><br><span class="line"><span class="comment">arr[j] = arr[j+1];</span></span><br><span class="line"><span class="comment">arr[j+1] = temp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第三回排序后的数组&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">//第四会排序，就是将第四大的数排在倒数第四位</span></span><br><span class="line"><span class="comment">for(int j = 0 ; j &lt; arr.length -1 - 3; j ++ ) &#123;</span></span><br><span class="line"><span class="comment">//如果前面这个数比后面的数更大，则交换</span></span><br><span class="line"><span class="comment">if(arr[j]&gt;arr[j+1]) &#123;</span></span><br><span class="line"><span class="comment">temp = arr[j];</span></span><br><span class="line"><span class="comment">arr[j] = arr[j+1];</span></span><br><span class="line"><span class="comment">arr[j+1] = temp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第四回排序后的数组&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>冒泡排序的优化：</p><p>因为在排序过程中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSortOptimize</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int arr[] = &#123;3,9,-1,10,-2&#125;;</span></span><br><span class="line"><span class="comment">//冒泡排序的过程</span></span><br><span class="line"><span class="comment">System.out.println(&quot;排序前的数组：&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">System.out.println(&quot;=============================&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一下冒泡排序的速度O(n^2),给8万个数据，测试</span></span><br><span class="line"><span class="comment">//创建要给80000个数据</span></span><br><span class="line"><span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">80000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">80000</span> ; i ++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>)(Math.random() * <span class="number">80000</span>); <span class="comment">//生成一个[0,80000)的随机数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//输出一个日期格式</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> simpleDateFormat.format(date1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间为=&quot;</span> + dateStr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试冒泡排序</span></span><br><span class="line">bubbleSort(arr);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr2</span> <span class="operator">=</span> simpleDateFormat.format(date2);</span><br><span class="line">System.out.println(<span class="string">&quot;输出排序后的时间&quot;</span> + dateStr2);</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将前面冒泡排序算法封装成一个方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> [] arr)</span> &#123;</span><br><span class="line"><span class="comment">//第一趟排序，就是将最大的数排在最后</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//临时变量</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//定义一个标识符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arr.length -<span class="number">1</span> ; i ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt; arr.length -<span class="number">1</span> -i; j ++) &#123;</span><br><span class="line"><span class="comment">//如果前面这个数比后面的数更大，则交换</span></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(&quot;第&quot;+(i+1)+&quot;躺排序后的数组&quot;);</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="keyword">if</span>(flag == <span class="literal">false</span>) &#123; <span class="comment">//在一趟排序中一次交换都没发生过</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>; <span class="comment">//重置flag！！！，进行下次判断</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//临时变量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arr.length -<span class="number">1</span> ; i ++ ) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt; arr.length -<span class="number">1</span> -i; j ++) &#123;</span><br><span class="line"><span class="comment">//如果前面这个数比后面的数更大，则交换</span></span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure><h4 id="7-3-2-选择排序">7.3.2 选择排序</h4><p>选择排序也是一种简单的排序方式，其基本思想在于：第一次从数组(arr[0]-arr[n-1])中选择最小的值，然后与数组第一个元素(arr[0])进行交换，第二次从<code>arr[1]-arr[n-1</code>]中选取最小值，与arr[1]交换,…,知道将数组排序好，总共通过<code>n-1</code>次，得到一个按照排序码从小到大的有序序列。</p><p>思路：</p><p>原始数组 ： 101,34,119,1；</p><p>第一轮排序：1,34,119,101；</p><p>第二轮排序：1,34,119,101；</p><p>第三轮排序：1,34,101,119;</p><ol><li>选则排序一共有数组大小-1轮排序</li><li>每1轮排序，又是一个循环，循环的规则。<ol><li>假定当前这个数是最小数</li><li>然后和后面的每个数进行比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标</li><li>当遍历到数组的最后，就得到本轮最小数和下标</li><li>交换数组的位置</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//int [] arr =  &#123;101,34,119,1&#125;;</span></span><br><span class="line"><span class="comment">//创建要给80000个数据</span></span><br><span class="line"><span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">80000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">80000</span> ; i ++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>)(Math.random() * <span class="number">80000</span>); <span class="comment">//生成一个[0,80000)的随机数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//输出一个日期格式</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> simpleDateFormat.format(date1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间为=&quot;</span> + dateStr);</span><br><span class="line">selectSort(arr);</span><br><span class="line"><span class="comment">//测试冒泡排序</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr2</span> <span class="operator">=</span> simpleDateFormat.format(date2);</span><br><span class="line">System.out.println(<span class="string">&quot;输出排序后的时间&quot;</span> + dateStr2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">System.out.println(&quot;排序前：&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">selectSort(arr);</span></span><br><span class="line"><span class="comment">System.out.println(&quot;排序后&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span> [] arr)</span> &#123;</span><br><span class="line"><span class="comment">//在推到的过程中，我们发现规律，因此可以使用for来解决</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arr.length ; i ++ ) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i +<span class="number">1</span> ; j &lt; arr.length ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(min &gt; arr[j]) &#123; <span class="comment">//说明假定的最小值，并非最小</span></span><br><span class="line">min = arr[j]; <span class="comment">//重置min</span></span><br><span class="line">minIndex = j ;  <span class="comment">//重置minInde</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minIndex != i) &#123;</span><br><span class="line">arr[minIndex] = arr[i];</span><br><span class="line">arr[i] = min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * System.out.println(&quot;第&quot;+(i+1)+&quot;轮后~~&quot;);</span></span><br><span class="line"><span class="comment"> * System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用逐步推导，进行选择排序y</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 原始的数组： 101,34,119,1</span></span><br><span class="line"><span class="comment"> * 第一轮排序：1,34,119,101；</span></span><br><span class="line"><span class="comment">      第二轮排序：1,34,119,101；</span></span><br><span class="line"><span class="comment">      第三轮排序：1,34,101,119;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int minIndex = 0;</span></span><br><span class="line"><span class="comment">int min = arr[0];</span></span><br><span class="line"><span class="comment">for(int j = 0 +1 ; j &lt; arr.length ; j++) &#123;</span></span><br><span class="line"><span class="comment">if(min &gt; arr[j]) &#123; //说明假定的最小值，并非最小</span></span><br><span class="line"><span class="comment">min = arr[j]; //重置min</span></span><br><span class="line"><span class="comment">minIndex = j ;  //重置minInde</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//此时将最小值，放在arr[0]中，此时就是交换</span></span><br><span class="line"><span class="comment">if(minIndex != 0) &#123;</span></span><br><span class="line"><span class="comment">arr[minIndex] = arr[0];</span></span><br><span class="line"><span class="comment">arr[0] = min;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第一轮后~~&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">//第二轮</span></span><br><span class="line"><span class="comment">minIndex = 1;</span></span><br><span class="line"><span class="comment">min = arr[1];</span></span><br><span class="line"><span class="comment">for(int j = 0 +1 ; j &lt; arr.length ; j++) &#123;</span></span><br><span class="line"><span class="comment">if(min &gt; arr[j]) &#123; //说明假定的最小值，并非最小</span></span><br><span class="line"><span class="comment">min = arr[j]; //重置min</span></span><br><span class="line"><span class="comment">minIndex = j ;  //重置minInde</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//此时将最小值，放在arr[0]中，此时就是交换</span></span><br><span class="line"><span class="comment">if(minIndex != 1) &#123;</span></span><br><span class="line"><span class="comment">arr[minIndex] = arr[1];</span></span><br><span class="line"><span class="comment">arr[1] = min;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第二轮后~~&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment">//第三轮</span></span><br><span class="line"><span class="comment">minIndex = 2;</span></span><br><span class="line"><span class="comment">min = arr[2];</span></span><br><span class="line"><span class="comment">for(int j = 0 +1 ; j &lt; arr.length ; j++) &#123;</span></span><br><span class="line"><span class="comment">if(min &gt; arr[j]) &#123; //说明假定的最小值，并非最小</span></span><br><span class="line"><span class="comment">min = arr[j]; //重置min</span></span><br><span class="line"><span class="comment">minIndex = j ;  //重置minInde</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//此时将最小值，放在arr[0]中，此时就是交换</span></span><br><span class="line"><span class="comment">if(minIndex != 2) &#123;</span></span><br><span class="line"><span class="comment">arr[minIndex] = arr[2];</span></span><br><span class="line"><span class="comment">arr[2] = min;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第三轮后~~&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比冒泡排序发现，选择排序速度比冒泡排序快。</p><p>核心代码层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span> [] arr)</span> &#123;</span><br><span class="line"><span class="comment">//在推到的过程中，我们发现规律，因此可以使用for来解决</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arr.length ; i ++ ) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i +<span class="number">1</span> ; j &lt; arr.length ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(min &gt; arr[j]) &#123; <span class="comment">//说明假定的最小值，并非最小</span></span><br><span class="line">min = arr[j]; <span class="comment">//重置min</span></span><br><span class="line">minIndex = j ;  <span class="comment">//重置minInde</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(minIndex != i) &#123;</span><br><span class="line">arr[minIndex] = arr[i];</span><br><span class="line">arr[i] = min;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-3-插入排序">7.3.3 插入排序</h4><p>插入排序的基本思想： 把n个待排序的元素看成一个有序表和一个无序表，开始时，有序表只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把他的排序码依次与有序元素的排序码进行比较，将他插入到有序表中的适当位置，使之成为新的有序表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr [] = &#123;<span class="number">101</span>,<span class="number">34</span>,-<span class="number">1</span>,<span class="number">119</span>,<span class="number">1</span>,<span class="number">89</span>&#125;;</span><br><span class="line">insertSort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span> [] arr)</span> &#123;</span><br><span class="line"><span class="comment">//使用for循环来将代码简化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//使用逐步推到的方式来</span></span><br><span class="line"><span class="comment">//定义待插入的数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[i];</span><br><span class="line"><span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> i - <span class="number">1</span>; <span class="comment">//也就是arr[1]的前面这个数的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给insertVal找到插入的位置</span></span><br><span class="line"><span class="comment">//说明 insertIndex &gt;= 0 保证在给insertVal 找插入位置，不越界</span></span><br><span class="line"><span class="comment">//insertVal &lt; arr[insertIndex]待插入的数，还没有找到插入位置</span></span><br><span class="line"><span class="comment">//需要将arr[insertIndex]</span></span><br><span class="line"><span class="keyword">while</span>(insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line">arr[insertIndex +  <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">insertIndex -- ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环时候，说明插入的位置找到，insertIndex + 1;</span></span><br><span class="line">arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;轮&quot;</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//使用逐步推到的方式来</span></span><br><span class="line"><span class="comment">//定义待插入的数据</span></span><br><span class="line"><span class="comment">int insertVal = arr[1];</span></span><br><span class="line"><span class="comment">int insertIndex = 1 - 1; //也就是arr[1]的前面这个数的下标</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//给insertVal找到插入的位置</span></span><br><span class="line"><span class="comment">//说明 insertIndex &gt;= 0 保证在给insertVal 找插入位置，不越界</span></span><br><span class="line"><span class="comment">//insertVal &lt; arr[insertIndex]待插入的数，还没有找到插入位置</span></span><br><span class="line"><span class="comment">//需要将arr[insertIndex]</span></span><br><span class="line"><span class="comment">while(insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class="line"><span class="comment">arr[insertIndex +  1] = arr[insertIndex];</span></span><br><span class="line"><span class="comment">insertIndex -- ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//当退出while循环时候，说明插入的位置找到，insertIndex + 1;</span></span><br><span class="line"><span class="comment">arr[insertIndex + 1] = insertVal;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第一轮&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//第二轮</span></span><br><span class="line"><span class="comment">insertVal = arr[2];</span></span><br><span class="line"><span class="comment">insertIndex = 2 -1;</span></span><br><span class="line"><span class="comment">while(insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class="line"><span class="comment">arr[insertIndex +  1] = arr[insertIndex];</span></span><br><span class="line"><span class="comment">insertIndex -- ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">arr[insertIndex + 1] = insertVal;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第二轮&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//第二轮</span></span><br><span class="line"><span class="comment">insertVal = arr[3];</span></span><br><span class="line"><span class="comment">insertIndex = 3 -1;</span></span><br><span class="line"><span class="comment">while(insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class="line"><span class="comment">arr[insertIndex +  1] = arr[insertIndex];</span></span><br><span class="line"><span class="comment">insertIndex -- ;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">arr[insertIndex + 1] = insertVal;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;第三轮&quot;);</span></span><br><span class="line"><span class="comment">System.out.println(Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用for循环来将代码简化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//使用逐步推到的方式来</span></span><br><span class="line"><span class="comment">//定义待插入的数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[i];</span><br><span class="line"><span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> i - <span class="number">1</span>; <span class="comment">//也就是arr[1]的前面这个数的下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给insertVal找到插入的位置</span></span><br><span class="line"><span class="comment">//说明 insertIndex &gt;= 0 保证在给insertVal 找插入位置，不越界</span></span><br><span class="line"><span class="comment">//insertVal &lt; arr[insertIndex]待插入的数，还没有找到插入位置</span></span><br><span class="line"><span class="comment">//需要将arr[insertIndex]</span></span><br><span class="line"><span class="keyword">while</span>(insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line">arr[insertIndex +  <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">insertIndex -- ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while循环时候，说明插入的位置找到，insertIndex + 1;</span></span><br><span class="line"><span class="keyword">if</span>(insertIndex + <span class="number">1</span> != i) &#123;</span><br><span class="line">arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(&quot;第&quot;+i+&quot;轮&quot;);</span></span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过时间比较，我们发现插入排序比选择排序时间更短，也就是说插入排序的效率高于选择排序。</p><p>缺点： 当插入的数是最小的数时，后移的次数明显增多，对效率有影响。</p><h4 id="7-3-4-希尔排序">7.3.4 希尔排序</h4><p>也是一种插入排序，其是在插入排序的一种优化。希尔排序是在插入排序上的缺点的一种解决办法，其完美解决了插入排序的缺点。</p><p>基本思想是对数组进行分组，按照分组排序后再排序</p><p>第一种思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//希尔排序，对有序序列在插入时采用交换法，并测试排序速度</span></span><br><span class="line"><span class="comment">//对有序序列在插入式采用移动法，并测试排序速度</span></span><br><span class="line"><span class="type">int</span> []arr = &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">0</span>&#125;;</span><br><span class="line">shellSort(arr);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span> [] arr)</span> &#123;</span><br><span class="line"><span class="comment">//使用for循环简化代码</span></span><br><span class="line"><span class="comment">//希尔排序的第一轮排序</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span> ;gap /=<span class="number">2</span> ) &#123;</span><br><span class="line"><span class="comment">//因为是第一轮排序，将n个数据分成gap组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length ; i++) &#123;</span><br><span class="line"><span class="comment">//遍历各组中所有的元素（共计gap组，每组n/gap个元素）步长为gap</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i -gap ; j &gt;= <span class="number">0</span>; j -= gap) &#123;</span><br><span class="line"><span class="comment">//如果当前元素大于加上步长后的那个元素，说明要交换</span></span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j + gap]) &#123;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j + gap];</span><br><span class="line">arr[j + gap] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;希尔排序后的第&quot;</span>+(++count)+<span class="string">&quot;轮结果为：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//希尔排序的第一轮排序</span></span><br><span class="line"><span class="comment">int temp;</span></span><br><span class="line"><span class="comment">//因为是第一轮排序，将10个数据分成5组</span></span><br><span class="line"><span class="comment">for(int i = 5; i &lt; arr.length ; i++) &#123;</span></span><br><span class="line"><span class="comment">//遍历各组中所有的元素（共计5组，每组2个元素）步长为5</span></span><br><span class="line"><span class="comment">for(int j = i -5 ; j &gt;= 0; j -= 5) &#123;</span></span><br><span class="line"><span class="comment">//如果当前元素大于加上步长后的那个元素，说明要交换</span></span><br><span class="line"><span class="comment">if(arr[j] &gt; arr[j + 5]) &#123;</span></span><br><span class="line"><span class="comment">temp = arr[j];</span></span><br><span class="line"><span class="comment">arr[j] = arr[j + 5];</span></span><br><span class="line"><span class="comment">arr[j + 5] = temp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;希尔排序后的第一轮结果为：&quot; + Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//因为是第二轮排序，将10个数据分成5/2 = 2组</span></span><br><span class="line"><span class="comment">for(int i = 2; i &lt; arr.length ; i++) &#123;</span></span><br><span class="line"><span class="comment">//遍历各组中所有的元素（共计5组，每组2个元素）步长为5</span></span><br><span class="line"><span class="comment">for(int j = i -2 ; j &gt;= 0; j -= 2) &#123;</span></span><br><span class="line"><span class="comment">//如果当前元素大于加上步长后的那个元素，说明要交换</span></span><br><span class="line"><span class="comment">if(arr[j] &gt; arr[j + 2]) &#123;</span></span><br><span class="line"><span class="comment">temp = arr[j];</span></span><br><span class="line"><span class="comment">arr[j] = arr[j + 2];</span></span><br><span class="line"><span class="comment">arr[j + 2] = temp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;希尔排序后的第2轮结果为：&quot; + Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//因为是第三轮排序，将10个数据分成5/2/2 = 1组</span></span><br><span class="line"><span class="comment">for(int i = 1; i &lt; arr.length ; i++) &#123;</span></span><br><span class="line"><span class="comment">//遍历各组中所有的元素（共计5组，每组2个元素）步长为5</span></span><br><span class="line"><span class="comment">for(int j = i -1 ; j &gt;= 0; j -= 1) &#123;</span></span><br><span class="line"><span class="comment">//如果当前元素大于加上步长后的那个元素，说明要交换</span></span><br><span class="line"><span class="comment">if(arr[j] &gt; arr[j + 1]) &#123;</span></span><br><span class="line"><span class="comment">temp = arr[j];</span></span><br><span class="line"><span class="comment">arr[j] = arr[j + 1];</span></span><br><span class="line"><span class="comment">arr[j + 1] = temp;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;希尔排序后的第3轮结果为：&quot; + Arrays.toString(arr));</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式移位法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对希尔排序进行优化，我们使用位移法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort2</span><span class="params">(<span class="type">int</span> [] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span> ; gap &gt; <span class="number">0</span> ; gap /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">//从第gap个元素，逐个对其所在的组进行直接插入排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap ; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line"><span class="keyword">if</span>(arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line"><span class="keyword">while</span>(j - gap &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j - gap]) &#123;</span><br><span class="line"><span class="comment">//移动</span></span><br><span class="line">arr[j] = arr[j-gap];</span><br><span class="line">j -= gap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当退出while后，就给temp找到插入的位置</span></span><br><span class="line">arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用移位法后，我们发现时间快了很多倍。</p><h4 id="7-3-5-快速排序">7.3.5 快速排序</h4><p>快速排序是对冒泡排序的一种改进，其<strong>基本思想设计</strong>:通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另一部分的所有数据都要小，然后按照次方法对这两部分数据分别进行快速排序，整个排序过程都可以递归进行，依此达到整个数据变成有序序列。</p><ol><li>快速排序，在序列中找一个基准数，然后将所有比基数小的放到基数的左边，所有比基数大的数放到基准数的右边。然后再对左右两个子序列重复这个过程，知道序列中所有的数都排序好。</li><li>我的理解，找到一个中位数，比中位数小的放左边，比中位数大的放右边，直到所有的数都排好序为止。</li></ol><p>快速排序的思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int [] arr = &#123;-9,78,0,23,-567,70&#125;;</span></span><br><span class="line"><span class="type">int</span> [] arr = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">80000</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">80000</span> ; i ++) &#123;</span><br><span class="line">arr[i] = (<span class="type">int</span>)(Math.random() * <span class="number">80000</span>); <span class="comment">//生成一个[0,80000)的随机数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//输出一个日期格式</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> simpleDateFormat.format(date1);</span><br><span class="line">System.out.println(<span class="string">&quot;排序前的时间为=&quot;</span> + dateStr);</span><br><span class="line"></span><br><span class="line">quickSort(arr, <span class="number">0</span>,arr.length - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//shellSort(arr);</span></span><br><span class="line"><span class="comment">//测试冒泡排序</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">dateStr2</span> <span class="operator">=</span> simpleDateFormat.format(date2);</span><br><span class="line">System.out.println(<span class="string">&quot;输出排序后的时间&quot;</span> + dateStr2);</span><br><span class="line"><span class="comment">//System.out.println(&quot;arr:&quot; + Arrays.toString(arr));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序总代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> [] arr ,<span class="type">int</span> left,<span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> left;<span class="comment">//左下标</span></span><br><span class="line"><span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> right ;<span class="comment">// 右下标</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// pivot 中值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[(left + right) /<span class="number">2</span> ];</span><br><span class="line"><span class="comment">//while循环的目的是让pivot值小放到右边</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line"><span class="keyword">while</span>(arr[l] &lt; pivot) &#123;</span><br><span class="line">l += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在pivot的右边一直找，找到小于等于pivot值，才退出</span></span><br><span class="line"><span class="keyword">while</span>(arr[r] &gt; pivot) &#123;</span><br><span class="line">r -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果 l &gt;= r 说明pivot的左右两边的值,已经按照左边全部是</span></span><br><span class="line"><span class="comment">//小于等于pivot值，右边全部是大于等于pivot的值</span></span><br><span class="line"><span class="keyword">if</span>( l &gt;= r) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换</span></span><br><span class="line">temp = arr[l];</span><br><span class="line">arr[l] = arr[r];</span><br><span class="line">arr[r] = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果交换完后，发现这个arr[l] == pivot值相等 -- ，前移</span></span><br><span class="line"><span class="keyword">if</span>(arr[l] == pivot) &#123;</span><br><span class="line">r -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果交换完后，发现这个arr[r] == pivot值相等 l ++ ,后移</span></span><br><span class="line"><span class="keyword">if</span>(arr[r] == pivot) &#123;</span><br><span class="line">l += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果l == r,必须l++,r-- ,否则出现栈溢出</span></span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">l += <span class="number">1</span>;</span><br><span class="line">r -= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向左递归</span></span><br><span class="line"><span class="keyword">if</span>(left &lt; r) &#123;</span><br><span class="line">quickSort(arr, left, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向右递归</span></span><br><span class="line"><span class="keyword">if</span>(right &gt; l) &#123;</span><br><span class="line">quickSort(arr, l, right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-6-归并排序">7.3.6 归并排序</h4><p>归并排序是一种分治算法。</p><p>它的基本思想是将两个已经排序的序列合并成一个序列。具体来说，<strong>就是将一个序列分成两个子序列，然后对这两个子序列分别进行排序，最后将排好序的两个子序列合并成一个有序序列。</strong></p><p>归并排序的过程可以分为两个步骤：<strong>分解和合并</strong>。</p><p>在分解步骤中，我们将序列不断分解成更小的子序列，直到每个子序列只包含一个元素。这时，每个子序列都是有序的。</p><p>在合并步骤中，<strong>我们将两个有序的子序列合并成一个有序的序列</strong>。具体来说，我们从两个子序列的开头开始比较它们的元素，每次取出较小的元素放入结果序列中，并将指向该元素的指针后移一位。重复这个过程，直到其中一个子序列为空。然后再将另一个子序列中剩余的元素全部放入结果序列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergetSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="type">int</span> arr [] = &#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span> temp [] = <span class="keyword">new</span> <span class="title class_">int</span> [arr.length] ;<span class="comment">//归并排序需要一个额外空间</span></span><br><span class="line">mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, temp);</span><br><span class="line">System.out.println(<span class="string">&quot;归并排序后 = &quot;</span> + Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分+和的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span> [] arr,<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> [] temp)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) /<span class="number">2</span> ;<span class="comment">//中间索引</span></span><br><span class="line"><span class="comment">//向左递归进行分解</span></span><br><span class="line">mergeSort(arr, left, mid, temp);</span><br><span class="line"><span class="comment">//向右递归进行分解</span></span><br><span class="line">mergeSort(arr, mid+<span class="number">1</span>, right, temp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//到合并</span></span><br><span class="line">merget(arr, left, mid, right, temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并的方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 排序的原始数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left 左边有序序列的初始索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid 中间索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> temp 做中转的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merget</span><span class="params">(<span class="type">int</span> [] arr, <span class="type">int</span> left , <span class="type">int</span> mid, <span class="type">int</span> right, <span class="type">int</span> [] temp)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; <span class="comment">//初始化i,左边有序序列的初始索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>;  <span class="comment">//初始化j,右边有序序列的初始索引</span></span><br><span class="line"><span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//（1）</span></span><br><span class="line"><span class="comment">//先把左右两边的(有序)的数据按照规则填充到temp数组</span></span><br><span class="line"><span class="comment">//直到左右两边的有序序列，有一边处理完毕为止</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right) &#123;  <span class="comment">//继续</span></span><br><span class="line"><span class="comment">//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素</span></span><br><span class="line"><span class="comment">//即将左边的当前元素，拷贝到temp数组</span></span><br><span class="line"><span class="comment">//然后</span></span><br><span class="line"><span class="keyword">if</span>(arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">temp [t] = arr[i];</span><br><span class="line">t += <span class="number">1</span>;</span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//反之，将右边的有序序列的当前元素，填充到temp数组</span></span><br><span class="line">temp[t] = arr[j];</span><br><span class="line">t += <span class="number">1</span>;</span><br><span class="line">j += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(2) 把有剩余数据的一边的数据依次全部填充到temp</span></span><br><span class="line"><span class="keyword">while</span>(i &lt;= mid) &#123; <span class="comment">//左边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class="line">temp[t]  = arr[i];</span><br><span class="line">t += <span class="number">1</span>;</span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(j &lt;= right) &#123; <span class="comment">//右边的有序序列还有剩余的元素，就全部填充到temp中</span></span><br><span class="line">temp[t] = arr[j];</span><br><span class="line">t += <span class="number">1</span>;</span><br><span class="line">j += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(3)将temp数组的元素拷贝到arr</span></span><br><span class="line"><span class="comment">//注意，并非每次都拷贝所有</span></span><br><span class="line"> t = <span class="number">0</span>;</span><br><span class="line"> <span class="type">int</span> <span class="variable">tempLeft</span> <span class="operator">=</span> left;</span><br><span class="line"> System.out.println(<span class="string">&quot;tempLeft=&quot;</span> + tempLeft + <span class="string">&quot;,right=&quot;</span> + right);</span><br><span class="line"> <span class="keyword">while</span>(tempLeft &lt;= right) &#123;  </span><br><span class="line"> <span class="comment">////第一次合并tempLeft = 0,right = 1// tempLeft = 2  right = 3;// tL = 0,right = 3</span></span><br><span class="line"> <span class="comment">//最后一次，tL = 0,right = 7;</span></span><br><span class="line"> arr[tempLeft] = temp[t];</span><br><span class="line"> t += <span class="number">1</span>;</span><br><span class="line"> tempLeft += <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在经过时间测试我们发现其速度很快。</p><h4 id="7-3-7-基数排序">7.3.7 基数排序</h4><ol><li>基数排序属于一种分配式排序，又称为桶子法，bin sort ，顾名思意，是通过键值的各个位的值，将要排序的元素分配到某些桶中，达到排序的作用。</li><li>基数排序是一种稳定的排序，基数排序法的是效率高的稳定性排序法</li><li>基数排序是桶排序的扩展</li><li>基数排序起源于1887年赫尔曼.何乐礼发明的，将整数按照位数切割成不同的数字，然后按每个位数分别比较。</li><li>所有待比较数值统一为同样的数位长度，<strong>数位较短的数前面补零</strong>。然后，<strong>从最低位开始</strong>，依次进行一次排序。这样从<strong>最低位排序一直到最高位排序完成以后</strong>, 数列就变成一个有序序列</li></ol><p>思路：</p><ol><li>使用基数排序，进行升序排序</li><li>将每个元素的各位数取出，然后看这个数应该放在哪个对应的桶</li><li>按照这个桶的顺序(一维数组的下标取出数据，放入原来数组）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr=&#123;<span class="number">53</span>, <span class="number">3</span>, <span class="number">542</span>, <span class="number">748</span>, <span class="number">14</span>, <span class="number">214</span>&#125;;</span><br><span class="line">bucketSort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bucketSort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个一维数组，得到每个下标下的个数</span></span><br><span class="line"><span class="type">int</span>[] bucketRecord=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//定义桶空间，初始化二维数组</span></span><br><span class="line"><span class="type">int</span>[][] bucket=<span class="keyword">new</span> <span class="title class_">int</span>[arr.length][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//个位数的下标</span></span><br><span class="line"><span class="type">int</span> sub=arr[i]/<span class="number">1</span>%<span class="number">10</span>;</span><br><span class="line"><span class="comment">//给桶里面赋值</span></span><br><span class="line">bucket[bucketRecord[sub]][sub]=arr[i];</span><br><span class="line"><span class="comment">//并且记录当前桶里面元素个数，加1</span></span><br><span class="line">bucketRecord[sub]= bucketRecord[sub]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排列各个桶，从第一列开始</span></span><br><span class="line"><span class="comment">//第1轮</span></span><br><span class="line"><span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketRecord.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketRecord[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketRecord[i]; j++) &#123;</span><br><span class="line">arr[index++]=bucket[j][i];</span><br><span class="line">bucket[j][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">bucketRecord[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;第1次排序后得到的结果：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第2轮</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//十位数的下标</span></span><br><span class="line"><span class="type">int</span> sub=arr[i]/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line"><span class="comment">//给桶里面赋值</span></span><br><span class="line">bucket[bucketRecord[sub]][sub]=arr[i];</span><br><span class="line"><span class="comment">//并且记录当前桶里面元素个数，加1</span></span><br><span class="line">bucketRecord[sub]= bucketRecord[sub]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排列各个桶，从第一列开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketRecord.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketRecord[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketRecord[i]; j++) &#123;</span><br><span class="line">arr[index++]=bucket[j][i];</span><br><span class="line">bucket[j][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">bucketRecord[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;第2次排序后得到的结果：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第3轮</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//百位数的下标</span></span><br><span class="line"><span class="type">int</span> sub=arr[i]/<span class="number">100</span>%<span class="number">10</span>;</span><br><span class="line"><span class="comment">//给桶里面赋值</span></span><br><span class="line">bucket[bucketRecord[sub]][sub]=arr[i];</span><br><span class="line"><span class="comment">//并且记录当前桶里面元素个数，加1</span></span><br><span class="line">bucketRecord[sub]= bucketRecord[sub]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排列各个桶，从第一列开始</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketRecord.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketRecord[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketRecord[i]; j++) &#123;</span><br><span class="line">arr[index++]=bucket[j][i];</span><br><span class="line">bucket[j][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">bucketRecord[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">index=<span class="number">0</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;第3次排序后得到的结果：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用for循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr=&#123;<span class="number">53</span>, <span class="number">3</span>, <span class="number">542</span>, <span class="number">78</span>, <span class="number">14</span>, <span class="number">214</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">56</span>,<span class="number">66</span>,<span class="number">70</span>&#125;;</span><br><span class="line">bucket(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxLength</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line"><span class="type">int</span> max=arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (max&lt;arr[i])&#123;</span><br><span class="line">max=arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> length=(max+<span class="string">&quot;&quot;</span>).length();</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bucket</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line"><span class="comment">//定义一个二维数组作为桶</span></span><br><span class="line"><span class="type">int</span>[][] bucket=<span class="keyword">new</span> <span class="title class_">int</span>[arr.length][<span class="number">10</span>];</span><br><span class="line"><span class="comment">//每一个桶里面有几个元素</span></span><br><span class="line"><span class="type">int</span>[] bucketRecord=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> maxLength(arr);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">0</span>, n=<span class="number">1</span>; z &lt; length; n=n*<span class="number">10</span>,z++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//个位数的下标</span></span><br><span class="line"><span class="type">int</span> sub=arr[i]/n%<span class="number">10</span>;</span><br><span class="line"><span class="comment">//给桶里面赋值</span></span><br><span class="line">bucket[bucketRecord[sub]][sub]=arr[i];</span><br><span class="line"><span class="comment">//并且记录当前桶里面元素个数，加1</span></span><br><span class="line">bucketRecord[sub]= bucketRecord[sub]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排列各个桶，从第一列开始</span></span><br><span class="line"><span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketRecord.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (bucketRecord[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; bucketRecord[i]; j++) &#123;</span><br><span class="line">arr[index++]=bucket[j][i];</span><br><span class="line">bucket[j][i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">bucketRecord[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+z+<span class="string">&quot;次排序后得到的结果：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基数排序是对传统桶排序的扩展，<strong>速度很快</strong>.</p><p>基数排序是经典的空间换时间的方式，<strong>占用内存很大</strong>, 当对海量数据排序时，容易造<strong>OutOfMemoryError</strong> 基数排序<strong>时稳定的</strong>。</p><p>[注:假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的] 有负数的数组</p><h4 id="7-3-8-堆排序">7.3.8 堆排序</h4><h2 id="8-查找">8. 查找</h2><h3 id="8-1-线性查找">8. 1 线性查找</h3><p>很简单的查找方式,通过逐一比对，得到目标值，然后呢返回下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqSearch</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> [] arr = &#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">434</span>,<span class="number">55</span>,<span class="number">0</span>,<span class="number">23</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> seqSearch(arr,<span class="number">55</span>);</span><br><span class="line">        <span class="keyword">if</span>(index == -<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;没有查找到&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到了，下标为：&quot;</span> + index);</span><br><span class="line">System.out.println(<span class="string">&quot;此时输出的结果为：&quot;</span> + arr[index]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">seqSearch</span><span class="params">(<span class="type">int</span> [] arr ,<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arr.length ; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value == arr[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-二分查找">8.2 二分查找</h3><ol><li>确定数中间的下标 mid = (right + left) / 2;</li><li>然后让需要查找的数findValue和arr[mid] 比较<ol><li>findVal &gt; arr[mid]，说明你要查找的数，在mid的右边，因此需要递归的向右查找</li><li>如果findVal &lt; arr[mid],说明你要查找的数在mid的左边，因此需要递归的向左边查找</li><li>findVal == arr[mid] 说明找到，就返回</li></ol></li><li>什么时候我们需要结束递归<ol><li>找到就结束递归</li><li>递归完整整个数组，仍然没有找到findVal，也需要结束递归，当left &gt; right就需要退出</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> [] arr = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">resIndex</span> <span class="operator">=</span> binarySearch(arr, <span class="number">0</span>, arr.length -<span class="number">1</span>, <span class="number">78</span>);</span><br><span class="line"><span class="keyword">if</span>(resIndex == -<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;此时没找到&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;找到了，其下标为：&quot;</span> + resIndex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找算法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  左边的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右边的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findVal 要查询的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果杂找到就返回下标，如果没找到就返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> [] arr ,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span> findVal)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里有个bug ，如果找不到值，那么递归就不会种植导致异常</span></span><br><span class="line"><span class="keyword">if</span>(left &gt; right) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">midVal</span> <span class="operator">=</span> arr[mid];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(findVal &gt; midVal) &#123;  <span class="comment">//向右递归</span></span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, mid +<span class="number">1</span>, right, findVal);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(findVal &lt; midVal)&#123; <span class="comment">//向左递归</span></span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：</p><p>当一个有序数组中，有多个相同的数据时，如果将所有的数值都查找到，比如这里的1000</p><p>arr={12,23,34,44,45,46,46,46,47,48};</p><ol><li>在找到mid索引值，不要马上返回</li><li>向mid索引值的左边扫描，将所有满足46的元素的下标，加入到arrayList</li><li>向mid索引值的右边扫描，将所有满足46的元素的下标，加入到arrayList</li><li>将ArrayList返回</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> [] arr = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">24</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int resIndex = binarySearch(arr, 0, arr.length -1, 12);</span></span><br><span class="line"><span class="comment">if(resIndex == -1) &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;此时没找到&quot;);</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">System.out.println(&quot;找到了，其下标为：&quot; + resIndex);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BinarySearch2(arr, <span class="number">0</span>, arr.length -<span class="number">1</span>, <span class="number">12</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二分查找算法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> left  左边的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> right 右边的索引</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findVal 要查询的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果杂找到就返回下标，如果没找到就返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> [] arr ,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span> findVal)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里有个bug ，如果找不到值，那么递归就不会种植导致异常</span></span><br><span class="line"><span class="keyword">if</span>(left &gt; right) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">midVal</span> <span class="operator">=</span> arr[mid];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(findVal &gt; midVal) &#123;  <span class="comment">//向右递归</span></span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, mid +<span class="number">1</span>, right, findVal);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(findVal &lt; midVal)&#123; <span class="comment">//向左递归</span></span><br><span class="line"><span class="keyword">return</span> binarySearch(arr, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找有多个相同数值的全部返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">BinarySearch2</span><span class="params">(<span class="type">int</span>[] array,<span class="type">int</span> left,<span class="type">int</span> right, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">ArrayList&lt;Integer&gt; resIndexlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(value &lt; array[mid]) &#123;</span><br><span class="line">BinarySearch2(array,left,mid-<span class="number">1</span>,value);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &gt; array[mid]) &#123;</span><br><span class="line">BinarySearch2(array,mid+<span class="number">1</span>,right,value);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(mid);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> mid -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(temp &lt; <span class="number">0</span> ||array[temp]!= value) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">resIndexlist.add(temp);</span><br><span class="line">temp--;</span><br><span class="line">&#125;</span><br><span class="line">resIndexlist.add(mid);</span><br><span class="line"></span><br><span class="line">temp = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(array[temp]!= value || temp &gt; array.length-<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">resIndexlist.add(temp);</span><br><span class="line">temp++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(resIndexlist.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//return resIndexlist.toString();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="8-3-差值查找">8.3  差值查找</h3><p>差值查找算法是在二分查找算法的基础上进行进一步进行的，其是在二分查找的基础上做了一点小小的优化，其基本思路是将原先公式1的方式变成公式2的方式，由于其取中点值的方式不同，造成其效率也不同，</p><p>$$<br>公式1 ： mid = (low+hight)/2 = low + (hight - low)/2<br>$$</p><p>$$<br>公式2： mid = low + (high - low)*( (key - a[low]))/(a[hight] - a[low])<br>$$</p><p>由于二分查找需要的条件将数组进行有序排列，故而再在此low代表左边，hight代表右边。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterpolationSearch</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;======== 差值查找分布略微不均匀数组 ===========&quot;</span>);</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span> ,<span class="number">4</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">27</span>, <span class="number">49</span>, <span class="number">128</span>, <span class="number">157</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> interpolationSearch(arr, <span class="number">9</span>, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">System.out.println(result==-<span class="number">1</span>?<span class="string">&quot;未找到元素！&quot;</span>:<span class="string">&quot;查找成功！&quot;</span> + <span class="number">9</span> + <span class="string">&quot;对应下标： &quot;</span> + result);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;======== 差值查找分布均匀数组 ===========&quot;</span>);</span><br><span class="line"><span class="type">int</span> arr1[] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span> ,<span class="number">20</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> interpolationSearch(arr1, target, <span class="number">0</span>, arr1.length - <span class="number">1</span>);</span><br><span class="line">System.out.println(result1==-<span class="number">1</span>?<span class="string">&quot;未找到元素！&quot;</span>:<span class="string">&quot;查找成功！&quot;</span> + target + <span class="string">&quot;对应下标： &quot;</span> + result1);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;======== 差值查找分布极其不均匀数组 ===========&quot;</span>);</span><br><span class="line"><span class="type">int</span> arr2[] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,<span class="number">99999</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">target2</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> interpolationSearch(arr2, target2, <span class="number">0</span>, arr2.length - <span class="number">1</span>);</span><br><span class="line">System.out.println(result2==-<span class="number">1</span>?<span class="string">&quot;未找到元素！&quot;</span>:<span class="string">&quot;查找成功！&quot;</span> + target2 + <span class="string">&quot;对应下标： &quot;</span> + result2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">interpolationSearch</span><span class="params">(<span class="type">int</span> []arr, <span class="type">int</span> target ,<span class="type">int</span> left , <span class="type">int</span> right)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(target &lt; arr[left] || target &gt; arr[right] || left &gt; right) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">leftToTarget</span> <span class="operator">=</span> target - arr[left];</span><br><span class="line"><span class="type">int</span> <span class="variable">rightToLeft</span> <span class="operator">=</span> arr[right] - arr[left];</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> right - left;</span><br><span class="line"><span class="comment">//中间的值的下标，注意此行与二分查找的区别</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span>  <span class="operator">=</span> left + (leftToTarget * num) /rightToLeft;</span><br><span class="line">System.out.println(<span class="string">&quot;找了一次，中间值为：&quot;</span> + mid);</span><br><span class="line"><span class="comment">//目标值小于中间值， 取得左侧</span></span><br><span class="line"><span class="keyword">if</span>(arr[mid] &gt; target &amp;&amp; left &lt;= right) &#123;</span><br><span class="line"><span class="comment">//递归左侧</span></span><br><span class="line"><span class="keyword">return</span> interpolationSearch(arr, target, left, mid - <span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &lt; target &amp;&amp; left &lt;= right) &#123;</span><br><span class="line"><span class="comment">//目标值大于中间的值取得右侧，并且递归</span></span><br><span class="line"><span class="keyword">return</span> interpolationSearch(arr, target, mid + <span class="number">1</span>, right);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不大于也不小于 则是等于</span></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-斐波那契查找">8.4 斐波那契查找</h3><p>斐波那契查找算法，又被称为黄金分割法，是一种有序的查找算法。斐波那契数列被称为黄金分割数列，其数列如： 1,1,2,3,5,8,13,31…。在数学上，其递归方法被定义为<br>$$<br>F(n) = F(n-1) + F(n - 2) (n&gt;=2).<br>$$<br>该数列越往后的两个数的比值趋向于黄金比例0.618</p><p><strong>斐波那契查找是在二分查找的基础上根据斐波那契数列进行分割</strong>。在斐波那契数列找一个等于大于查找表中元素个数的数F(n),将原查找表扩展为长度为F(n)(如果要补充元素，则补充重复最后一个元素，直到满足F(n)个元素)，完成后进行斐波那契分割，<strong>即F[n]个元素分割为前半部分F(n-1)个元素，后半部分F(n-2)个元素，找出要查找的元素在那一部分并递归</strong>，直到找到。<strong>斐波那契查找的时间复杂度是O(log2n)</strong>。</p><blockquote><p>1）由斐波那契数列 F[k]=F[k-1]+F[k-2] 的性质，可以得到 （F[k]-1）=（F[k-1]-1）+（F[k-2]-1）+1 。该式说明：只要顺序表的长度为F[k]-1，则可以将该表分成长度为F[k-1]-1和F[k-2]-1的两段，即如上图所示。从而中间位置为mid=low+F(k-1)-1；</p><p>2）每一子段也可以用相同的方式分割；</p><p>3）若顺序表长度n不一定刚好等于F[k]-1，则需要将原来的顺序表长度n增加至F[k]-1。这里的k值只要能使得F[k]-1恰好大于或等于n即可。</p></blockquote><p>例如：原数组为{1,5,6,33,55,233,455}，长度n为7，若 F[ k ] - 1等于9，则应该将原数组扩容到9，多出的位置使用high位置的455填充，即得到{1,5,6,33,55,233,455,455,455}。</p><p>代码实现</p><blockquote><p>（1）我们需要先递归实现斐波拉契数列，然后根据原数组的大小计算斐波拉契数列的k值；</p><p>（2）数组扩容条件是：<strong>增大 k 值（索引从 0 开始），使得数组长度刚好大于或者等于斐波那契数列中的 F[k]-1 ，我们定义临时数组 temp ，temp 后面为 0 的元素都按照数组最大元素值填充</strong>；</p><p>（3）mid值的确定：<strong>mid = low + f[k - 1] - 1</strong> ，即用黄金分割点确定 mid 的值；</p><p>（4）<strong>value&lt;temp[mid]</strong> ：目标值在黄金分割点的左边，因为全部元素 = 前面的元素 + 后边元素即 f[k] = f[k-1] + f[k-2]，又前面有 f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2] + f[k-3]，即下次循环有mid=low+f[k-1-1]+1，即需要<strong>k-=1</strong>；</p><p><strong>value&gt; temp[mid]</strong> ：目标值在黄金分割点的右边。因为全部元素 = 前面的元素 + 后边元素即 f[k] = f[k-1] + f[k-2]，又前面有 f[k-2]个元素,所以可以继续拆分 f[k-1] = f[k-3] + f[k-4]，即下次循环有mid=low+f[k-1-2]+1，即需要<strong>k-=2</strong>；</p><p>**value== temp[mid] ：**找到目标值，因为数组经历过扩容，后面的值其实有些是多余的，mid 可能会越界（相对于原数组来说）则有： 1）<strong>mid &lt;= high ：证明 mid 索引在原数组中，返回 mid</strong>； 2）<strong>mid &gt; high 时，证明 mid 索引已经越界（相对于原数组来说），返回 high</strong>；</p><p>（5）若没有找到则返回-1。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FibonacciSearch</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> arr[] = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">33</span>,<span class="number">55</span>,<span class="number">233</span>,<span class="number">455</span>&#125;;</span><br><span class="line">Arrays.sort(arr); <span class="comment">//既然是二分查找衍生出来的，那么就需要先对数组排序，无论数组是否排好序，这样做总共是一种方式</span></span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">55</span>;<span class="comment">//要查找的值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> fibonacciSearch(arr, value);</span><br><span class="line">System.out.println(temp == -<span class="number">1</span> ? <span class="string">&quot;没找到你所要的值，可能你要查找的值并不在斐波那契数列之中,你要查找的值为:&quot;</span>+value :<span class="string">&quot;您查找的值为&quot;</span>+value+<span class="string">&quot;其下标为&quot;</span>+temp );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">//斐波那契数列的大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> [] fibonacci() &#123; <span class="comment">//构建一个斐波那契数列</span></span><br><span class="line"><span class="type">int</span>[] fib = <span class="keyword">new</span> <span class="title class_">int</span> [maxSize];</span><br><span class="line">fib[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">fib[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; maxSize ; i++ ) &#123;</span><br><span class="line">fib[i] = fib[i - <span class="number">1</span>] + fib [i -<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fib;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacciSearch</span><span class="params">(<span class="type">int</span> [] arr ,<span class="type">int</span> value )</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//指针low表示待查元素所在范围的下界，下界索引从0开始</span></span><br><span class="line"><span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span> ; <span class="comment">//指针high表示待查元素所在范围的上界</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span> ;<span class="comment">// 表示斐波那契分割数值的下标</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> fib[] = fibonacci(); <span class="comment">//获取到斐波那契数列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(high &gt; fib[k] - <span class="number">1</span>) &#123;<span class="comment">//获取到斐波那契分割数值的下标</span></span><br><span class="line">k ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为f[k]值，可能大于a的长度，因此我们需要使用Arrays.copyOf方法，构造一个新的数组，并指向temp[]</span></span><br><span class="line"><span class="type">int</span> [] temp = Arrays.copyOf(arr, fib[k]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> high + <span class="number">1</span>; i &lt; temp.length ; i++ ) &#123;</span><br><span class="line"><span class="comment">//使用arr数组最后的数填充temp</span></span><br><span class="line">temp[i] = arr[high];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">mid = low + fib[k - <span class="number">1</span>] -<span class="number">1</span>; <span class="comment">//斐波那契中值公式</span></span><br><span class="line"><span class="keyword">if</span>(value &lt; temp[mid]) &#123;</span><br><span class="line"><span class="comment">//关键子值小于中间值，应该向左扫描即使high = mid - 1</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">k -= <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(value &gt; temp[mid]) &#123; <span class="comment">//关键字值大于中间值，应该向右扫描，即使low = mid + 1</span></span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">k -= <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123; <span class="comment">//找到时需要返回哪个下标</span></span><br><span class="line"><span class="keyword">if</span>(mid &lt;= high) &#123; <span class="comment">//证明mid索引在原数组中，返回mid</span></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//证明mid索引已经越界（相对于原数组来说），返回high</span></span><br><span class="line"><span class="keyword">return</span> high;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> - <span class="number">1</span>; <span class="comment">//没有找到即返回 - 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装纪录</title>
      <link href="/posts/c0b97cce.html"/>
      <url>/posts/c0b97cce.html</url>
      
        <content type="html"><![CDATA[<h1>Vue安装和学习</h1><p><code>npm install</code></p><p><code>npm run  dev</code></p><h2 id="克隆项目">克隆项目</h2><p>git clone <a href="https://github.com/daxiongYang/renren-fast-vue.git">https://github.com/daxiongYang/renren-fast-vue.git</a></p><h2 id="安装依赖">安装依赖</h2><ol><li><p>npm install -g cnpm --registry=https://registry.npm.taobao.org</p></li><li><p>cnpm install</p></li></ol><h2 id="启动服务">启动服务</h2><p>npm run dev</p><hr><p>项目配置  ：  1 链接数据库  开启虚拟机<br>2 开启nocas<br>3 开启 vue 后端管理界面 npm run dev<br>4</p><p>vue 前端登录  admin admin</p><p>nacos  登录  nacos  nacos</p><h2 id="Vue卸载">Vue卸载</h2><blockquote><p>官方解释<br>关于旧版本</p><p>Vue CLI 的包名称由 vue-cli 改成了 @vue/cli。 如果你已经全局安装了旧版本的 vue-cli (1.x 或 2.x)，你需要先通过 npm uninstall vue-cli -g 或 yarn global remove vue-cli 卸载它。</p><p>这是vue-cli 3.0版本的卸载</p><p>小编之前没注意 每次卸载 不知道怎么回事老是卸载不了，因为小编一开始就安装的最新版本，几乎都是4.xx的</p><p>后来各种百度 终于知道了</p><p><a href="//xn--3-zx8au75p.xn--0-bs6a41kww2ajwm24f">//卸载3.0之前的版本</a><br><code>npm uninstall -g vue-cli</code><br><code>yarn global remove vue-cli</code></p><p><a href="//xn--3-zx8au75p.xn--0-bs6a77pl5wjwm24f">//卸载3.0之后的版本</a>（可以统一使用此指令卸载）<br><code>npm uninstall -g @vue/cli</code><br><code>yarn global remove @vue/cli</code></p><p>安装<br>然后是安装，小编是看教程在学习 之前没注意版本号，各种对不上教程。终于注意到了 教程是3.3.0 也是各种百度 怎么都安装不上<br>之前百度到这个：</p><p><a href="//xn--2-zb2b494k.9.xn--6-856b314a">//安装2.9.6版本</a><br>npm install -g vue-cli@2.9.6<br>yarn global add vue-cli</p></blockquote><p>Vue模块化开发:</p><ol><li><pre><code class="language-vue">npm install webpack -g<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    全局安装</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. ```</span><br><span class="line">   npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure>全局安装vue脚手架</code></pre></li><li><p>初始化vue项目</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack appname : <span class="type">vue</span> 脚手架使用webpack模块初始化一个appname(自己定义的)项目</span><br></pre></td></tr></table></figure></li><li><p><code>cd vue-demo</code></p></li><li><p><code>npm run dev </code></p></li></ol><h2 id="vue引入Element-ui获取最新版本的资源，在页面上引入js和css文件即可开始使用">vue引入Element-ui获取最新版本的资源，在页面上引入js和css文件即可开始使用</h2><blockquote><p>npm  i element-ui -s</p></blockquote><p>然后main.js导入</p><p><code>import ElementUI from 'element-ui'</code>   //导入vue前端Element框架</p><p><code>import 'element-ui/lib/theme-chalk/index.css';</code></p><p>Vue.use(ElementUI);</p><p><code>alt + shift + f自动对齐（VSCode）</code></p><h1>Docker安装和相关配置</h1><p>在安装docker之前我们需要准备yum工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新本地镜像源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后输入安装docker命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关闭防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止开机启动防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>通过命令启动docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker  # 启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl stop docker  # 停止docker服务</span><br><span class="line"></span><br><span class="line">systemctl restart docker  # 重启docker服务</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置镜像加速">配置镜像加速</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://vwesipli.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>s</p><blockquote><p>docker -v  --查看docker版本<br>docker images --查看当前docker运行<br>sudo systemctl start docker --启动docker 在虚拟机里边<br>docker images  --有时候权限不足   我们变为  sudo  docker images 检查我们虚拟机里边有无下载镜像<br>sudo systemctl enable docker      --设置开机自启动<br>docker 配置镜像加速<br>1sudo mkdir -p /etc/docker<br>2sudo tee /etc/docker/daemon.json &lt;&lt;-‘EOF’<br>{<br>“registry-mirrors”: [“<a href="https://dcyzi7af.mirror.aliyuncs.com">https://dcyzi7af.mirror.aliyuncs.com</a>”]<br>}<br>EOF<br>3sudo systemctl daemon-reload<br>4sudo systemctl restart docker</p><p>docker指令安装mysql<br>1sudo docker pull mysql  --安装最新的mysql<br>2sudo docker pull mysql:版本号   我使用的是 mysql 8.0.2 --安装指定的版本号</p><h3 id="启动安装的镜像">启动安装的镜像</h3><p>比如启动 mysql:<br>docker run -p 3306:3306 --name mysql <br>-v /mydata/mysql/log:/var/log/mysql <br>-v /mydata/mysql/data:/var/lib/mysql <br>-v /mydata/mysql/conf:/etc/mysql <br>-e MYSQL_ROOT_PASSWORD=a <br>-d mysql:5.7</p></blockquote><p>运行mysql:</p><blockquote><p>docker run -p 3306:3306 --name mysql \</p><h2 id="v-mydata-mysql-log-var-log-mysql-v-mydata-mysql-data-var-lib-mysql-v-mydata-mysql-conf-etc-mysql-e-MYSQL-ROOT-PASSWORD-a-d-mysql-5-7">-v /mydata/mysql/log:/var/log/mysql <br>-v /mydata/mysql/data:/var/lib/mysql \<br>-v /mydata/mysql/conf:/etc/mysql \<br>-e MYSQL_ROOT_PASSWORD=a \<br>-d mysql:5.7</h2><h2 id="上边是mysql5-7的启动方式-d-代表以后台方式运行-p-3306-3306-将容器的3306端口映射到主机的3306">上边是mysql5.7的启动方式<br>-d 代表以后台方式运行<br>-p 3306:3306 将容器的3306端口映射到主机的3306</h2><pre><code>  -p 3306：3306； 将容器的3306端口映射到主机的3306端口  -v/mydata/mysgl/conf:/etc/mysgl  ：将配置文件夫挂载到主机  -v/mydata/mysgl/log:/var/log/mysgl  ：将日志文件夹挂载到主机  -w/mydata/mysgl/data:/var/lib/mysgl/  ，将配置文件夹挂载到主机  -e MYSQL_ROOT_PASSWORD=root           ：初始化root用户的密码</code></pre><hr><p>有时候切换权限麻烦 所有我们切换到<br>su root   --权限最高<br>docker ps --查看当前docker正在运行中的程序</p><p>docker run -dit -p 3306:3306 mysql:8.0.2 bash  --启动mysql 8.0.2</p><p>service mysql status     --查看mysql的状态<br>service mysql start      --启动mys</p><p>docker exec -it mysql /bin/bash  --进入mysql内部</p><p>whereis mysql<br>mysql: /usr/bin/mysql /usr/lib64/mysql /usr/share/mysql  /usr/share/man/man1/mysql.1.gz</p><hr></blockquote><p>docoker指令</p><blockquote><p>一、查看容器，复制容器id 即container id  <br>docker ps -a<br>二、停止容器<br>docker stop 你的容器id<br>三、删除容器<br>docker rm 容器id<br>四、查看镜像，复制镜像id即images id<br>docker images<br>五。删除镜像</p><p>docker rmi 镜像id</p></blockquote><blockquote><p>这是我装的<br>Mysql8.0安装</p></blockquote><blockquote><p>1、拉取mysql镜像</p><p>docker pull mysql:8.0</p></blockquote><blockquote><p>2.docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql</p><p>docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=a -d mysql</p></blockquote><blockquote><p>3.docker exec -it mysql /bin/bash</p></blockquote><blockquote><p>4.mysql -uroot -p123456</p></blockquote><blockquote><p>5.use mysql;</p></blockquote><blockquote><p>6.ALTER USER ‘root’@‘%’ IDENTIFIED BY ‘123456’ PASSWORD EXPIRE NEVER;</p></blockquote><blockquote><p>7.ALTER USER ‘root’@‘%’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</p></blockquote><blockquote><p>8.FLUSH PRIVILEGES;</p></blockquote><blockquote><p>9.修改密码<br>mysqladmin -uroot -p旧密码 password 新密码   --密码为 123456<br>注意一下我装的虚拟机端口号mysql为 3307</p></blockquote><blockquote><p>29adbe537c3e   mysql     “docker-entrypoint.s…”   52 minutes ago   Up 52 minutes   33060/tcp, 0.0.0.0:3307-&gt;3306/tcp, :::3307-&gt;3306/tcp   mysql</p><hr><p>首先进入</p><p>1、docker exec -it mysql bash      //mysql是mysql容器的别名</p><p>2、mysql -uroot -p</p><p>3、输入密码</p><p>4、进入mysql&gt;命令行界面</p><p>1,容器中登录mysql,查看mysql的版本</p><p>mysql&gt; status;</p><hr><p>mysql  Ver 8.0.11 for Linux on x86_64 (MySQL Community Server - GPL)</p><p>2,进行授权远程连接(注意mysql 8.0跟之前的授权方式不同)</p><p>授权</p><p>GRANT ALL ON <em>.</em> TO ‘root’@‘%’;</p><p>刷新权限</p><p>flush privileges;</p><p>此时,还不能远程访问,因为Navicat只支持旧版本的加密,需要更改mysql的加密规则</p><p>3,更改加密规则</p><p>ALTER USER ‘root’@‘localhost’ IDENTIFIED BY ‘a’ PASSWORD EXPIRE NEVER;</p><p>4,更新root用户密码</p><p>ALTER USER ‘root’@‘%’ IDENTIFIED WITH mysql_native_password BY ‘a’;</p><p>刷新权限</p><p>flush privileges;</p><p>OK，设置完成，再次使用 Navicat 连接数据库</p></blockquote><h3 id="下载redis">下载redis</h3><p><code>docker pull redis</code></p><p>创建实例并启动<br><code>mkdir -p /mydata/redis/conf     </code></p><p><code>touch redis.conf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line"></span><br><span class="line">   -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line"></span><br><span class="line">   -d redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ls   查看当前文件夹下的文件<br><code> cat redis.conf</code></p><p>测试redis</p><p><code>docker exec -it redis redis-cli</code></p><hr><p>由于以前的数据全存在内存中，从而我们重复读取get a的时候会导致失败<br>[root@localhost conf]# <code>cat redis.conf</code><br>[root@localhost conf]# <code>docker exec -it redis redis-cli</code><br>127.0.0.1:6379&gt;<code> set a b</code><br>OK<br>127.0.0.1:6379&gt; <code>get a</code><br>“b”   //从而在一次上来的时候这块是null<br>127.0.0.1:6379&gt; exit</p><p>–让redis 持久化  —&gt; pwd<br>127.0.0.1:6379&gt; exit<br>[root@localhost conf]# <code>pwd</code><br>/mydata/redis/conf<br>[root@localhost conf]# <code>ls</code><br>redis.conf<br>[root@localhost conf]# <code>vi redis.conf </code><br>按  <code>i</code><br>输入<code>appendonly yes</code><br>按<code>esc</code>  输入<code>:wq</code></p><p><code>docker restart redis  //重启redis</code><br>–设置开机自启动docker 里边容器<br><code>sudo docker update &lt;容器名&gt; --restart=always</code></p><h1>Linux指令</h1><p>whoami  --谁的账号</p><p>ls /    ----查看的当前运行的</p><p>~ 当前用户目录   /根目录    . 当前目录   … 上一级目录<br>$ 当前目录   # root  用户目录<br>创建目录 ： mkdir &lt;目录名&gt;<br>删除目录 ： rmdir &lt;目录名&gt;<br>删除 ： rm  -rf  &lt;目录或文件&gt;<br>移动 ： mv<br>创建文件：touch<br>打开文件： vi  进入文件编辑后 按ESC 然后输入：wq存并退出  ：q,不保存退出<br>查看文件内容 ： cat</p><p>exit;   — 退出</p><p>whoamis --当前是什么用户在使用</p><p>whereis mysql   --查看应用安装的目录 格式：  whereis 应用名</p><p>权限  二进制<br>r(4 100)  w(2  010)  x(1 001) 读 写 执行<br>chmod 授权给  例如 chmod  775  software</p><p>//安装ssh<br>sudo apt-get install openssh-server  sudo spt-get install ssh</p><h1>我的Spring Cloud的项目配置文件指令：</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine -s &quot;E:\SoftWaves\dicker&quot; create --engine-registry-mirror=https://dcyzi7af.mirror.aliyuncs.com -d virtualbox default</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6379:6379 redis:latest</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --hostname navy-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3.8.8-management</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器输入ip地址，进入rabbit管理界面： 192.168.99.100:15672</span><br></pre></td></tr></table></figure><p>rabbit 账号密码： guest  guest</p>]]></content>
      
      
      <categories>
          
          <category> 错误记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础面试题</title>
      <link href="/posts/df71ed7b.html"/>
      <url>/posts/df71ed7b.html</url>
      
        <content type="html"><![CDATA[<h3 id="java语言有哪些特征：">java语言有哪些特征：</h3><ol><li>简单易学，有丰富的类库</li><li>面向对象，高内聚低耦合</li><li>和平台无关性，可以做到一次编写永久使用（jvm则是java跨平台的根本）</li><li>安全可靠</li><li>支持多线程</li></ol><h3 id="面向对象和面向过程">面向对象和面向过程</h3><p>**面向过程：**分析解决问题的步骤，然后通过函数把这些步骤一步一步地实现，然后在使用的时候一一调用，性能搞，所有单片机，嵌入式开发一般采用面向过程开发。</p><p>**面向对象：**世上的万事万物皆可看做对象，将构成问题的事务分解成为各个对象，而建立对象的目的也不是完成一个个步骤，而是描述某事物在解决整个问题过程中所发生的行为。面向对象有三大特征，封装，继承，多态。故而更加容易维护，容易复用，容易拓展。可以设计出低耦合的系统，但从性能上讲，比面向过程要低。</p><h3 id="java8种数据类型">java8种数据类型</h3><hr><p>​int short byte long</p><p>字节                4                2                     1             8</p><p>默认值             0               0                     0             0L</p><p>封装类 Integer      Short           Byte Long</p><hr><p>​float double</p><p>字节               4                                 8</p><p>默认值             0.0f                           0.0d</p><p>封装类            Float                           Double</p><hr><p>​      boolean</p><p>字节            -</p><p>默认值          false</p><p>封装类          Boolean</p><hr><p>​       char</p><p>字节2</p><p>默认值                null</p><p>封装类      Character</p><p><strong>注意：</strong></p><ol><li>int 是基本数据类型，Integer是int的封装类，是引用类型，int默认值是0，而Integer默认值是null,所以Integer能区分出0和null的情况，一旦java看到null，这个引用还么指向某个对象，在任何引用使用前，必须为其指定一个对象，否则报错</li><li>基本数据类型，在声明之前系统会自动给他分空间而引用类型声明时知识分配了引用空间，必须通过该实例化开辟对象之后才能赋值，数据对象也是一个引用对象，将一个数组赋值给另一个数组时只是复制了一个引用，所以通过某一个数组所做的修改在另一个数组中也看得见。</li><li>虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在Java虚拟机中没有 任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java 虚拟机中的int数据类型来代替，而boolean数组将会被编码成Java虚拟机的byte数组，每个元素 boolean元素占8位。这样我们可以得出boolean类型占了单独使用是4个字节，在数组中又是1个字 节。使用int的原因是，对于当下32位的处理器（CPU）来说，一次处理数据是32位（这里不是指的 是32/64位系统，而是指CPU硬件层面），具有高效存取的特点。</li></ol><h3 id="instanceof关键字的作用">instanceof关键字的作用</h3><p>用来测试一个对象是否为一个类的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> obj <span class="keyword">instanceof</span> Class;</span><br></pre></td></tr></table></figure><p>obj为对象，Class表示一个类或者接口。当obj为Class对象或者是其直接或间接子类，或者是其接口的实现类，结果都是result返回为true，否则false;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">System.out.println(i <span class="keyword">instanceof</span> Integer);<span class="comment">//编译不通过 i必须是引用类型，不能是基本类型</span></span><br><span class="line">System.out.println(i <span class="keyword">instanceof</span> Object);<span class="comment">//编译不通过</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line">System.out.println(integer <span class="keyword">instanceof</span> Integer);<span class="comment">//true</span></span><br><span class="line"><span class="comment">//false ,在 JavaSE规范 中对 instanceof 运算符的规定就是：如果 obj 为 null，那么将返回 false。</span></span><br><span class="line">System.out.println(<span class="literal">null</span> <span class="keyword">instanceof</span> Object);</span><br></pre></td></tr></table></figure><h3 id="java自动装箱与拆箱">java自动装箱与拆箱</h3><p>装箱是自动将基本数据类型转换为包装类型（int -&gt; Integer ）;调用方法： Integer的valueOf(int)方法</p><p>拆箱就是自动将包装器数据类型转换为基本类型（Integer-&gt;int）。调用方法：Integer的intValue方法。</p><p>在javaSE5之前，如果要生成一个数值为10的Integer对象，必须要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>而在从java SE5开始就提供了自动装箱的特性，如果要生成一个数值为10的Integer对象，则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">sout(i1 == i2);<span class="comment">//true;</span></span><br><span class="line">sout(i3 == i4);<span class="comment">//true;</span></span><br></pre></td></tr></table></figure><p>归根结底</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(i &gt;= -<span class="number">128</span> &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line"> <span class="keyword">return</span> IntegerCache.cache[i + <span class="number">128</span>];</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>IntegerCache</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line"> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line"> <span class="comment">// high value may be configured by property</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"> <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line"> <span class="comment">// Use Long.decode here to avoid invoking methods that</span></span><br><span class="line"> <span class="comment">// require Integer&#x27;s autoboxing cache to be initialized</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Long.decode(integerCacheHighPropValue).intValue();</span><br><span class="line"> i = Math.max(i, <span class="number">127</span>);</span><br><span class="line"> <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line"> h = Math.min(i, Integer.MAX_VALUE - -low);</span><br><span class="line"> &#125;</span><br><span class="line"> high = h;</span><br><span class="line"> cache = <span class="keyword">new</span> <span class="title class_">Integer</span>[(high - low) + <span class="number">1</span>];</span><br><span class="line"> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line"> cache[k] = <span class="keyword">new</span> <span class="title class_">Integer</span>(j++);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">private</span> <span class="title function_">IntegerCache</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从这两段代码上可以看出，在通过valueOf方法创建Integer对象的时候，如果数值在[-128,127],之间便返回指向Integer.cache中已经存在的对象的引用，否则创建一个新的Integer对象。</p><p>上边的代码中i1和i2的数值为100，因此会从cache中读取已经存在的对象。所有i1和i2指向的是同一个对象，而i3和i4，分别指向的是不同的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main:</span><br><span class="line"><span class="type">Double</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">100.0</span>；</span><br><span class="line"><span class="type">Double</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100.0</span>；</span><br><span class="line"><span class="type">Double</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">200.0</span>；</span><br><span class="line"><span class="type">Double</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">200.0</span>；</span><br><span class="line">sout(i1 == i2);   <span class="comment">//false</span></span><br><span class="line">sout(i3 == i4);   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>原因在于在某个范围内的整型数值的个数是有限的，而浮点数不是。</p><h3 id="重载和重写">重载和重写</h3><p><strong>重写（Override）</strong>：顾名思义，重写就是重新写一遍的意思，其实急速在子类中把父类本身有的方法重写写一遍，子类继承了父类的原有的方法，单有时候子类并不想原封不动的继承父类的某个方法所以在方法名，参数列表，返回类型（除去子类中方法的返回值是父类中方法返回值的子类时）都在相同的情况下，对方法体进行修改或者重写，但是注意，子类函数的方法的访问修饰权限不能少于父类的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span>()&#123;</span><br><span class="line">    main:&#123;</span><br><span class="line">    <span class="type">Son</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    s.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">            sout(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        sout(<span class="string">&quot;Hello --by&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，重写</p><ol><li>发生在父类和子类之间.</li><li>方法名，参数，返回类型（除去子类方法的返回类型是父类中返回类型的子类）必须相同</li><li>访问修饰符的限制一定要大于被重写方法的访问修饰符（public &gt; protected &gt; default &gt; private ）</li><li>重写方法一定不能抛出新的检查异常或者比被重写的方法申明更加宽泛的检查型异常。</li></ol><p><strong>重载（Overload）</strong> ：同一个类下，同名的方法如果有不同的参数类型列表**（参数类型不同，参数个数不同甚至参数顺序不同）**则视为重载，同时，重载对返回类型没有要求，可以相同也可以不同，<strong>但不能通过返回类型是否相同来判断重载</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"> <span class="type">Father</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line"> s.sayHello();</span><br><span class="line"> s.sayHello(<span class="string">&quot;wintershii&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;Hello&quot;</span> + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重载：</strong></p><ol><li>重载是一个类中多态性的一种表现</li><li>重载要去方法名相同参数列表不同（参数类型，参数个数，甚至参数顺序）</li><li>重载的时候，返回值类型可以相同也可以不同，无法以返回型作为重载函数的区分标准。</li></ol><h3 id="equals-与-的区别">equals 与 == 的区别</h3><p><strong>==比较的是变量（栈）内存中存放对象的（堆）内存地址，用来判断两个对象的地址是否相同</strong>，也就是是否比较相同一个对象，比较的真正意义上的指针操作。</p><ol><li><p>比较的是操作符两端的操作数是否是同一个对象</p></li><li><p>两边的操作数必须是统一类型的（可以是父子类之间）才能编译通过。</p></li><li><p>比较的是地址，如果是具体的阿拉伯数字的比较，值相等就是true,如 int  a = 10 ,long b=10.0L ,double c = 10.0 都是相同的，因为他们都指向地址为10的堆；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"> <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10L</span>;</span><br><span class="line"> <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">10.0</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">//true</span></span><br><span class="line"> System.out.println(b==c);   <span class="comment">//true</span></span><br><span class="line">  System.out.println(a==c);  <span class="comment">//true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>equals</strong>:<strong>用来比较两个对象的内容是否相等</strong>，由于所有的类都是继承java.lang.Object类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object中的方法，而Object中的equals方法的返回确实==的判断。</p></li></ol><p><strong>总结</strong></p><p>所有的比较是否相等时，都是用equals并且对常量相比较时，把常量写在前面，因为使用object的equals object 可能为null则空指针。在阿里的代码规范中只使用equals ，阿里插件默认会识别，并可以快速修改，推荐安装阿里插件来 排查老代码使用“==”，替换成equals</p><h3 id="Hashcode的作用">Hashcode的作用</h3><p>java集合有两个类，一类是List，一类是Set，前者有序可重复，后者无序不重复，当我们在set中插入的时候怎么判断是否已经存在该元素呢？可以通过equals方法，如果元素太多，这样的方法比较满。</p><p>于是有人发明了哈希算法来提高集合中查找元素的效率，这种方式将集合分成若干个存储区域，每个对象可以计算出一个哈希码，可以将哈希码分组，每组分别对应某个存储区域，根据一个对象的哈希码就可以确定该对象应该存储的那个区域。</p><p>hashCode方法可以这样理解，他返回的就是更加对象的内存地址换算出的一个值，这样一来，当集合要添加新的元素的时，先调用这个元素的hashCode方法，就一下能定位到他应该放置的物理位置，如果这个位置上没有元素，就直接存储在这个位置上，不需要在进行任何比较；如果这个位置上已经存在元素，就调用equals方法与新元素比较，相同就不存，不相同就散列到其他地址，这样一来实际调用equals方法的次数就大大降低了几乎只需要一两次。</p><h3 id="String-StringBuffer和StringBuilder的区别">String,StringBuffer和StringBuilder的区别</h3><p>String 是只读字符串，由于被final修饰，故string不能被继承，他不是基本数据类型，而是一个对象，且底层源码是一个被final修饰的字符数组，所引用的字符串不能被改变，一经定义，无法再增删改，每次对string的操作都会造成一个新的string对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">string</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;b&quot;</span>;</span><br><span class="line"><span class="type">string</span> <span class="variable">c</span> <span class="operator">=</span> a + b;<span class="comment">//将会创建一个新的String c ,而String a,String b的值保持不变。</span></span><br></pre></td></tr></table></figure><p>每次+操作后：隐式在堆上new了一个跟原字符串相同的StringBuilder对象，在调用append方法拼接+后边的字符。</p><p>StringBuffer和StringBuilder他们两个都继承了AbstractStringBuilder对象。他们的底层都是可变的字符数组，另外StringBuffer对方法加了同步所或者对调用的方法加了同步锁，所以线程是安全的，StringBuilder并没有对方法进行同步锁，故而线程不安全的。</p><h3 id="ArrayList和LinkedList的区别">ArrayList和LinkedList的区别</h3><p>Array(数组)是基于索引（index）的数据结构，它使用索引在数组中搜索和读取数据是很快的。</p><p>Array获<strong>取数据的时间复杂度是O(1),但是删除数据开销却很大</strong>，因为这需要重排数组中所有的数据，（因为删除数据以后，需要把后边的所有数据前移）</p><p><strong>缺点：数组初始化必须指定初始化长度，否则报错。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];<span class="comment">//推介使用int[] 这种方式初始化</span></span><br><span class="line"><span class="type">int</span> c[] = &#123;<span class="number">23</span>,<span class="number">43</span>,<span class="number">56</span>,<span class="number">78</span>&#125;;<span class="comment">//长度：4，索引范围：[0,3]</span></span><br></pre></td></tr></table></figure><p><strong>List是一个有序的集合</strong>，可以包含重复的元素，提供了按索引访问的方式，它继承Collection。</p><blockquote><p>List有两个重要的实现类：<strong>ArrayList和LinkedList</strong></p><p><strong>ArrayList: 可以看作是能够自动增长容量的数组</strong></p><p><strong>ArrayList的toArray方法返回一个数组</strong></p><p><strong>ArrayList的asList方法返回一个列表</strong></p><p><strong>ArrayList底层的实现是Array, 数组扩容实现</strong></p></blockquote><p><strong>LinkList是一个双链表，在添加和删除元素时具有比ArrayList更好的性能，但在get和set方面弱于ArrayList.当然这些都是对比数据亮很大或者操作很频繁的情况下的。</strong></p><h3 id="String类常用对象方法有哪些？">String类常用对象方法有哪些？</h3><blockquote><p>indexOf(): 返回指定字符的索引</p><p>charAt():返回指定索引处的字符</p><p>replace():字符串替换</p><p>trim():去除字符串端空白</p><p>split():分割字符串，返回一个分割后的字符串数组</p><p>getBytes():返回字符串的byte类型数组</p><p>length():返回字符串长度</p><p>toLowerCase(): 将字符串转成小写字母</p><p>toUpperCase():将字符串转成大写字母</p><p>substring():截取字符串</p><p>equals():字符串比较</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的启动方式</title>
      <link href="/posts/9b1154cd.html"/>
      <url>/posts/9b1154cd.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 演示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3学习笔记和实例</title>
      <link href="/posts/174c6ef5.html"/>
      <url>/posts/174c6ef5.html</url>
      
        <content type="html"><![CDATA[<h1>Vue3学习</h1><p>第一个vue 项目</p><p>首先，我们需要安装node.js自行选择自己需要的版本。推荐使用node.js 16.0</p><p>打开你的目标文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest  //或者指定版本号</span><br></pre></td></tr></table></figure><p>这一指令将会安装并执行 <a href="https://github.com/vuejs/create-vue">create-vue</a>，它是 Vue 官方的项目脚手架工具。你将会看到一些诸如 TypeScript 和测试支持之类的可选功能提示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">✔ Project name: … &lt;your-project-name&gt;</span><br><span class="line">✔ Add TypeScript? … No / Yes</span><br><span class="line">✔ Add JSX Support? … No / Yes</span><br><span class="line">✔ Add Vue Router for Single Page Application development? … No / Yes</span><br><span class="line">✔ Add Pinia for state management? … No / Yes</span><br><span class="line">✔ Add Vitest for Unit testing? … No / Yes</span><br><span class="line">✔ Add Cypress for both Unit and End-to-End testing? … No / Yes</span><br><span class="line">✔ Add ESLint for code quality? … No / Yes</span><br><span class="line">✔ Add Prettier for code formatting? … No / Yes</span><br><span class="line"></span><br><span class="line">Scaffolding project in ./&lt;your-project-name&gt;...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>如果不确定是否要开启某个功能，你可以直接按下回车键选择 <code>No</code>。在项目被创建后，通过以下步骤安装依赖并启动开发服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> &lt;your-project-name&gt;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm run dev</span></span><br></pre></td></tr></table></figure><p>你现在应该已经运行起来了你的第一个 Vue 项目！请注意，生成的项目中的示例组件使用的是<a href="https://cn.vuejs.org/guide/introduction.html#composition-api">组合式 API</a> 和 <code>&lt;script setup&gt;</code>，而非<a href="https://cn.vuejs.org/guide/introduction.html#options-api">选项式 API</a>。下面是一些补充提示：</p><ul><li>推荐的 IDE 配置是 <a href="https://code.visualstudio.com/">Visual Studio Code</a> + <a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar">Volar 扩展</a>。如果使用其他编辑器，参考 <a href="https://cn.vuejs.org/guide/scaling-up/tooling.html#ide-support">IDE 支持章节</a>。</li><li>更多工具细节，包括与后端框架的整合，我们会在<a href="https://cn.vuejs.org/guide/scaling-up/tooling.html">工具链指南</a>进行讨论。</li><li>要了解构建工具 Vite 更多背后的细节，请查看 <a href="https://cn.vitejs.dev/">Vite 文档</a>。</li><li>如果你选择使用 TypeScript，请阅读 <a href="https://cn.vuejs.org/guide/typescript/overview.html">TypeScript 使用指南</a>。</li></ul><p>当你准备将应用发布到生产环境时，请运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm run build</span></span><br></pre></td></tr></table></figure><p>此命令会在 <code>./dist</code> 文件夹中为你的应用创建一个生产环境的构建版本。关于将应用上线生产环境的更多内容，请阅读<a href="https://cn.vuejs.org/guide/best-practices/production-deployment.html">生产环境部署指南</a>。</p><h2 id="通过-CDN-使用-Vue">通过 CDN 使用 Vue</h2><p>你可以借助 script 标签直接通过 CDN 来使用 Vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们使用了 <a href="https://unpkg.com/">unpkg</a>，但你也可以使用任何提供 npm 包服务的 CDN，例如 <a href="https://www.jsdelivr.com/package/npm/vue">jsdelivr</a> 或 <a href="https://cdnjs.com/libraries/vue">cdnjs</a>。当然，你也可以下载此文件并自行提供服务。</p><p>通过 CDN 使用 Vue 时，不涉及“构建步骤”。这使得设置更加简单，并且可以用于增强静态的 HTML 或与后端框架集成。但是，你将无法使用单文件组件 (SFC) 语法。</p><h3 id="使用全局构建版本">使用全局构建版本</h3><p>上面的例子使用了<em>全局构建版本</em>的 Vue，该版本的所有顶层 API 都以属性的形式暴露在了全局的 <code>Vue</code> 对象上。这里有一个使用全局构建版本的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-ES-模块构建版本">使用 ES 模块构建版本</h3><p>在本文档的其余部分我们使用的主要是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules">ES 模块</a>语法。现代浏览器大多都已原生支持 ES 模块。因此我们可以像这样通过 CDN 以及原生 ES 模块使用 Vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意我们使用了 <code>&lt;script type=&quot;module&quot;&gt;</code>，且导入的 CDN URL 指向的是 Vue 的 <strong>ES 模块构建版本</strong>。</p><h3 id="启用-Import-maps">启用 Import maps</h3><p>在上面的示例中，我们使用了完整的 CDN URL 来导入，但在文档的其余部分中，你将看到如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以使用<a href="https://caniuse.com/import-maps">导入映射表 (Import Maps)</a> 来告诉浏览器如何定位到导入的 <code>vue</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;importmap&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;imports&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://jsfiddle.net/yyx990803/2ke1ab0z/">JSFiddle 中的示例</a></p><p>你也可以在映射表中添加其他的依赖——但请务必确保你使用的是该库的 ES 模块版本。</p><blockquote><p>导入映射表的浏览器支持情况</p><p>目前只有基于 Chromium 的浏览器支持导入映射表，所以我们推荐你在学习过程中使用 Chrome 或 Edge。</p><p>如果你使用的是 Firefox 浏览器，则该功能默认在 108+ 版本或通过启用 <code>about:config</code> 中的 <code>dom.importMaps.enabled</code> 选项支持。</p><p>如果你更喜欢那些还不支持导入映射表的浏览器，你可以使用 <a href="https://github.com/guybedford/es-module-shims">es-module-shims</a> 来进行 polyfill.</p><p>生产环境中的注意事项</p><p>到目前为止示例中使用的都是 Vue 的开发构建版本——如果你打算在生产中通过 CDN 使用 Vue，请务必查看<a href="https://cn.vuejs.org/guide/best-practices/production-deployment.html#without-build-tools">生产环境部署指南</a>。</p></blockquote><h3 id="拆分模块">拆分模块</h3><p>随着对这份指南的逐步深入，我们可能需要将代码分割成单独的 JavaScript 文件，以便更容易管理。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./my-component.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(<span class="title class_">MyComponent</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// my-component.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;count is &#123;&#123; count &#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果直接在浏览器中打开了上面的 <code>index.html</code>，你会发现它抛出了一个错误，因为 ES 模块不能通过 <code>file://</code> 协议工作。为了使其工作，你需要使用本地 HTTP 服务器通过 <code>http://</code> 协议提供 <code>index.html</code>。</p><p>要启动一个本地的 HTTP 服务器，请先安装 <a href="https://nodejs.org/zh/">Node.js</a>，然后通过命令行在 HTML 文件所在文件夹下运行 <code>npx serve</code>。你也可以使用其他任何可以基于正确的 MIME 类型服务静态文件的 HTTP 服务器。</p><p>可能你也注意到了，这里导入的组件模板是内联的 JavaScript 字符串。如果你正在使用 VSCode，你可以安装 <a href="https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html">es6-string-html</a> 扩展，然后在字符串前加上一个前缀注释 <code>/*html*/</code> 以高亮语法。</p><h3 id="无需构建的组合式-API-用法">无需构建的组合式 API 用法</h3><p>组合式 API 的许多示例将使用 <code>&lt;script setup&gt;</code> 语法。如果你想在无需构建的情况下使用组合式 API，请参阅 <a href="https://cn.vuejs.org/api/composition-api-setup.html"><code>setup()</code> 选项</a>。</p><h2 id="进入vue启动页面">进入vue启动页面</h2><p><a href="http://127.0.0.1">http://127.0.0.1</a>:端口号/</p><p>router/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeView</span> <span class="keyword">from</span> <span class="string">&#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;  <span class="comment">//定义不可变的路由</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line"><span class="comment">//创建路由对象，json的形式</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">HomeView</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/learn1&#x27;</span>,  <span class="comment">//url路径指向</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;learn1&#x27;</span>,  </span><br><span class="line">      <span class="comment">//路由，指向目标页面</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Learn1.vue&#x27;</span>) </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="声明式渲染">声明式渲染</h3><p>你在编辑器中看到的是一个 Vue 单文件组件 (Single-File Component，缩写为 SFC)。SFC 是一种可复用的代码组织形式，它将从属于同一个组件的 HTML、CSS 和 JavaScript 封装在使用 <code>.vue</code> 后缀的文件中。</p><p>Vue 的核心功能是<strong>声明式渲染</strong>：通过扩展于标准 HTML 的模板语法，我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时，HTML 会自动更新。</p><p>能在改变时触发更新的状态被称作是<strong>响应式</strong>的。我们可以使用 Vue 的 <code>reactive()</code> API 来声明响应式状态。由 <code>reactive()</code> 创建的对象都是 JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>，其行为与普通对象一样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const counter = reactive(&#123;</span><br><span class="line">  count: 0</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(counter.count) // 0</span><br><span class="line">counter.count++</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>reactive()</code> 只适用于对象 (包括数组和内置类型，如 <code>Map</code> 和 <code>Set</code>)。而另一个 API <code>ref()</code> 则可以接受任何值类型。<code>ref</code> 会返回一个包裹对象，并在 <code>.value</code> 属性下暴露内部值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const message = ref(&#x27;Hello World!&#x27;)</span><br><span class="line"></span><br><span class="line">console.log(message.value) // &quot;Hello World!&quot;</span><br><span class="line">message.value = &#x27;Changed&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>reactive()</code> 和 <code>ref()</code> 的细节在<a href="https://cn.vuejs.org/guide/essentials/reactivity-fundamentals.html">指南 - 响应式基础</a>一节中有进一步讨论。</p><p>在组件的 <code>&lt;script setup&gt;</code> 块中声明的响应式状态，可以直接在模板中使用。下面展示了我们如何使用双花括号语法，根据 <code>counter</code> 对象和 <code>message</code> ref 的值渲染动态文本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;count is: &#123;&#123; counter.count &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>注意我们在模板中访问的 <code>message</code> ref 时不需要使用 <code>.value</code>：它会被自动解包，让使用更简单。</p><p>在双花括号中的内容并不只限于标识符或路径——我们可以使用任何有效的 JavaScript 表达式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>现在，试着自己创建一些响应式状态，用它来为模板中的 <code>&lt;h1&gt;</code> 渲染动态的文本内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const counter = reactive(&#123; count: 0 &#125;)</span><br><span class="line">const message = ref(&#x27;Hello World!&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Count is: &#123;&#123; counter.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>app.vue页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; RouterLink, RouterView &#125; from &#x27;vue-router&#x27;</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; class=&quot;logo&quot; src=&quot;@/assets/logo.svg&quot; width=&quot;125&quot; height=&quot;125&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">      &lt;HelloWorld msg=&quot;You did it!&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;Home&lt;/RouterLink&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/about&quot;&gt;About&lt;/RouterLink&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/learn1&quot;&gt;学习1&lt;/RouterLink&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;RouterView /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>learn1.vue</p><h3 id="Attribute-绑定">Attribute 绑定</h3><p>在 Vue 中，mustache 语法 (即双大括号) 只能用于文本插值。为了给 attribute 绑定一个动态值，需要使用 <code>v-bind</code> 指令：</p><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><strong>指令</strong>是由 <code>v-</code> 开头的一种特殊 attribute。它们是 Vue 模板语法的一部分。和文本插值类似，指令的值是可以访问组件状态的 JavaScript 表达式。关于 <code>v-bind</code> 和指令语法的完整细节请详阅<a href="https://cn.vuejs.org/guide/essentials/template-syntax.html">指南 - 模板语法</a>。</p><p>冒号后面的部分 (<code>:id</code>) 是指令的“参数”。此处，元素的 <code>id</code> attribute 将与组件状态里的 <code>dynamicId</code> 属性保持同步。</p><p>由于 <code>v-bind</code> 使用地非常频繁，它有一个专门的简写语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>现在，试着把一个动态的 <code>class</code> 绑定添加到这个 <code>&lt;h1&gt;</code> 上，并使用 <code>titleClass</code> 的 ref 作为它的值。如果绑定正确，文字将会变为红色。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const counter = reactive(&#123; count: 0 &#125;)</span><br><span class="line">const message = ref(&#x27;Hello World!&#x27;)</span><br><span class="line"></span><br><span class="line">const titleClass = ref(&#x27;title&#x27;)  //定死titleClass 的 ref 作为它的值。如果绑定正确，文字将会变为红色。</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;learn1&quot;&gt;</span><br><span class="line">    &lt;h1&gt;你好世界&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;p&gt;Count is: &#123;&#123; counter.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;h1 :class=&quot;titleClass&quot;&gt;让我变红&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">@media (min-width: 1024px) &#123;</span><br><span class="line">  .learn &#123;</span><br><span class="line">    min-height: 100vh;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.title&#123;</span><br><span class="line">  color: brown;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>实例二</p><h3 id="事件监听">事件监听</h3><p>我们可以使用 <code>v-on</code> 指令监听 DOM 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;increment&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>因为其经常使用，<code>v-on</code> 也有一个简写语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;increment&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>此处，<code>increment</code> 引用了一个在 <code>&lt;script setup&gt;</code> 中声明的函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">function increment() &#123;</span><br><span class="line">  // 更新组件状态</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在函数中，我们可以通过修改 ref 来更新组件状态。</p><p>事件处理函数也可以使用内置表达式，并且可以使用修饰符简化常见任务。这些细节包含在<a href="https://cn.vuejs.org/guide/essentials/event-handling.html">指南 - 事件处理</a>。</p><p>现在，尝试自行实现 <code>increment</code> 函数并通过使用 <code>v-on</code> 将其绑定到按钮上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">function increment()&#123;</span><br><span class="line">  count.value ++ ;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 使此按钮生效 --&gt;</span><br><span class="line">  &lt;button @click=&quot;increment()&quot;&gt;count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="表单绑定">表单绑定</h3><p>我们可以同时使用 <code>v-bind</code> 和 <code>v-on</code> 来在表单的输入元素上创建双向绑定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input :value=&quot;text&quot; @input=&quot;onInput&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onInput</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// v-on 处理函数会接收原生 DOM 事件</span></span><br><span class="line">  <span class="comment">// 作为其参数。</span></span><br><span class="line">  text.<span class="property">value</span> = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试着在文本框里输入——你会看到 <code>&lt;p&gt;</code> 里的文本也随着你的输入更新了。</p><p>为了简化双向绑定，Vue 提供了一个 <code>v-model</code> 指令，它实际上是上述操作的语法糖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;text&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>v-model</code> 会将被绑定的值与 <code>&lt;input&gt;</code> 的值自动同步，这样我们就不必再使用事件处理函数了。</p><p><code>v-model</code> 不仅支持文本输入框，也支持诸如多选框、单选框、下拉框之类的输入类型。我们在<a href="https://cn.vuejs.org/guide/essentials/forms.html">指南 - 表单绑定</a>中讨论了更多的细节。</p><p>现在，试着用 <code>v-model</code> 把代码重构一下吧。</p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const text = ref(&#x27;&#x27;)</span><br><span class="line">function onInput(e) &#123;</span><br><span class="line">  text.value = e.target.value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input :value=&quot;text&quot; @input=&quot;onInput&quot; placeholder=&quot;Type here&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; text &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>变化为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const text = ref(&#x27;&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input v-model=&quot;text&quot; placeholder=&quot;Type here&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; text &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="条件渲染">条件渲染</h3><p>我们可以使用 <code>v-if</code> 指令来有条件地渲染元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>这个 <code>&lt;h1&gt;</code> 标签只会在 <code>awesome</code> 的值为<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">真值 (Truthy)</a> 时渲染。若 <code>awesome</code> 更改为<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy">假值 (Falsy)</a>，它将被从 DOM 中移除。</p><p>我们也可以使用 <code>v-else</code> 和 <code>v-else-if</code> 来表示其他的条件分支：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>现在，示例程序同时展示了两个 <code>&lt;h1&gt;</code> 标签，并且按钮不执行任何操作。尝试给它们添加 <code>v-if</code> 和 <code>v-else</code> 指令，并实现 <code>toggle()</code> 方法，让我们可以使用按钮在它们之间切换。</p><p>更多细节请查阅 <code>v-if</code>：<a href="https://cn.vuejs.org/guide/essentials/conditional.html">指南 - 条件渲染</a></p><p>实例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const awesome = ref(true)</span><br><span class="line">function toggle() &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class="line">  &lt;h1&gt;Vue is awesome!&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;Oh no 😢&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const awesome = ref(true)</span><br><span class="line">function toggle() &#123;</span><br><span class="line">  awesome.value = !awesome.value;//如果点击通过触发函数改变值</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;toggle&quot;&gt;toggle&lt;/button&gt;</span><br><span class="line">  &lt;h1 v-if=&quot;awesome&quot;&gt;Vue is awesome!&lt;/h1&gt; &lt;!-- 值之前那没有改变的值--&gt;</span><br><span class="line">  &lt;h1 v-else&gt;Oh no 😢&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="列表渲染">列表渲染</h3><p>我们可以使用 <code>v-for</code> 指令来渲染一个基于源数组的列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 <code>todo</code> 是一个局部变量，表示当前正在迭代的数组元素。它只能在 <code>v-for</code> 所绑定的元素上或是其内部访问，就像函数的作用域一样。</p><p>注意，我们还给每个 todo 对象设置了唯一的 <code>id</code>，并且将它作为<a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key">特殊的 <code>key</code> attribute</a> 绑定到每个 <code>&lt;li&gt;</code>。<code>key</code> 使得 Vue 能够精确的移动每个 <code>&lt;li&gt;</code>，以匹配对应的对象在数组中的位置。</p><p>更新列表有两种方式：</p><ol><li><p>在源数组上调用<a href="https://stackoverflow.com/questions/9009879/which-javascript-array-functions-are-mutating">变更方法</a>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todos.<span class="property">value</span>.<span class="title function_">push</span>(newTodo)</span><br></pre></td></tr></table></figure></li><li><p>使用新的数组替代原数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todos.<span class="property">value</span> = todos.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="comment">/* ... */</span>)</span><br></pre></td></tr></table></figure></li></ol><p>这里有一个简单的 todo 列表——试着实现一下 <code>addTodo()</code> 和 <code>removeTodo()</code> 这两个方法的逻辑，使列表能够正常工作！</p><p>关于 <code>v-for</code> 的更多细节：<a href="https://cn.vuejs.org/guide/essentials/list.html">指南 - 列表渲染</a></p><p>vue实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">// 给每个 todo 对象一个唯一的 id</span><br><span class="line">let id = 0  //初始id为0</span><br><span class="line">const newTodo = ref(&#x27;&#x27;)</span><br><span class="line">const todos = ref([</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn HTML&#x27; &#125;,</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn JavaScript&#x27; &#125;,</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn Vue&#x27; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">function addTodo() &#123;</span><br><span class="line">  // ...</span><br><span class="line">  newTodo.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function removeTodo(todo) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;newTodo&quot;&gt;</span><br><span class="line">    &lt;button&gt;Add Todo&lt;/button&gt;    </span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">      &lt;!--循环变量--&gt;</span><br><span class="line">    &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 给每个 todo 对象一个唯一的 id</span><br><span class="line">let id = 0</span><br><span class="line">//定义新的数组newTodo</span><br><span class="line">//这行代码使用了 Vue 3 中的响应式（reactive）功能，创建了一个名为 newTodo 的变量，并将其初始化为空字符串。其中 const 关键字表示这是一个常量，而 ref 则表示这个变量是可响应的（reactive）。</span><br><span class="line">const newTodo = ref(&#x27;&#x27;)</span><br><span class="line">//初始化todos的数据，作为数组</span><br><span class="line">const todos = ref([</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn HTML&#x27; &#125;,</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn JavaScript&#x27; &#125;,</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn Vue&#x27; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">//选择添加新的数据进入数组</span><br><span class="line">function addTodo() &#123;</span><br><span class="line">  todos.value.push(&#123; id: id++, text: newTodo.value &#125;)</span><br><span class="line">  newTodo.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function removeTodo(todo) &#123;</span><br><span class="line">  todos.value = todos.value.filter((t) =&gt; t !== todo)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;newTodo&quot;&gt;</span><br><span class="line">    &lt;button&gt;Add Todo&lt;/button&gt;    </span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="计算属性">计算属性</h3><p>让我们在上一步的 todo 列表基础上继续。现在，我们已经给每一个 todo 添加了切换功能。这是通过给每一个 todo 对象添加 <code>done</code> 属性来实现的，并且使用了 <code>v-model</code> 将其绑定到复选框上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;todo in todos&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下一个可以添加的改进是隐藏已经完成的 todo。我们已经有了一个能够切换 <code>hideCompleted</code> 状态的按钮。但是应该如何基于状态渲染不同的列表项呢？</p><p>介绍一个新 API：<a href="https://cn.vuejs.org/guide/essentials/computed.html"><code>computed()</code></a>。它可以让我们创建一个计算属性 ref，这个 ref 会动态地根据其他响应式数据源来计算其 <code>.value</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const hideCompleted = ref(false)</span><br><span class="line">const todos = ref([</span><br><span class="line">  /* ... */</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const filteredTodos = computed(() =&gt; &#123;</span><br><span class="line">  // 根据 `todos.value` &amp; `hideCompleted.value`</span><br><span class="line">  // 返回过滤后的 todo 项目</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">+ <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性会自动跟踪其计算中所使用的到的其他响应式状态，并将它们收集为自己的依赖。计算结果会被缓存，并只有在其依赖发生改变时才会被自动更新。</p><p>现在，试着添加 <code>filteredTodos</code> 计算属性并实现计算逻辑！如果实现正确，在隐藏已完成项目的状态下勾选一个 todo，它也应当被立即隐藏。</p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">let id = 0</span><br><span class="line">const newTodo = ref(&#x27;&#x27;)</span><br><span class="line">const hideCompleted = ref(false)</span><br><span class="line">const todos = ref([</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;</span><br><span class="line">])</span><br><span class="line">function addTodo() &#123;</span><br><span class="line">  todos.value.push(&#123; id: id++, text: newTodo.value, done: false &#125;)</span><br><span class="line">  newTodo.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function removeTodo(todo) &#123;</span><br><span class="line">  todos.value = todos.value.filter((t) =&gt; t !== todo)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;newTodo&quot;&gt;</span><br><span class="line">    &lt;button&gt;Add Todo&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;</span><br><span class="line">      &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;hideCompleted = !hideCompleted&quot;&gt;</span><br><span class="line">    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.done &#123;</span><br><span class="line">  text-decoration: line-through;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let id = 0</span><br><span class="line"></span><br><span class="line">const newTodo = ref(&#x27;&#x27;)</span><br><span class="line">//设置hideCompleyted为false</span><br><span class="line">const hideCompleted = ref(false)</span><br><span class="line">//仍旧是定义一个数组</span><br><span class="line">const todos = ref([</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn HTML&#x27;, done: true &#125;,</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn JavaScript&#x27;, done: true &#125;,</span><br><span class="line">  &#123; id: id++, text: &#x27;Learn Vue&#x27;, done: false &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const filteredTodos = computed(() =&gt; &#123;</span><br><span class="line">    //这段代码的作用是返回一个根据hideCompleted.value来筛选的todos数组。如果hideCompleted.value为true，则返回未完成的任务数组（即done属性为false），否则返回所有任务数组。</span><br><span class="line">  return hideCompleted.value</span><br><span class="line">    ? todos.value.filter((t) =&gt; !t.done)</span><br><span class="line">    : todos.value</span><br><span class="line">&#125;)</span><br><span class="line">function addTodo() &#123;</span><br><span class="line">  todos.value.push(&#123; id: id++, text: newTodo.value, done: false &#125;)</span><br><span class="line">  newTodo.value = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function removeTodo(todo) &#123;</span><br><span class="line">  todos.value = todos.value.filter((t) =&gt; t !== todo)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;form @submit.prevent=&quot;addTodo&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;newTodo&quot;&gt;</span><br><span class="line">    &lt;button&gt;Add Todo&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;todo in filteredTodos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;&gt;</span><br><span class="line">      &lt;span :class=&quot;&#123; done: todo.done &#125;&quot;&gt;&#123;&#123; todo.text &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button @click=&quot;removeTodo(todo)&quot;&gt;X&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  &lt;button @click=&quot;hideCompleted = !hideCompleted&quot;&gt;</span><br><span class="line">    &#123;&#123; hideCompleted ? &#x27;Show all&#x27; : &#x27;Hide completed&#x27; &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.done &#123;</span><br><span class="line">  text-decoration: line-through;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="生命周期和模版引用">生命周期和模版引用</h3><p>目前为止，Vue 为我们处理了所有的 DOM 更新，这要归功于响应性和声明式渲染。然而，有时我们也会不可避免地需要手动操作 DOM。</p><blockquote><p>“var”、&quot;let&quot;和&quot;const&quot;在JavaScript中是用于声明变量的关键字。&quot;var&quot;声明的变量是函数级作用域，它的作用范围在整个函数中；</p><p>而&quot;let&quot;和&quot;const&quot;声明的变量是块级作用域，它们的作用范围在声明的代码块内。</p><p><strong>不同之处在于</strong>，&quot;let&quot;声明的变量可以被重新赋值，而&quot;const&quot;声明的变量是常量，不能被更改。在面试中常常涉及到这些关键字的使用及其区别。</p></blockquote><p>这时我们需要使用<strong>模板引用</strong>——也就是指向模板中一个 DOM 元素的 ref。我们需要通过<a href="https://cn.vuejs.org/api/built-in-special-attributes.html#ref">这个特殊的 <code>ref</code> attribute</a> 来实现模板引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p ref=&quot;p&quot;&gt;hello&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>要访问该引用，我们需要声明一个同名的 ref：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const p = ref(null)</span><br></pre></td></tr></table></figure><p>注意这个 ref 使用 <code>null</code> 值来初始化。这是因为当 <code>&lt;script setup&gt;</code> 执行时，DOM 元素还不存在。模板引用 ref 只能在组件<strong>挂载</strong>后访问。</p><p>要在挂载之后执行代码，我们可以使用 <code>onMounted()</code> 函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  // 此时组件已经挂载。</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这被称为<strong>生命周期钩子</strong>——它允许我们注册一个在组件的特定生命周期调用的回调函数。还有一些其他的钩子如 <code>onUpdated</code> 和 <code>onUnmounted</code>。更多细节请查阅<a href="https://cn.vuejs.org/guide/essentials/lifecycle.html#lifecycle-diagram">生命周期图示</a>。</p><p>现在，尝试添加一个 <code>onMounted</code> 钩子，然后通过 <code>p.value</code> 访问 <code>&lt;p&gt;</code>，并直接对其执行一些 DOM 操作。(例如修改它的 <code>textContent</code>)。</p><p>实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const p = ref(null)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p ref=&quot;p&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">const p = ref(null)</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  p.value.textContent = &#x27;mounted!&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p ref=&quot;p&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="侦听器">侦听器</h3><p>有时我们需要响应性地执行一些“副作用”——例如，当一个数字改变时将其输出到控制台。我们可以通过侦听器来实现它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">watch(count, (newCount) =&gt; &#123;</span><br><span class="line">  // 没错，console.log() 是一个副作用</span><br><span class="line">  console.log(`new count is: $&#123;newCount&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>watch()</code> 可以直接侦听一个 ref，并且只要 <code>count</code> 的值改变就会触发回调。<code>watch()</code> 也可以侦听其他类型的数据源——更多详情请参阅<a href="https://cn.vuejs.org/guide/essentials/watchers.html">指南 - 侦听器</a>。</p><p>一个比在控制台输出更加实际的例子是当 ID 改变时抓取新的数据。在右边的例子中就是这样一个组件。该组件被挂载时，会从模拟 API 中抓取 todo 数据，同时还有一个按钮可以改变要抓取的 todo 的 ID。现在，尝试实现一个侦听器，使得组件能够在按钮被点击时抓取新的 todo 项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const todoId = ref(1)</span><br><span class="line">const todoData = ref(null)</span><br><span class="line"></span><br><span class="line">async function fetchData() &#123;</span><br><span class="line">  todoData.value = null</span><br><span class="line">  const res = await fetch(</span><br><span class="line">    `https://jsonplaceholder.typicode.com/todos/$&#123;todoId.value&#125;`</span><br><span class="line">  )</span><br><span class="line">  todoData.value = await res.json()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchData()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;Todo id: &#123;&#123; todoId &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;todoId++&quot;&gt;Fetch next todo&lt;/button&gt;</span><br><span class="line">  &lt;p v-if=&quot;!todoData&quot;&gt;Loading...&lt;/p&gt;</span><br><span class="line">  &lt;pre v-else&gt;&#123;&#123; todoData &#125;&#125;&lt;/pre&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const todoId = ref(1)</span><br><span class="line">const todoData = ref(null)</span><br><span class="line"></span><br><span class="line">async function fetchData() &#123;</span><br><span class="line">  todoData.value = null</span><br><span class="line">  const res = await fetch(</span><br><span class="line">    `https://jsonplaceholder.typicode.com/todos/$&#123;todoId.value&#125;`</span><br><span class="line">  )</span><br><span class="line">  todoData.value = await res.json()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fetchData()</span><br><span class="line"></span><br><span class="line">watch(todoId, fetchData)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;Todo id: &#123;&#123; todoId &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;button @click=&quot;todoId++&quot;&gt;Fetch next todo&lt;/button&gt;</span><br><span class="line">  &lt;p v-if=&quot;!todoData&quot;&gt;Loading...&lt;/p&gt;</span><br><span class="line">  &lt;pre v-else&gt;&#123;&#123; todoData &#125;&#125;&lt;/pre&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="组件">组件</h3><p>目前为止，我们只使用了单个组件。真正的 Vue 应用往往是由嵌套组件创建的。</p><p>父组件可以在模板中渲染另一个组件作为子组件。要使用子组件，我们需要先导入它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import ChildComp from &#x27;./ChildComp.vue&#x27;</span><br></pre></td></tr></table></figure><p>然后我们就可以在模板中使用组件，就像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComp /&gt;</span><br></pre></td></tr></table></figure><p>现在自己尝试一下——导入子组件并在模板中渲染它。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import ChildComp from &#x27;./ChildComp.vue&#x27;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- render child component --&gt;</span><br><span class="line">&lt;ChildComp&gt;&lt;/ChildComp&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="Props">Props</h3><p>子组件可以通过 <strong>props</strong> 从父组件接受动态数据。首先，需要声明它所接受的 props：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ChildComp.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  msg: String</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意 <code>defineProps()</code> 是一个编译时宏，并不需要导入。一旦声明，<code>msg</code> prop 就可以在子组件的模板中使用。它也可以通过 <code>defineProps()</code> 所返回的对象在 JavaScript 中访问。</p><p>父组件可以像声明 HTML attributes 一样传递 props。若要传递动态值，也可以使用 <code>v-bind</code> 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComp :msg=&quot;greeting&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComp from &#x27;./ChildComp.vue&#x27;</span><br><span class="line"></span><br><span class="line">  const props = defineProps(&#123;</span><br><span class="line">    msg:String</span><br><span class="line">  &#125;)</span><br><span class="line">  //问候变量</span><br><span class="line">const greeting = ref(&#x27;Hello from parent&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--:msg导向--&gt;</span><br><span class="line">  &lt;ChildComp :msg=&quot;greeting&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="Emits">Emits</h3><p>除了接受props，子组件还可以向父组件触发事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 声明触发的事件</span><br><span class="line">const emit = defineEmits([&#x27;response&#x27;])</span><br><span class="line"></span><br><span class="line">// 带参数触发</span><br><span class="line">emit(&#x27;response&#x27;, &#x27;hello from child&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>emit()</code> 的第一个参数是事件的名称。其他所有参数都将传递给事件监听器。</p><p>父组件可以使用 <code>v-on</code> 监听子组件触发的事件——这里的处理函数接收了子组件触发事件时的额外参数并将它赋值给了本地状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComp @response=&quot;(msg) =&gt; childMsg = msg&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ChildComp from &#x27;./ChildComp.vue&#x27;</span><br><span class="line">const childMsg = ref(&#x27;No child msg yet&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ChildComp @response=&quot;(msg) =&gt; childMsg = msg&quot; /&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; childMsg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="插槽">插槽</h3><p>除了通过 props 传递数据外，父组件还可以通过<strong>插槽</strong> (slots) 将模板片段传递给子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ChildComp&gt;</span><br><span class="line">  This is some slot content!</span><br><span class="line">&lt;/ChildComp&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在子组件中，可以使用 <code>&lt;slot&gt;</code> 元素作为插槽出口 (slot outlet) 渲染父组件中的插槽内容 (slot content)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在子组件的模板中 --&gt;</span><br><span class="line">&lt;slot/&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;slot&gt;</code> 插口中的内容将被当作“默认”内容：它会在父组件没有传递任何插槽内容时显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot&gt;Fallback content&lt;/slot&gt;</span><br></pre></td></tr></table></figure><p>现在我们没有给 <code>&lt;ChildComp&gt;</code> 传递任何插槽内容，所以你将看到默认内容。让我们利用父组件的 <code>msg</code> 状态为子组件提供一些插槽内容吧。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2学习笔记和实例</title>
      <link href="/posts/640a35.html"/>
      <url>/posts/640a35.html</url>
      
        <content type="html"><![CDATA[<h1>Vue2</h1><h2 id="一-什么是Vue">一.什么是Vue?</h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://v2.cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h3 id="1-1-安装vue">1.1 安装vue</h3><p>尝试 Vue.js 最简单的方法是使用 <a href="https://codesandbox.io/s/github/vuejs/v2.vuejs.org/tree/master/src/v2/examples/vue-20-hello-world">Hello World 例子</a>。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以<a href="https://github.com/vuejs/v2.vuejs.org/blob/master/src/v2/examples/vue-20-hello-world/index.html">创建一个 <code>.html</code> 文件</a>，然后通过如下方式引入 Vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-声明式渲染">1.2 声明式渲染</h3><p>实际上这个就是将数据可以动态采用简介的模版语法来声明式地将数据渲染进DOM系统中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">message</span>:<span class="string">&quot;Miaow.Y.Hu!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>至此，我们就完成了第一个vue应用，粗看就是渲染了一个字符串模版，但是其实vue在背后做了大量的工作。其所有的东西都是响应式的。我们通过确认的方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.message;</span><br><span class="line">//或者</span><br><span class="line">vm.message = <span class="string">&quot;miao&quot;</span>;</span><br></pre></td></tr></table></figure><p>你就可以看到上例相应的进行更新。</p><p>注意我们不再和HTML进行交互处理了。一个vue应用将会挂载到一个DOM元素上，这个例子是<code>#app</code>然后对其进行完全控制。</p><p>除了文本插入值，还有：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app2 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-2&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;页面加载于 &#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleString</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里我们遇到了一点新东西。你看到的 <code>v-bind</code> attribute 被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。在这里，该指令的意思是：“将这个元素节点的 <code>title</code> attribute 和 Vue 实例的 <code>message</code> property 保持一致”。</p><p>如果你再次打开浏览器的 JavaScript 控制台，输入 <code>app2.message = '新消息'</code>，就会再一次看到这个绑定了 <code>title</code> attribute 的 HTML 已经进行了更新。</p><h3 id="1-3-条件与循环">1.3 条件与循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app3 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-3&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">seen</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>继续在控制台输入 <code>app3.seen = false</code>，你会发现之前显示的消息消失了。</p><p>这个例子演示了我们不仅可以把数据绑定到 DOM 文本或 attribute，还可以绑定到 DOM <strong>结构</strong>。此外，Vue 也提供一个强大的过渡效果系统，可以在 Vue 插入/更新/移除元素时自动应用<a href="https://v2.cn.vuejs.org/v2/guide/transitions.html">过渡效果</a>。</p><p>还有其它很多指令，每个都有特殊的功能。例如，<code>v-for</code> 指令可以绑定数组的数据来渲染一个项目列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app4 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-4&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">todos</span>: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 JavaScript&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;学习 Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">&#x27;整个牛项目&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在控制台里，输入 <code>app4.todos.push(&#123; text: '新项目' &#125;)</code>，你会发现列表最后添加了一个新项目。</p><h3 id="1-4-处理用输入">1.4 处理用输入</h3><p>为了让用户和你的应用进行交互，我们可以用 <code>v-on</code> 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;reverseMessage&quot;</span>&gt;</span>反转消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app5 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-5&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue.js!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="attr">reverseMessage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注意在 <code>reverseMessage</code> 方法中，我们更新了应用的状态，但没有触碰 DOM——所有的 DOM 操作都由 Vue 来处理，你编写的代码只需要关注逻辑层面即可。</p><p>Vue 还提供了 <code>v-model</code> 指令，它能轻松实现表单输入和应用状态之间的双向绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app-6&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app6 = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app-6&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-5-组件化应用构建">1.5 组件化应用构建</h3><p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p><p><img src="https://v2.cn.vuejs.org/images/components.png" alt="Component Tree"></p><p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>罗小黑<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建一个todo-item组件的示例 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      现在我们为每个 todo-item 提供 todo 对象</span></span><br><span class="line"><span class="comment">      todo 对象是变量，即其内容可以是动态的。</span></span><br><span class="line"><span class="comment">      我们也需要为每个组件提供一个“key”，稍后再</span></span><br><span class="line"><span class="comment">      作详细解释。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-for</span>=<span class="string">&quot;item in groceryList&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:todo</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">todo-item</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-for</span>=<span class="string">&quot;item in secondList&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:todo</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入vue.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入element ui样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../css/element/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/element/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> <span class="title class_">TodoItem</span>=&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">props</span>:[<span class="string">&quot;todo&quot;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">&quot;&lt;li&gt;&#123;&#123;todo.text&#125;&#125;&lt;/li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> secondItem=&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">props</span>:[<span class="string">&quot;todo1&quot;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">&quot;&lt;li&gt;&#123;&#123;todo1.text&#125;&#125;&lt;/li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 注意new 的Vue必须是大写字母开头的</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">TodoItem</span>:<span class="title class_">TodoItem</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">secondItem</span>:secondItem</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">groceryList</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="number">0</span>,<span class="attr">text</span>:<span class="string">&quot;蔬菜&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">&quot;奶酪&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">&quot;随便其他什么人吃的东西&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">secondList</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="number">0</span>,<span class="attr">text</span>:<span class="string">&quot;学习雷锋好榜样&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">text</span>:<span class="string">&quot;忠于革命忠于党&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">text</span>:<span class="string">&quot;天天向上&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这样的方式是不行的</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Vue.component(&quot;todo-item&quot;,&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// //todo-item 组件现在接收一个</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// // &quot;prop&quot; , 类似于一个自定义attribute.</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// //这个prop名字叫做todo</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// props:[&quot;todo&quot;],</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// template:&quot;&lt;li&gt;这是个待办项&#123;&#123;todo.text&#125;&#125;&lt;/li&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-6-与自定义元素的关系">1.6 与自定义元素的关系</h3><p>你可能已经注意到 Vue 组件非常类似于<strong>自定义元素</strong>——它是 <a href="https://www.w3.org/wiki/WebComponents/">Web 组件规范</a>的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md">Slot API</a> 与 <code>is</code> attribute。但是，还是有几个关键差别：</p><ol><li>Web Components 规范已经完成并通过，但未被所有浏览器原生实现。目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。</li><li>Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</li></ol><p>虽然 Vue 内部没有使用自定义元素，不过在应用使用自定义元素、或以自定义元素形式发布时，<a href="https://custom-elements-everywhere.com/#vue">依然有很好的互操作性</a>。Vue CLI 也支持将 Vue 组件构建成为原生的自定义元素。</p><h2 id="二、Vue实例">二、Vue实例</h2><h3 id="模版语法">模版语法</h3><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。</p><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p><p>最常见的语法是</p><p><code>只要message的 property值改变，那么以上的message的值也会随之改变。</code></p><p>但是通过使用v-once指令，可以执行一次性地插值，当数据改变的时候，插值处的内容并不会更新</p><p><code>&lt;span v-once&gt;这个值不会被改变： &#123;&#123;message&#125;&#125; &lt;/span&gt;</code></p><p><strong>v-html与v-text有区别，v-html会渲染成我们的html代码，因为一般双大括号将数据解释为普通文本，并非HTML代码，为了成为HTML代码，我们将采用v-html;</strong></p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mustache 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href="https://v2.cn.vuejs.org/v2/api/#v-bind"><code>v-bind</code> 指令</a>：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> v-bind:<span class="built_in">id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><p>对于布尔 attribute (它们只要存在就意味着值为 <code>true</code>)，<code>v-bind</code> 工作起来略有不同，在这个例子中：</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">button</span> v-bind:disabled=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;<span class="keyword">Button</span>&lt;/<span class="keyword">button</span>&gt;</span><br></pre></td></tr></table></figure><p>如果 <code>isButtonDisabled</code> 的值是 <code>null</code>、<code>undefined</code> 或 <code>false</code>，则 <code>disabled</code> attribute 甚至不会被包含在渲染出来的 <code>&lt;button&gt;</code> 元素中。</p><h4 id="使用-JavaScript-表达式">使用 JavaScript 表达式</h4><p>迄今为止，在我们的模板中，我们一直都只绑定简单的 property 键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><p>模板表达式都被放在沙盒中，只能访问<a href="https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9">全局变量的一个白名单</a>，如 <code>Math</code> 和 <code>Date</code> 。你不应该在模板表达式中试图访问用户定义的全局变量。</p><h4 id="参数">参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里 <code>href</code> 是参数，告知 <code>v-bind</code> 指令将该元素的 <code>href</code> attribute 与表达式 <code>url</code> 的值绑定。</p><p>另一个例子是 <code>v-on</code> 指令，它用于监听 DOM 事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态参数">动态参数</h4><p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">注意，参数表达式的写法存在一些约束，如之后的“对动态参数表达式的约束”章节所述。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 <code>attributeName</code> 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 <code>data</code> property <code>attributeName</code>，其值为 <code>&quot;href&quot;</code>，那么这个绑定将等价于 <code>v-bind:href</code>。</p><p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，当 <code>eventName</code> 的值为 <code>&quot;focus&quot;</code> 时，<code>v-on:[eventName]</code> 将等价于 <code>v-on:focus</code>。</p><h5 id="对动态参数的值的约束">对动态参数的值的约束</h5><p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p><h5 id="对动态参数表达式的约束">对动态参数表达式的约束</h5><p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这会触发一个编译警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[&#x27;<span class="attr">foo</span>&#x27; + <span class="attr">bar</span>]=<span class="string">&quot;value&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</p><p>在 DOM 中使用模板时 (直接在一个 HTML 文件里撰写模板)，还需要避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。</span></span><br><span class="line"><span class="comment">除非在实例中有一个名为“someattr”的 property，否则代码不会工作。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">someAttr</span>]=<span class="string">&quot;value&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修饰符">修饰符</h4><p>修饰符 (modifier) 是以半角句号 <code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缩写">缩写</h4><p><code>v-</code> 前缀作为一种视觉提示，用来识别模板中 Vue 特定的 attribute。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，<code>v-</code> 前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的<a href="https://en.wikipedia.org/wiki/Single-page_application">单页面应用程序 (SPA - single page application)</a> 时，<code>v-</code> 前缀也变得没那么重要了。因此，Vue 为 <code>v-bind</code> 和 <code>v-on</code> 这两个最常用的指令，提供了特定简写：</p><h5 id="v-bind">v-bind</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="v-on">v-on</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它们看起来可能与普通的 HTML 略有不同，但 <code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p><h2 id="三、计算属性和侦听器">三、计算属性和侦听器</h2><p>Vue脚手架创建项目的方式</p><p>这里提供几种方案：</p><ol><li>升级为vue 3.x版本</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue-cli -g</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>2.降级为vue2.x方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall @vue/cli -g</span><br><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><p>3.vue2.x脚手架的安装和初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">vue init webpack 项目名字</span><br></pre></td></tr></table></figure><p>4.vue3.x脚手架的安装和初始化项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">vue create 项目名字</span><br></pre></td></tr></table></figure><p>如何让vue项目跑起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># serve with hot reload at localhost:8080</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># build for production with minification</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># build for production and view the bundle analyzer report</span></span><br><span class="line">npm run build --report</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/posts/6c92115f.html"/>
      <url>/posts/6c92115f.html</url>
      
        <content type="html"><![CDATA[<h1>1.Spring</h1><p>spring ： 春天给——》软件行业带来了春天。</p><p>开发目的： 解决企业级开发的复杂性。</p><p>使用javaBean 代替 EDG</p><p>官网： <a href="https://spring.io/">https://spring.io/</a></p><p>spring 理念： 使得现有的技术更加容易使用，本身就是一个大杂烩，整合了现有的技术框架</p><p>SSH ： Struct + Spring + Hibernate</p><p>SSM : Spring + SpringMVC + Maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring web mvc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-JDBC<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-1-优点">1.1  优点</h2><ul><li><h5 id="Spring-是一个轻量级免费的开源框架（容器）">Spring 是一个轻量级免费的开源框架（容器）</h5></li><li><h5 id="Spring是一个轻量级的，非入侵式的框架！">Spring是一个轻量级的，非入侵式的框架！</h5></li><li><h5 id="IOC-控制反转">IOC:控制反转</h5></li><li><h5 id="AOP-面向切面编程">AOP: 面向切面编程</h5></li><li><h5 id="支持事务处理，对框架整合的支持">支持事务处理，对框架整合的支持</h5><p><em><strong>一句话： Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的容器</strong></em></p></li></ul><h3 id="1-1-1SpringBean的生命周期：">1.1.1<strong>SpringBean的生命周期：</strong></h3><p>详细</p><ol><li><p>实例化bean对象：反射的方式生成对象</p></li><li><p>设置对象属性（填充bean的属性）：</p><ol><li>populateBean（）,循环依赖的问题</li></ol></li><li><p>检查Aware相关接口并设置相关依赖：</p><ol><li>invokeAwareMethod(完成BeanName,BeanFactory,BeanClassLoader对象的属性设置)</li></ol></li><li><p>beanPostProcessor前置处理：</p><ol><li>使用比较多的（ApplicationContextPostProcess，设置ApplicationContext等对象）</li></ol></li><li><p>检查是否initalizingBean以决定是否调用afterPropertiesSet方法</p></li><li><p>检查是否配置有自定义的init-method：判断是否实现initalizingbean接口，如果有，调用AfterPropertiesSet方法，没有就不调用</p></li><li><p>BeanPostProcessor后置处理对象：</p><ol><li>Spring的AOP就是在此处实现的，AbstractAutoProxyCreator注册Destuction相关的回调接口</li></ol></li><li><p>是否实现DisposableBean接口，调用DestoryMethod方法</p></li></ol><h2 id="1-2-组成">1.2 组成</h2><table><thead><tr><th>AOP</th><th>ORM</th><th>Spring Web</th><th>Spring Web MVC</th></tr></thead><tbody><tr><td>AOP</td><td>DAO</td><td>Spring Context</td><td>Spring Web MVC</td></tr><tr><td>CORE</td><td>CORE</td><td>CORE</td><td>CORE</td></tr></tbody></table><p><strong>核心容器（Spring Core）</strong></p><p>核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。Spring使用BeanFactory来产生和管理Bean，它是工厂模式的实现。BeanFactory使用控制反转(IoC)模式将应用的配置和依赖性规范与实际的应用程序代码分开。</p><p><strong>应用上下文（Spring Context）</strong></p><p>Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，如JNDI、EJB、电子邮件、国际化、校验和调度功能。</p><p><strong>Spring面向切面编程（Spring AOP）</strong></p><p>通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</p><p><strong>JDBC和DAO模块（Spring DAO）</strong></p><p>JDBC、DAO的抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理，和不同数据库供应商所抛出的错误信息。异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。</p><p><strong>对象实体映射（Spring ORM）</strong></p><p>Spring框架插入了若干个ORM框架，从而提供了ORM对象的关系工具，其中包括了Hibernate、JDO和 IBatis SQL Map等，所有这些都遵从Spring的通用事物和DAO异常层次结构。</p><p><strong>Web模块（Spring Web）</strong></p><p>Web上下文模块建立在应用程序上下文模块之上，为基于web的应用程序提供了上下文。所以Spring框架支持与Struts集成，web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p><p><strong>MVC模块（Spring Web MVC）</strong></p><p>MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。MVC容纳了大量视图技术，其中包括JSP、POI等，模型来有JavaBean来构成，存放于m当中，而视图是一个街口，负责实现模型，控制器表示逻辑代码，由c的事情。Spring框架的功能可以用在任何J2EE服务器当中，大多数功能也适用于不受管理的环境。Spring的核心要点就是支持不绑定到特定J2EE服务的可重用业务和数据的访问的对象，毫无疑问这样的对象可以在不同的J2EE环境，独立应用程序和测试环境之间重用。</p><h1>2. IOC理论</h1><ol><li><p>userDao</p></li><li><p>UserDaoImpl</p></li><li><p>UserService</p></li><li><p>UserServiceImpl</p><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span>  <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserMysqlDaoImpl</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserDao</span> <span class="variable">userDao2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserOracleDaoImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当用户需求改变，我们将要每次都要改变代码，很麻烦，从而springIoc的简单就来了。</span></span><br><span class="line">        userDao1.getUser();<span class="comment">//这是新添加的需求，我要改源代码</span></span><br><span class="line">        userDao2.getUser();  <span class="comment">//这又是新添加的需求，我又要改。</span></span><br><span class="line">        userDao.getUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        userService.getUser();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-1-IOC本质">2.1 IOC本质</h2><p>控制反转IOC是一种编程思想，DI（依赖注入）实现IOC的一种方法，可以说Ioc是思想  DI则是实现方式。</p><p>IOC可以说是：<strong>把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</strong></p><p>采用XML的方式配置bean时候，bean的定义信息和实现分离的，而采用注解的方式可以把两者合为一体，bean的定义直接以注解的形式定义在实现类中，从而达到零配置的目的。</p><p>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式，在spring中实现控制反转的是IOC容器，其实现实依赖注入（DI)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认获取数据&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*    private UserDao  userDao = new UserDaoImpl();</span></span><br><span class="line"><span class="comment">    private UserDao userDao1 = new UserMysqlDaoImpl();</span></span><br><span class="line"><span class="comment">    private UserDao userDao2 = new UserOracleDaoImpl();*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当用户需求改变，我们将要每次都要改变代码，很麻烦，从而springIoc的简单就来了。</span></span><br><span class="line">        <span class="comment">//userDao1.getUser();//这是新添加的需求，我要改源代码</span></span><br><span class="line">       <span class="comment">// userDao2.getUser();  //这又是新添加的需求，我又要改。</span></span><br><span class="line">        userDao.getUser();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mysqlImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.dao.impl.UserMysqlDaoImpl&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;oracleImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.dao.impl.UserOracleDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             ref： 引用spring容器中创建好的对象</span></span><br><span class="line"><span class="comment">             value： 具体的值，基本数据类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mysqlImpl&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   我来捋一捋</span></span><br><span class="line"><span class="comment">    UserDao作为接口，有一个方法  UserDaoImpl 实现该方法</span></span><br><span class="line"><span class="comment">    然后UserService接口类方法同名 UserServiceImpl实现改方法</span></span><br><span class="line"><span class="comment">    id    = oracle 也就是context.getBean(&quot;oracle&quot;); 标识符</span></span><br><span class="line"><span class="comment">     UserServiceImpl userService1 = (UserServiceImpl) context.getBean(&quot;oracle&quot;);</span></span><br><span class="line"><span class="comment">      &lt;property name=&quot;userDao&quot; ref=&quot;oracleImpl&quot; /&gt;</span></span><br><span class="line"><span class="comment">      userDao 也就是 set方法的名字</span></span><br><span class="line"><span class="comment">      ref 指向  oracleImpl也就是下边这条语句</span></span><br><span class="line"><span class="comment">          &lt;bean id=&quot;oracleImpl&quot; class=&quot;com.xh.dao.impl.UserOracleDaoImpl&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;oracle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             ref： 引用spring容器中创建好的对象</span></span><br><span class="line"><span class="comment">             value： 具体的值，基本数据类型</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;oracleImpl&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-IOC创建对象的方式">2.2 IOC创建对象的方式</h2><ol><li><p>使用无参构造创建对象，没有无参构造将会报错，默认</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  无参构造</span></span><br><span class="line"><span class="comment">  &lt;bean id=&quot;main&quot; class=&quot;com.xh.Main&quot;&gt;</span></span><br><span class="line"><span class="comment">       &lt;property name=&quot;user&quot; value=&quot;作者&quot;/&gt;</span></span><br><span class="line"><span class="comment">   &lt;/bean&gt;--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>假设我们要使用有参构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Main&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;user=&#x27;&quot;</span> + user + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  public Main() &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;无参构造&quot;);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Main</span><span class="params">(String user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(String user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user:&quot;</span>+user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//spring相当于婚介网站</span></span><br><span class="line">        ApplicationContext context=  <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Main</span> <span class="variable">main</span> <span class="operator">=</span> (Main) context.getBean(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">        main.show();</span><br><span class="line">      <span class="comment">//  Main main1 = (Main) context.getBean(&quot;main1&quot;);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>下标赋值</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>通过类型创建，不推荐使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种</span></span><br><span class="line"><span class="comment">       通过类型创建，不推荐使用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Main&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>直接通过参数名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ol><p>重点使用name有参构造好用，无参构造直接第一个配置</p><p>总结：在配置文件加载的时候，容器中的管理对象就已经初始化了</p><h1>3 Spring配置</h1><h2 id="3-1-别名">3.1 别名</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--参数名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- alias 起别名  name 是  Main main = (Main) context.getBean(&quot;main&quot;); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;main&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;yanliang&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Main</span> <span class="variable">main</span> <span class="operator">=</span> (Main) context.getBean(<span class="string">&quot;yanliang&quot;</span>);</span><br><span class="line"><span class="type">Main</span> <span class="variable">main1</span> <span class="operator">=</span> (Main) context.getBean(<span class="string">&quot;main&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="3-2-Bean配置">3.2 Bean配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2,u2 u3;u4&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--    // 别名可控制 UserT userT = (UserT) context.getBean(&quot;u2&quot;);--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-Import">3.3 Import</h2><p>一般用于团队开发，将多个模块导程一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//        ApplicationContext context=  new ClassPathXmlApplicationContext(&quot;application.xml&quot;);</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">application.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean1.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>无需担心重名他会自己选择。</p><h1>4 依赖注入(DI)</h1><h3 id="4-1-构造器注入">4.1 构造器注入</h3><p>也就是我们常用的有参构造和无参构造</p><h3 id="4-2-Set方式注入【重点】">4.2 Set方式注入【重点】</h3><p>依赖注入：set注入</p><p>依赖: bean对象的创建依赖于容器</p><p>注入： bean对象中的所有属性由容器注入</p><p>环境搭建</p><ol><li><p>复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实测试</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Bean.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种普通值注入 value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小黑&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="4-3-拓展方式注入">4.3 拓展方式注入</h3><p>我们可以通过p命名空间注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   p set 命名空间注入，可以简介注入 ： property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.User&quot;</span> <span class="attr">p:uname</span>=<span class="string">&quot;小黑&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  C命名空间必须通过构造器注入才行 有参无参构造 construct-args 注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:uname</span>=<span class="string">&quot;颜亮&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">P:   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(student.getName());</span></span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line">    </span><br><span class="line">C:</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userBean.xml&quot;</span>);</span><br><span class="line">       <span class="type">User</span>  <span class="variable">user</span> <span class="operator">=</span>  context.getBean(<span class="string">&quot;user2&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>注意p:命名空间使用Set方式注入，而C:命名空间是使用构造器注入，有参构造，无参构造都要有，且p,c都需要导入依赖才能使用，不能直接使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-4-Bean作用域">4.4 Bean作用域</h3><p>单例模式：（Spring默认机制）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:uname</span>=<span class="string">&quot;颜亮&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原型模式：每次从容器中get的时候都会产生一个新对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:uname</span>=<span class="string">&quot;颜亮&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其余的request ,session,application这些只能在web开发中使用！</p><h1>5 bean的自动装配</h1><p>自动装配是spring满足bean依赖的一种方式</p><p>spring 会在上下文自动寻找，并自动给bean装配属性</p><p>在spring中有三种装配方式：</p><ol><li>在xml中显示的配置</li><li>在java中显示的配置</li><li>隐式的自动装配bean【重要】</li></ol><h3 id="5-1测试">5.1测试</h3><p>环境搭建一个人有两个宠物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;苗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你的狗叫什么？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  Cat cat;</span><br><span class="line">    <span class="keyword">private</span>  Dog dog;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">getCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;people&quot;</span>,People.class);</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">    people.getCat().shout();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Dog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Cat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;胡小黑&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span>  <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span>  <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-ByName自动装配">5.2 ByName自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   ByName:会自动 在容器上下文查找，和自己对象set方法后边对应的 bean id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;是小胡呀&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Dog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Cat&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cat = cat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.dog = dog;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-ByType">5.3 ByType</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    ByType 不会根据id进行查找，和自己对象属性类型相同的bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;是小胡呀&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Dog&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;11cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Cat&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小结：</p><p>byName的时候需要保证bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致。</p><p>byType的时候需要保证bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</p><h3 id="5-4-注解实现自动配置">5.4 注解实现自动配置</h3><p>JDk1.5以后支持注解，spring 2.5支持注解‘</p><p>使用注解需要注意的是：</p><ol><li><p>导入约束context约束</p></li><li><p>配置注解的支持  <a href="context:annotation-config/">context:annotation-config/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;example.SimpleMovieCatalog&quot;</span> <span class="attr">primary</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- inject any dependencies required by this bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;example.SimpleMovieCatalog&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- inject any dependencies required by this bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;movieRecommender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;example.MovieRecommender&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-1-Autowired">5.4.1 @Autowired</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.Cat&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.People&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;bean id=&quot;people&quot; class=&quot;com.xh.People&quot;&gt;</span></span><br><span class="line"><span class="comment">         &lt;property name=&quot;name&quot; value=&quot;胡小黑&quot;/&gt;</span></span><br><span class="line"><span class="comment">         &lt;property name=&quot;cat&quot;  ref=&quot;cat&quot;/&gt;</span></span><br><span class="line"><span class="comment">         &lt;property name=&quot;dog&quot;  ref=&quot;dog&quot;/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   ByName:会自动 在容器上下文查找，和自己对象set方法后边对应的 beanid--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean id=&quot;people&quot; class=&quot;com.xh.People&quot; autowire=&quot;byName&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;property name=&quot;name&quot; value=&quot;是小胡呀&quot;/&gt;</span></span><br><span class="line"><span class="comment">        &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    ByType 不会根据id进行查找，和自己对象属性类型相同的bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;bean id=&quot;people&quot; class=&quot;com.xh.People&quot; autowire=&quot;byType&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;name&quot; value=&quot;是小胡呀&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span>  Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">//使用之后get set方法都不需要了。</span></span><br><span class="line">    <span class="keyword">private</span>  Dog dog;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cat <span class="title function_">getCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCat</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接在属性上使用，也可以在set方式上使用</p><p>使用Autowired我们连set方法都不需要使用了，前提条件是你这个自动装配的属性在IOC（Spring）容器中存在，且符合byName;</p><p>科普：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> 字段标记了这个注解，说明字段可以为<span class="literal">null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span> <span class="comment">//如果显示的定义了Autowired的required为false标志这个值可以为空否则不允许为空</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>如果@Autowired自动装配环境比较复杂的时候自动装配无法通过一个注解@Autowired完成的时候，使用@Qualifier(value=“***”)去配置@Autowired的使用，指定一个唯一的bean对象注入</p><p>java自带@Resource</p><p>@Resource注解，首先去spring容器中查找id名字，找不到查找类型，在找不到报错。唯一，不能查找重复的.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Autowired</span><span class="comment">//使用之后get set方法都不需要了。</span></span><br><span class="line"><span class="variable">@Qualifier</span>(value = <span class="string">&quot;dog&quot;</span>) <span class="comment">//如果存在多对相同的，需要精准查找到一个，就需要这个注解指定了</span></span><br><span class="line">private  Dog dog;</span><br></pre></td></tr></table></figure><p>@Resource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Resource(name=&quot;cat&quot;)</span></span><br><span class="line">    <span class="keyword">private</span>  Cat cat;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span>  Dog dog;</span><br></pre></td></tr></table></figure><p>@Resource 和     @Autowired区别</p><ol><li>都是用来自动装配的，都可以放到属性字段上</li><li>@Autowired 通过byname的方式实现,而且必须要求这个对象存在，否则报错</li><li>@Resource首先去spring容器中查找id名字，找不到查找类型（ByType），在找不到报错。唯一，不能查找重复的.</li><li>执行顺序不同 @Autowired通过ByType的方式实现，@Resource默认通过byName的方式实现</li></ol></li></ol><h1>6 使用注解开发</h1><p>在spring4以后，要使用注解开发，必须导入Aop依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下面的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xh&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;user&quot; class=&quot;com.xh.dao.User&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>bean注入</p></li><li><p>属性如何注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">// 组件 等价于&lt;bean id=&quot;user&quot; class=&quot;com.xh.dao.User&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  String name ; <span class="comment">//= &quot;小黑&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;小黑&quot;&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;小黑&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>衍生的注解</p><p>@Component 有几个衍生注解，我们在web开发中，会按照mvc三层架构分层</p><p>dao 【@Repository】</p><p>bean 【@Service】</p><p>service 【@Controller】</p><p>这四个注解功能都是一样的，都是代表将某个类注册到spring中装配。</p></li><li><p>自动装配配置</p><p>@Autowired</p></li><li><p>作用域</p><p>@Scope(“”)  指定模式 单例或者原型模式</p></li><li><p>总结</p><p>xml与注解</p><ul><li><p>Xml更加万能，适用于任何场所！维护方便简单</p></li><li><p>注解 不是自己的类使用不了，维护相对复杂！</p></li></ul><p>Xml与注解最佳实践</p><ul><li><p>xml用来管理bean</p></li><li><p>注解只负责完成属性的注入</p></li><li><p>我们在使用的过程中只需要注意一个问题：只需要开启注解的支持。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.xh&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1>7 使用java方式配置spring</h1><p>javaConfig</p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xh.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//这里这个注解的意思说明这个类被注册到Spring中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Value(&quot;罗小黑&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xh.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xh.bean.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//这个也会被Spring容器托管，注册到容器中</span></span><br><span class="line"><span class="comment">//因为他@Configuration代表这个是一个配置类，就和我们之前看的bean.xml</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.xh&quot;)</span></span><br><span class="line"><span class="meta">@Import(UserConfig1.class)</span> <span class="comment">//导入另一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span>  <span class="comment">//注册一个bean就相当于一个Springxml的bean表情</span></span><br><span class="line">   <span class="comment">//这个名字的方法，就想当与</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span>  <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xh.bean.User;</span><br><span class="line"><span class="keyword">import</span> com.xh.config.UserConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//如果完全使用了配置类的方式去做，我们就只能通过AnnotationConfig 上下文来获取容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(UserConfig.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>,User.class);</span><br><span class="line">        System.out.println(</span><br><span class="line">                user.getName()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种纯java的配置在SringBoot随处可见。</p><h1>8 AOP 之前代理模式</h1><p>为什么要学习代理模式？</p><p>这就是SpringAop的底层 【Spring AOP 】 【Spring MVC】</p><h3 id="8-1-静态代理模式-：">8.1 静态代理模式 ：</h3><ul><li><p>静态代理模式 ：</p><ul><li>抽象角色： 一般使用接口和抽象类来解决</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>真实角色： 被代理的角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理角色： 代理真实角色，代理真实角色后，我们一般会做一些附属操作</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        host.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中介带你看房</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收取中介费用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收取中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>客户:访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">/* Host host = new Host();</span></span><br><span class="line"><span class="comment">        host.rent();*/</span></span><br><span class="line">        <span class="comment">//房东不在，找代理</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">//代理 中介帮房东租房子，代理一般有附属条件</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line">        <span class="comment">//你不需要面对房东，直接可以租到房子</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>代理模式的好处</p><ul><li><p>可以使得真实角色的操作更加纯粹，不用去关注一些公共的业务</p></li><li><p>公共也就交给代理角色，实现了业务分工</p></li><li><p>公共业务发生拓展的时候，方便集中管理</p></li></ul><p>缺点</p><p>一个真实的角色会产生一个代理角色，代码量会翻倍，开发效率会变低。</p></li></ul><h3 id="8-2-再次理解">8.2 再次理解</h3><p>对应demo02.</p><h3 id="8-3-动态代理">8.3 动态代理</h3><ul><li><p>动态代理和静态代理一样</p></li><li><p>动态代理的代理是动态生成的，不是我们直接写好的</p></li><li><p>动态代理底层是反射</p></li><li><p>动态代理分为两大类： 基于接口的动态代理，基于类的动态代理</p><ul><li>基于接口 — JDK实现动态代理</li><li>基于类： cglib</li><li>java字节码实现：javaist</li></ul><p>需要了解两个类Proxy，InvocationHandler</p><p>动态代理的好处：</p><ul><li><p>可以使得真实角色的操作更加纯粹，不用去关注一些公共的业务。</p></li><li><p>公共业绩交给了代理角色，实现了业务的分工</p></li><li><p>公共业务发生拓展的时候，方便集中管理</p></li><li><p>一个动态代理类代理的是一个接口，一般就是对应一类接口。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line">        <span class="comment">//代理角色：现在没有</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">proxyInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        proxyInvocationHandler.setRent(host);</span><br><span class="line">        <span class="type">Rent</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rent) proxyInvocationHandler.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span> <span class="keyword">implements</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Rent <span class="title function_">getRent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRent</span><span class="params">(Rent rent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),rent.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//动态代理实例，并返回结果</span></span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(rent,args);</span><br><span class="line">        face();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介看房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">face</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收取中介费用&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserServiceImpl</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line">        <span class="comment">//代理角色不存在</span></span><br><span class="line">        <span class="type">ProxyInvocationHandler</span> <span class="variable">pih</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyInvocationHandler</span>();</span><br><span class="line">        pih.setTarget(userService);</span><br><span class="line">        <span class="type">UserService</span> <span class="variable">proxy</span> <span class="operator">=</span> (UserService) pih.getProxy();</span><br><span class="line">        proxy.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//被代理的接口</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTarget</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>  Proxy.newProxyInstance(<span class="built_in">this</span>.getClass().getClassLoader(),target.getClass().getInterfaces(),<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//动态代理实例，并返回结果</span></span><br><span class="line">        log(method.getName());<span class="comment">//反射方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+ msg + <span class="string">&quot;方法&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p></li></ul><h1>9 spring Aop(面向切面编程)</h1><h3 id="9-1什么是Aop">9.1什么是Aop</h3><p>aop是面向切面编程，通过预编译方式和运行期动态实现程序功能的唯一维护的一种技术，Aop是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范式，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各个部分之间的耦合度降低，提高程序的可重用性，同时提高开发的效率。</p><h3 id="9-2-Aop在spring的作用">9. 2 Aop在spring的作用</h3><p><strong>提供声明式事务；允许用户自定义切面</strong></p><ul><li>横切关注（ASPECT）:横切关注点，被模块化的特殊对象。（类）</li><li>切面（ASPECT）:切面必须要完成的工作。（类的方法）</li><li>目标（Advice）: 被通知对象。</li><li>代理（Proxy）:向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）:切面通知执行的“地点”的定义</li><li>连接点（joinPoint）: 与切入点匹配的执行点。</li></ul><p>Spring Aop中支持5种类型的Advice</p><p>前置通知： 方法前</p><p>后置通知： 方法后</p><p>环绕通知：方法前后</p><p>异常抛出通知： 方法抛出异常</p><p>引介通知：类中增加新的方法属性</p><h3 id="9-3-Spring中使用Aop">9.3 Spring中使用Aop</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--使用springApi必须必须导入的包--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- an HTTP Session-scoped bean exposed as a proxy --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userPreferences&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.UserPreferences&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;session&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- instructs the container to proxy the surrounding bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:scoped-proxy</span>/&gt;</span> (1)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- a singleton-scoped bean injected with a proxy to the above bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.SimpleUserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- a reference to the proxied userPreferences bean --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userPreferences&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userPreferences&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式一：使用spring的API接口【主要SpringAPI接口实现】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;delete一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;update一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;query一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span> &#123;</span><br><span class="line">   <span class="comment">//method:要执行的目标对象的方法</span></span><br><span class="line">    <span class="comment">//objects: 参数</span></span><br><span class="line">    <span class="comment">//target 目标对象</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(target.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AfterLog</span> <span class="keyword">implements</span> <span class="title class_">AfterReturningAdvice</span> &#123;</span><br><span class="line">   <span class="comment">//returnValue:返回值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span>+ method.getName()+ <span class="string">&quot;方法，返回结果为&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">     <span class="comment">//注意，动态代理，代理的是接口</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">        userService.query();</span><br><span class="line">        userService.update();</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.service.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--   配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xh.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--执行环绕增加--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：自定义来实现AOP【主要是切面定义】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--        注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.service.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式一：需要原生SpringAop接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      配置aop：需要导入AOp约束--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  &lt;aop:config&gt;</span></span><br><span class="line"><span class="comment">          &amp;lt;!&amp;ndash;切入点&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">          &lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.xh.service.UserServiceImpl.*(..))&quot;/&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          &amp;lt;!&amp;ndash;执行环绕增加&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">          &lt;aop:advisor advice-ref=&quot;log&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span></span><br><span class="line"><span class="comment">          &lt;aop:advisor advice-ref=&quot;afterLog&quot; pointcut-ref=&quot;pointcut&quot;/&gt;</span></span><br><span class="line"><span class="comment">      &lt;/aop:config&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式二  自定义类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.diy.DiyPointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--自定义切面 ref要引用的类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xh.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyPointCut</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">     <span class="comment">//注意，动态代理，代理的是接口</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">        userService.query();</span><br><span class="line">        userService.update();</span><br><span class="line">        userService.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方法三：使用注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--方式三--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;annotationPointCut&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xh.diy.AnnotationPointCut&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   开启注解支持  JDK（默认 proxy-target-class=&quot;false&quot;） cglib(proxy-target-class=&quot;true&quot;)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//方式三使用注解来实现</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注这个类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationPointCut</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.xh.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行前======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.xh.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====方法执行后======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在环绕增强中，我们可以给定一个类，代表我们要处理切入的点</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.xh.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  Signature signature = proceedingJoinPoint.getSignature();//获得签名</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//   System.out.println(&quot;signature:&quot; + signature);</span></span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span>  proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        System.out.println(proceed);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>10  spring整合Mybatis</h1><p>回顾mybatis:</p><ol><li><p>编写实体类</p></li><li><p>编写核心配置文件</p></li><li><p>编写接口</p></li><li><p>编写mapper.xml</p></li><li><p>测试</p></li></ol><h1>11 .Spring声明事务</h1><p>把一组业务当成一个业务来做，要么成功要么失败</p><p>事务在项目中，十分重要，涉及到数据的一致性问题，不能马虎。</p><p>确保完整性和一致性</p><h4 id="ACID">ACID:</h4><p>原子性：要么执行要么都不执行</p><p>隔离性：多个业务可以操作同一个资源防止数据损坏</p><p>持久性： 事务一旦提交，无论系统发生什么问题，结果都不会再被影响，被持久化的写到存储器中。</p><p>一致性：</p><h4 id="Spring中事务的声明：">Spring中事务的声明：</h4><p>AOP ： 声明式事务</p><p>编程式事务：需要在代码中进行事务的管理</p><h4 id="为什么要事务？">为什么要事务？</h4><blockquote><p>如果没有事务，可能存在数据提交不一致。</p><p>如果我们不在Spring中去配置声明式事务，我们就需要在代码中手动设置事务。</p><p>事务在项目的开发中很重要，涉及到项目的完整性和一致性。</p><p>在spring中需要注意：在配置的过程中需要注意空格。</p><p>有空格和没有空格的区别是很大的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习</title>
      <link href="/posts/8434e219.html"/>
      <url>/posts/8434e219.html</url>
      
        <content type="html"><![CDATA[<h1>Redis学习</h1><p>redis是一个NoSql的（远程字典服务的，key_value的数据库）</p><p><strong>redis 能干嘛</strong></p><ol><li>内存存储，持久化，内存中是断电就失去，所有说持久化很重要</li><li>效率高，可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息统计</li><li>计时器，记数器</li><li>。。。。</li></ol><blockquote><p>特性</p></blockquote><ol><li>多样的数据类型（HashMap ,set ,String ,List ,Zset）</li><li>持久化</li><li>集群</li><li>事务</li><li>。。。。</li></ol><blockquote><p>如何去学习redis</p></blockquote><p>redis官网 ： <a href="https://www.redis.net.cn/">https://www.redis.net.cn/</a></p><p>安装Redis : 这里不写</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">下载redis </span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">创建实例并启动</span><br><span class="line">mkdir <span class="operator">-</span>p <span class="operator">/</span>mydata<span class="operator">/</span>redis<span class="operator">/</span>conf      </span><br><span class="line"></span><br><span class="line">touch redis.conf</span><br><span class="line"></span><br><span class="line">docker run <span class="operator">-</span>p <span class="number">6379</span>:<span class="number">6379</span> <span class="comment">--name redis -v /mydata/redis/data:/data \</span></span><br><span class="line">   <span class="operator">-</span>v <span class="operator">/</span>mydata<span class="operator">/</span>redis<span class="operator">/</span>conf<span class="operator">/</span>redis.conf:<span class="operator">/</span>etc<span class="operator">/</span>redis<span class="operator">/</span>redis.conf \</span><br><span class="line">   <span class="operator">-</span>d redis redis<span class="operator">-</span>server <span class="operator">/</span>etc<span class="operator">/</span>redis<span class="operator">/</span>redis.conf</span><br><span class="line"></span><br><span class="line"> ls   查看当前文件夹下的文件</span><br><span class="line"> cat redis.conf</span><br><span class="line"></span><br><span class="line"> 测试redis </span><br><span class="line">  </span><br><span class="line"> docker <span class="keyword">exec</span> <span class="operator">-</span>it redis redis<span class="operator">-</span>cli</span><br><span class="line"> </span><br><span class="line"> <span class="comment">---</span></span><br><span class="line"> 由于以前的数据全存在内存中，从而我们重复读取<span class="keyword">get</span> a的时候会导致失败</span><br><span class="line">[root<span class="variable">@localhost</span> conf]# cat redis.conf</span><br><span class="line">[root<span class="variable">@localhost</span> conf]# docker <span class="keyword">exec</span> <span class="operator">-</span>it redis redis<span class="operator">-</span>cli</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">set</span> a b</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> <span class="keyword">get</span> a</span><br><span class="line">&quot;b&quot;   <span class="operator">/</span><span class="operator">/</span>从而在一次上来的时候这块是<span class="keyword">null</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> exit</span><br><span class="line"></span><br><span class="line"><span class="comment">--让redis 持久化  ---&gt; pwd</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span><span class="operator">&gt;</span> exit</span><br><span class="line">[root<span class="variable">@localhost</span> conf]# pwd</span><br><span class="line"><span class="operator">/</span>mydata<span class="operator">/</span>redis<span class="operator">/</span>conf</span><br><span class="line">[root<span class="variable">@localhost</span> conf]# ls</span><br><span class="line">redis.conf</span><br><span class="line">[root<span class="variable">@localhost</span> conf]# vi redis.conf </span><br><span class="line">i</span><br><span class="line">appendonly yes</span><br><span class="line">esc  :wq</span><br><span class="line"> <span class="comment">--由于进入文档后我不知道如何保存，故此我不在继续持久化了 事实上最新的redis自带持久化了</span></span><br><span class="line"></span><br><span class="line">docker restart redis  <span class="operator">/</span><span class="operator">/</span>重启redis</span><br><span class="line"><span class="comment">--设置开机自启动docker 里边容器</span></span><br><span class="line">sudo docker <span class="keyword">update</span> <span class="operator">&lt;</span>容器名<span class="operator">&gt;</span> <span class="comment">--restart=always</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Redis的基础知识">Redis的基础知识</h2><p><code>select</code> 选择数据库</p><p><code>keys *</code>  查看所有的key</p><p><code>exists</code> key  查看key是否存在</p><p><code>move  key  id</code> 根据id和key值移除</p><p><code>flushdb</code> 清除当前数据库</p><p><code>flushAll</code> 清除全部数据库中所有数据</p><p><code>set  key value</code> 设置Key和value</p><p><code>get key</code>  获得key的值</p><p><code>expire key 时间</code> 设置过期时间单位秒</p><p><code>ttl key</code> 查看过期时间</p><p><code>type key</code> 查看当前key存到value的数据类型</p><p>为什么redis端口号为6379。(作者使用一个明星的名字)</p><blockquote><p>redis是单线程的</p></blockquote><p>由于redis很快，官方认为，redis是基于内存操作，CPU并不是Redis的性能瓶颈，Redis的瓶颈是根据机械的内存和网络带宽，既然可以使用单线程来实现，那么就使用单线程了。</p><h3 id="Redis为啥使用单线程还是这么快？">Redis为啥使用单线程还是这么快？</h3><ol><li><p>误区，高性能的服务器不一点全是多线程的。</p></li><li><p>误区2，多线程并不一定都比单线程效率高。</p><blockquote><p>redis是将数据存放在内存中的，故而使用单线程去操作就比较快，多线程会进行CPU上下文切换，耗时，对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个cpu上，在内存情况下，这个就是最佳方案。</p></blockquote></li></ol><h3 id="Redis指令大全">Redis指令大全</h3><h4 id="Redis-Key">Redis-Key</h4><p><code>select</code> 选择数据库</p><p><code>keys *</code>  查看所有的key</p><p><code>exists</code> key  查看key是否存在</p><p><code>move  key  id</code> 根据id和key值移除</p><p><code>flushdb</code> 清除当前数据库</p><p><code>flushAll</code> 清除全部数据库中所有数据</p><p><code>set  key value</code> 设置Key和value</p><p><code>get key</code>  获得key的值</p><p><code>expire key 时间</code> 设置过期时间单位秒</p><p><code>ttl key</code> 查看过期时间</p><p><code>type key</code> 查看当前key存到value的数据类型</p><p><code>incr  key</code>每次执行都进行加一操作</p><p><code>desc key</code> 每次执行都进行减一操作</p><p><code>getRange key 0 3</code> 截取字符串【0,3】</p><p><code>getRange key 0 -1</code> 截取全部的字符串和get key 是一样的</p><p><code>setrange key 1 xx</code>  替换指定位置开始的字符串</p><p><code>settex (set with expire)  key 过期时间 value</code> 设置过期时间且值为value</p><p><code>setnx (set if not expire)  key</code>   不存在的时候设置（在分布式中会经常使用）也就是说，不存在的时候会自动创建一个key,如果他存在的话，那么就会创建失败</p><p><code>mset key1 value1   key2 value2  ...</code> 可以创建多对key和value</p><p><code>mget  key1 key2 key3 ...</code>可以同时获取多个值</p><p><code>msetnx k1 v1 k2 v2 ...</code>是一个原子性操作，要么一起成功，要么一起失败。</p><h3 id="Redis的数据类型（String-hash-list-set-zset）">Redis的数据类型（String,hash,list,set,zset）</h3><p>Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持<a href="https://www.redis.net.cn/tutorial/3508.html">字符串</a>、<a href="https://www.redis.net.cn/tutorial/3509.html">哈希表</a>、<a href="https://www.redis.net.cn/tutorial/3510.html">列表</a>、<a href="https://www.redis.net.cn/tutorial/3511.html">集合</a>、<a href="https://www.redis.net.cn/tutorial/3512.html">有序集合</a>，<a href="https://www.redis.net.cn/tutorial/3508.html">位图</a>，<a href="https://www.redis.net.cn/tutorial/3513.html">hyperloglogs</a>等数据类型。内置复制、<a href="https://www.redis.net.cn/tutorial/3516.html">Lua脚本</a>、LRU收回、<a href="https://www.redis.net.cn/tutorial/3515.html">事务</a>以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动<a href="https://www.redis.net.cn/tutorial/3524.html">分区</a>。</p><h4 id="Redis-键-key-命令">Redis 键(key) 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Type 命令</td><td>返回 key 所储存的值的类型。</td></tr><tr><td>PEXPIREAT</td><td>设置 key 的过期时间亿以毫秒计。</td></tr><tr><td>PEXPIREAT</td><td>设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td></tr><tr><td>Rename</td><td>修改 key 的名称</td></tr><tr><td>PERSIST</td><td>移除 key 的过期时间，key 将持久保持。</td></tr><tr><td>Move</td><td>将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td>RANDOMKEY</td><td>从当前数据库中随机返回一个 key 。</td></tr><tr><td>Dump</td><td>序列化给定 key ，并返回被序列化的值。</td></tr><tr><td>TTL</td><td>以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td>Expire</td><td>seconds 为给定 key 设置过期时间。</td></tr><tr><td>DEL</td><td>该命令用于在 key 存在是删除 key。</td></tr><tr><td>Pttl</td><td>以毫秒为单位返回 key 的剩余的过期时间。</td></tr><tr><td>Renamenx</td><td>仅当 newkey 不存在时，将 key 改名为 newkey 。</td></tr><tr><td>EXISTS</td><td>检查给定 key 是否存在。</td></tr><tr><td>Expireat</td><td>EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td></tr><tr><td>Keys</td><td>找所有符合给定模式( pattern)的 key 。</td></tr></tbody></table><h4 id="Redis-字符串-String-命令">Redis 字符串(String) 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Setnx</td><td>只有在 key 不存在时设置 key 的值。</td></tr><tr><td>Getrange</td><td>返回 key 中字符串值的子字符</td></tr><tr><td>Mset</td><td>同时设置一个或多个 key-value 对。</td></tr><tr><td>Setex</td><td>将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td>SET</td><td>设置指定 key 的值</td></tr><tr><td>Get</td><td>获取指定 key 的值。</td></tr><tr><td>Getbit</td><td>对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td>Setbit</td><td>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td>Decr</td><td>将 key 中储存的数字值减一。</td></tr><tr><td>Decrby</td><td>key 所储存的值减去给定的减量值（decrement） 。</td></tr><tr><td>Strlen</td><td>返回 key 所储存的字符串值的长度。</td></tr><tr><td>Msetnx</td><td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td>Incrby</td><td>将 key 所储存的值加上给定的增量值（increment） 。</td></tr><tr><td>Incrbyfloat</td><td>将 key 所储存的值加上给定的浮点增量值（increment） 。</td></tr><tr><td>Setrange</td><td>用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td>Psetex</td><td>这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td>Append</td><td>如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。</td></tr><tr><td>Getset</td><td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td>Mget</td><td>获取所有(一个或多个)给定 key 的值。</td></tr><tr><td>Incr</td><td>将 key 中储存的数字值增一。</td></tr></tbody></table><h4 id="Redis-哈希-Hash-命令">Redis 哈希(Hash) 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Hmset</td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td>Hmget</td><td>获取所有给定字段的值</td></tr><tr><td>Hset</td><td>将哈希表 key 中的字段 field 的值设为 value 。</td></tr><tr><td>Hgetall</td><td>获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td>Hget</td><td>获取存储在哈希表中指定字段的值/td&gt;</td></tr><tr><td>Hexists</td><td>查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td>Hincrby</td><td>为哈希表 key 中的指定字段的整数值加上增量 increment 。</td></tr><tr><td>Hlen</td><td>获取哈希表中字段的数量</td></tr><tr><td>Hdel</td><td>删除一个或多个哈希表字段</td></tr><tr><td>Hvals</td><td>获取哈希表中所有值</td></tr><tr><td>Hincrbyfloat</td><td>为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td></tr><tr><td>Hkeys</td><td>获取所有哈希表中的字段</td></tr><tr><td>Hsetnx</td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr></tbody></table><h4 id="Redis-列表-List-命令">Redis 列表(List) 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Lindex</td><td>通过索引获取列表中的元素</td></tr><tr><td>Rpush</td><td>在列表中添加一个或多个值</td></tr><tr><td>Lrange</td><td>获取列表指定范围内的元素</td></tr><tr><td>Rpoplpush</td><td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td>Blpop</td><td>移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>Brpop</td><td>移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>Brpoplpush</td><td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td>Lrem</td><td>移除列表元素</td></tr><tr><td>Llen</td><td>获取列表长度</td></tr><tr><td>Ltrim</td><td>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td>Lpop</td><td>出并获取列表的第一个元素</td></tr><tr><td>Lpushx</td><td>将一个或多个值插入到已存在的列表头部</td></tr><tr><td>Linsert</td><td>在列表的元素前或者后插入元素</td></tr><tr><td>Rpop</td><td>移除并获取列表最后一个元素</td></tr><tr><td>Lset</td><td>通过索引设置列表元素的值</td></tr><tr><td>Lpush</td><td>将一个或多个值插入到列表头部</td></tr><tr><td>Rpushx</td><td>为已存在的列表添加值</td></tr></tbody></table><h4 id="Redis-集合-Set-命令">Redis 集合(Set) 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Sunion</td><td>返回所有给定集合的并集</td></tr><tr><td>Scard</td><td>获取集合的成员数</td></tr><tr><td>Srandmember</td><td>返回集合中一个或多个随机数</td></tr><tr><td>Smembers</td><td>返回集合中的所有成员</td></tr><tr><td>Sinter</td><td>返回给定所有集合的交集</td></tr><tr><td>Srem</td><td>除集合中一个或多个成员</td></tr><tr><td>Smove</td><td>将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td>Sadd</td><td>向集合添加一个或多个成员</td></tr><tr><td>Sismember</td><td>判断 member 元素是否是集合 key 的成员</td></tr><tr><td>Sdiffstore</td><td>返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td>Sdiff</td><td>返回给定所有集合的差集</td></tr><tr><td>Sscan</td><td>迭代集合中的元素</td></tr><tr><td>Sinterstore</td><td>返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td>Sunionstore</td><td>所有给定集合的并集存储在 destination 集合中</td></tr><tr><td>Spop</td><td>移除并返回集合中的一个随机元素</td></tr></tbody></table><h4 id="Redis-有序集合-sorted-set-命令">Redis 有序集合(sorted set) 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Zrevrank</td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td>Zlexcount</td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td>Zunionstore</td><td>计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td>Zremrangebyrank</td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td>Zcard</td><td>获取有序集合的成员数</td></tr><tr><td>Zrem</td><td>移除有序集合中的一个或多个成员</td></tr><tr><td>Zinterstore</td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td>Zrank</td><td>返回有序集合中指定成员的索引</td></tr><tr><td>Zincrby</td><td>有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td>Zrangebyscore</td><td>通过分数返回有序集合指定区间内的成员</td></tr><tr><td>Zrangebylex</td><td>通过字典区间返回有序集合的成员</td></tr><tr><td>Zscore</td><td>返回有序集中，成员的分数值</td></tr><tr><td>Zremrangebyscore</td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td>Zscan</td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr><tr><td>Zrevrangebyscore</td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td>Zremrangebylex</td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td>Zrevrange</td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td>Zrange</td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td>Zcount</td><td>计算在有序集合中指定区间分数的成员数</td></tr><tr><td>Zadd</td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr></tbody></table><h4 id="Redis-连接-命令">Redis 连接 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Echo</td><td>打印字符串</td></tr><tr><td>Select</td><td>切换到指定的数据库</td></tr><tr><td>Ping</td><td>查看服务是否运行</td></tr><tr><td>Quit</td><td>关闭当前连接</td></tr><tr><td>Auth</td><td>验证密码是否正确</td></tr></tbody></table><h4 id="Redis-服务器-命令">Redis 服务器 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Client Pause</td><td>在指定时间内终止运行来自客户端的命令</td></tr><tr><td>Debug Object</td><td>获取 key 的调试信息</td></tr><tr><td>Flushdb</td><td>删除当前数据库的所有key</td></tr><tr><td>Save</td><td>异步保存数据到硬盘</td></tr><tr><td>Showlog</td><td>管理 redis 的慢日志</td></tr><tr><td>Lastsave</td><td>返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示</td></tr><tr><td>Config Get</td><td>获取指定配置参数的值</td></tr><tr><td>Command</td><td>获取 Redis 命令详情数组</td></tr><tr><td>Slaveof</td><td>将当前服务器转变为指定服务器的从属服务器(slave server)</td></tr><tr><td>Debug Segfault</td><td>让 Redis 服务崩溃</td></tr><tr><td>Flushall</td><td>删除所有数据库的所有key</td></tr><tr><td>Dbsize</td><td>返回当前数据库的 key 的数量</td></tr><tr><td>Bgrewriteaof</td><td>异步执行一个 AOF（AppendOnly File） 文件重写操作</td></tr><tr><td>Cluster Slots</td><td>获取集群节点的映射数组</td></tr><tr><td>Config Set</td><td>修改 redis 配置参数，无需重启</td></tr><tr><td>Command Info</td><td>获取指定 Redis 命令描述的数组</td></tr><tr><td>Shutdown</td><td>异步保存数据到硬盘，并关闭服务器</td></tr><tr><td>Sync</td><td>用于复制功能(replication)的内部命令</td></tr><tr><td>Client Kill</td><td>关闭客户端连接</td></tr><tr><td>Role</td><td>返回主从实例所属的角色</td></tr><tr><td>Monitor</td><td>实时打印出 Redis 服务器接收到的命令，调试用</td></tr><tr><td>Command Getkeys</td><td>获取给定命令的所有键</td></tr><tr><td>Client Getname</td><td>获取连接的名称</td></tr><tr><td>Config Resetstat</td><td>重置 INFO 命令中的某些统计数据</td></tr><tr><td>Command Count</td><td>获取 Redis 命令总数</td></tr><tr><td>Time</td><td>返回当前服务器时间</td></tr><tr><td>Info</td><td>获取 Redis 服务器的各种信息和统计数值</td></tr><tr><td>Config rewrite</td><td>对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写</td></tr><tr><td>Client List</td><td>获取连接到服务器的客户端连接列表</td></tr><tr><td>Client Setname</td><td>设置当前连接的名称</td></tr><tr><td>Bgsave</td><td>在后台异步保存当前数据库的数据到磁盘</td></tr></tbody></table><h4 id="Redis-脚本-命令">Redis 脚本 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Script kill</td><td>杀死当前正在运行的 Lua 脚本。</td></tr><tr><td>Script Load</td><td>将脚本 script 添加到脚本缓存中，但并不立即执行这个脚本。</td></tr><tr><td>Eval</td><td>执行 Lua 脚本。</td></tr><tr><td>Evalsha</td><td>执行 Lua 脚本。</td></tr><tr><td>Script Exists</td><td>查看指定的脚本是否已经被保存在缓存当中。</td></tr><tr><td>Script Flush</td><td>从脚本缓存中移除所有脚本。</td></tr></tbody></table><h4 id="Redis-事务-命令">Redis 事务 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Exec</td><td>执行所有事务块内的命令。</td></tr><tr><td>Watch</td><td>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</td></tr><tr><td>Discard</td><td>取消事务，放弃执行事务块内的所有命令。</td></tr><tr><td>Unwatch</td><td>取消 WATCH 命令对所有 key 的监视。</td></tr><tr><td>Multi</td><td>标记一个事务块的开始。</td></tr></tbody></table><h4 id="Redis-HyperLogLog-命令">Redis HyperLogLog 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Pgmerge</td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr><tr><td>Pfadd</td><td>添加指定元素到 HyperLogLog 中。</td></tr><tr><td>Pfcount</td><td>返回给定 HyperLogLog 的基数估算值。</td></tr></tbody></table><h4 id="Redis-发布订阅-命令">Redis 发布订阅 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>Unsubscribe</td><td>指退订给定的频道。</td></tr><tr><td>Subscribe</td><td>订阅给定的一个或多个频道的信息。</td></tr><tr><td>Pubsub</td><td>查看订阅与发布系统状态。</td></tr><tr><td>Punsubscribe</td><td>退订所有给定模式的频道。</td></tr><tr><td>Publish</td><td>将信息发送到指定的频道。</td></tr><tr><td>Psubscribe</td><td>订阅一个或多个符合给定模式的频道。</td></tr></tbody></table><h4 id="Redis-地理位置-geo-命令">Redis 地理位置(geo) 命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>GEOHASH</td><td>返回一个或多个位置元素的 Geohash 表示</td></tr><tr><td>GEOPOS</td><td>从key里返回所有给定位置元素的位置（经度和纬度）</td></tr><tr><td>GEODIST</td><td>返回两个给定位置之间的距离</td></tr><tr><td>GEORADIUS</td><td>以给定的经纬度为中心， 找出某一半径内的元素</td></tr><tr><td>GEOADD</td><td>将指定的地理空间位置（纬度、经度、名称）添加到指定的key中</td></tr><tr><td>GEORADIUSBYMEMBER</td><td>找出位于指定范围内的元素，中心点是由给定的位置元素决定</td></tr></tbody></table><h3 id="如何在Redis中使用悲观锁和乐观锁">如何在Redis中使用悲观锁和乐观锁</h3><p>乐观锁一般采取的方式：</p><p>获取版本号，也就是version</p><p>然后更新的时候比较版本号</p><blockquote><p>Redis检测测试</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 2  选择数据库</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; <span class="built_in">set</span> money 100  </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; watch money <span class="comment">#监视money对象</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2]&gt; multi <span class="comment"># 事务正常结束，数据没有发生变动，那么就可以正常执行成功</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; decrby money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379[2](TX)&gt; incrby out 20</span><br><span class="line">QUEUED</span><br></pre></td></tr></table></figure><p>乐观锁</p><p>流程</p><ol><li>先<strong>watch   key</strong> 监视</li><li>然后         <strong>multi</strong>          监测事务,监测事务是否发生变化，如果没有变化那就可以执行成功，如果发生变化，那么对不起，执行失败</li><li>如果发现事务执行失败，那么就先解锁          也就是<strong>unwatch</strong></li><li>获取最新的值，再次监视，select version , <strong>watch key</strong><br>. <strong>decrby key</strong> 值 减少<br>. <strong>incrby key</strong> 值 增加</li></ol><h3 id="Jedis">Jedis</h3><p>:arrow_down_small:是java操作redis中的中间件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入jedis的包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个new Jedis对象</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.1.100&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//jedis所有的指令就是我们学的所有的指令</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>PONG  说明链接成功</p><h3 id="Redis事务">Redis事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">redis的事务处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Redis</span>事务 &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//开启链接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;192.168.1.100&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//清空当前数据库</span></span><br><span class="line">        jedis.flushDB();</span><br><span class="line">        <span class="comment">//将数据转换为json格式，目前公司大部分使用的均是json</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;u1&quot;</span>,<span class="string">&quot;我喜欢&quot;</span>);</span><br><span class="line">        jsonObject.put(<span class="string">&quot;u2&quot;</span>,<span class="string">&quot;你&quot;</span>);</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">multi</span> <span class="operator">=</span> jedis.multi();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jsonObject.toJSONString();</span><br><span class="line">        <span class="comment">//  System.out.println(jedis.ping());</span></span><br><span class="line">        <span class="comment">//如果我需要监控，那么我就需要加一个乐观锁</span></span><br><span class="line">        jedis.watch(result);<span class="comment">//加一个锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;u1&quot;</span>,result);</span><br><span class="line">            multi.set(<span class="string">&quot;u2&quot;</span>,result);</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            multi.exec();<span class="comment">//如果成功执行事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            multi.discard(); <span class="comment">//如果失败了，那么就事务回滚，或者事务放弃</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;u1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;u2&quot;</span>));</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//multi.set(&quot;u1&quot;,&quot;老胡&quot;);</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashMap map = new HashMap();</span></span><br><span class="line"><span class="comment">        String ke = &quot;k1&quot;;</span></span><br><span class="line"><span class="comment">        map.put(ke,&quot;小黑&quot;);</span></span><br><span class="line"><span class="comment">        map.put(ke,&quot;你好&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(map);</span></span><br><span class="line"><span class="comment">        System.out.println(map.size());</span></span><br><span class="line"><span class="comment">        &#123;k1=你好&#125;</span></span><br><span class="line"><span class="comment">            1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">//连接关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SpringBoot整合Redis">SpringBoot整合Redis</h3><p>springBoot操作数据： spring-data jpa JDBC MONGODB  Redis</p><blockquote><p>注意在springBoot 2.x之后，原来的redis都被替换为lettuce</p></blockquote><p>Jedis ： 采用的直连，多个线程操作的话是不安全的，如果想要避免不安全，使用jedis pool链接池。BIO</p><p>lettuce：采用netty，实例可以在多个线程下使用，不存在线程不安全的情况，可以减少线程数据，更加像NIO模式。</p><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入jedis的包--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置redis</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><p>源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisAutoConfiguration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RedisAutoConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean( //只有在没有的时候使用，故而，我们可以自定义一个RedisTemplate</span></span><br><span class="line"><span class="meta">        name = &#123;&quot;redisTemplate&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">        <span class="comment">//默认的，redisTemplate ，没有过多的设置，redis对象都是需要序列化</span></span><br><span class="line">    <span class="comment">//两个泛型读书Object,Object的类型，我们使用需要强制转换为&lt;String,Obeject&gt;</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="comment">//由于String是Redis的最常使用的类型，所以但对提出来了一个bean</span></span><br><span class="line">    <span class="keyword">public</span> StringRedisTemplate <span class="title function_">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="type">StringRedisTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisTemplate</span>();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisSpringBootApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        redisTemplate 操作不同的数据类型。api和我们的指令是一样的</span></span><br><span class="line"><span class="comment">        opsForValue  操作字符串，类似String</span></span><br><span class="line"><span class="comment">        opsForList 操作list 相当于list</span></span><br><span class="line"><span class="comment">        opsForSet</span></span><br><span class="line"><span class="comment">        opsForHash</span></span><br><span class="line"><span class="comment">        opsForZSet</span></span><br><span class="line"><span class="comment">        opsForGeo</span></span><br><span class="line"><span class="comment">        opsForHyperLogLogLog</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        除了基本的操作，我们常用方法都可以使用redisTemplate操作</span></span><br><span class="line"><span class="comment">        比如事务和基本的操作</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取redis的链接对象</span></span><br><span class="line"><span class="comment">        RedisConnection redisConnection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">        redisConnection.flushDb();</span></span><br><span class="line"><span class="comment">        redisConnection.flushAll();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;k&quot;</span>,<span class="number">123</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;k1&quot;</span>,<span class="string">&quot;罗小黑&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;k&quot;</span>));</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;k1&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置信息；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Redis_SpringBoot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Redis_SpringBoot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Redis_SpringBoot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--   重点jackson，是我们将redis的格式转换为redis格式，方便我们最直观的查看     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.taobao.arthas<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>arthas-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.projectreactor<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reactor-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xh.redis_springboot.RedisSpringBootApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义RedisTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Title 自定义一个Template</span></span><br><span class="line"><span class="comment"> * @Description </span></span><br><span class="line"><span class="comment"> * @author  罗小黑</span></span><br><span class="line"><span class="comment"> * @param null</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> * @date 2022/10/12 19:34</span></span><br><span class="line"><span class="comment"> * @email </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Redis_self_RedisTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span></span><br><span class="line">            <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化配置</span></span><br><span class="line">        <span class="comment">// json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">objectJackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        <span class="comment">// String序列化配置</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        template.setHashValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line">        template.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义RedisUtil工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xh.redis_springboot.Util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Title 我们在使用Redis的时候通常使用我们自己的工具类</span></span><br><span class="line"><span class="comment"> * @Description 这是一种思想，一种封装重用的思想，避免我们直接去使用redis自带的指令</span></span><br><span class="line"><span class="comment"> * @author  罗小黑</span></span><br><span class="line"><span class="comment"> * @param null</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> * @date 2022/10/12 20:19</span></span><br><span class="line"><span class="comment"> * @email 2844135670@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================Common=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取链接然后导入</span></span><br><span class="line">        <span class="type">RedisConnection</span> <span class="variable">redisConnection</span> <span class="operator">=</span> Objects.requireNonNull(redisTemplate.getConnectionFactory()).getConnection();</span><br><span class="line">        redisConnection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flushDB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RedisConnection</span> <span class="variable">redisConnection</span> <span class="operator">=</span> Objects.requireNonNull(redisTemplate.getConnectionFactory()).getConnection();</span><br><span class="line">        redisConnection.flushDb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(String key, Long time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(Arrays.asList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================String=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">set</span><span class="params">(String key, Object value, Long time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//================================Map=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, Long time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hset</span><span class="params">(String key, String item, Object value, Long time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//============================set=============================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSetAndTime</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===============================list=================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束  0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, Long start, Long end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, Long index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">lSet</span><span class="params">(String key, Object value, Long time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, Long time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">lUpdateIndex</span><span class="params">(String key, Long index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, Long count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>所有的Redis操作，其实都很简单，主要的是理解redis的思想和其中每一种数据结构的用处和作用。</p><h3 id="Redis-conf详细">Redis.conf详细</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">下载redis </span><br><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">创建实例并启动</span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/redis/conf      </span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line">   -v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">   -d redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"> <span class="built_in">ls</span>   查看当前文件夹下的文件</span><br><span class="line"> <span class="built_in">cat</span> redis.conf</span><br><span class="line"></span><br><span class="line"> 测试redis </span><br><span class="line">  </span><br><span class="line"> docker <span class="built_in">exec</span> -it redis redis-cli</span><br><span class="line"> </span><br><span class="line"> ---</span><br><span class="line"> 由于以前的数据全存在内存中，从而我们重复读取get a的时候会导致失败</span><br><span class="line">[root@localhost conf]<span class="comment"># cat redis.conf</span></span><br><span class="line">[root@localhost conf]<span class="comment"># docker exec -it redis redis-cli</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get a</span><br><span class="line"><span class="string">&quot;b&quot;</span>   //从而在一次上来的时候这块是null</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">--让redis 持久化  ---&gt; <span class="built_in">pwd</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line">[root@localhost conf]<span class="comment"># pwd</span></span><br><span class="line">/mydata/redis/conf</span><br><span class="line">[root@localhost conf]<span class="comment"># ls</span></span><br><span class="line">redis.conf</span><br><span class="line">[root@localhost conf]<span class="comment"># vi redis.conf </span></span><br><span class="line">i</span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">esc  :wq</span><br><span class="line"></span><br><span class="line">docker restart redis  //重启redis</span><br><span class="line">--设置开机自启动docker 里边容器</span><br><span class="line">sudo docker update &lt;容器名&gt; --restart=always</span><br></pre></td></tr></table></figure><p>启动的时候通过配置文件处理；</p><blockquote><p>单位</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># pwd</span></span><br><span class="line">/mydata/redis/conf</span><br><span class="line">[root@localhost conf]<span class="comment"># ls</span></span><br><span class="line">redis.conf</span><br><span class="line">[root@localhost conf]<span class="comment"># vi redis.conf </span></span><br></pre></td></tr></table></figure><ol><li><p>配置文件unit单位对不敏感</p></li><li><p>包含</p></li><li><p>网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#绑定的IP</span></span><br><span class="line">protected-mode <span class="built_in">yes</span> <span class="comment">#包含模式</span></span><br><span class="line">port 6379 <span class="comment">#端口配置，不推荐修改</span></span><br></pre></td></tr></table></figure></li><li><p>通用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">daemonize <span class="built_in">yes</span> <span class="comment">#以守护进程的方式运行，默认是no，我们需要自己开启为yes!</span></span><br><span class="line"></span><br><span class="line">pidfile /var/run/redis_6379.pid  <span class="comment">#如果以后台程序运行，我们就需要给一个pid文件</span></span><br><span class="line">loglevel notice <span class="comment"># 日志文件</span></span><br><span class="line">logfile <span class="string">&quot;&quot;</span> <span class="comment">#日志文件位置名</span></span><br><span class="line">databases 16 <span class="comment">#数据库的数量，默认是16个数据库</span></span><br><span class="line">always-show-logo <span class="built_in">yes</span> <span class="comment">#是否显示logo </span></span><br></pre></td></tr></table></figure></li><li><p>快照</p><p>持久化，在规定的时间内，执行了多少次操作，则会持久化到文件 .rdb.aof</p><p>redis是内存数据库，如果没有持久化，那么数据断电就会丢失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果在900秒内，如果有至少一个key 进行修改，我们就需要进行持久化操作</span></span><br><span class="line">save 900 1  </span><br><span class="line"><span class="comment">#如果在300秒内，有10个key进行修改，我们就需要进行持久化</span></span><br><span class="line">save  300 10</span><br><span class="line"><span class="comment">#如果60秒内。至少10000key进行修改，我们进行持久化操作</span></span><br><span class="line">save 60 10000</span><br><span class="line"><span class="comment">#之后我们可以自己自定义</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span> <span class="comment">#持久化如果出错，是否还需要继续工作！</span></span><br><span class="line"></span><br><span class="line">rdbcompression <span class="built_in">yes</span> <span class="comment">#是否压缩rdb文件，需要占用一定的cpu的资源</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span> <span class="comment">#是否保持rdb文件的时候，进行错误的检查校验</span></span><br><span class="line"><span class="built_in">dir</span> ./ <span class="comment">#rdb文件保存路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=============================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码 </span></span><br><span class="line">config <span class="built_in">set</span> requirepass <span class="string">&quot;密码&quot;</span></span><br><span class="line"><span class="comment">#此时就需要权限了，也就是需要密码了</span></span><br><span class="line">config get requirepass </span><br><span class="line"><span class="comment">#输入密码</span></span><br><span class="line">auth 密码</span><br><span class="line"><span class="comment">#此时就可以查看</span></span><br><span class="line">config get requirepass </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>限制客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">maxclients 10000  <span class="comment">#设置能链接上的redis的最大客户端数量</span></span><br><span class="line">maxmemory &lt;byte&gt; <span class="comment">#redis 配置最大的内存容量</span></span><br><span class="line">maxmemory-policy noeviction <span class="comment">#内存到达上限之后的处理策略</span></span><br><span class="line"></span><br><span class="line">volatile-lru，针对设置了过期时间的key，使用lru算法进行淘汰。</span><br><span class="line">allkeys-lru，针对所有key使用lru算法进行淘汰。</span><br><span class="line">volatile-random，从所有设置了过期时间的key中使用随机淘汰的方式进行淘汰。</span><br><span class="line">allkeys-random，针对所有的key使用随机淘汰机制进行淘汰。</span><br><span class="line">volatile-ttl，针对设置了过期时间的key，越早过期的越先被淘汰。</span><br><span class="line">noeviction，不会淘汰任何数据，当使用的内存空间超过 maxmemory 值时，再有写请求来时返回错误。</span><br></pre></td></tr></table></figure></li><li><p>AOF : APPENDONLY 模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">appendonly no <span class="comment">#默认是不开启模式的aof默认是使用rdb的，大部分情况下rdb够用了</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span> <span class="comment">#持久化的文件的名字 .rdb</span></span><br><span class="line"><span class="comment">#appendfsync always  每次修改都会 sync消耗性能</span></span><br><span class="line">appendsync everysec <span class="comment">#每秒执行一个sync 可能会丢失这个ls的数据</span></span><br><span class="line"><span class="comment">#appendfsync no 不执行sync这个是操作系统自己同步数据，速度最快</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="redis持久化">redis持久化</h3><p><strong>AOF</strong>:</p><p>将我们所有的命令记录下来，history，恢复的时候就把这个文件全部执行一次。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]<span class="comment"># vi redis.conf </span></span><br><span class="line">i</span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line">esc  :wq</span><br></pre></td></tr></table></figure><p>一般是默认不开启的，我们需要手动去开启。</p><p>我们一般需要将appendonly 改成yes就行，然后我们就开启了</p><p>更新后我们需要重启服务器，</p><p>我们可以直接使用<code>vim appendonly.aof</code>查看我们配置后产生的文件，但是当我们将aof文件进行一定的更改就会导致redis启动不起来了，这个时候我们就需要修复这个aof文件</p><p>redis给我们提供了一个工具 <code>redis-check-aof --fix</code></p><p>然后按照指令操作，我们就可以完成aof的文件修复。</p><blockquote><p>优点和缺点</p></blockquote><p>优点：</p><ol><li>每一次修改都同步，文件的完整会更好</li><li>每秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率是最高的</li></ol><p>缺点：</p><ol><li>相对于数据文件来说，AOF大于RDB,修复的速度也比RDB慢！</li><li>AOF运行效率也会比RDB慢，故而我们需要Redis默认的RDB持久化</li></ol><p>如果AOF文件大于64MB,也就是太大了，fork一个新进程将对我们的文件进行重写！</p><p><strong>RDB</strong>:</p><p>dump.rdb</p><p>redis默认RDB</p><ol><li>save的规则满足的情况下，会自动触发rdb规则</li><li>执行flushAll命令，也会触发我们rdb规则</li><li>退出redis也会产生rdb文件</li></ol><p>备份就产生一个dump.rdb文件</p><blockquote><p>如何恢复rdb文件</p></blockquote><ol><li>只要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump,rdb文件，然后恢复文件</li><li>查看我们需要存在的位置</li></ol><p>一般上我们默认使用RDB</p><p><strong>优点：</strong></p><ol><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ol><p><strong>缺点</strong></p><ol><li>需要一定的时间间隔进程操作，如果redis意外宕机了，这个最后一次修改的数据就没有了</li><li>fork进程的时候需要占用一定的内存空间</li></ol><h3 id="Redis发布订阅">Redis发布订阅</h3><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>注意我们需要开启两个客户端，一个做订阅的一个做推送的。</p><p>Redis 客户端可以订阅任意数量的频道。</p><p>以下实例演示了发布订阅是如何工作的，需要开启两个 redis-cli 客户端。</p><p>在我们实例中我们创建了订阅频道名为 <strong>runoobChat</strong>:</p><p><code>SUBSCRIBE 名字</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SUBSCRIBE runoobChat <span class="comment">#订阅一个频道，名字runoobChat</span></span><br><span class="line"></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;runoobChat&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment">#等待读取推送的消息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在，我们先重新开启个 redis 客户端，然后在同一个频道 runoobChat 发布两次消息，订阅者就能接收到消息。</p><p><code>PUBLISH 名字 信息</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; PUBLISH runoobChat <span class="string">&quot;Redis PUBLISH test&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; PUBLISH runoobChat <span class="string">&quot;Learn redis by runoob.com&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># 订阅者的客户端会显示如下消息</span></span><br><span class="line"> 1) <span class="string">&quot;message&quot;</span> <span class="comment">#消息</span></span><br><span class="line">2) <span class="string">&quot;runoobChat&quot;</span>   <span class="comment">#那个频道的消息</span></span><br><span class="line">3) <span class="string">&quot;Redis PUBLISH test&quot;</span> <span class="comment"># 消息的具体内容</span></span><br><span class="line"> 1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;runoobChat&quot;</span></span><br><span class="line">3) <span class="string">&quot;Learn redis by runoob.com&quot;</span></span><br></pre></td></tr></table></figure><p>gif 演示如下：</p><ul><li>开启本地 Redis 服务，开启两个 redis-cli 客户端。</li><li>在<strong>第一个 redis-cli 客户端</strong>输入 SUBSCRIBE runoobChat，意思是订阅 <code>runoobChat</code> 频道。</li><li>在<strong>第二个 redis-cli 客户端</strong>输入 PUBLISH runoobChat “Redis PUBLISH test” 往 runoobChat 频道发送消息，这个时候在第一个 redis-cli 客户端就会看到由第二个 redis-cli 客户端发送的测试消息。</li></ul><table><thead><tr><th>1</th><th>PSUBSCRIBE pattern 订阅一个或多个符合给定模式的频道。</th></tr></thead><tbody><tr><td>2</td><td>PUBSUB subcommand [argument 查看订阅与发布系统状态。</td></tr><tr><td>3</td><td>PUBLISH channel message 将信息发送到指定的频道。</td></tr><tr><td>4</td><td>PUNSUBSCRIBE  退订所有给定模式的频道。</td></tr><tr><td>5</td><td>SUBSCRIBE channe订阅给定的一个或多个频道的信息。</td></tr><tr><td>6</td><td>UNSUBSCRIBE   指退订给定的频道。</td></tr></tbody></table><h3 id="redis主从复制">redis主从复制</h3><p>Redis Replication是一种 master-slave 模式的复制机制，这种机制使得 slave 节点可以成为与 master 节点完全相同的副本，可以采用一主多从或者级联结构 。</p><blockquote><p>主从复制的配置要点：</p><p>（1）配从库不配主，从库配置：slaveof 主库IP 主库端口</p><p>（2）查看redis的配置信息：info replication</p></blockquote><blockquote><p><strong>Redis为什么需要主从复制？</strong><br>使用Redis主从复制的原因主要是单台Redis节点存在以下的局限性：</p><p>（1）Redis虽然读写的速度都很快，单节点的Redis能够支撑QPS大概在5w左右，如果上千万的用户访问，Redis就承载不了，成为了高并发的瓶颈。</p><p>（2）单节点的Redis不能保证高可用，当Redis因为某些原因意外宕机时，会导致缓存不可用</p><p>（3）CPU的利用率上，单台Redis实例只能利用单个核心，这单个核心在面临海量数据的存取和管理工作时压力会非常大。</p></blockquote><blockquote><p><strong>主从复制的好处：</strong><br>（1）数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。</p><p>（2）故障恢复：如果master宕掉了，使用哨兵模式，可以提升一个 slave 作为新的 master，进而实现故障转移，实现高可用</p><p>（3）负载均衡：可以轻易地实现横向扩展，实现读写分离，一个 master 用于写，多个 slave 用于分摊读的压力，从而实现高并发；</p></blockquote><blockquote><p><strong>主从复制的缺点：</strong><br>由于所有的写操作都是先在Master上操作，然后同步更新到Slave上，所以从Master同步到Slave服务器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重，Slave机器数量的增加也会使这个问题更加严重</p></blockquote><p><strong>环境配置</strong>：</p><p>只配置从库，不配置主库</p><p><code>info replication</code>查看相关配置库</p><p><code>vim redis79.conf</code> 进入配置文件进行更改</p><p>改端口port，改后台服务名字pid，改日志，改后台运行，改dbfilename  dump.rdb</p><p><code>redis-server kconfig/redis.conf</code>  我们启动相应配置后的redis从库</p><p><code>ps  -ef|grep redis</code> 查看后台启动信息</p><h4 id="一主二从">一主二从</h4><p>刚刚配置后其每个数据库都是主库，只有经过配置后才能保证redis的某个库变成从库。</p><p>默认情况之下。每台Redis服务器都是主表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 6379   <span class="comment">#启动redis的客户端</span></span><br><span class="line"><span class="comment">#注意这个是在你要指定作为从机的客户端窗口里边执行的，他选择老大，而不是老大选择他</span></span><br><span class="line">slaveof 127.0.0.1 6379 <span class="comment">#配置主表 简称任命老大</span></span><br></pre></td></tr></table></figure><p>我们通命令配置的，只能是暂时的。</p><p>我们可以通Redis.conf完成配置达到永久配置的方式，具体可以百度解决。</p><blockquote><p>replicaof <masterip> ip地址  <masterport>端口号   配置在从机的配置文件内，当服务重新启动，这个表就作为从机了</p></blockquote><p>注意：</p><p>当我们配置好主机和从机后，主机可以进行set添加数据，而添加的数据可以直接在从表中查到，但是从表不能添加数据，因为他是从表。</p><p>没有配置哨兵的时候：当主机断开链接的时候，从机依旧连接到主机，但是没有写操作，只有读操作，当这个时候主机回来了，那么从机还是保持链接，主机添加数据从机照样读取主机的数据。</p><p>如果是使用命令行，那么重新启动后就又会变回主机，但这个时候，只要变回从机，那么就可以立马拿到主机的数据</p><blockquote><p>复制原理</p></blockquote><p>slave启动启动成功链接到master后会发送一个sync同步命令</p><p>Master接受到命令后，启动后台的存盘进程，同时收集所有接收到用于修改数据集命令，在后台进程执行完毕后，master将传送整个数据文件到slave,并完成一次完全同步。</p><p>全量复制：而slave服务在接到数据库文件数据后，将其存盘并加载到内存中</p><p>增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步。</p><p>但是只要是重新链接Master,一次完全同步（全部复制）将会自动执行。</p><blockquote><p>层层连接</p></blockquote><p>A-&gt;B-&gt;C</p><h4 id="宕机手动配置主机">宕机手动配置主机</h4><p>如果我们的主机挂掉了，那么我们如何将从机配置成为主机？</p><p>我们使用的是<code>slaveof no one</code>让从表自己变成主机，那么其他节点就可以手动连接到最新的这个主机，在哨兵没有创建的时候，一般需要我们手动去配置。如果这个时候老大修复了，那么我们就需要重写连接。</p><h4 id="哨兵自动配置">哨兵自动配置</h4><p>Redis的主从复制模式下， 一旦主节点由于故障不能提供服务， 需要人工将从节点晋升为主节点， 同时还要通知应用方更新主节点地址， 对于很多应用场景这种故障处理的方式是无法接受的。 可喜的是Redis从2.8开始正式<br>提供了Redis Sentinel（哨兵） 架构来解决这个问题。</p><p>总结：</p><p>==<strong>Redis主从复制的缺点：没有办法对master进行动态选举，需要使用Sentinel机制完成动态选举</strong>==</p><ul><li><p>哨兵模式介绍</p><ul><li><strong>Sentinel(哨兵)进程是用于监控redis集群中Master主服务器工作的状态在Master主服务器发生故障的时候，可以实现Master和Slave服务器的切换，保证系统的高可用（HA）其已经被集成在redis2.6+的版本中，Redis的哨兵模式到了2.8版本之后就稳定了下来。</strong></li></ul></li><li><p>哨兵进程的作用</p><ul><li>监控(Monitoring):<ul><li>哨兵(sentinel) 会不断地检查你的Master和Slave是否运作正常。</li></ul></li><li>提醒(Notification):<ul><li>当被监控的某个Redis节点出现问题时, 哨兵(sentinel) 可以通过 API 向管理员或者其他应用程序发送通知。</li></ul></li></ul></li><li><p>自动故障迁移(Automatic failover)：</p><ul><li>当一个Master不能正常工作时，哨兵(sentinel) 会开始一次自动故障迁移操作。</li><li>它会将失效Master的其中一个Slave升级为新的Master, 并让失效Master的其他Slave改为复制新的Master；</li><li>当客户端试图连接失效的Master时，集群也会向客户端返回新Master的地址，使得集群可以使用现在的Master替换失效Master。</li><li>Master和Slave服务器切换后，Master的redis.conf、Slave的redis.conf和sentinel.conf的配置文件的内容都会发生相应的改变，即，Master主服务器的redis.conf配置文件中会多一行slaveof的配置，sentinel.conf的监控目标会随之调换。</li></ul></li><li><p>哨兵进程的工作方式</p><ul><li>每个Sentinel（哨兵）进程以每秒钟一次的频率向整个集群中的Master主服务器，Slave从服务器以及其他Sentinel（哨兵）进程发送一个 PING 命令。</li><li>如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值，则这个实例会被 Sentinel（哨兵）进程标记为主观下线（SDOWN）。</li><li>如果一个Master主服务器被标记为主观下线（SDOWN），则正在监视这个Master主服务器的所有</li><li>Sentinel（哨兵）进程要以每秒一次的频率确认Master主服务器的确进入了主观下线状态。</li><li>当有足够数量的 Sentinel（哨兵）进程（大于等于配置文件指定的值）在指定的时间范围内确认Master主服务器进入了主观下线状态（SDOWN）， 则Master主服务器会被标记为客观下线（ODOWN）。</li><li>在一般情况下， 每个Sentinel（哨兵）进程会以每 10 秒一次的频率向集群中的所有Master主服务器、Slave从服务器发送 INFO 命令。</li><li>当Master主服务器被 Sentinel（哨兵）进程标记为客观下线（ODOWN）时，Sentinel（哨兵）进程向下线的 Master主服务器的所有 Slave从服务器发送 INFO 命令的频率会从 10 秒一次改为每秒一次。</li><li>若没有足够数量的 Sentinel（哨兵）进程同意 Master主服务器下线， Master主服务器的客观下线状态就会被移除。若 Master主服务器重新向 Sentinel（哨兵）进程发送 PING 命令返回有效回复，Master主服务器的主观下线状态就会被移除。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置哨兵</span></span><br><span class="line">vim sentinel.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入配置文件 按i进入编辑模式</span></span><br><span class="line">sentinel monitor  名字  ip地址   端口号  1 <span class="comment"># 1代表主机挂了之后是谁成为主机</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1代表slave投票，让谁成为主机票数最多的就是主机</p><p>我们关闭主机后，那么哨兵自动将会替我们从表中选择主机。同时也会在日志里边显示slave0 ,slave1等都是从机，master是主机。这个时候如果主机回来了，那么<strong>主机就只能当从机了，农民翻身做主人了，你想要成为主人，不太可能了，除非关闭其他从机，然后保留你自己，在关闭主机，这样方可成为主机。</strong></p><blockquote><p>优点与缺点</p></blockquote><p>优点：</p><ol><li>哨兵集群，基于主从复制模式，所有的主从配置优点他全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li></ol><p>缺点：</p><ol><li>Redis不好在线扩容，集权容量一旦达到上限，在线扩容就会很麻烦</li><li>实现哨兵模式的配置其实是很麻烦的，里边有很多的选择。</li></ol><blockquote><p>哨兵模式的配置</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line"><span class="built_in">dir</span> /tmp</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class="line"><span class="comment"># quorum 配置多少个sentinel哨兵统一认为master主节点失联 那么这时客观上认为主节点失联了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">  sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span></span><br><span class="line"><span class="comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment">#3.当想要取消一个正在进行的failover所需要的时间。  </span></span><br><span class="line"><span class="comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment">#对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，一个是事件的类型，一个是事件的描述。如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class="line"><span class="comment">#通知脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一般都是运维来配置：</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line"> sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure><h3 id="Redis缓存穿透和雪崩">Redis缓存穿透和雪崩</h3><p>​     缓存穿透：用户想查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向着持久层数据库查询，发现也没有，故而本次查询失败，当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库，这样就会使持久层造成很大压力，这个时候就出现了缓存穿透。</p><p>缓存穿透**，是指查询一个数据库一定不存在的数据。正常的使用缓存流程大致是，数据查询先进行缓存查询，如果key不存在或者key已经过期，再对数据库进行查询，并把查询到的对象，放进缓存。如果数据库查询对象为空，则不放进缓存**</p><p>缓存穿透解决思路：</p><ol><li>如果查询数据库也为空，直接设置一个默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库，这种办法最简单粗暴。</li><li>根据缓存数据Key的规则。例如我们公司是做机顶盒的，缓存数据以Mac为Key，Mac是有规则，如果不符合规则就过滤掉，这样可以过滤一部分查询。在做缓存规划的时候，Key有一定规则的话，可以采取这种办法。这种办法只能缓解一部分的压力，过滤和系统无关的查询，但是无法根治。</li><li>采用布隆过滤器，将所有可能存在的数据哈希到一个足够大的BitSet中，不存在的数据将会被拦截掉，从而避免了对底层存储系统的查询压力。关于布隆过滤器，详情查看：基于BitSet的布隆过滤器（Bloom Filter）</li></ol><p>缓存击穿，<strong>是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</strong></p><p>缓存雪崩</p><p><strong>就是指缓存由于某些原因（比如宕机、cache服务挂了或者不响应）整体crash掉了，导致大量请求到达后端数据库，从而导致数据库崩溃，整个系统崩溃，发生灾难。</strong><br>下面的就是一个雪崩的简单过程：<br>1、redis集群彻底崩溃<br>2、缓存服务大量对redis的请求hang住，占用资源<br>3、缓存服务大量的请求打到源头服务去查询mysql，直接打死mysql<br>4、源头服务因为mysql被打死也崩溃，对源服务的请求也hang住，占用资源</p><p>5、缓存服务大量的资源全部耗费在访问redis和源服务无果，最后自己被拖死，无法提供服务</p><p>6、nginx无法访问缓存服务，redis和源服务，只能基于本地缓存提供服务，但是缓存过期后，没有数据提供</p><p>7、网站崩渍</p><p><strong>缓存雪崩的解决方案</strong><br>1，采用加锁计数，或者使用合理的队列数量来避免缓存失效时对数据库造成太大的压力。这种办法虽然能缓解数据库的压力，但是同时又降低了系统的吞吐量。<br>2，分析用户行为，尽量让失效时间点均匀分布。避免缓存雪崩的出现。<br>3，如果是因为某台缓存服务器宕机，可以考虑做主备，比如：redis主备，但是双缓存涉及到更新事务的问题，update可能读到脏数据，需要好好解决。</p><h3 id="Redis集群分布部署">Redis集群分布部署</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ学习笔记</title>
      <link href="/posts/d439760d.html"/>
      <url>/posts/d439760d.html</url>
      
        <content type="html"><![CDATA[<h1>RabbitMQ学习笔记</h1><p>分布式架构：一个请求由多个服务（服务或者系统）协同处理完成。</p><p>RabbitMQ：消息队列，或者说是一个消息中间键。</p><p>MQ功能：</p><ol><li><strong>削峰</strong>：不让系统直接访问系统，而是通过MQ,然后交给MQ去访问系统，使得访问的人员进行排队。（有排队就会导致比较慢，但是安全有次序。）</li><li><strong>应用解耦</strong>：通过队列去访问系统，各个系统之间通过MQ去完成，也就会不会产生过多故障。</li><li><strong>异步处理</strong>：A-B，并不要A收到B的确定消息才会执行操作。</li></ol><p>MQ的分类：</p><ol><li><p>RabbitMQ: 和spring是一家公司的，使用AMQP(高级消息队列协议）基础上完成的，支持多种语言，缺点是商业版要付费。</p></li><li><p>kafka:为大数据而生，有百万级TPS的，实时计算，吞吐量高，使用在日志采集等方面。缺点是，单机超过64个队列/分区，load会发生明显的飙高现象，队列越多，load越高，发送响应时间越长。消费失败不支持重试，支持消息顺序，但一代代理宕机后，会产生消息乱序，社区更新慢。</p></li><li><p>RocketMQ：由阿里开发，金融行业需要，使用java语言实现，参考了kafka,一般常用于订单，交易，充值，流计算，消息推送，日志处理，bingblog分发等场景。</p><ol><li>优点：单机吞吐10w级别，信息可以做到0丢失，MQ功能比较完善，还是分布式，拓展性号，支持10亿级别的消息堆积，不会因为堆积而导致性能下降。</li><li>缺点：这次客户端语言不多，目前是java和C++,其中C++还不成熟，社区活跃一般。</li></ol></li></ol><h1>初级部分：</h1><p>RabbitMQ：是一个消息中间件，可以当做一个快递站，快递员发包裹到快递站，然后本地快递员将快递发给用户。</p><p>生产者：生产者 - &gt; mq （一个交换机可以绑定多个队列） -&gt; 消费者，一般情况下是一个队列对应一个消费者，如果两个一个队列对应两个消费者，那么就只有一个消费者收到消息，这就想当与只有一个包裹是不可能发给两个人的。</p><p>核心部分：</p><ol><li>简单模式</li><li>工作模式</li><li>发布订阅模式</li><li>路由模式</li><li>主题模式</li><li>发布确认模式</li></ol><p><img src="1666884806286.png" alt="1666884806286"></p><p>**connection:**publisher/consumer 和 broker之间的TCP连接。</p><p>**Channel:**如果每一次访问RabbitMQ都建立一个Connection，在消息量大的时候建立TCP Connection的开销是巨大的，效率也比较低。<strong>channel作为轻量级的Connection极大减少了操作系统建立TCP connection的开销。</strong></p><h2 id="安装rabbitMQ：">安装rabbitMQ：</h2><p>官网：<a href="https://www.rabbitmq.com">https://www.rabbitmq.com</a></p><p>下载页面：<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p><p>我一般使用docker安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># latest RabbitMQ 3.10</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.10-management</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他安装方式：</p><ol><li><p>首先现在linux下的压缩包，或者使用工具将安装包上传到linux系统。</p></li><li><p>安装rabbitMQ的支持依赖</p><ol><li><code>rpm  -ivh erlang-21.3-1.el7.x86_64.rpm</code></li><li><code>yml install socat -y</code></li><li><code>rpm -ivh rabbitmq-server-3.8.8-1.el7.noarch.rpm</code></li></ol></li><li><p>添加常用命令：</p><ol><li><p>添加开机启动<code>chkconfig rabbitmq-server on</code></p></li><li><p>启动服务</p><ol><li><p>找到安装路径</p></li><li><p>sbin下的service 里边的rabbitmq-server start   <code>/sbin/service rabbitmq-server start</code></p></li><li><p>查看服务状态<code>/sbin/service rabbitmq-server status</code></p></li><li><p>停止服务<code>/sbin/service rabbitmq-server stop</code></p></li><li><p>开启后台web管理插件<code>rabbitmq-plugins enable rabbitmq_management</code>（docker安装的不要这么操作）</p></li><li><p>使用账号访问，一般是账号密码都是guest，当然你必须保证你的端口号开放，如果云服务器的话，15972，注意ip地址，如果有域名的话，那么可以在域名后添加<code>：15672</code>直接访问.</p></li><li><p>如果不能直接访问的话，检查一下防火墙，<code>systemctl stop firewalld</code>,这个命令关闭本次防火墙，<code>systemctl enable firewalld</code>可以下次开机也关闭防火墙，<code>systemctl status firewalld</code>可以查看当前系统防护墙状态</p></li><li><p>添加一个新用户，如果是使用虚拟机的话，一般是不能直接使用guest登录的，当然这个我没碰到过</p><ol><li><p>创建一个账号<code>rabbitmqctl add_user 用户名 密码</code></p></li><li><p>设置用户角色 <code>rabbitmqctl set_user_tags admin administractor</code></p></li><li><p>设置用户权限</p><p><code>set_permission[-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</code></p><p>举例：</p><p><code>rabbitmqctl set_permission -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code>用户user_admin具有/vhost1这个vritual host中的所有资源的配置，写，读权限。</p></li><li><p>当前用户和角色</p><p><code>rabbitmqctl list_user</code></p></li></ol></li></ol></li></ol></li></ol><h2 id="如何使用MQ-java代码实现">如何使用MQ(java代码实现)</h2><p>IDEA新建maven工程导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定jdk版本--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--rabbitmq依赖客户端--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--操作文件流的一个依赖--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生产者和消费者：">生产者和消费者：</h2><p>生产者 - 消息队列 - 消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">生产者，目标是发消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  String QUEUE_NAME=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//建立一个连接方式</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//工厂IP 连接RabbitMQ的队列</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;www.littlehei.fun&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建链接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一个队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生成队列</span></span><br><span class="line"><span class="comment">        参数1，队列名称</span></span><br><span class="line"><span class="comment">        参数2，队列里边的消息是否持久化（磁盘）默认情况消息存储在内存中</span></span><br><span class="line"><span class="comment">        参数3，该队列是否只供一个消费者进行消费，是否进行消息共享，true可以多个消费者消费,false：只能一个消费者消费</span></span><br><span class="line"><span class="comment">        参数4，是否自动删除，最后一个消费者断开链接以后，该队是否自动删除，true，自动删除，false不删除</span></span><br><span class="line"><span class="comment">        参数5，其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//发消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;<span class="comment">//初次使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        发送一个消费</span></span><br><span class="line"><span class="comment">        参数1，发送到哪个交换机</span></span><br><span class="line"><span class="comment">        参数2.路由的key值是哪个？  本次是队列的名称</span></span><br><span class="line"><span class="comment">        参数3，其他参数配置</span></span><br><span class="line"><span class="comment">        参数4，发送消息的消息体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1666959574738.png" alt="1666959574738"></p><p>消费者：用来接受生成者产生的消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">消费者，用来消费生成者产生的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="comment">//队列的名称：</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//创建链接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;www.littlehei.fun&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span>  factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span>  connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag,message)-&gt;&#123;</span><br><span class="line">         <span class="comment">//  String message = new String(&quot;自己手动去创建一个消息，但是不推荐&quot;);</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        <span class="type">CancelCallback</span> <span class="variable">cancelCallback</span> <span class="operator">=</span> consumerTag -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息消费被中断&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        消费者接收消息</span></span><br><span class="line"><span class="comment">        参数1，消费哪个队列</span></span><br><span class="line"><span class="comment">        参数2，消费成功之后是否要自动应答，true表示自动应答，false表示不是</span></span><br><span class="line"><span class="comment">        参数3，消费者未成功消费的回调</span></span><br><span class="line"><span class="comment">        参数4，消费者取录消费的回到</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">      channel.basicConsume(QUEUE_NAME,<span class="literal">true</span>,deliverCallback,cancelCallback);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="工作队列">工作队列</h2><p>生成者 —大量发消息-- 队列 – 接到消息–工作线程1或者工作线程2.。。。</p><p>==注意：一个消息只能被处理一次不能处理多次==</p><p>轮训处理消息，你一个，我下一个，他下下个。</p><p>不同<strong>工作线程</strong>之间的关系是==竞争==关系</p><p>创建链接工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetConnection</span> &#123;</span><br><span class="line">    <span class="comment">//建立一个工具类，每次都直接使用，减少代码重复量</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Channel <span class="title function_">getChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//创建一个链接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;www.littlehei.fun&quot;</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>轮训分发代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一个工作线程,可以多个创建，可以多线程创建，具体看你自己如何定于</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkThread1</span> &#123;</span><br><span class="line">    <span class="comment">//首先还是创建一个队列名称</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span>   <span class="type">String</span>  <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">        消费者接收消息</span></span><br><span class="line"><span class="comment">        参数1，消费哪个队列</span></span><br><span class="line"><span class="comment">        参数2，消费成功之后是否要自动应答，true表示自动应答，false表示不是</span></span><br><span class="line"><span class="comment">        参数3，消费者未成功消费的回调</span></span><br><span class="line"><span class="comment">        参数4，消费者取录消费的回到</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到的消息为&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">CancelCallback</span> <span class="variable">cancelCallback</span> <span class="operator">=</span> (consumerTag)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息被取消消费接口回调&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;C1等待接收消息...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消息接收</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="literal">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">生产者，可以发送大量消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span>  String QUEUE_NAEM=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送大量消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">        <span class="comment">//队列声明</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAEM,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        <span class="comment">//从控制台中输入</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">//判断是否有下一个消息输入</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAEM,<span class="literal">null</span>,name.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;发送完成： &quot;</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">----------结果----------</span><br><span class="line">nihap</span><br><span class="line">发送完成nihap</span><br><span class="line">wp1</span><br><span class="line">发送完成wp1</span><br><span class="line">ci1</span><br><span class="line">发送完成ci1</span><br><span class="line">wooda</span><br><span class="line">发送完成wooda</span><br><span class="line">我喜欢你</span><br><span class="line">发送完成我喜欢你</span><br><span class="line">------------------</span><br><span class="line">C1等待接收消息...</span><br><span class="line">接收到的消息为nihap</span><br><span class="line">接收到的消息为ci1</span><br><span class="line">接收到的消息为我喜欢你</span><br><span class="line">--------------------</span><br><span class="line">C2等待接收消息...</span><br><span class="line">接收到的消息为wp1</span><br><span class="line">接收到的消息为wooda</span><br></pre></td></tr></table></figure><h2 id="消息应答">消息应答</h2><p>为了防止消息在发送过程中不丢失，他是==指消费者收到消息并且处理该消息之后，告诉rabbitmq他已经处理完成了，rabbitmq可以把消息删除。==</p><h3 id="自动应答：">自动应答：</h3><p>需要在<strong>高吞吐量和数据传输安全性方面做权衡</strong>，这种模式如果消息在接受到之前，消费者那边出现链接或者channel关闭，那么消息就丢失了，当然如果另一方面这种模式消费者那边可以传递过载消息，没有对传递的消息数量进行限制，这样有可能导致消费者由于接收太多还来不及处理的消息，导致这些消息积压，最终导致内存耗尽，最终这些消费者线程被操作系统杀死，故而<strong>这种模式适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用。</strong>（不靠谱）</p><h3 id="手动应答">手动应答</h3><p>能用手动则用手动。手动方法</p><ol><li>Channel.basicAck(用于肯定确认)</li><li>Channel.basicNack(用于否定确认)</li><li>Channel.basicReject(用于否定确认)，对比nack少了一个参数，不处理该消息了直接就可以拒绝，也可以将他丢弃。</li></ol><p>批量应答（multiple）：==推荐使用false==,当接受到一个消息的时候，也就是队列往信道里边放了n条数据，那么他会将此信道里边的所有消息都应答一次。</p><h3 id="消息自动重新入队">消息自动重新入队</h3><p>如果消费者由于某些原因失去连接，或者说他的通道已经关闭，连接已经关闭或者TCP连接丢失，导致消息未发送ACK确认，**此时RabbitMQ将了解到消息未完全处理，并将其重新排队，如果此时其他消费者可以处理，他将很快将其重新分发给另一个消费者，**这样即使某个消费者偶尔死亡，也可以确保不会丢失任何信息。</p><p>个人理解：</p><p>也就是本来做这个任务的员工有事辞职了，公司为了完成任务交给另一个还在职的员工完成这个任务，直到这个任务完成，这样保证任务不被丢失。</p><p>代码实现：</p><p>消息在手动应答的时候是不应该被丢失的，且会重新入队。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们主要围绕的是手动应答进行处理，要是消息应答不丢失，放回队列</span></span><br><span class="line"><span class="comment">重新消费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> &#123;</span><br><span class="line">    <span class="comment">//老样子，队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声名队列</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从控制台中获取</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息： &quot;</span>+ message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Work_Consume1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//接受消息</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;C1等待接受消息处理时间较短&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, message)-&gt;&#123;</span><br><span class="line">            <span class="comment">//看情况你给不给休眠</span></span><br><span class="line">            SleepUtils.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;接收到消息&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//进行手动应答</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            参数1 ， 消息的标记tag</span></span><br><span class="line"><span class="comment">            参数2， 是否批量应答  false 不 ，true，批量应答</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//手动接收消息</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//采用手动应答</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">autoAck</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        channel.basicConsume(QUEUE_NAME,autoAck,deliverCallback,(consumerTag-&gt;&#123;</span><br><span class="line">            System.out.println(consumerTag + <span class="string">&quot;消费者取消消费接口回调逻辑&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Title 休眠工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">int</span> second)</span> &#123;</span><br><span class="line">        <span class="comment">//JUC里边的工具类</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>*second);</span><br><span class="line">            <span class="comment">//TimeUnit.SECONDS.sleep(2);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">//中断</span></span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述方式，我们可以知道消息队列在我们创建多个消费者的时候，是轮转来的，当然，假设有两个消费者，如果有一个宕机，那么消息队列就将本轮转给没宕机的那个消费者消费，==只要生产者有产生，无论如何要将消息全部消费==，不可丢弃。</p><h2 id="Rabbit消息持久化">Rabbit消息持久化</h2><p>消息是可以持久化保存的，持久的目的是为了处理任务丢失情况的，采用持久化可以保证消息存储，且消息不被丢失。</p><h4 id="队列如何持久化">队列如何持久化</h4><blockquote><p>两个持久化操作都是在生产者中进行的。</p></blockquote><p>我们需要将durable参数设置为持久化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//让队列持久化</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">durable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">channel.queueDeclare(队列名,durable,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>但是需要注意的是，==就是如果之前声明的队列不是持久化的，需要把原先队列先删除，然后重新创建一个持久化队列，不然就会出现错误==。</p><p>错误：</p><blockquote><p>com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - inequivalent arg ‘durable’ for queue ‘ack_queue’ in vhost ‘/’: received ‘true’ but current is ‘false’, class-id=50, method-id=10)</p></blockquote><p><img src="1667052000268.png" alt="1667052000268"></p><p><img src="1667052068537.png" alt="1667052068537"></p><p><strong>注意：</strong></p><p>==持久化后的rabbitMQ重启之后队列消息还是会存在的，未持久化的，那么对不起，他没了。==</p><h4 id="消息持久化">消息持久化</h4><p>将消息标记为持久化并不能保证不会丢失消息，尽管他会告诉rabbitMQ将消息保存到磁盘中，但是这里仍然存在当消息刚刚存储池在磁盘的时候，但是还没有存储完，消息还在缓存的一个间隔点，此时并没有真正写入磁盘，持久性保证并不强，但是对于我们简单任务队列而言，这已经就绰绰有余了。</p><p><code>MessageProperties.PERSISTENT_TEXT_PLAIN</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Task</span> &#123;</span><br><span class="line">    <span class="comment">//老样子，队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;ack_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声名队列</span></span><br><span class="line">        <span class="comment">//让队列持久化</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">durable</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,durable,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从控制台中获取</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加持久化</span></span><br><span class="line">            <span class="comment">//设置生成者发送消息为持久化信息（要求保存到硬盘上）保存在内存中</span></span><br><span class="line">            <span class="comment">//MessageProperties.PERSISTENT_TEXT_PLAIN,指令完成持久化</span></span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME, MessageProperties.PERSISTENT_TEXT_PLAIN,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">           <span class="comment">//未持久化时候的是</span></span><br><span class="line">            <span class="comment">// channel.basicPublish(&quot;&quot;,QUEUE_NAME,null,message.getBytes(&quot;UTF-8&quot;));</span></span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息： &quot;</span>+ message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不公平分发：">不公平分发：</h3><p>在某些情况下轮训分发并不好用，具体例子：有两个消费者在处理任务，其中有个消费者1处理任务的速度非常快，而另一个消费者2处理的速度却很慢，这个时候我们还采用轮训分发就会导致这个处理速度快的很大一部分时间处于空闲状态，而处理慢的那个消费者就一直在干活，这种分配方式就不是很好。</p><p>==能者多劳==，多劳多得。</p><p>为了避免这种情况，我们有采用不公平分发操作</p><p>设置参数<strong>channel.basicQos(1);</strong></p><blockquote><p>能者多劳是在消费者中设置的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//能者多劳</span></span><br><span class="line"><span class="type">int</span> <span class="variable">prefetchCount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount);</span><br></pre></td></tr></table></figure><p>一般我们生活中采用的就是不公平分发。</p><p><strong>预取值：</strong></p><p>预先分配任务，比如生产者生成7条数据，通过队列分发，通过==预取值，预取值是多少，就给属于那条信道的消费者分配多少消息。和消费者处理消息的快慢无关。==</p><p><strong>注意</strong>：</p><p>预取值消耗完毕后，之后的值就按照那个消费者快给他分配的信息就多，谁慢，谁分配的信息就少。</p><p>预取值是洗发人员能限制缓冲区大小，避免缓冲区里边无限制的未确定消息问题。</p><p>需要注意的是，预取值并不是你直接输入多少条数据他就可以直接堆满的我们设置的预取值的，他可能由于消费费者处理速度影响，比如，你输入10条数据，但是设置预取值为5的最后值只会产生4条数据也说不准，因为另一个太快了，其他的数据都被他消耗完毕了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置非公平分发</span></span><br><span class="line">      <span class="comment">//int i = 1;</span></span><br><span class="line">      <span class="comment">//预取值</span></span><br><span class="line">      <span class="type">int</span> i= <span class="number">5</span>; <span class="comment">//设置分发5个消息，也就是预取值为5</span></span><br><span class="line">      channel.basicQos(i);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置</span></span><br><span class="line">        <span class="comment">//int i = 1; //不公平分发</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">//此时设置就是预取值了</span></span><br><span class="line">        channel.basicQos(i);</span><br></pre></td></tr></table></figure><h2 id="发布和确认">发布和确认</h2><p>生产者 - - 发送消息 – 队列hello         :apple:必须保存在磁盘上才能达到持久化操作。</p><ol><li>设置要去队列必须持久化</li><li>设置要求队列中的消息必须持久化</li><li>发布确认</li></ol><h3 id="开启发布确认">开启发布确认</h3><h4 id="单个确认发布：">单个确认发布：</h4><p>每次生产者生产一个消息他都会确认一次，这样的好处就是，如果发送信息丢失可以很容易确定位置，缺点是慢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单个确认</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publicMessageIndividually</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException &#123;</span><br><span class="line">       <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//队列的声明</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用信道对队列进行声明</span></span><br><span class="line">       channel.queueDeclare(queueName,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">       <span class="comment">//开启发布确认</span></span><br><span class="line">       channel.confirmSelect();</span><br><span class="line">       <span class="comment">//开始时间</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//批量发消息</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">           channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">           <span class="comment">//单个消息就马上进行发布确认</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> channel.waitForConfirms();</span><br><span class="line">           <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//结束时间</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">       System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT + <span class="string">&quot;单个消息&quot;</span> + (end-begin)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="批量确认发布：">批量确认发布：</h4><p>批量发布对比单个发布速度快了很多，但是这个碰到问题去查找问题的时候就比较慢了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量发布</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publicMessageBatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//队列的声明</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用信道对队列进行声明</span></span><br><span class="line">        channel.queueDeclare(queueName,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//开启发布确认</span></span><br><span class="line">        channel.confirmSelect();</span><br><span class="line">        <span class="comment">//开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量确认消息的大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//未确认消息个数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//批量发消息，批量发布确认</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">            <span class="comment">//单个消息就马上进行发布确认</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> channel.waitForConfirms();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//消息达到10确认一次</span></span><br><span class="line">            <span class="keyword">if</span>(i%batchSize == <span class="number">0</span>)&#123;</span><br><span class="line">                channel.waitForConfirms();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT + <span class="string">&quot;发布100个消息&quot;</span> + (end-begin) +<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="异步确认发布">异步确认发布</h4><p>对比单步和批量这个就厉害多了，他可以异常进行，他是利用回调函数来达到消息可靠性传递的，这个中间件也是通过函数回调来保证是否投递成功。</p><p><img src="1667101171282.png" alt="1667101171282"></p><p>寄快件的人疯狂发，然后到broker中选择哪些需要确认的进行确认。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publishMessageAsync</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">      <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//队列的声明</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//使用信道对队列进行声明</span></span><br><span class="line">      channel.queueDeclare(queueName,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">      <span class="comment">//开启发布确认</span></span><br><span class="line">      channel.confirmSelect();</span><br><span class="line">      <span class="comment">//开始时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//消息确认成功，回调函数</span></span><br><span class="line">      <span class="type">ConfirmCallback</span> <span class="variable">ackCallback</span> <span class="operator">=</span> (delivery,multiple)-&gt;&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;确认的消息：&quot;</span> + delivery);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">//消息确认失败，回调函数</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.消息的标记</span></span><br><span class="line"><span class="comment">        2.消息是否为批量</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="type">ConfirmCallback</span> <span class="variable">nackCallback</span> <span class="operator">=</span> (delivery,multiple)-&gt;&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;未确认的消息：&quot;</span> + delivery);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//在发消息的时候，你需要准备一个监听器，监听哪些消息成功了，哪些消息失效了</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1.监听哪些消息成功了</span></span><br><span class="line"><span class="comment">      2.监听哪些消息失败了</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      channel.addConfirmListener(ackCallback,nackCallback);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//批量发送消息</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;消息&quot;</span> + i;</span><br><span class="line">          channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">          <span class="comment">//发布确认，这个时候要是进行发布确认就是同步了</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//结束时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span>  System.currentTimeMillis();</span><br><span class="line">      System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT + <span class="string">&quot;异步发布确认消息，耗时&quot;</span> + (end-begin) +<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="这就出现一个问题，如何处理异步未确认消息">这就出现一个问题，如何处理异步未确认消息</h4><p>最好的解决的解决方案，就是把未确认的消息放到一个基于内存的能发布线程访问的队列，比如说ConcurrentLinkedQueue这个队列在confirm callbacks与发布线程之间进行消息的传递。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">publishMessageAsync</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">       <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//队列的声明</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用信道对队列进行声明</span></span><br><span class="line">       channel.queueDeclare(queueName,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">       <span class="comment">//开启发布确认</span></span><br><span class="line">       channel.confirmSelect();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       线程安全有序的一个哈希表，适用于高并发的情况下的</span></span><br><span class="line"><span class="comment">       1.轻松将序号和消息进行关联</span></span><br><span class="line"><span class="comment">       2.轻松批量删除条目，只要给到序号</span></span><br><span class="line"><span class="comment">       3.支持高并发（多线程）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       ConcurrentSkipListMap&lt;Long,String&gt;  outstandingConfirms=</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ConcurrentSkipListMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//消息确认成功，回调函数</span></span><br><span class="line">       <span class="type">ConfirmCallback</span> <span class="variable">ackCallback</span> <span class="operator">=</span> (delivery,multiple)-&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(multiple)&#123;</span><br><span class="line">            <span class="comment">//删除已经确认的消息，剩下的就是为确认的消息</span></span><br><span class="line">            ConcurrentNavigableMap&lt;Long, String&gt; confirmed =</span><br><span class="line">                     outstandingConfirms.headMap(delivery);</span><br><span class="line">            confirmed.clear();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            outstandingConfirms.remove(delivery);</span><br><span class="line">        &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;确认的消息：&quot;</span> + delivery);</span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="comment">//消息确认失败，回调函数</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">         1.消息的标记</span></span><br><span class="line"><span class="comment">         2.消息是否为批量</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">ConfirmCallback</span> <span class="variable">nackCallback</span> <span class="operator">=</span> (delivery,multiple)-&gt;&#123;</span><br><span class="line">          <span class="comment">//3.打印一下未确认的消息都有哪些</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span>  outstandingConfirms.get(delivery);</span><br><span class="line">           System.out.println(<span class="string">&quot;未确认的消息是:&quot;</span> + message+<span class="string">&quot;未确认的标记：&quot;</span> + delivery);</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//在发消息的时候，你需要准备一个监听器，监听哪些消息成功了，哪些消息失效了</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       1.监听哪些消息成功了</span></span><br><span class="line"><span class="comment">       2.监听哪些消息失败了</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       channel.addConfirmListener(ackCallback,nackCallback); <span class="comment">// 异步通知</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//开始时间</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//批量发送消息</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MESSAGE_COUNT; i++) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;消息&quot;</span> + i;</span><br><span class="line">           channel.basicPublish(<span class="string">&quot;&quot;</span>,queueName,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">           <span class="comment">//发布确认，这个时候要是进行发布确认就是同步了</span></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           1。此处记录下所有要发送的消息，消息的总和</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">      outstandingConfirms.put(channel.getNextPublishSeqNo(),message);</span><br><span class="line">           System.out.println();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//结束时间</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span>  System.currentTimeMillis();</span><br><span class="line">       System.out.println(<span class="string">&quot;发布&quot;</span> + MESSAGE_COUNT + <span class="string">&quot;异步发布确认消息，耗时&quot;</span> + (end-begin) +<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="以上三种发布的确认速度对比">以上三种发布的确认速度对比</h3><p>单步发布消息</p><ul><li>同步等待确认，简单，但是吞吐量非常有限</li></ul><p>批量发布确认</p><ul><li>批量同步等待确认，加单，合理的吞吐量，一旦出现问题，但很难推断出是那条消息出现了问题。</li></ul><p>异步发布确认</p><p>最佳性能和资源使用，在出现错误的情况下可以很好的控制，但是实现起来稍微难一点。</p><h2 id="交换机（exchanges）">交换机（exchanges）</h2><p>当使用到交换机的时候，我们用的就不是普通的模式了，而是发布订阅模式了。</p><p><strong>生产者生成的消息不会直接发送到队列</strong></p><p>而是直接将消息先发送到交换机，并且只能发送到交换机，之钱的我们可以直接发送到队列（事实上我们走的是默认交换机），然后队列交给消费者，现在不行了，改成先发送给交换机，交换机在发给队列。</p><p>交换机的工作方式很简单，<strong>他接收来自生产者的消息，另一方面将他们推送到队列。</strong></p><h3 id="交换机的类型">交换机的类型</h3><p>直接（direct）,主题（topic）,标题（heads），扇出（fanout）</p><h4 id="无名exchanges">无名exchanges</h4><p>事实上就是默认类型，我们通过空字符（“”）串进行标识。</p><p><code>channel.basicPublic(&quot;&quot;,&quot;hello&quot;,null,message.getBytes());</code></p><p>实际上第一个参数就是交换机的名字，空字符串表示默认或者无名称交换机，消息能路由发送到队列中，其实是由routing(bindingkey)绑定key指定的，如果它存在的话。</p><h4 id="临时队列">临时队列</h4><p>实际上是自定义的，一旦断开链接，这个队列就会被删除。</p><h4 id="绑定">绑定</h4><p>实际上就是交换机和队列的桥梁，他告诉我们交换机和那个队列进行绑定关系</p><h4 id="Fanout">Fanout</h4><p>fanout是一种交换机的类型，这种类型非常简单，正如名称中猜想的那样，他是将接收的所有消息<strong>广播</strong>到他知道的所有队列中，系统中默认有exchanges交换机类型。</p><p><img src="1667315273358.png" alt="1667315273358"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发消息 交换机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmitLog</span> &#123;</span><br><span class="line">    <span class="comment">//交换机的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  String EXCHANGE_NAME=<span class="string">&quot;logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME,<span class="string">&quot;&quot;</span>,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息：&quot;</span> + message);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">消息接收,客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLog</span> &#123;</span><br><span class="line">    <span class="comment">//交换机的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANG_NAME=<span class="string">&quot;logs&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">        <span class="comment">//声明一个交换机</span></span><br><span class="line">      channel.exchangeDeclare(EXCHANG_NAME,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">        <span class="comment">//声明一个队列，来一个临时队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        队列的名称是随机的。</span></span><br><span class="line"><span class="comment">        当消费者断开与队列的连接的时候，队列就可以自动删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span>  channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        绑定交换机和队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">      channel.queueBind(queueName,EXCHANG_NAME,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受消息，把消息显示在屏幕上&quot;</span>);</span><br><span class="line">        <span class="comment">//接受消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Receive控制台打印接受到的消息&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>) );</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//消费者取消消息时回调接口</span></span><br><span class="line">        channel.basicConsume(queueName,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Direct">Direct</h4><p><img src="1667315482498.png" alt="1667315482498"></p><p>从图上我们可以看到，X绑定了两个队列，绑定类型是direct,队列Q1绑定建为orange，队列2绑定键有两个，一个为black，另一个为green.</p><p>在这种情况下，发布这发布消息到exchange上，绑定键为orange的消息会被发布到队列Q1绑定键为blackgreen的消息会被发布到队列Q2,其他消息类型就被丢弃。</p><p><strong>多重绑定</strong></p><p><img src="1667315780121.png" alt="1667315780121"></p><p>当然如果exchange的绑定类型是direct，但是他绑定的多个队列的key如果多相同在这种情况下虽然绑定类型是direct，但是他表现的就和fanout有点想类似了，就和广播差不多了。</p><p><img src="1667316127055.png" alt="1667316127055"></p><p>这边就可以指定发给谁了，我不发给谁他就收不到消息，只有我允许他接收他才能得到接收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectLogs</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  String EXCHANGE_NAME=<span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (sc.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME,<span class="string">&quot;info&quot;</span>,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息：&quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogDirect01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span><span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        <span class="comment">//声明一个交换机</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;console&quot;</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        绑定交换机和队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        channel.queueBind(<span class="string">&quot;console&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;warning&quot;</span>);</span><br><span class="line">        <span class="comment">//接受消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer, message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ReceiveLogsDirect01控制台打印接受到的消息&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>) );</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费者取消消息时回调接口</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;console&quot;</span>,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogDirect02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span><span class="string">&quot;direct_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT);</span><br><span class="line">        <span class="comment">//声明一个交换机</span></span><br><span class="line">        channel.queueDeclare(<span class="string">&quot;disk&quot;</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        绑定交换机和队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueBind(<span class="string">&quot;disk&quot;</span>,EXCHANGE_NAME,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="comment">//接受消息</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer, message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ReceiveLogsDirect01控制台打印接受到的消息&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>) );</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费者取消消息时回调接口</span></span><br><span class="line">        channel.basicConsume(<span class="string">&quot;disk&quot;</span>,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Topic">Topic</h4><p>对比上面两种交换机更加完美，当存在我们要接受日志类型有info.base和info.advantage,某个队列只想info.base的消息，那这个·时候上边两种交换机就做不到了。此时我们采用的就是topic交换机类型了。</p><p><strong>Topic</strong></p><p>发送类型是topic交换机的消息的routing_key不能随意写，<strong>必须满足一定的要求，他必须是一个单纯列表，以点号隔开</strong>，这个单次可以是任意单词。&quot;<a href="http://nysc.xxx">nysc.xxx</a>&quot;等。限制要求单词列表不能超过255个字节。</p><p><img src="1667397699728.png" alt="1667397699728"></p><p>需要注意的是</p><p>*** 代表的是一个单词**</p><p><strong>‘#’ 代表的是可以替换零个或多个单词。</strong></p><p>下图绑定关系如下</p><p>Q1–&gt; 绑定的是</p><p>​<em><em>中间代orange带3个单词的字符串（</em> .orange. <em>）</em></em></p><p>Q2–&gt; 绑定的是</p><p>​<em><em>最后一个单词是rabbit的3个单词（</em> . <em>rabbit）</em></em></p><p>​<strong>第一个单词是lazy的多个单词（lazy.#）</strong></p><p><img src="1667399049266.png" alt="1667399049266"></p><p>下边我们将上图之间的数据接受情况列举出来</p><p>quick.<strong>orange</strong>.<strong>rabbit</strong>         被队列Q1Q2接受到</p><p><strong>lazy</strong>.<strong>orange</strong>.elephant 被队列Q1Q2接受到</p><p>quick.<strong>orange</strong>.fox被队列Q1接受到</p><p><strong>lazy</strong>.brown.fox被队列Q2接受到</p><p><strong>lazy</strong>.pink.<strong>rabbit</strong>虽然满足两个绑定但只被队列Q2接受一次</p><p>quick.brown.fox不匹配任何绑定不会被任何队列接收到会被丢弃</p><p>quick.<strong>orange</strong>.male.rabbit是四个单词不匹配任何绑定会被丢弃</p><p><strong>lazy</strong>.orange.male.rabbit 是四个单词但匹配Q2</p><p>==上述加粗的是符合TOPIC类型交换机的单词指令==</p><p>==是最强大的，也是使用最广的==</p><ul><li>当队列绑定关系是#,那么这个队列将接收所有的数据，有点像Fanout了。</li><li>如果队列绑定的键中没有#和*出现，那么该队列绑定类类型就是direct了。</li></ul><p>消费者1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">声明主题交换机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogsTopic01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老样子定义一个交换机名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span> String EXCHANGE_NAME= <span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">       <span class="comment">//声明一个交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;Q1&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定</span></span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;*.orange.*&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受消息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;接受队列：——&gt; &quot;</span> +queueName +<span class="string">&quot;绑定键：&quot;</span>+ message.getEnvelope().getRoutingKey());</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>等待接受消息<br>被队列Q1Q2接受到<br>接受队列：——&gt; Q1绑定键：lazy.orange.elephant<br>被队列Q1Q2接受到<br>接受队列：——&gt; Q1绑定键：quick.orange.rabbit<br>被队列Q1接受到<br>接受队列：——&gt; Q1绑定键：quick.orange.fox</p></blockquote><p>消费者2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">声明主题交换机</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReceiveLogsTopic02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//老样子定义一个交换机名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span> String EXCHANGE_NAME= <span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">       <span class="comment">//声明一个交换机</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">        <span class="comment">//声明队列</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;Q2&quot;</span>;</span><br><span class="line">        channel.queueDeclare(queueName,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定</span></span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;*.*.rabbit&quot;</span>);</span><br><span class="line">        channel.queueBind(queueName,EXCHANGE_NAME,<span class="string">&quot;lazy.#&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受消息&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;接受队列：——&gt; &quot;</span> +queueName +<span class="string">&quot;绑定键：&quot;</span>+ message.getEnvelope().getRoutingKey());</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line"></span><br><span class="line">        channel.basicConsume(queueName,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>等待接受消息<br>被队列Q1Q2接受到<br>接受队列：——&gt; Q2绑定键：lazy.orange.elephant<br>被队列Q2接受到<br>接受队列：——&gt; Q2绑定键：lazy.brown.fox<br>被队列Q1Q2接受到<br>接受队列：——&gt; Q2绑定键：quick.orange.rabbit<br>虽然满足两个绑定但只被队列Q2接受一次<br>接受队列：——&gt; Q2绑定键：lazy.pink.rabbit<br>是四个单词但匹配Q2<br>接受队列：——&gt; Q2绑定键：lazy.orange.male.rabbit</p></blockquote><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmitLogTopic</span> &#123;</span><br><span class="line">    <span class="comment">//老样子，还是定义一个交换机名字，注意这个交换</span></span><br><span class="line">    <span class="comment">// 机名字需要和消费者里边定义的交换机一样，避免出错</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String EXCHANGE_NAME=<span class="string">&quot;topic_logs&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//获取信道链接</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Q1--&gt; 绑定的是</span></span><br><span class="line"><span class="comment">    中间代orange带3个单词的字符串（* .orange. *）</span></span><br><span class="line"><span class="comment">        Q2--&gt; 绑定的是</span></span><br><span class="line"><span class="comment">        最后一个单词是rabbit的3个单词（* . *rabbit）</span></span><br><span class="line"><span class="comment">        第一个单词是lazy的多个单词（lazy.#）</span></span><br><span class="line"><span class="comment">        quick.orange.rabbit         被队列Q1Q2接受到</span></span><br><span class="line"><span class="comment">        lazy.orange.elephant 被队列Q1Q2接受到</span></span><br><span class="line"><span class="comment">        quick.orange.fox被队列Q1接受到</span></span><br><span class="line"><span class="comment">        lazy.brown.fox被队列Q2接受到</span></span><br><span class="line"><span class="comment">        lazy.pink.rabbit虽然满足两个绑定但只被队列Q2接受一次</span></span><br><span class="line"><span class="comment">        quick.brown.fox不匹配任何绑定不会被任何队列接收到会被丢弃</span></span><br><span class="line"><span class="comment">        quick.orange.male.rabbit是四个单词不匹配任何绑定会被丢弃</span></span><br><span class="line"><span class="comment">        lazy.orange.male.rabbit 是四个单词但匹配Q2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String,String&gt; map  = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;quick.orange.rabbit&quot;</span>,<span class="string">&quot;被队列Q1Q2接受到&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;lazy.orange.elephant&quot;</span>,<span class="string">&quot;被队列Q1Q2接受到&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;quick.orange.fox&quot;</span>,<span class="string">&quot;被队列Q1接受到&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;lazy.brown.fox&quot;</span>,<span class="string">&quot;被队列Q2接受到&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;lazy.pink.rabbit&quot;</span>,<span class="string">&quot;虽然满足两个绑定但只被队列Q2接受一次&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;quick.brown.fox&quot;</span>,<span class="string">&quot;不匹配任何绑定不会被任何队列接收到会被丢弃&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;quick.orange.male.rabbit&quot;</span>,<span class="string">&quot;是四个单词不匹配任何绑定会被丢弃&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;lazy.orange.male.rabbit&quot;</span>,<span class="string">&quot;是四个单词但匹配Q2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String,  String&gt; mapEntry : map.entrySet()) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">routingKey</span> <span class="operator">=</span> mapEntry.getKey();</span><br><span class="line">           <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> mapEntry.getValue();</span><br><span class="line">            channel.basicPublish(EXCHANGE_NAME,routingKey,<span class="literal">null</span>,message.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息： &quot;</span> + message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>生产者发送消息： 是四个单词不匹配任何绑定会被丢弃</p><p>生产者发送消息： 不匹配任何绑定不会被任何队列接收到会被丢弃</p><p>生产者发送消息： 被队列Q1Q2接受到</p><p>生产者发送消息： 被队列Q2接受到</p><p>生产者发送消息： 被队列Q1Q2接受到</p><p>生产者发送消息： 被队列Q1接受到</p><p>生产者发送消息： 虽然满足两个绑定但只被队列Q2接受一次</p><p>生产者发送消息： 是四个单词但匹配Q2</p></blockquote><h2 id="死信队列">死信队列</h2><p>死信：<strong>顾名思义就是无法被消费的消息</strong>，一般情况下，product将消息投递到broker或者直接到queue里，consumer从queue取出消息，进行消费，但某些时候由于特定的<strong>原因导致queue中的某些消息无法被消费</strong>，这样的消息如果没有后续的处理，就变成死信，有死信自然就有死信队列。</p><p>一般应用场景：为了保证订单业务中的消息数据不丢失，需要使用rabbitMQ的死信队列机制，<strong>当消息消费发生异常的时候，将消息投入死信队列中</strong>，还有比如说：<strong>用户在商场下单成功并点击去支付后在指定时间未支付时自动失效。</strong></p><h3 id="死信的来源"><strong>死信的来源</strong></h3><ul><li>消息TTL过期</li><li>队列达到最大长度（队列满了，无法再添加数据到mq中）</li><li>消息被拒绝（basic.reject或basic.nack）并且requeue= false;</li></ul><h3 id="死信实战">死信实战</h3><p><img src="1667484959170.png" alt="1667484959170"></p><h4 id="消息TTL过期">消息TTL过期</h4><p><img src="1667490459734.png" alt="1667490459734"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">死信队列</span></span><br><span class="line"><span class="comment"> 之生产者代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="comment">//普通交换机的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NORMAL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">        <span class="comment">//死信消息，设置TTL时间</span></span><br><span class="line">        AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties()</span><br><span class="line">                        .builder().expiration(<span class="string">&quot;10000&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;info &quot;</span>+ i;</span><br><span class="line">            channel.basicPublish(NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>,properties,message.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">死信</span></span><br><span class="line"><span class="comment">    消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通交换机的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">NORMAL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//死信交换机的名称</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//普通队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">NORMAL_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;normal_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//死信队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">DEAD_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明死信和普通交换机类型 direct</span></span><br><span class="line">        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE,BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 普通队列</span></span><br><span class="line">        Map&lt;String,Object&gt; argument = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//过期时间10秒过期   可以不设置，可以交给队列自动去</span></span><br><span class="line">       <span class="comment">// argument.put(&quot;x-message-ttl&quot;,100000);</span></span><br><span class="line">        <span class="comment">//正常队列设置死信交换机</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-lettle-exchange&quot;</span>,DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置死信RoutingKey</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-lettle-routing-key&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(NORMAL_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,argument);</span><br><span class="line"></span><br><span class="line">        <span class="comment">///////////////////////////////////</span></span><br><span class="line">        <span class="comment">//声名死信队列</span></span><br><span class="line">        channel.queueDeclare(DEAD_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定普通交换机和普通队列</span></span><br><span class="line">        channel.queueBind(NORMAL_QUEUE,NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//绑定死信的交换机与死信队列</span></span><br><span class="line">        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定死信的交换机和死信的对列</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer 01接受到消息是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(NORMAL_QUEUE,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死信队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">DEAD_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定死信的交换机和死信的对列</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer 02接受到消息是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(DEAD_QUEUE,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==解决进不去死信队列的原因了，就是我没给他把过期时间值传进去，导致出现问题。==</p><h4 id="队列达到最大长度">队列达到最大长度</h4><p>消息生成者代码去掉TTL属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通交换机的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">NORMAL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//死信交换机的名称</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//普通队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">NORMAL_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;normal_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//死信队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">DEAD_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明死信和普通交换机类型 direct</span></span><br><span class="line">        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE,BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 普通队列</span></span><br><span class="line">        Map&lt;String,Object&gt; argument = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//过期时间10秒过期   可以不设置，可以交给队列自动去</span></span><br><span class="line">       <span class="comment">// argument.put(&quot;x-message-ttl&quot;,10000);</span></span><br><span class="line">        <span class="comment">//正常队列设置死信交换机</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置死信RoutingKey</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置正常队列的长度的限制</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-max-length&quot;</span>,<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(NORMAL_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,argument);</span><br><span class="line"></span><br><span class="line">        <span class="comment">///////////////////////////////////</span></span><br><span class="line">        <span class="comment">//声名死信队列</span></span><br><span class="line">        channel.queueDeclare(DEAD_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定普通交换机和普通队列</span></span><br><span class="line">        channel.queueBind(NORMAL_QUEUE,NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//绑定死信的交换机与死信队列</span></span><br><span class="line">        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定死信的交换机和死信的对列</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer 01接受到消息是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        channel.basicConsume(NORMAL_QUEUE,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="comment">//普通交换机的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NORMAL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">        <span class="comment">//死信消息，设置TTL时间 单位是ms</span></span><br><span class="line">     <span class="comment">//   AMQP.BasicProperties properties =</span></span><br><span class="line">      <span class="comment">//          new AMQP.BasicProperties()</span></span><br><span class="line">                        <span class="comment">//.builder().expiration(&quot;10000&quot;).build();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;info &quot;</span>+ i;</span><br><span class="line">            channel.basicPublish(NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>,properties,message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息:&quot;</span>+message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1667535036010.png" alt="1667535036010"></p><h4 id="消息被拒绝">消息被拒绝</h4><p>一旦消费者拒绝接受，就会成为死信队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="comment">//普通交换机的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NORMAL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">        <span class="comment">//死信消息，设置TTL时间 单位是ms</span></span><br><span class="line">      <span class="comment">//演示长度  AMQP.BasicProperties properties =</span></span><br><span class="line">         <span class="comment">//   new AMQP.BasicProperties()</span></span><br><span class="line">           <span class="comment">//             .builder().expiration(&quot;10000&quot;).build();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;info &quot;</span>+ i;                        <span class="comment">//properties</span></span><br><span class="line">            channel.basicPublish(NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>,<span class="literal">null</span>,message.getBytes());</span><br><span class="line">            System.out.println(<span class="string">&quot;生产者发送消息:&quot;</span>+message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通交换机的名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">NORMAL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;normal_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//死信交换机的名称</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//普通队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">NORMAL_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;normal_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//死信队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">DEAD_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明死信和普通交换机类型 direct</span></span><br><span class="line">        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);</span><br><span class="line">        channel.exchangeDeclare(DEAD_EXCHANGE,BuiltinExchangeType.DIRECT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 普通队列</span></span><br><span class="line">        Map&lt;String,Object&gt; argument = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//过期时间10秒过期   可以不设置，可以交给队列自动去</span></span><br><span class="line">       <span class="comment">// argument.put(&quot;x-message-ttl&quot;,10000);</span></span><br><span class="line">        <span class="comment">//正常队列设置死信交换机</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置死信RoutingKey</span></span><br><span class="line">        argument.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置正常队列的长度的限制</span></span><br><span class="line">      <span class="comment">//演示拒绝  argument.put(&quot;x-max-length&quot;,6);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(NORMAL_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,argument);</span><br><span class="line"></span><br><span class="line">        <span class="comment">///////////////////////////////////</span></span><br><span class="line">        <span class="comment">//声名死信队列</span></span><br><span class="line">        channel.queueDeclare(DEAD_QUEUE,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定普通交换机和普通队列</span></span><br><span class="line">        channel.queueBind(NORMAL_QUEUE,NORMAL_EXCHANGE,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//绑定死信的交换机与死信队列</span></span><br><span class="line">        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定死信的交换机和死信的对列</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer,message)-&gt;&#123;</span><br><span class="line">       <span class="comment">//拒绝消息在这里写</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">           <span class="comment">//指定你要拒绝的消息</span></span><br><span class="line">            <span class="keyword">if</span>(message1.equals(<span class="string">&quot;info 5&quot;</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;此消息是被拒绝的&quot;</span>+ message1);</span><br><span class="line">                <span class="comment">//拒接接收，且不放回队列，避免队列重新发送</span></span><br><span class="line">                channel.basicReject(message.getEnvelope().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;Consumer 01接受到消息是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">               <span class="comment">//   接收且不放回</span></span><br><span class="line">                channel.basicAck(message.getEnvelope().getDeliveryTag(),<span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//开启手动应答,                      //true是自动应答。</span></span><br><span class="line">        channel.basicConsume(NORMAL_QUEUE,<span class="literal">false</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEAD_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;dead_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死信队列名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">DEAD_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;dead_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> GetConnection.getChannel();</span><br><span class="line">        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;等待接受......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定死信的交换机和死信的对列</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumer,message)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Consumer 02接受到消息是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody(),<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(DEAD_QUEUE,<span class="literal">true</span>,deliverCallback,consumer-&gt;&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="延迟队列">延迟队列</h2><p>延迟队列，对列内部是有序的，最重要的特性就是体现在他的延时属性上，延时队列中的元素时希望在指定时间到了之后或者之前取出和处理，简单的来说，延迟队列就是用来存放需要在指定时间被处理的元素的队列。</p><p><strong>延迟队列的使用场景</strong></p><ol><li>订单在十分钟内未支付则自动取消</li><li>新创建的店铺，如果在十天内没有上传商品，则自动发送消息提醒</li><li>用户注册成功后，如果没有在三天内登录则发送短信提醒消息</li><li>用户发起退款，如果在三天内没有得到处理则通知相关运营人员。</li><li>预定会员后，需要在预定的时间点前十分钟通知各个与会员人员参加会议。</li></ol><h3 id="延迟队列整合SpringBoot">延迟队列整合SpringBoot</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBoot_RabbitMQ<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>SpringBoot_RabbitMQ<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>SpringBoot_RabbitMQ<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--rabbitMQ依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.83<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--RabbitMQ测试依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xh.springBoot.SpringBootRabbitMqApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">webApiConfig</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;webApi&quot;</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">webApiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;rabbitMQ接口文档&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;描述Rabbit微服务接口定义&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;我喜欢&quot;</span>,<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;2844****670@qq.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="队列TTL">队列TTL</h3><p>创建两个队列QA和QB，两者队列TTL分被是10s，40s,然后在创建一个交换机X和死信交换机Y，他们的类型都是direct，创建一个死信队列QD，他们的绑定关系如下</p><p><img src="1667568947336.png" alt="1667568947336"></p><p>代码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">TTL 队列  配置文件类代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlQueueConfig</span> &#123;</span><br><span class="line">    <span class="comment">//普通的交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">X_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;X&quot;</span>;</span><br><span class="line">    <span class="comment">//死信交换机的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">Y_DEAD_LETTER_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;Y&quot;</span>;</span><br><span class="line">    <span class="comment">//普通队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">A_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;QA&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">B_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;QB&quot;</span>;</span><br><span class="line">    <span class="comment">//死信队列的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">Y_DEAD_LETTER_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;QD&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明XCHANGE</span></span><br><span class="line">    <span class="meta">@Bean(&quot;xExchange&quot;)</span>  <span class="comment">//起别名</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">xExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(X_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明yExchange 别名</span></span><br><span class="line">    <span class="meta">@Bean(&quot;yExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">yExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueA&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueA</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map  =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置死信交换机</span></span><br><span class="line">        map.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置死信RoutingKey</span></span><br><span class="line">        map.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="comment">//设置TTL单位是ms  什么时候消息成为死信，10秒钟后</span></span><br><span class="line">        map.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(A_QUEUE).withArguments(map).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueB&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueB</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map  =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置死信交换机</span></span><br><span class="line">        map.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置死信RoutingKey</span></span><br><span class="line">        map.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="comment">//设置TTL单位是ms  什么时候消息成为死信，40秒钟后</span></span><br><span class="line">        map.put(<span class="string">&quot;x-message-ttl&quot;</span>,<span class="number">40000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(B_QUEUE).withArguments(map).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死信队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueD&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  Queue <span class="title function_">QueueD</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(Y_DEAD_LETTER_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueABindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueA&quot;)</span> Queue queueA,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueA).to(xExchange).with(<span class="string">&quot;XA&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueBBindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueB&quot;)</span> Queue queueB,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueB).to(xExchange).with(<span class="string">&quot;XB&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueDBindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueD&quot;)</span> Queue queueD,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Qualifier(&quot;yExchange&quot;)</span> DirectExchange yExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueD).to(yExchange).with(<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发送延迟消息</span></span><br><span class="line"><span class="comment">http://地址/ttl/sendMessage/子非吾喵</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//打印日志</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/ttl&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellMessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始发送消息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//注意@PathVariable 可以自定义传值到url中，前提示变量名必须和url中的一样</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>&#123;</span><br><span class="line">        <span class="comment">//后边的语句参数会替换&#123;&#125;，这由程序员控制</span></span><br><span class="line">        log.info(<span class="string">&quot;当前时间:&#123;&#125;,发送一条信息给两个TTL队列:&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString(),message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XA&quot;</span>,<span class="string">&quot;消息来自ttl为10秒的消息队列：&quot;</span> + message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XB&quot;</span>,<span class="string">&quot;消息来自ttl为40秒的消息队列：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1:8080/ttl/sendMessage/hello1">http://127.0.0.1:8080/ttl/sendMessage/hello1</a></p><p><a href="http://127.0.0.1:8080/ttl/sendMessage/hello2">http://127.0.0.1:8080/ttl/sendMessage/hello2</a></p><p><img src="1667659942059.png" alt="1667659942059"></p><p>上述存在一个不足之处，就是我们<strong>每次使用的时候，都需要增加一个新的时间需求，就需要新增一个队列</strong>，这里只是用了10s和40s两个时间选项，但万一我要一个小时呢，难不成还又要添加，这样太麻烦了。</p><h3 id="延迟队列优化">延迟队列优化</h3><p><img src="1667660011944.png" alt="1667660011944"></p><p>使用QC来设置时间，用户自定义时间。</p><p>具体代码如下</p><p>TtlQueueConfig.java中添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">C_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;QC&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明QC</span></span><br><span class="line">    <span class="meta">@Bean(&quot;queueC&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueC</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//设置死信交换机</span></span><br><span class="line">        map.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>,Y_DEAD_LETTER_EXCHANGE);</span><br><span class="line">        <span class="comment">//设置死信RoutingKey</span></span><br><span class="line">        map.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>,<span class="string">&quot;YD&quot;</span>);</span><br><span class="line">        <span class="comment">//TTL设置时长  ms (这里不写，又用户自己定义)</span></span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(C_QUEUE).withArguments(map).build();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueCBindingX</span><span class="params">(<span class="meta">@Qualifier(&quot;queueC&quot;)</span> Queue queueC,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@Qualifier(&quot;xExchange&quot;)</span> DirectExchange xExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueC).to(xExchange).with(<span class="string">&quot;XC&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​SellMessageController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开始发送消息 消息 TTL</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendExpirationMsg/&#123;message&#125;/&#123;ttlTime&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message,<span class="meta">@PathVariable</span> String ttlTime)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;，发送一条时长&#123;&#125;毫秒TTL信息给队列QC:&#123;&#125;&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Date</span>().toString(),ttlTime,message);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XC&quot;</span>,message,msg -&gt; &#123;</span><br><span class="line">            <span class="comment">//发送消息的时候，延迟时长</span></span><br><span class="line">            msg.getMessageProperties().setExpiration(ttlTime);</span><br><span class="line">            <span class="keyword">return</span> msg;</span><br><span class="line">        &#125; );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>==注意我在写这个代码的时候，刚刚开始是敲错了一个字母，导致运行时生成的队列，然后调错的时候，需要生成的队列删除，然后重新创建，可以解决问题。。==</p><p><img src="1667661762605.png" alt="1667661762605"></p><pre><code>&gt;http://127.0.0.1:8080/ttl/sendExpirationMsg/hello1/2000&gt;&gt;http://127.0.0.1:8080/ttl/sendExpirationMsg/hello2/20000</code></pre><p>死信在做延迟的一个巨大缺陷，消息不会按时“死亡”，由于<strong>RabbitMQ只会检查第一个消息是否过期</strong>，如果过期则丢到死信队列，<strong>如果第一个消息的延时时长很长，而第二个消息的延迟时长很短，则第二个消息并不会优先得到执行。</strong></p><p>这里出现一个问题，当出现两条消息的时候，我们发现，他居然是按照谁先来的，哪怕你时间短，但是你比另一个队列慢一步，你就只能老老实实排队了。<img src="1667661985681.png" alt="1667661985681"></p><h3 id="RabbitMQ插件实现延迟队列">RabbitMQ插件实现延迟队列</h3><p>这个就是解决上边的问题的，我们使用插件解决。</p><p>在官网上下载: <a href="https://www/rabbitmq.com/community-plugins.html%EF%BC%8C%E4%B8%8B%E8%BD%BD">https://www/rabbitmq.com/community-plugins.html，下载</a></p><p>rabbitmq_delayed_message_exchange-3.8.0</p><p>拷贝到</p><p>/usr/lib/rabbitmq/lib/rabbitmq_server-版本号/plugs</p><p>安装指令</p><p><code>rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></p><p>然后在linux系统下解压</p><p>然后安装<code>rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></p><p>之后重启</p><p><code>systemctl restart rabbitmq-server(这个是你安装时候的名字)</code></p><p><img src="1667662710885.png" alt="1667662710885"></p><p>这个时候不在是队列，而是交换机了。</p><p><strong>没插件的时候</strong></p><p><img src="1667662791636.png" alt="1667662791636"></p><p><strong>基于插件的</strong></p><p><img src="1667662831411.png" alt="1667662831411"></p><p>==注意，由于我是docker安装的，我没找到安装这个插件的位置，故而，这一点，我只能敲一下代码了解一下==</p><p>解决办法：</p><p><a href="https://blog.csdn.net/DZP_dream/article/details/118391439">https://blog.csdn.net/DZP_dream/article/details/118391439</a></p><p><code>docker search rabbitmq </code></p><p>安装拉取容器：</p><p><code>docker run -dit --name rabbitmq -e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=guest -p 15672:15672 -p 5672:5672 rabbitmq:management</code></p><p><a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p><p><code>docker cp rabbitmq_delayed_message_exchange-3.8.0.ez  rabbitmq:/plugins</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">local</span> rabbitmq]<span class="comment"># docker exec -it rabbitmq /bin/bash                                     </span></span><br><span class="line">root@3bb56f68570b:/<span class="comment"># rabbitmq-plugins list</span></span><br></pre></td></tr></table></figure><p>启动插件</p><p><code>root@3bb56f68570b:/# rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></p><p>DelayedConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">延迟队列插件，可惜，我没有。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayedQueueConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列 //</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">DELAYED_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;delayed.queue&quot;</span>;</span><br><span class="line">    <span class="comment">//交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">DELAYED_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;delayed.exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//routingKey</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">DELAYED_ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;delayed.routing&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayedQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">Queue</span>(DELAYED_QUEUE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机  基于插件的交换机就是这么定义的</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//自定义交换机 由于是不存在rabbit里边的交换机，也就是我们使用的延迟队列插件</span></span><br><span class="line">    <span class="keyword">public</span> CustomExchange <span class="title function_">delayedExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;x-delayed-type&quot;</span>,<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.交换机名称</span></span><br><span class="line"><span class="comment">        2.交换机类型</span></span><br><span class="line"><span class="comment">        3.是否需要持久化</span></span><br><span class="line"><span class="comment">        4.是否需要自动删除</span></span><br><span class="line"><span class="comment">        5.其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomExchange</span>(DELAYED_EXCHANGE_NAME,<span class="string">&quot;x-delayed-message&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>,<span class="literal">false</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayedQueueBingdingDelayedExchange</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Qualifier(&quot;delayedQueue&quot;)</span> Queue delayedQueue,</span></span><br><span class="line"><span class="params">            <span class="meta">@Qualifier(&quot;delayedExchange&quot;)</span> CustomExchange delayedExchange</span></span><br><span class="line"><span class="params">    )</span>&#123;</span><br><span class="line">        <span class="comment">//绑定 将队列和交换机直接进行绑定</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayedQueue).to(delayedExchange).with(DELAYED_ROUTING_KEY).noargs();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>生产者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Title  发送消息  基于插件的 消息以及 延迟的时间</span></span><br><span class="line"><span class="comment"> * @Description 延迟队列的插件</span></span><br><span class="line"><span class="comment"> * @author  罗小黑</span></span><br><span class="line"><span class="comment"> * @date 2022/11/6 11:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sendDelayMsg/&#123;message&#125;/&#123;delayTime&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDelayedMsg</span><span class="params">(<span class="meta">@PathVariable</span> String message,<span class="meta">@PathVariable</span> Integer delayedTime)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;当前时间：&#123;&#125;，发送一条时长&#123;&#125;毫秒信息给延迟队列delayedTime:&#123;&#125;&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Date</span>().toString(),delayedTime,message);</span><br><span class="line">    rabbitTemplate.convertAndSend(DelayedQueueConfig.DELAYED_EXCHANGE_NAME,</span><br><span class="line">            DelayedQueueConfig.DELAYED_ROUTING_KEY,message, msg -&gt; &#123;</span><br><span class="line">        <span class="comment">//发送消息的时候，延迟时长  单位ms</span></span><br><span class="line">        msg.getMessageProperties().setDelay(delayedTime);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">延迟队列消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayedQueueConsumer</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        基于插件的延迟队列</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues= DelayedQueueConfig.DELAYED_QUEUE_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveDelayQueue</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;当前时间：&#123;&#125;，收到延迟队列的消息：&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>().toString(),msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1:8080/ttl/sendDelayMsg/come">http://127.0.0.1:8080/ttl/sendDelayMsg/come</a> on bady1/20000</p><p><a href="http://127.0.0.1:8080/ttl/sendDelayMsg/come">http://127.0.0.1:8080/ttl/sendDelayMsg/come</a> on bady1/2000</p><p><img src="1667706862118.png" alt="1667706862118"></p><p>第二个消息被先消费掉了，符合预期。</p><h3 id="总结：">总结：</h3><p>延迟队列在需要延时的处理的场景下非常有用，使用rabbitmq来实现延迟队列可以很好的利用rabbitmq的特性，<strong>如消息的可靠发送，消息可靠投递，死信队列来保证消息至少被消费一次已经未被正常处理的消息不会被丢弃</strong>，另外，通过rabbitMQ集群的特性，可以很好的解决单点故障问题，不会因为单个节点挂掉导致延迟队列不可用或者信息丢失</p><p>当然，延迟队列还有很多其他选择，比如利用java的delayQueue,利用Redis的zset，利用Quartz或者利用kafka的时间轮，这些方式各有各的特点，看需要的适用的场景。</p><h1>高级部分：</h1><h2 id="发布确认高级">发布确认高级</h2><p>在生产环境下中由于一些不明的原因，导致rabbitmq重启，在rabbitmq 重启期间生产者消息投递失败，导致消息丢失，需要手动处理和恢复，这个时候，我们如何保证rabbitmq的消息的可靠投递呢?</p><p><img src="1667707667491.png" alt="1667707667491"></p><p>高级就是，当生产者发送消息给交换机，但是交换机收不到的时候，我们将消息放到缓存中，当交换机可以收到消息的时候，我们就把消息从缓存中移除。一般会出现的问题是，交换机收不到消息，二是队列收不到消息。</p><p><strong>代码架构部分</strong></p><p><img src="1667707750154.png" alt="1667707750154"></p><p><strong>配置文件</strong></p><p>在spring.rabbitmq.publisher-confirm-type=correlated</p><p>confirm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发布确认配置类</span></span><br><span class="line"><span class="comment"> 目的是为了 发布确认 （高级）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span> String CONFIRM_EXCHANGE_NAME= <span class="string">&quot;confirm_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;confirm_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//RoutingKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;key1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">confirmExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(CONFIRM_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明一个队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">confirmQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueBindingExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue,</span></span><br><span class="line"><span class="params">                                        <span class="meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange confirmExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Product接收消息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="meta">@RabbitListener(queues = ConfirmConfig.CONFIRM_QUEUE_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveConfirmMessage</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;接受到队列confirm.queue的消息： &#123;&#125; &quot;</span> ,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,</span><br><span class="line">                ConfirmConfig.CONFIRM_ROUTING_KEY,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调接口</p><p>一旦消息没有被接受我们采取回调接口去确定。</p><p>NONE</p><p>禁用发布确认模式，是默认值</p><p>CORRELATED</p><p>发布消息成功到交换器后会触发回调方法</p><p>SIMPLE</p><p>经过测试有两种效果，其一效果和CORRELATED值一样会触发回调方法。</p><p>其二在发布消息成功后采用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法，等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法，如果返回fasle则会关闭channel，则接下来无法发送消息到broker.</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">SpringBoot_RabbitMQ</span></span><br><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="string">114.132.77.86</span></span><br><span class="line"><span class="attr">spring.rabbitmq.publisher-confirm-type</span>=<span class="string">correlated</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=<span class="string">guest</span></span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=<span class="string">guest</span></span><br></pre></td></tr></table></figure><p>定义一个回调方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义一个回调接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//1</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallBack</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于是内部接口，故而不能直接我们实现的接口，我们需要直接注入</span></span><br><span class="line">    <span class="comment">//注入</span></span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">private</span>  RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@PostConstruct</span>  <span class="comment">//注入  3 一步一步来，这个注解是在其他注解执行完毕之后才会执行，切记</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//注入</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    交换机确认回调方法</span></span><br><span class="line"><span class="comment">    1.发消息 交换机接收到了消息  回馈</span></span><br><span class="line"><span class="comment">        1.1correlationData保存回调消息ID以及相关信息</span></span><br><span class="line"><span class="comment">        1.2交换机接收到消息  ack  = true</span></span><br><span class="line"><span class="comment">        1.3 cause  null</span></span><br><span class="line"><span class="comment">    2.发送消息 交换机接收失败了问题</span></span><br><span class="line"><span class="comment">        2.1 correlationData 保存回调信息的ID以及相关信息</span></span><br><span class="line"><span class="comment">        2.2 交换机接收到消息  ack =  false</span></span><br><span class="line"><span class="comment">        2.3 cause 失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> correlationData.getId()!=<span class="literal">null</span> ? correlationData.getId() : <span class="string">&quot;&quot;</span> ;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机已经收到的ID为： &#123;&#125;的消息&quot;</span>,id);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机还未收到ID为：&#123;&#125;的消息,由于原因：&#123;&#125;&quot;</span>,id,cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//开始发消息，测试确认</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>&#123;</span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,</span><br><span class="line">                ConfirmConfig.CONFIRM_ROUTING_KEY,message,correlationData1);</span><br><span class="line">        log.info(<span class="string">&quot;发送消息内容：&#123;&#125;&quot;</span>,message + <span class="string">&quot;key1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,</span><br><span class="line">                ConfirmConfig.CONFIRM_ROUTING_KEY,message,correlationData2);</span><br><span class="line">        log.info(<span class="string">&quot;发送消息内容：&#123;&#125;&quot;</span>,message + <span class="string">&quot;key2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回退消息">回退消息</h2><p>在开启了生成者确认机制情况下，交换机接收到消息后，会直接将消息生产者发送确认消息，如果发现该消息不可路由，那么消息会被直接丢弃，此时生产者是不知道消息被丢弃这个事件的，那么如何让无法被路由的消息帮我想办法处理一下？最简单的就是通知我一下，我好方便处理，通过设置mandatory参数就可以在当消息传递过程中不可达目的时将消息返回给生成者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//1</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallBack</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback,RabbitTemplate.ReturnCallback&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于是内部接口，故而不能直接我们实现的接口，我们需要直接注入</span></span><br><span class="line">    <span class="comment">//注入</span></span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">//2</span></span><br><span class="line">    <span class="keyword">private</span>  RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@PostConstruct</span>  <span class="comment">//注入  3 一步一步来，这个注解是在其他注解执行完毕之后才会执行，切记</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//注入</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//不注入的化没有结果</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    交换机确认回调方法</span></span><br><span class="line"><span class="comment">    1.发消息 交换机接收到了消息  回馈</span></span><br><span class="line"><span class="comment">        1.1correlationData保存回调消息ID以及相关信息</span></span><br><span class="line"><span class="comment">        1.2交换机接收到消息  ack  = true</span></span><br><span class="line"><span class="comment">        1.3 cause  null</span></span><br><span class="line"><span class="comment">    2.发送消息 交换机接收失败了问题</span></span><br><span class="line"><span class="comment">        2.1 correlationData 保存回调信息的ID以及相关信息</span></span><br><span class="line"><span class="comment">        2.2 交换机接收到消息  ack =  false</span></span><br><span class="line"><span class="comment">        2.3 cause 失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> correlationData.getId()!=<span class="literal">null</span> ? correlationData.getId() : <span class="string">&quot;&quot;</span> ;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机已经收到的ID为： &#123;&#125;的消息&quot;</span>,id);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            log.info(<span class="string">&quot;交换机还未收到ID为：&#123;&#125;的消息,由于原因：&#123;&#125;&quot;</span>,id,cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回退接口实现，可以在当消息在传递过程中不可达</span></span><br><span class="line">    <span class="comment">// 目的时将消息返回给生产者</span></span><br><span class="line">    <span class="comment">//只有当消息不可达目的地时候才进行回退</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingKey)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;消息：&#123;&#125;,被交换机&#123;&#125; 退回了，退回原因是：&#123;&#125;，路由Key:&#123;&#125;&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()),exchange,replyText,routingKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/confirm&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span>&#123;</span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,</span><br><span class="line">                ConfirmConfig.CONFIRM_ROUTING_KEY,message,correlationData1);</span><br><span class="line">        log.info(<span class="string">&quot;发送消息内容：&#123;&#125;&quot;</span>,message + <span class="string">&quot;key1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        rabbitTemplate.convertAndSend(ConfirmConfig.CONFIRM_EXCHANGE_NAME,</span><br><span class="line">                ConfirmConfig.CONFIRM_ROUTING_KEY + <span class="string">&quot;2&quot;</span> ,message + <span class="string">&quot;key2&quot;</span>,correlationData2);</span><br><span class="line">        log.info(<span class="string">&quot;发送消息内容：&#123;&#125;&quot;</span>,message + <span class="string">&quot;key2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回退处理</p><p><a href="http://127.0.0.1:8080/confirm/sendMessage/%E4%BD%A0%E5%A5%BD">http://127.0.0.1:8080/confirm/sendMessage/你好</a></p><p><img src="1667747118718.png" alt="1667747118718"></p><p><img src="1667747050852.png" alt="1667747050852"></p><h3 id="备份交换机">备份交换机</h3><p><img src="1667748517643.png" alt="1667748517643"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">发布确认配置类</span></span><br><span class="line"><span class="comment"> 目的是为了 发布确认 （高级）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span> String CONFIRM_EXCHANGE_NAME= <span class="string">&quot;confirm_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;confirm_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//RoutingKey</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIRM_ROUTING_KEY</span> <span class="operator">=</span> <span class="string">&quot;key1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备份交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BACKUP_EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;backup_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//备份队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BACKUP_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;backup_queue&quot;</span>;</span><br><span class="line">    <span class="comment">//报警队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  <span class="type">String</span> <span class="variable">WARNING_QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;warning_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">confirmExchange</span><span class="params">()</span>&#123;                       <span class="comment">//持久化</span></span><br><span class="line">      <span class="keyword">return</span> ExchangeBuilder.directExchange(CONFIRM_EXCHANGE_NAME).durable(<span class="literal">true</span>).withArgument(<span class="string">&quot;alternate-exchange&quot;</span>,BACKUP_EXCHANGE_NAME).build();</span><br><span class="line">    <span class="comment">//    return  new DirectExchange(CONFIRM_EXCHANGE_NAME);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//声明一个队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;confirmQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">confirmQueue</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>  QueueBuilder.durable(CONFIRM_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueBindingExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;confirmQueue&quot;)</span> Queue confirmQueue,</span></span><br><span class="line"><span class="params">                                        <span class="meta">@Qualifier(&quot;confirmExchange&quot;)</span> DirectExchange confirmExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(confirmQueue).to(confirmExchange).with(CONFIRM_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个备份交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;backupExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">backupExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(BACKUP_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean(&quot;backupQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  Queue <span class="title function_">backupQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(BACKUP_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;warningQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  Queue <span class="title function_">warningQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(WARNING_QUEUE_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//备份交换机邦定到备份队列</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueBindingBackupExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;backupQueue&quot;)</span> Queue backupQueue,</span></span><br><span class="line"><span class="params">                                        <span class="meta">@Qualifier(&quot;backupExchange&quot;)</span> FanoutExchange backupExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(backupQueue).to(backupExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//报警交换机邦定到报警</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">queueBindingWarningExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;warningQueue&quot;)</span> Queue warningQueue,</span></span><br><span class="line"><span class="params">                                              <span class="meta">@Qualifier(&quot;backupExchange&quot;)</span> FanoutExchange backupExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(warningQueue).to(backupExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">报警消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WarningConsumer</span> &#123;</span><br><span class="line">    <span class="comment">//接受报警信息</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = ConfirmConfig.WARNING_QUEUE_NAME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveWarningMsg</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody());</span><br><span class="line">        log.info(<span class="string">&quot;报警发现不可路由消息： &#123;&#125;&quot;</span> ,msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="1667749785943.png" alt="1667749785943"></p><h2 id="幂等性">幂等性</h2><p>用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因为多次点击而产生了副作用。举个最简单的例子，那就是支付，用户购买商品后支付，支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额发现多扣钱了，流水记录也变成了两条。在以前的单应用系统中，我们只需要把数据操作放入事务中即可，发生错误立即回滚，但是再响应客户端的时候也有可能出现网络中断或者异常等等</p><p><strong>消息被重复消费</strong></p><p>消费者在消费MQ中的消息时，MQ已把消息发送给消费者，消费者在给MQ返回ack时网络中断，故MQ未收到确认信息，该条消息会重新发给其他的消费者，或者在网络重连后再次发送给该消费者，但实际上该消费者已成功消费了该条消息，造成消费者消费了重复的消息。</p><p><strong>解决思路</strong></p><p>MQ消费者的幂等性的解决一般使用全局ID或者写个唯一标识比如时间戳或者UUID或者订单消费者消费MQ中的消息也可利用MQ的该id来判断，或者可按自己的规则生成一个全局唯一id，每次消费消息时用该id先判断该消息是否已消费过。</p><p><strong>消费端的幂等性保障</strong><br>在海量订单生成的业务高峰期，生产端有可能就会重复发生了消息，这时候消费端就要实现幂等性，这就意味着我们的消息永远不会被消费多次，即使我们收到了一样的消息。业界主流的幂等性有两种操作：a.唯一ID+指纹码机制，利用数据库主键去重，b.利用redis的原子性去实现</p><p><strong>唯一lD+指纹码机制</strong><br>指纹码：我们的一些规则或者时间戳加别的服务给到的唯一信息码，它并不一定是我们系统生成的，基本都是由我们的业务规则拼接而来，但是一定要保证唯一性，然后就利用查询语句进行判断这个id是否存在数据库中，优势就是实现简单就一个拼接，然后查询判断是否重复；劣势就是在高并发时，如果是单个数据库就会有写入性能瓶颈当然也可以采用分库分表提升性能，但也不是我们最推荐的方式。</p><p><strong>Redis原子性</strong>（重点选择）<br>利用redis执行setnx命令，天然具有幕等性。从而实现不重复消费。</p><h3 id="优先级队列">优先级队列</h3><p>在我们系统中有一个订单催付的场景，我们的客户在天猫下的订单，淘宝会及时将订单推送给我们，如果在用户设定的时间内未付款那么就会给用户推送一条短信提醒，很简单的一个功能对吧，但是，tmall商家对我们来说，肯定是要分大客户和小客户的对吧，比如像苹果，小米这样大商家一年起码能给我们创造很大的利润，所以理应当然，他们的订单必须得到优先处理，而曾经我们的后端系统是使用 redis来存放的定时轮询，大家都知道 redis 只能用List做一个简简单单的消息队列，并不能实现一个优先级的场景，所以订单量大了后采用RabbitMQ进行改造和优化，如果发现是大客户的订单给一个相对比较高的优先级，否则就是默认优先级。</p><p>如何添加</p><p><img src="1667795380420.png" alt="1667795368461"></p><p>a.控制台添加</p><p>b.队列中代码添加优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; parame = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">parame.put(<span class="string">&quot;x-max-prority&quot;</span>,<span class="number">10</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,params);</span><br></pre></td></tr></table></figure><p><img src="1667796706959.png" alt="1667796706959"></p><p>c.消息中代码添加优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  String QUEUE_NAME=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//建立一个连接方式</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        <span class="comment">//工厂IP 连接RabbitMQ的队列</span></span><br><span class="line">        factory.setHost(<span class="string">&quot;www.littlehei.fun&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建链接</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> factory.newConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取信道</span></span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一个队列</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        生成队列</span></span><br><span class="line"><span class="comment">        参数1，队列名称</span></span><br><span class="line"><span class="comment">        参数2，队列里边的消息是否持久化（磁盘）默认情况消息存储在内存中</span></span><br><span class="line"><span class="comment">        参数3，该队列是否只供一个消费者进行消费，是否进行消息共享，true可以多个消费者消费,false：只能一个消费者消费</span></span><br><span class="line"><span class="comment">        参数4，是否自动删除，最后一个消费者断开链接以后，该队是否自动删除，true，自动删除，false不删除</span></span><br><span class="line"><span class="comment">        参数5，其他参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;x-max-priority&quot;</span>,<span class="number">10</span>);<span class="comment">//官方允许是0-255之间，此处设置10，允许优化级范围为0-10 不要设置过大，浪费CPU和内存</span></span><br><span class="line"></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>,map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发消息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;info&quot;</span> + i;<span class="comment">//初次使用</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">                AMQP.<span class="type">BasicProperties</span> <span class="variable">properties</span> <span class="operator">=</span></span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AMQP</span>.BasicProperties().builder().priority(<span class="number">5</span>).build();</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,properties,message.getBytes());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                channel.basicPublish(<span class="string">&quot;&quot;</span>,QUEUE_NAME,<span class="literal">null</span>,message.getBytes());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        发送一个消费</span></span><br><span class="line"><span class="comment">        参数1，发送到哪个交换机</span></span><br><span class="line"><span class="comment">        参数2.路由的key值是哪个？  本次是队列的名称</span></span><br><span class="line"><span class="comment">        参数3，其他参数配置</span></span><br><span class="line"><span class="comment">        参数4，发送消息的消息体</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Consumer</span> &#123;</span><br><span class="line">    <span class="comment">//队列的名称：</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> String QUEUE_NAME=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException &#123;</span><br><span class="line">        <span class="comment">//创建链接工厂</span></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactory</span>();</span><br><span class="line">        factory.setHost(<span class="string">&quot;www.littlehei.fun&quot;</span>);</span><br><span class="line">        factory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        factory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span>  factory.newConnection();</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span>  connection.createChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//声明</span></span><br><span class="line">        <span class="type">DeliverCallback</span> <span class="variable">deliverCallback</span> <span class="operator">=</span> (consumerTag, message)-&gt;&#123;</span><br><span class="line">            <span class="comment">//  String message = new String(&quot;自己手动去创建一个消息，但是不推荐&quot;);</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消消息时的回调</span></span><br><span class="line">        <span class="type">CancelCallback</span> <span class="variable">cancelCallback</span> <span class="operator">=</span> consumerTag -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息消费被中断&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        消费者接收消息</span></span><br><span class="line"><span class="comment">        参数1，消费哪个队列</span></span><br><span class="line"><span class="comment">        参数2，消费成功之后是否要自动应答，true表示自动应答，false表示不是</span></span><br><span class="line"><span class="comment">        参数3，消费者未成功消费的回调</span></span><br><span class="line"><span class="comment">        参数4，消费者取录消费的回到</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        channel.basicConsume(QUEUE_NAME,<span class="literal">true</span>,deliverCallback,cancelCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="1667797198751.png" alt="1667797198751"></p><p><strong>d.注意事项</strong></p><p>要让队列实现优先级需要做的事情有如下事情：</p><p>队列需要设置优先级队列，消息需要设置消息的优先级，消费者需要等待消息已经发送到队列中才去消费，因为这样才有机会对消息进行排序</p><h3 id="惰性队列">惰性队列</h3><p>RabbitMQ从3.6.0版本开始引入了惰性队列的概念。惰性队列会尽可能的将消息存入磁盘中，而在消费者消费到相应的消息时才会被加载到内存中，它的一个重要的设计目标是能够支持更长的队列，即支持更多的消息存储。当消费者由于各种各样的原因（比如消费者下线、若机亦或者是由于维护而关闭等）而致使长时间内不能消费消息造成堆积时，惰性队列就很有必要了。<br>默认情况下，当生产者将消息发送到RabbitMQ的时候，队列中的消息会尽可能的存储在内存之中，这样可以更加快速的将消息发送给消费者。即使是持久化的消息，在被写入磁盘的同时也会在内存中驻留一份备份。当RabbitMQ需要释放内存的时候，会将内存中的消息换页至磁盘中，这个操作会耗费较长的时间，也会阻塞队列的操作，进而无法接收新的消息。虽然RabbitMQ的开发者们一直在升级相关的算法，但是效果始终不太理想，尤其是在消息量特别大的时候。+</p><p><img src="1667797292928.png" alt="1667797292928"></p><p>当消息大量过来，我们短时间处理不过来，这个时候我们采用惰性队列了</p><p>队列具备两种模式：default 和lazy。默认的为default模式，在3.6.0之前的版本无需做任何变更。lazy模式即为惰性队列的模式，可以通过调用channel.queueDeclare方法的时候在参数中设置，也可以通过Policy的方式设置，如果一个队列同时使用这两种方式设置的话，那么Policy的方式具备更高的优先级。<br><strong>如果要通过声明的方式改变已有队列的模式的话，那么只能先删除队列，然后再重新声明一个新的。</strong><br>**在队列声明的时候可以通过“x-queue-mode&quot;参数来设置队列的模式，取值为“default’和lazy&quot;。**下面示例中演示了一个惰性队列的声明细节：</p><blockquote><p>Map&lt;String，Object&gt; args =new HashMap&lt;String，Object&gt;（）；</p><p>args.put（“x-queue-mode”，“lazy”）；</p><p>channel.queueDeclare（“myqueue”，false，false，false，args）；</p></blockquote><p><img src="1667797531387.png" alt="1667797531387"></p><p><strong>在发送1百万条消息，每条消息大概占1KB的情况下，普通队列占用内存是1.2GB，而惰性队列仅仅占用1.5MB</strong>。</p><h1>集群部分：</h1><h2 id="clustering"><strong>clustering</strong></h2><p><img src="1667797750772.png" alt="1667797750772"></p><h2 id="搭建集群">搭建集群</h2><p>如果是本地虚拟机的话，我们就将几台虚拟机进行克隆，造成集群环境。</p><p>然后选择一台服务器作为集群，其他两台服务器加入进去。</p><ol><li><p>修改3台机器的主机名称</p><p><code>vim /etc/hostname</code></p><p><code>vim /etc/host</code>进入后更该就行</p><p>​ip地址 node1</p><p>​ip地址 node2</p><p>​ip地址 node3</p></li><li><p>配置各个节点的host文件，让各个节点都能相互识别对方。</p><p><img src="1667798303738.png" alt="1667798303738"></p></li><li><p>确保各个节点的cookie文件使用的是同一个值。</p><p><code>scp/var/lib/rabbitmq/.erlang.cookie root@node2:/var/lib/rabbitmg/.erlang.cookie</code></p><p><code>scp/var/lib/rabbitmq/.erlang.cookie root@node3:/var/lib/rabbitmg/.erlang.cookie</code></p></li><li><p>启动RabbitMQ服务，顺带启动Erlang虚拟机和rabbitMQ应用服务（在三台节点上分布执行命令）</p><p><code>rabbitmq-server-detached</code></p></li><li><p>在节点2执行</p><p>rabbitmqctl stop_app</p><p>（rabbitmqctl stop会将Erlang虚拟机关闭，rabbitmqct stop_app 只关闭RabbitMQ服务）</p><p>rabbitmqctl reset</p><p>rabbitmqctl join_cluster rabbit@node1</p><p>rabbitmqctl start_app（只启动应用服务）</p></li><li><p>在节点3执行</p><p>rabbitmqctl stop_app</p><p>rabbitmqctl reset</p><p>rabbitmqctl join_cluster rabbit@node2</p><p>rabbitmqctl start_app（只启动应用服务)</p></li><li><p>集群状态</p><p>rabbitmqctl cluster_status</p></li><li><p>需要重新设置用户角色</p><p>创建账号</p><p>​rabbitmqctl add_user admin 123</p><p>设置用户角色</p><p>​rabbitmqctl set_user_tags admin adminstractor</p><p>设置用户权限</p><p>​<code>rabbitmqctl set_permissions -p &quot;/&quot; admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; </code></p><p><img src="1667799075099.png" alt="1667799075099"></p><p>此时如图，表示存在集群；</p></li><li><p>解除集群节点（node2，和node3分别执行）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl stop_app</span><br><span class="line"></span><br><span class="line">rabbitmqctl reset</span><br><span class="line"></span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line"></span><br><span class="line">rabbitmqetl forget_cluster_node rabbit@node2（node1机器上执行）</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="镜像队列">镜像队列</h2><p>如果RabbitMQ集群中只有一个Broker 节点，那么该节点的失效将导致整体服务的临时性不可用，并且也可能会导致消息的丢失。可以将所有消息都设置为持久化，并且对应队列的durable属性也设置为true，但是这样仍然无法避免由于缓存导致的问题：因为消息在发送之后和被写入磁盘井执行刷盘动作之间存在一个短暂却会产生问题的时间窗，通过publisherconfirm机制能够确保客户端知道哪些消息己经存入磁盘，尽管如此，一般不希望遇到因单点故障导致的服务不可用。<br>引入镜像队列（Miror Queue）的机制，可以将队列镜像到集群中的其他Broker节点之上，如果集群中的一个节点失效了，队列能自动地切换到镜像中的另一个节点上以保证服务的可用性。</p><p><strong>搭建步骤</strong></p><ol><li><p>启动三台集群节点</p></li><li><p>随便找一个节点添加policy</p><p><img src="1667922376855.png" alt="1667922376855"></p><p>照着这张图填写。</p><p><img src="1667922420241.png" alt="1667922420241"></p><p>备份如下</p><p><img src="1667922518425.png" alt="1667922518425"></p><p><img src="1667922560387.png" alt="1667922560387"></p></li></ol><p><img src="1667922609313.png" alt="1667922609313"></p><p>单点无法连接</p><p><img src="1667922679579.png" alt="1667922679579"></p><p>采用负载均衡，Haproxy + keepalive 实现高可用负载均衡。</p><p><img src="1667922801700.png" alt="1667922801700"></p><h2 id="FederationExchange（联邦交换机）">FederationExchange（联邦交换机）</h2><p>（broker北京），（broker 深圳）彼此之间相距甚远，网络延迟是一个不得不面对的问题。有一个在北京的业务（Client北京）需要连接（broker北京），向其中的交换器exchangeA发送消息，此时的网络延迟很小，（Client北京）可以迅速将消息发送至exchangeA中，就算在开启了publisherconfirm机制或者事务机制的情况下，也可以迅速收到确认信息。此时又有个在深圳的业务（Client 深圳）需要向 exchangeA发送消息，那么（Client深圳）（broker北京）之间有很大的网络延迟，（Client 深圳）将发送消息至exchangeA会经历一定的延迟，尤其是在开启了publisherconfirm机制或者事务机制的情况下，（Client深圳）会等待很长的延迟时间来接收（broker北京）的确认信息，进而必然造成这条发送线程的性能降低，甚至造成一定程度上的阻塞。</p><p>将业务（Client深圳）部署到北京的机房可以解决这个问题，但是如果（Client深圳）调用的另些服务都部署在深圳，那么又会引发新的时延问题，总不见得将所有业务全部部署在一个机房，那么容灾又何以实现？<br>这里使用Federation 插件就可以很好地解决这个问题.</p><p>由于两个地区的服务器比较远，这个时候就存在一种服务延迟情况，我们的federation交换机就是解决这个问题的。</p><p>搭建步骤：</p><ol><li><p>需要保证每台节点单独运行</p></li><li><p>在每台机器上开启federation相关插件</p><p><code>rabbitmq-plugins enable rabbitmq_federation</code></p><p><code>rabbitmq-plugins enable rabbitmq federation_management</code></p><p>每台服务器上都装一下。</p><p>两个指令都需要安装。</p><p><img src="1667923322008.png" alt="1667923322008"></p></li><li><p>原理图：（高山流水，只能从上游流向下游）。</p><p><img src="1667923458139.png" alt="1667923458139"></p><p>注意的是，必须从创建好下游节点的交换机，才能够将消息从上游传到下游。上游的消息在下游不能接收，那么这个消息就无法传递到下游。</p></li><li><p>在downstean(node2)配置upstream(node1);</p><p><img src="1668010050815.png" alt="1668010050815"></p></li><li><p>添加规则</p></li><li><p><img src="1668010105701.png" alt="1668010105701"></p><p>结果如下</p><p><img src="1668010140138.png" alt="1668010140138"></p></li></ol><h3 id="联邦队列">联邦队列</h3><p><img src="1668010229795.png" alt="1668010229795"></p><p><img src="1668010374916.png" alt="1668010374916"></p><p><img src="1668010393798.png" alt="1668010393798"></p><h2 id="Shovel">Shovel</h2><p>使用它的原因<br>Federation 具备的数据转发功能类似，Shovel够可靠、持续地从一个Broker中的队列（作为源端，即source）拉取数据并转发至另一个Broker中的交换器（作为目的端，即destination）。作为源端的队列和作为目的端的交换器可以同时位于同一个Broker，也可以位于不同的Broker上。Shovel可以翻译为“铲子&quot;<br>是一种比较形象的比喻，这个”铲子”可以将消息从一方“铲子&quot;另一方。Shovel行为就像优秀的客户端应用程序能够负责连接源和目的地、负责消息的读写及负责连接失败问题的处理。<br>搭建步骤<br>1.开启插件（需要的机器都开启）</p><p><code>rabbitmq-plugins enable rabbitmq_shovel </code></p><p><code>rabbitmq-plugins enable rabbitmq_shovel_management</code></p><p><img src="1668010585500.png" alt="1668010585500"></p><p><img src="1668010503507.png" alt="1668010503507"></p><p><img src="1668010619325.png" alt="1668010619325"></p><p><img src="1668010650732.png" alt="1668010650732"></p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习</title>
      <link href="/posts/c6fb831a.html"/>
      <url>/posts/c6fb831a.html</url>
      
        <content type="html"><![CDATA[<h1>MySql初步学习</h1><p>安装mysql 。。。自行百度</p><h3 id="链接数据库">链接数据库</h3><p>通过命令行！！！</p><p><code>mysql -u用户名 -p密码</code>   链接数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-- 更新数据库密码（适合小白忘记密码）</span><br><span class="line">update mysql.user set authentication_string=password(&#x27;a&#x27;) where user= &#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class="line"></span><br><span class="line">flush privileges ; -- 刷新权限</span><br><span class="line"></span><br><span class="line">-- --------------------------------------</span><br><span class="line">-- 查看所有的数据库</span><br><span class="line">show databases; </span><br><span class="line">-- 使用某个数据库</span><br><span class="line">user 数据库名;</span><br><span class="line"></span><br><span class="line">-- 展现数据库中所有的表</span><br><span class="line">show tables;-- 查看数据库中所有的表</span><br><span class="line">-- 查看表中的数据</span><br><span class="line">describe 表名;</span><br><span class="line">-- 创建一个数据库</span><br><span class="line">create database 数据库名;</span><br><span class="line">use 数据库名;</span><br><span class="line"></span><br><span class="line">-- 退出数据库</span><br><span class="line">exit ;</span><br></pre></td></tr></table></figure><p>数据库语言CURD业务程序员（简单的增删改查），API，</p><h3 id="DDL-数据库定义语言-：">DDL(数据库定义语言)：</h3><p><strong>是对数据库内部的对象进行创建，删除，修改等的操作语言。它和DML语言最大的区别是DML只是对表内部数据的操作，而不涉及到表的定义，结构的修改，更不会涉及到其它对象。</strong></p><ol><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database if not exists &lt;name&gt; ; -- 创建一个数据库</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if not exists &lt;name&gt; ; 删除一个数据库</span><br></pre></td></tr></table></figure></li><li><p>使用数据库</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use &lt;name&gt; ; -- 使用数据库</span><br></pre></td></tr></table></figure><ol start="4"><li><p>查看数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases; -- 查看所有数据库</span><br></pre></td></tr></table></figure></li></ol><h4 id="数据库的数据类型">数据库的数据类型</h4><blockquote><p>数值</p></blockquote><table><thead><tr><th>tinyint</th><th>十分小的数据</th><th>1个字节</th></tr></thead><tbody><tr><td>smallint</td><td>比较小的数据</td><td>2个字节</td></tr><tr><td>mediumint</td><td>中等大小的数据</td><td>3个字节</td></tr><tr><td>int</td><td>标准的整数</td><td>4个字节</td></tr><tr><td>bigint</td><td>较大的数据</td><td>8个字节</td></tr><tr><td>float</td><td>单精度（浮点性）</td><td>4个字节</td></tr><tr><td>double</td><td>双精度</td><td>8个字节</td></tr><tr><td>decimal</td><td>字符串形式的浮点数</td><td>金融计算的时候一般使用</td></tr></tbody></table><blockquote><p>字符串</p></blockquote><table><thead><tr><th><strong>char</strong></th><th><strong>字符串固定大小</strong></th><th><strong>0-255</strong></th></tr></thead><tbody><tr><td>varchar :1st_place_medal:</td><td>可变字符串</td><td>0-65535</td></tr><tr><td>tinytext</td><td>微型文本</td><td>2^8 -1</td></tr><tr><td>text :2nd_place_medal:</td><td>文本串</td><td>2^16-1</td></tr></tbody></table><blockquote><p>时间日期</p></blockquote><table><thead><tr><th>date</th><th>YYYY-MM-DD</th><th>日期格式</th></tr></thead><tbody><tr><td>time</td><td>HH:mm:ss</td><td>时区格式</td></tr><tr><td>datetime</td><td>YYYY-MM-DD HH:mm:ss</td><td>最长用的时间格式</td></tr><tr><td>timestamp</td><td>时间戳，1970.1.1</td><td>从1970.1.1到现在的毫秒数！也比较常用</td></tr><tr><td>year</td><td>年份表示</td><td></td></tr></tbody></table><blockquote><p>null</p></blockquote><p>没有值，注意，不要使用null进行运算，结果运算为null.</p><h4 id="数据库的子段属性：">数据库的子段属性：</h4><p><strong>Unsigned：</strong></p><ul><li>无符号的整数</li><li>声明了该列不能声明为负数</li></ul><p><strong>zerofill：</strong></p><ul><li>0填充的</li><li>不足的位数，用0来补充,int(3)， 5  —  005</li></ul><p><strong>自增</strong></p><ul><li>通常理解为自增，自动在上一条记录的基础之上+1(默认)。</li><li>通常用来设计唯一的主键-- index,必须是整数类型。</li><li>可以自定义设计主键自增的起始值和步长</li></ul><p><strong>非空 null  not  null:</strong></p><ul><li><p>假设设置为not null 如果不给他赋值就会报错</p></li><li><p>null 如果不填写值，这个值就会自动填充为空值。</p></li></ul><p><strong>默认</strong></p><p>设置默认的值</p><p>如果不给他设置值，他就会默认为我们设置的填充值</p><p><strong>一般创建表格的时候我们必须创建的存在的5个字段</strong></p><blockquote><p>id  主键</p><p>version  乐观锁</p><p>is_delete     伪删除 数据无价假删除保数据</p><p>gmt_create  创建时间</p><p>gmt_update  删除时间</p></blockquote><p><strong>创建表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表格，一般表面我们使用``进行标记</span><br><span class="line">-- 注意表中字符串的使用一般是单引号或者双引号</span><br><span class="line">-- 所有的语句后添加，最后一个不要加</span><br><span class="line"></span><br><span class="line">create table if not exists test1(</span><br><span class="line">    -- id 列名  int 数据类型  primary key 主键 not null 不为空 auto_increment 自增   comment &quot;&quot; 别名</span><br><span class="line">id  int  primary key  not null auto_increment comment &#x27;主键&#x27;,</span><br><span class="line">    -- default &#x27;&#x27; 默认的</span><br><span class="line">    name varchar(10) not null default &#x27;匿名&#x27; comment &#x27;姓名&#x27;，</span><br><span class="line">    </span><br><span class="line">    birthday datetime default null comment &#x27;生日&#x27;</span><br><span class="line"></span><br><span class="line">)Engine=innodb default charset=utf8;</span><br></pre></td></tr></table></figure><p>格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists(</span><br><span class="line">`字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释],</span><br><span class="line">    .....</span><br><span class="line">    `字段名` 列类型 [属性] [索引] [注释]</span><br><span class="line">)[表类型][字符编码集][注释]</span><br><span class="line"></span><br><span class="line">show create database [数据库名]  -- 查看创建数据库的语句</span><br><span class="line">show create table [数据库名] -- 查看数据库表的定义语句</span><br><span class="line">Desc [表名] -- 显示表的结构</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>数据库引擎</strong></p><p><strong>MYISAM   早先年使用的</strong></p><blockquote><p>事务支持： 不支持</p><p>数据行锁定：不支持</p><p>外键：不支持</p><p>全文索引： 支持</p><p>表空间大小 ： 较小</p></blockquote><p><strong>INNODB 目前默认使用的</strong></p><blockquote><p>事务支持： 支持</p><p>数据行锁定：支持</p><p>外键：支持</p><p>全文索引： 不支持</p><p>表空间大小：较大，约为2倍</p></blockquote><p><strong>常规使用操作：</strong></p><blockquote><p>MYISAM 节约空间，速度较快</p><p>INNODB 安全性高，事务的处理，多表多用户操作</p></blockquote><blockquote><p>在物理空间存储的位置</p></blockquote><p>所有的数据库文件都存在data下一个文件夹就代表一个数据库</p><p>本质还是文件的存储</p><h5 id="MYSQL引擎在物理文件上的区别">MYSQL引擎在物理文件上的区别</h5><ul><li><p>​InnoDB在数据库表中只有一个*.frm文件，以及目录上级目录下的ibdata1文件</p><p>​MYISAM对应文件</p><ul><li>*.frm --表结构的定义文件</li><li>*.MYD 数据文件（data）</li><li>*.MYI  索引文件（index）</li></ul></li></ul><blockquote><p>设置数据库表的字符集编码</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">charset=utf8;</span><br></pre></td></tr></table></figure><p>不设置的话会是使用mysql中默认的编码，他不支持中文。</p><p>my.ini中配置默认的编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character-set-server=utf8;</span><br></pre></td></tr></table></figure><p>===============================================================</p><h5 id="修改表">修改表</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 修改表的名字 alter table 旧表名  rename as 新表名</span><br><span class="line">alter table san rename san1;</span><br></pre></td></tr></table></figure><h5 id="增加表字段">增加表字段</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 添加表字段 alter table 表名 add 列名 数据类型</span><br><span class="line">alter table test add min int(4);</span><br></pre></td></tr></table></figure><h5 id="修改表的字段">修改表的字段</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 修改约束 alter table 表名 modify 列名 数据类型</span><br><span class="line">alter table test modify min varchar(20);</span><br><span class="line"></span><br><span class="line">-- 字段 重命名 以及修改约束  alter  table  表名 change 旧名字 新名字 列属性</span><br><span class="line">alter table test change min min1 int(11); </span><br><span class="line"></span><br><span class="line">-- 删除表字段  alter table 表名 drop 列名</span><br><span class="line">alter table 表名 drop 列名；</span><br><span class="line"></span><br><span class="line">-- 删除表 </span><br><span class="line">drop table if exists 表名</span><br></pre></td></tr></table></figure><p>== 所有的创建和删除操作劲量加上判断，以免造成错误 ==</p><h4 id="MYSQL数据管理"><strong>MYSQL数据管理</strong></h4><h5 id="外键">外键</h5><p>方式一</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 定义外键key</span><br><span class="line">-- 给这个外键添加约束执行引用 references 引用</span><br><span class="line">key FK_列名(列名) ，</span><br><span class="line">constraint FK_列名 foreign key 列名 references 表名（列名）</span><br><span class="line"></span><br><span class="line">-- 方式二，创建表成功后，添加外键约束</span><br><span class="line">alter table test</span><br><span class="line">add constraint FK_列名 foregin key (列名) references  `表名`(列名)；</span><br><span class="line">-- alter table 表 add constraint 约束名 foreign key(作为主键的列) referebces 那个表（哪个字段）</span><br></pre></td></tr></table></figure><p>删除有外键关联的值的时候，必须要删除外键。</p><p>最好的办法，数据库就是单纯的表，用来存数据，只有行和列</p><p>我们想使用多张表的时候想使用外键。</p><h3 id="DML（数据库操作语言）：">DML（数据库操作语言）：</h3><p><strong>数据操作语言DML（Data Manipulation Language），用户通过它可以实现对数据库的基本操作。例如，对表中数据的查询、插入、删除和修改。 在DML中，应用程序可以对数据库作插，删，改，排，检等五种操作</strong></p><p>数据库意义，存储，管理。</p><p>创建一个表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists test(</span><br><span class="line">    -- id 列名  int 数据类型  primary key 主键 not null 不为空 auto_increment 自增   comment &quot;&quot; 别名</span><br><span class="line">id  int  primary key  not null auto_increment comment &#x27;主键&#x27;,</span><br><span class="line">    -- default &#x27;&#x27; 默认的</span><br><span class="line">    name varchar(10) not null default &#x27;匿名&#x27; comment &#x27;姓名&#x27;</span><br><span class="line">)Engine=innodb default charset=utf8;</span><br></pre></td></tr></table></figure><h5 id="添加-insert">添加(insert):</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 一般写插入语句，我们一定要数据和字段一一对应 一个子段对应一个值</span><br><span class="line">-- 插入数据</span><br><span class="line">insert into 表名 (【字段1，自段2，字段三】) value (&#x27;值1&#x27;)，(&#x27;值2&#x27;),(&#x27;值3&#x27;)；</span><br><span class="line"></span><br><span class="line">insert into test(name) value(&quot;张三&quot;)；</span><br><span class="line"> -- 或者</span><br><span class="line"> -- 已知列  id name </span><br><span class="line"> insert into test value (&#x27;12&#x27;,&#x27;name&#x27;)；</span><br><span class="line"> </span><br><span class="line"> -- 由于主键自增，那么我们不插入id</span><br><span class="line"> insert into test value( ,&#x27;name&#x27;)；</span><br><span class="line"> </span><br><span class="line"> -- 一次插入多个数据</span><br><span class="line"> insert into test(name) value (&#x27;张三&#x27;),（&#x27;李四&#x27;）;</span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>字段使用英文逗号隔开</li><li>不写具体的列进行插入，那么我们插入的时候就需要整个数据库列的值全部插入</li><li>字段可以省略，但是后面的值必须要一一对应，不能少</li><li>可以同时插入多条数据，value后边的值，需要使用 英文逗号隔开。(),()</li></ol><h5 id="更新-update">更新(update):</h5><p>一般是更新数据库中的数据，而不是更新表的子段。。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 修改学员的名字</span><br><span class="line">update test set name = &#x27;张三&#x27; where id = 1 ;</span><br><span class="line">-- 在不指定具体的条件的情况下更改会更改表中所有name的数据</span><br><span class="line">update test set name = &#x27;李四&#x27;;  -- 更新整个表中列为name的所有数据是name都等于&#x27;李四&#x27;；  切记不要傻乎乎的使用。。。后果就是删库跑路</span><br><span class="line"></span><br><span class="line">-- 修改多个属性，逗号隔开</span><br><span class="line">update test set name =  &#x27;张三&#x27;  , tel = &#x27;123321&#x27;, email = &#x27;2569758@qq.com&#x27; where id = 1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 语法 </span><br><span class="line">update 表名 set 【列名1 = 值1，列2 = 值2 。。。。】 where 【条件】； </span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>5=6</td><td>false</td></tr><tr><td>&lt;&gt; 或  !=</td><td>不等于</td><td>5&lt;&gt; 6</td><td>true</td></tr><tr><td>&gt;</td><td>大于</td><td>5&gt;6</td><td>false</td></tr><tr><td>&lt;</td><td>小于</td><td>5&lt;6</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于</td><td>–</td><td></td></tr><tr><td>&gt;=</td><td>大于等于</td><td>–</td><td></td></tr><tr><td>between… and …</td><td>介于…之间</td><td>[2,5]</td><td></td></tr><tr><td>and</td><td>和</td><td>5&gt;1 and 1&gt;2</td><td>false</td></tr><tr><td>or</td><td>或</td><td>5&gt;1 or 1&gt;2</td><td>true</td></tr></tbody></table><p><code>update 表名 set 【列名1 = 值1，列2 = 值2 。。。。】 where 【条件】；</code></p><p>注意：</p><ol><li><p>更新某个类需要指定列名，顺带加上条件，没有加条件则会更新所有的列</p></li><li><p>不同列名之间需要加，隔开。</p></li></ol><h5 id="删除-delete">删除(delete)</h5><p>删除表中的数据，和drop不一样，drop是删除整个表，delete是删除表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 删除数据 尽量避免不添加条件删除</span><br><span class="line">delete from 表名 ; -- 这样会删除整个数据库</span><br><span class="line"></span><br><span class="line">-- 删除指定数据，也就是根据条件删除</span><br><span class="line">delete from 表名 where  列名1 = 值1 and 列名2 = 值2 ...；</span><br></pre></td></tr></table></figure><h5 id="TRUNCATE命令（推荐）">TRUNCATE命令（推荐）</h5><p>清空某一张表。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 清空student表 truncate</span><br><span class="line">TRUNCATE 表名；</span><br></pre></td></tr></table></figure><h5 id="delete-和-truncate区别：">delete 和 truncate区别：</h5><ol><li>相同点：都能删除表数据，且不会删除表结构</li><li>不同：<ol><li>truncate 重新设置<strong>自增列</strong> 记数器会归零</li><li>truncate不会影响事务</li></ol></li></ol><p><strong>delete删除问题，重启数据库，现象</strong></p><blockquote><p>InnoDB 自增会重1开始(存在内存中的，断电就失去)；</p><p>MyISAM 继续从上一个自增量开始(存在文件中，不会丢失）</p></blockquote><h3 id="DQL（数据库查询语言）：">DQL（数据库查询语言）：</h3><p><strong>DQL（data query language）数据查询语言，专门用来查询数据。</strong></p><ul><li>一般使用的都是Select 所有的查询操作都是这个</li><li>简单的查询和复杂的查询都能做</li><li>数据库中最核心的语言，也是最重要的语句。</li><li>使用频率最高的语句</li></ul><h5 id="查询所有">查询所有</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名； -- 一般不推荐使用 sql优化不推荐使用</span><br></pre></td></tr></table></figure><h5 id="查询指定字段">查询指定字段</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id , name from表名； </span><br></pre></td></tr></table></figure><h5 id="查询起别名，然后通过别名得到数据">查询起别名，然后通过别名得到数据</h5><p>as 可以给字段起别名，也可以给表起别名</p><p>如 ： from 表名 as ‘别名’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 列名1 as &#x27;别名1&#x27; , 列名2 as &#x27;别名2&#x27; ... from 表名；</span><br></pre></td></tr></table></figure><h5 id="去重查询distinct">去重查询distinct</h5><p>去除查到的重复的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select distinct 列名 from 表名；  -- 查询表中重复的数据，使得重复的数据只显示一条。</span><br><span class="line"></span><br><span class="line">select version() ; -- 查询系统版本</span><br><span class="line">select 100*3 -1 as &#x27;结果&#x27; ;  -- 用来计算  </span><br><span class="line">select @@auto_increment_increment ;   -- 查询自增的步长（变量）</span><br><span class="line"></span><br><span class="line">-- 例子 查询考试成绩 + 1 查看</span><br><span class="line">select id , scode + 1 as &#x27;加分后&#x27; from 表名;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="数据库中表达式：">数据库中表达式：</h5><p>文本值，列，NULL，函数，计算表达式，系统变量…</p><blockquote><p>select 表达式 from 表名；</p></blockquote><h5 id="WHERE条件">WHERE条件</h5><p>一般作为检索数据中的符合条件的值</p><p>搜索的条件一般由一个或多个条件组成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select id , score from 表名；</span><br><span class="line">-- 查询成绩在95 - 100 直接的 id</span><br><span class="line">select id from 表名 where score &gt;=95  and score &lt;= 100;</span><br><span class="line"></span><br><span class="line">-- and  &amp;&amp; </span><br><span class="line">select id from 表名 where score &gt;=95  &amp;&amp; score &lt;= 100;</span><br><span class="line"></span><br><span class="line">-- 模糊查询（between）</span><br><span class="line">select id from 表名 where score between 95 and 100;</span><br><span class="line"></span><br><span class="line">-- 除了1000号同学以为的所有同学的成绩</span><br><span class="line">select id ,score from 表名 where id != 1000;</span><br><span class="line"></span><br><span class="line">-- != not </span><br><span class="line">select id ,score from 表名 where not id = 1000;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>了解逻辑运算符：</p></blockquote><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>and           &amp;&amp;</td><td>a and b  a &amp;&amp; b</td><td>逻辑与，两真为真</td></tr><tr><td>or              ||</td><td>a || b         a   or  b</td><td>逻辑或 ，一真为真，全假为假</td></tr><tr><td>not           !</td><td>not  a           !a</td><td>逻辑非，真为假，假为真****</td></tr></tbody></table><p><strong>模糊查询</strong></p><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>is null</td><td>a is  null</td><td>如果操作符为null,结果为真</td></tr><tr><td>is not null</td><td>a is not null</td><td>如果操作符不为空，结果为真</td></tr><tr><td>between</td><td>a between b and c</td><td>如果a在b和c之间，则结果为真</td></tr><tr><td>like</td><td>a like  b</td><td>sql匹配成功，如果a匹配b，则结果为真</td></tr><tr><td>in</td><td>a in b</td><td>a 在 b 中</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 查询姓刘的同学的名字</span><br><span class="line">select id , name from 表名 where name like &#x27;刘%&#x27;；</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学，且只有一个字的</span><br><span class="line">select id , name from 表名 where name like &#x27;刘_&#x27;；</span><br><span class="line"></span><br><span class="line">-- 查询姓刘的同学，且只有两个字的</span><br><span class="line">select id , name from 表名 where name like &#x27;刘__&#x27;；</span><br><span class="line"></span><br><span class="line">-- 查询名字中有嘉的同学，%嘉%</span><br><span class="line">select id , name from 表名 where name like &#x27;%嘉%&#x27;；</span><br><span class="line"></span><br><span class="line">-- =================== in（具体的一个或多个值） ================</span><br><span class="line"> -- 查询101,102,103 号学员</span><br><span class="line"> select id, name from 表名 where id in ( 101,102,103);</span><br><span class="line"> </span><br><span class="line"> -- 用in查询名字等于张三，李四。。。的学生</span><br><span class="line"> select id , name from 表名 where name in (&#x27;张三&#x27;, &#x27;李四&#x27; ,&#x27;王五&#x27;...)；</span><br><span class="line"> </span><br><span class="line"> -- 查询姓名为空的学习（当然我们设置默认值，必定不存在这个值）</span><br><span class="line">  select id , name from 表名 where name  = &#x27;&#x27; or name is null;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  -- 查询姓名不为空的同学</span><br><span class="line">    select id , name from 表名 where name  != &#x27;&#x27; or name is not null;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h5 id="连表查询（JOIN-on）">连表查询（JOIN on）</h5><p><img src="F:%5C%E4%B8%89%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%5C%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%5CMysql%5C1666274982133.png" alt="1666274982133"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-- 连接两个表</span><br><span class="line">select s.id , s.name ,cid ,cname </span><br><span class="line">from stu s inner join class as r</span><br><span class="line">where s.id = r.id;</span><br><span class="line"> </span><br><span class="line">-- 右连接 right join </span><br><span class="line">select s.id , name , cid , cname from stu s</span><br><span class="line">right join class c</span><br><span class="line">on s.id = c.id</span><br><span class="line"></span><br><span class="line">-- 左连接 left join  </span><br><span class="line">select s.id , name , cid , cname from stu s</span><br><span class="line">left join class c</span><br><span class="line">on s.id = c.id</span><br><span class="line"></span><br><span class="line">-- join  on  连接查询</span><br><span class="line">-- where  等值查询</span><br><span class="line"></span><br><span class="line">-- 查询name为空的同学</span><br><span class="line">select s.id , sname , cid, cname </span><br><span class="line">from stu s left join </span><br><span class="line">class c on s.id = c.id </span><br><span class="line">where name is null;</span><br><span class="line"></span><br><span class="line">-- 查询时间为空的学生信息</span><br><span class="line">select s.id ,date, name ,cid , cname from stu s</span><br><span class="line">left join class c</span><br><span class="line">on s.id = c.id</span><br><span class="line">where date is null;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">inner   join</td><td style="text-align:center">如果表中至少有一个匹配值，那么就返回行</td></tr><tr><td style="text-align:center">left join</td><td style="text-align:center">会从左表中返回所有的值，即使右表中没有</td></tr><tr><td style="text-align:center">right join</td><td style="text-align:center">会从右表中返回所有的值，即使左表中没有</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 测试数据库</span><br><span class="line">create table `table_a` (</span><br><span class="line">  `aid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `a_name` varchar(255) NOT NULL,</span><br><span class="line">  `age` smallint NOT NULL,</span><br><span class="line">  PRIMARY KEY(`aid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT &#x27;测试表A&#x27;;</span><br><span class="line"> </span><br><span class="line">create table `table_b` (</span><br><span class="line">  `bid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `b_name` varchar(255) NOT NULL,</span><br><span class="line">  `age` smallint NOT NULL,</span><br><span class="line">  PRIMARY KEY(`bid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT &#x27;测试表B&#x27;;</span><br><span class="line"> </span><br><span class="line"># 插入测试数据</span><br><span class="line">INSERT INTO `table_a`(aid, a_name, age) VALUES(1, &#x27;test1&#x27;, 1),(2, &#x27;test2&#x27;, 2),(3, &#x27;test3&#x27;, 3);</span><br><span class="line">INSERT INTO `table_b`(bid, b_name, age) VALUES(1, &#x27;test2&#x27;, 2),(2, &#x27;test3&#x27;, 3),(4, &#x27;test4&#x27;, 4);</span><br></pre></td></tr></table></figure><p>这三条SQL都是等价的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM table_a JOIN table_b;</span><br><span class="line">SELECT * FROM table_a INNER JOIN table_b;</span><br><span class="line">SELECT * FROM table_a CROSS JOIN table_b;</span><br></pre></td></tr></table></figure><p>结果如下：</p><h6 id="inner-join连接">inner  join连接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 相当于笛卡尔积</span><br><span class="line">mysql&gt; SELECT * FROM table_a INNER JOIN table_b;</span><br><span class="line">+-----+--------+-----+-----+--------+-----+</span><br><span class="line">| aid | a_name | age | bid | b_name | age |</span><br><span class="line">+-----+--------+-----+-----+--------+-----+</span><br><span class="line">|   1 | test1  |   1 |   1 | test2  |   2 |</span><br><span class="line">|   2 | test2  |   2 |   1 | test2  |   2 |</span><br><span class="line">|   3 | test3  |   3 |   1 | test2  |   2 |</span><br><span class="line">|   1 | test1  |   1 |   2 | test3  |   3 |</span><br><span class="line">|   2 | test2  |   2 |   2 | test3  |   3 |</span><br><span class="line">|   3 | test3  |   3 |   2 | test3  |   3 |</span><br><span class="line">|   1 | test1  |   1 |   4 | test4  |   4 |</span><br><span class="line">|   2 | test2  |   2 |   4 | test4  |   4 |</span><br><span class="line">|   3 | test3  |   3 |   4 | test4  |   4 |</span><br><span class="line">+-----+--------+-----+-----+--------+-----+</span><br></pre></td></tr></table></figure><p>有ON和WHERE筛选条件，此时得到的结果是<strong>两张表的交集</strong>（中间的图），对于内连接，ON和WHERE是等价的，但是对于外连接则不是，在下面会讲到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 这两条SQL是等价的，不过建议使用ON关键字，约定俗成</span><br><span class="line">SELECT * FROM table_a a INNER JOIN table_b b ON a.a_name=b.b_name;</span><br><span class="line">SELECT * FROM table_a a INNER JOIN table_b b WHERE a.a_name=b.b_name;</span><br><span class="line"></span><br><span class="line"># 结果如下：</span><br><span class="line">mysql&gt; SELECT * FROM table_a a INNER JOIN table_b b ON a.a_name=b.b_name;</span><br><span class="line">+-----+--------+-----+-----+--------+-----+</span><br><span class="line">| aid | a_name | age | bid | b_name | age |</span><br><span class="line">+-----+--------+-----+-----+--------+-----+</span><br><span class="line">|   2 | test2  |   2 |   1 | test2  |   2 |</span><br><span class="line">|   3 | test3  |   3 |   2 | test3  |   3 |</span><br><span class="line">+-----+--------+-----+-----+--------+-----+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="右连接-right-join">右连接(right join)</h6><p>右连接的关键字是 <code>RIGHT JOIN</code>，从上图可以得到（右边的图），右连接其实就是<strong>两个表的交集+右表剩下的数据</strong> ，当然这是在没其他过滤条件的情况下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM `table_a` a RIGHT JOIN `table_b` b ON a.a_name=b.b_name;</span><br><span class="line">+------+--------+------+-----+--------+-----+</span><br><span class="line">| aid  | a_name | age  | bid | b_name | age |</span><br><span class="line">+------+--------+------+-----+--------+-----+</span><br><span class="line">|    2 | test2  |    2 |   1 | test2  |   2 |</span><br><span class="line">|    3 | test3  |    3 |   2 | test3  |   3 |</span><br><span class="line">| NULL | NULL   | NULL |   4 | test4  |   4 |</span><br><span class="line">+------+--------+------+-----+--------+-----+</span><br></pre></td></tr></table></figure><h6 id="左连接-left-join">左连接(left join)</h6><p>左连接的关键字是 <code>LEFT JOIN</code>，从上图可以得到（左边的图），左连接其实就是<strong>两个表的交集+左表剩下的数据</strong> ，当然这是在没其他过滤条件的情况下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 没找到的被置为NULL</span><br><span class="line">mysql&gt; SELECT * FROM `table_a` a LEFT JOIN `table_b` b ON a.a_name=b.b_name;</span><br><span class="line">+-----+--------+-----+------+--------+------+</span><br><span class="line">| aid | a_name | age | bid  | b_name | age  |</span><br><span class="line">+-----+--------+-----+------+--------+------+</span><br><span class="line">|   2 | test2  |   2 |    1 | test2  |    2 |</span><br><span class="line">|   3 | test3  |   3 |    2 | test3  |    3 |</span><br><span class="line">|   1 | test1  |   1 | NULL | NULL   | NULL |</span><br><span class="line">+-----+--------+-----+------+--------+------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>WHERE子句中的过滤条件就是我们常见的那种，不管是内连接还是外连接，只要不符合WHERE子句的过滤条件，都会被过滤掉。</strong></p><p><strong>而ON子句中的过滤条件对于内连接和外连接是不同的，对于内连接，ON和WHERE的作用是一致的，因为匹配不到的都会过滤，所以你可以看到内连接并不强制需要 ON 关键字；但是对于外连接，ON决定匹配不到的是否要过滤，所以你可以看到外连接是强制需要 ON 关键字的。</strong></p></blockquote><p>我要查询哪些数据 select …</p><p>从那几个表中查from表  XXXjoin 连接的表 on交叉条件</p><p>假设存在一种多张表查询，慢慢来，先查询两张表  然后在慢慢添加。</p><h5 id="自连接-了解">自连接(了解)</h5><p>自己的表和自己的表连接： <strong>核心是一张表拆为两张表使用</strong></p><p>将数据同一张表中数据进行查分，然后起别名。将一张表变成两张表处理。</p><p>分为父和子，也就是拆分的表可以成为父和子关系或者说<strong>包含</strong>和<strong>被包含</strong>关系。</p><h5 id="分页和排序">分页和排序</h5><p><strong>limit  和 order by</strong></p><h6 id="limit（分页）">limit（分页）</h6><p>​limit  当前页，页面大小</p><p>​<code>limit  0 , 5</code>       --前边数字表示第几页，后边数据每页显示的数据条数</p><h6 id="order-by-（排序）">order by （排序）</h6><ul><li><p>升序asc</p><p><code>order by id  asc</code> 根据id升序排序</p></li><li><p>降序        desc</p><p><code>order by  id  desc</code>根据id降序排序</p></li></ul><h5 id="子查询和嵌套查询">子查询和嵌套查询</h5><p><strong>出现在其他语句中的select语句被称为子查询</strong></p><p>:top:<strong>查询顺序是由里及外。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">-- 查询 数据库结构的所有考试结果(学号，科目编号，成绩)，降序排列</span><br><span class="line">-- 方式1  id 是stu 表 学生编号，sid 是 score 表，成绩编号</span><br><span class="line">select id , s.sid, score</span><br><span class="line">from score s,</span><br><span class="line">inner join sub  u</span><br><span class="line">on s.id = u.id</span><br><span class="line">where sname = &#x27;数据结构&#x27;</span><br><span class="line">order by score desc</span><br><span class="line"></span><br><span class="line">-- 方式2 使用子查询</span><br><span class="line">select id , sid ,score</span><br><span class="line">from score </span><br><span class="line">where sid = (</span><br><span class="line">    -- 作为子查询 先查询里边的然后在查询外边的</span><br><span class="line">select sid </span><br><span class="line">    from score </span><br><span class="line">    where sname = &#x27;数据结构&#x27;</span><br><span class="line">)</span><br><span class="line">order by score desc;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查询所有数据库结构 的学生学号</span><br><span class="line">select id from score where sname = &#x27;数据结构&#x27;； </span><br><span class="line"></span><br><span class="line">-- 查询分数不小于80分的学号和姓名</span><br><span class="line">select distinct id , name </span><br><span class="line">from stu t</span><br><span class="line">inner join score s</span><br><span class="line">on s.id = t.id</span><br><span class="line">where score &gt; 80;</span><br><span class="line"></span><br><span class="line">-- 在此基础上添加一个科目，高等数学</span><br><span class="line">select distinct id , name </span><br><span class="line">from stu t</span><br><span class="line">inner join score s</span><br><span class="line">on s.id = t.id</span><br><span class="line">where score &gt; 80 and sid = (</span><br><span class="line">select sid  from score </span><br><span class="line">    where sname = &#x27;高等数学&#x27;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>按位置分类：</p><blockquote><p>select后面<br>from后面<br>where或having后面<br>exists后面<br>按结果级的行数不同分类：</p></blockquote><ul><li>标量子查询 (结果集有一行一列)</li><li>列子查询 (结果集只有一列多行)</li><li>行子查询 (结果集只有一行多列)</li><li>表子查询 (结果集一般为多行多列)</li></ul><p><strong>where或having后面长放的</strong></p><ul><li>标量子查询</li><li>列子查询</li><li>行子查询</li></ul><p><strong>特点：</strong></p><ul><li><p>子查询都放在小括号内，结尾不用加 ;</p></li><li><p>子查询可以放在from后面、select后面、where后面、having后面，但一般放在条件的右侧</p></li><li><p>子查询优先于主查询执行，主查询使用了子查询的执行结果</p></li><li><p>子查询根据查询结果的行数不同分为以下两类：单行子查询和多行子查询</p></li></ul><blockquote><p><strong>单行子查询</strong><br>结果集只有一行<br>一般搭配单行操作符使用：&gt; &lt; = &lt;&gt; &gt;= &lt;=<br>非法使用子查询的情况：</p><p>子查询的结果为一组值<br>子查询的结果为空</p></blockquote><blockquote><p><strong>多行子查询</strong><br>结果集有多行<br>一般搭配多行操作符使用：any、all、in、not in<br>in：属于子查询结果中的任意一个就行<br>any和all:往往可以用其他查询代替</p></blockquote><h5 id="MySQL常用函数">MySQL常用函数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 数学运算</span><br><span class="line">SELECT ABS(-10);-- 绝对值</span><br><span class="line">SELECT CEIL(10.1);-- ceil和ceiling 向上取整</span><br><span class="line">SELECT FLOOR(10.1);-- 向下取整</span><br><span class="line">SELECT RAND();-- 返回0-1随机数</span><br><span class="line">SELECT SIGN(NULL);-- 返回参数的符号 负数返回-1 正数返回1 </span><br><span class="line">-- 0和非数字返回0 null返回null</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 字符串函数</span><br><span class="line">SELECT CHAR_LENGTH(&#x27;fwebw&#x27;);-- 返回字符串长度</span><br><span class="line">SELECT CONCAT(&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;);-- 拼接字符串</span><br><span class="line">SELECT INSERT(&#x27;123456&#x27;,1,3,&#x27;0&#x27;);-- 先把第一个字符串的第1位起的0个字符去除</span><br><span class="line">-- 然后再把第二个字符串插入到对应位置</span><br><span class="line">SELECT LOWER(&#x27;JIOji&#x27;);-- 转小写字母</span><br><span class="line">SELECT UPPER(&#x27;wfdINOI&#x27;);-- 转大写字母 </span><br><span class="line">SELECT INSTR(&#x27;asdasd&#x27;,&#x27;sd&#x27;);-- 返回第一个字串出现的位置</span><br><span class="line">SELECT REPLACE(&#x27;123456789123&#x27;,&#x27;123&#x27;,&#x27;hhh&#x27;);-- 把s1中s2部分替换为s3（所有s2）</span><br><span class="line">SELECT SUBSTR(&#x27;123456789&#x27;,2,4);-- 截取字符串，从第2个字符开始截取4个字符</span><br><span class="line">SELECT REVERSE(&#x27;123465&#x27;);-- 翻转字符串</span><br><span class="line"></span><br><span class="line">-- 查询姓周的同学并把姓换为邹</span><br><span class="line">SELECT REPLACE(studentName,&#x27;周&#x27;,&#x27;邹&#x27;) FROM students</span><br><span class="line">WHERE studentName LIKE &#x27;周%&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 时间和日期函数</span><br><span class="line">SELECT CURRENT_DATE();-- 获取当前日期</span><br><span class="line">SELECT CURDATE()-- 获取当前日期</span><br><span class="line">SELECT CURRENT_TIME();-- 获取当前时间（时分秒）</span><br><span class="line">SELECT SYSDATE();-- 获取系统时间</span><br><span class="line">SELECT NOW();-- 获取时间</span><br><span class="line">SELECT YEAR(NOW());-- 获取当前年</span><br><span class="line">SELECT MONTH(NOW());-- 获取当前月</span><br><span class="line">-- ······获取日时分秒同理</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 系统</span><br><span class="line">SELECT SYSTEM_USER();</span><br><span class="line">SELECT USER();-- 获取当前用户</span><br><span class="line">SELECT VERSION(); -- 获取当前版本信息</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数字段</th><th></th><th>描述</th></tr></thead><tbody><tr><td>abs()</td><td></td><td>绝对值</td></tr><tr><td>ceiling()</td><td></td><td>向上取整</td></tr><tr><td>floor()</td><td></td><td>向下取整</td></tr><tr><td>rand()</td><td></td><td>返回一个0-1直接的随机数</td></tr><tr><td>sign()</td><td></td><td>判断一个数的符号  负数范围-1，正数返回1</td></tr><tr><td>char_length()</td><td></td><td>判断字符串长度</td></tr><tr><td>concat(‘’,‘’,‘’)</td><td></td><td>拼接字符串</td></tr><tr><td>insert(‘查询并被替换的’,1，3,‘要替换的’)</td><td></td><td>查询替换从1，到3号位置替换</td></tr><tr><td>lower()</td><td></td><td>将字符串专为小写</td></tr><tr><td>upper()</td><td></td><td>将小写转为大写</td></tr><tr><td>instr()</td><td></td><td>返回第一次出现的字符串索引</td></tr><tr><td>replace()</td><td></td><td>替换出现的指定字符串</td></tr><tr><td>substr()</td><td></td><td>截取字符串</td></tr><tr><td>reverse()</td><td></td><td>反转</td></tr><tr><td>…</td><td></td><td>…</td></tr></tbody></table><h5 id="聚合函数和分组过滤（having-by-）">聚合函数和分组过滤（having by ）</h5><table><thead><tr><th>聚合函数</th><th>描述</th></tr></thead><tbody><tr><td>count()</td><td>统计</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>min()</td><td>最小值</td></tr></tbody></table><p>having的用法</p><p><strong>having字句可以让我们筛选成组后的各种数据，where字句在聚合前先筛选记录，也就是说作用在group by和having字句前。而 having子句在聚合后对组记录进行筛选。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查询不同科目的平均分最高分和最低分 平均分大于80</span><br><span class="line">-- 由于按照顺序执行，所以where不能限定分组后计算出的平均值等信息</span><br><span class="line">-- 可以使用having</span><br><span class="line">SELECT sname,AVG(score),MAX(score),MIN(score)</span><br><span class="line">FROM score s</span><br><span class="line">INNER JOIN `sub` sub</span><br><span class="line">ON s.id=sub.id</span><br><span class="line">GROUP BY s.id</span><br><span class="line">HAVING AVG(score)&gt;=80;</span><br></pre></td></tr></table></figure><h3 id="事务（transaction）">事务（transaction）</h3><p>事务特性：ACID（原子性，一致性，隔离性，持久性）</p><ul><li><p>A:原子性</p><ul><li>要么成功要么不成功</li></ul></li><li><p>C:一致性</p><ul><li>最终一致性，保证最终结果一致</li></ul></li><li><p>I:隔离性</p><ul><li>一个事务的提交不会影响下一个事务。</li><li>隔离产生的问题<ul><li>脏读： 一个事务读取了另一个事务未提交的数据。</li><li>不可重复读：在一个事务内读取表中的某一行数据，多次读取结果不同。</li><li>幻读：指在一个事务内读取到别的事务插入的数据，导致前后读取不一致。</li></ul></li></ul></li><li><p>D:持久性</p><ul><li>表示事务结束后的数不会随着外界原因导致数据丢失</li><li>也就是说，事务没有提交，那么就恢复到原来的未提交状态，如果提交，那么就更新为提交后的状态，持久化到数据，事务一旦提交就不可逆。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 手动开启事务</span><br><span class="line">start transaction -- 标记一个事务的开始，从这个之后的sql都在同一个事务内</span><br><span class="line"></span><br><span class="line">insert xxx</span><br><span class="line">insert xxx</span><br><span class="line"></span><br><span class="line">-- 提交 持久化</span><br><span class="line">commit ;</span><br><span class="line">-- 如果提交失败就回滚到原来的样子</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">-- 事务结束</span><br><span class="line">set autocommit = 1 ；-- 开启自动提交</span><br><span class="line"></span><br><span class="line">savepoint 保存点名 -- 设置一个事务的保持点</span><br><span class="line">rollback to savepoint 保存点名  -- 回滚到保存点</span><br><span class="line">release  savepoint 保存点名 -- 撤销保存点</span><br></pre></td></tr></table></figure><p>模拟场景</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 转账</span><br><span class="line">create database shop character set utf8 collate utf_8_general_cli;</span><br><span class="line">use shop;</span><br><span class="line">create table account(</span><br><span class="line">id int (3) not null primary key auto_increment,</span><br><span class="line">    name varchar(20) not null，</span><br><span class="line">    money decimal(9,2) not null</span><br><span class="line">) engine = innodb default charset=utf8;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into account(name,money) </span><br><span class="line">value(&#x27;A&#x27;,1024.00),(&#x27;B&#x27;,2048.00)</span><br><span class="line"></span><br><span class="line">-- 模拟转账：事务</span><br><span class="line">set autocommit = 0; -- 关闭自动提交</span><br><span class="line">start transaction ; -- 开启事务</span><br><span class="line">update account set money - 500 where name = &#x27;A&#x27;;</span><br><span class="line">update account set money + 500 where name = &#x27;B&#x27;;</span><br><span class="line"></span><br><span class="line">commit ; -- 提交事务</span><br><span class="line">rollback ; -- 回滚</span><br><span class="line">set autocommit = 1; -- 恢复默认值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="索引">索引</h3><p>==<strong>是帮助mysql高效获取数据的数据结构，提取句子主干，可以得到索引的本质，索引是数据结构。</strong>==</p><h4 id="索引分类："><strong>索引分类：</strong></h4><ol><li><p>主键索引：创建主键后会自动建立索引</p><ol><li><p>唯一标识，主键不可重复，只能有一个主键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#随表一起建索引：</span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT(10) UNSIGNED  AUTO_INCREMENT ,</span><br><span class="line">    customer_no VARCHAR(200),</span><br><span class="line">    customer_name VARCHAR(200),</span><br><span class="line">    PRIMARY KEY(id) </span><br><span class="line">);</span><br><span class="line">#使用AUTO_INCREMENT关键字的列必须有索引(只要有索引就行)。</span><br><span class="line">CREATE TABLE customer2 (</span><br><span class="line">    id INT(10) UNSIGNED,</span><br><span class="line">    customer_no VARCHAR(200),</span><br><span class="line">    customer_name VARCHAR(200),</span><br><span class="line"> PRIMARY KEY(id) </span><br><span class="line">);</span><br><span class="line">#单独建主键索引：</span><br><span class="line">ALTER TABLE customer </span><br><span class="line">add PRIMARY KEY </span><br><span class="line">customer(customer_no);  </span><br><span class="line">#删除建主键索引：</span><br><span class="line">ALTER TABLE customer</span><br><span class="line">drop PRIMARY KEY ;  </span><br><span class="line">#修改建主键索引：</span><br><span class="line">#必须先删除掉(drop)原索引，再新建(add)索引</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>唯一索引:索引列的值必须唯一，但允许有空值</p><ol><li><p>避免重复的列出现，唯一索引可以重复，多个列都可以标识为，唯一索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#随表一起建索引：</span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT(10) UNSIGNED  AUTO_INCREMENT ,</span><br><span class="line">    customer_no VARCHAR(200),</span><br><span class="line">    customer_name VARCHAR(200),</span><br><span class="line">  PRIMARY KEY(id),</span><br><span class="line">  KEY (customer_name),</span><br><span class="line">  UNIQUE (customer_no)</span><br><span class="line">);</span><br><span class="line">#建立 唯一索引时必须保证所有的值是唯一的（除了null），若有重复数据，会报错。   </span><br><span class="line">#单独建唯一索引：</span><br><span class="line">CREATE UNIQUE INDEX </span><br><span class="line">idx_customer_no </span><br><span class="line">ON customer(customer_no); </span><br><span class="line">#删除索引：</span><br><span class="line">DROP INDEX idx_customer_no</span><br><span class="line">on customer ;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>常规索引</p><ol><li><p>默认的，index，key关键字来设置</p></li><li><p>单列索引：一个索引只包含单个列，一个表可以有多个单列索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#随表一起建索引：</span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT(10) UNSIGNED  AUTO_INCREMENT ,</span><br><span class="line">    customer_no VARCHAR(200),</span><br><span class="line">    customer_name VARCHAR(200),</span><br><span class="line">  PRIMARY KEY(id),</span><br><span class="line">  KEY (customer_name)  </span><br><span class="line">);</span><br><span class="line">#随表一起建立的索引 索引名同 列名(customer_name)</span><br><span class="line">#单独建单值索引：</span><br><span class="line">CREATE INDEX idx_customer_name </span><br><span class="line">ON customer(customer_name); </span><br><span class="line">#删除索引：</span><br><span class="line">DROP INDEX idx_customer_name ;</span><br></pre></td></tr></table></figure></li><li><p>复合索引：一个索引包含多个列，在数据库操作期间，复合索引比单值索引所需要的开销更小（对于相同的多个列建索引）</p></li></ol><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#随表一起建索引：</span><br><span class="line">CREATE TABLE customer (</span><br><span class="line">    id INT(10) UNSIGNED  AUTO_INCREMENT ,</span><br><span class="line">    customer_no VARCHAR(200),</span><br><span class="line">    customer_name VARCHAR(200),</span><br><span class="line">  PRIMARY KEY(id),</span><br><span class="line">  KEY (customer_name),</span><br><span class="line">  UNIQUE (customer_name),</span><br><span class="line">  KEY (customer_no,customer_name)</span><br><span class="line">);</span><br><span class="line">#单独建索引：</span><br><span class="line">CREATE INDEX idx_no_name</span><br><span class="line">ON customer(customer_no,customer_name); </span><br><span class="line">#删除索引：</span><br><span class="line">DROP INDEX idx_no_name  on customer ;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>全文索引</p><ol><li><p>在特定的数据库引擎下才有的，myIsam</p></li><li><p>快速定位数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 索引的使用</span><br><span class="line">-- 在创建表的时候给字段增加索引</span><br><span class="line">-- 创建完毕后，增加索引</span><br><span class="line"></span><br><span class="line">-- 显示所有的索引信息</span><br><span class="line">show index from student;</span><br><span class="line"></span><br><span class="line">-- 增加一个全文索引（索引名） 列名</span><br><span class="line">alter table school.student</span><br><span class="line">add fulltext </span><br><span class="line">index studentName(studentName);</span><br><span class="line"></span><br><span class="line">-- explain 分析mysql执行的状况</span><br><span class="line">explain select * from student ; -- 非全文索引</span><br><span class="line"></span><br><span class="line">select * from student</span><br><span class="line">where match(studentName) against(&#x27;刘&#x27;)；</span><br></pre></td></tr></table></figure></li><li><p>聚集索引和非聚集索引</p><ol><li>聚集索引：指索引项的排序方式和表中数据记录排序方式一致的索引。</li><li>非聚集索引：与聚集索引相反，索引顺序与物理存储顺序不一致</li></ol></li></ol></li></ol><h4 id="索引测试">索引测试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">-- 我们在创建索引的时候一般使用  primary  key (列名)事实上这就是设置主键，但是这个也就是创建了唯一索引</span><br><span class="line">create table if not exists yyl(</span><br><span class="line">id int(10) not null primary key auto_increment comment &#x27;主键&#x27;,</span><br><span class="line">    name varchar(20) default null comment  &#x27;姓名&#x27;,</span><br><span class="line">    pwd varchar(50) not null default &#x27;123321&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">    age int (10) not null default &#x27;0&#x27; comment &#x27;年龄&#x27;</span><br><span class="line">)engine = innodb default charset = utf8;</span><br><span class="line"></span><br><span class="line">-- 插入100万数据</span><br><span class="line">delimiter $$ -- 写数据之前必须要写，标志</span><br><span class="line">create function mock_data()</span><br><span class="line">returns int</span><br><span class="line">begin</span><br><span class="line">declare num int default 1000000;</span><br><span class="line">declare i int default 0;</span><br><span class="line">while i &lt; num do</span><br><span class="line">-- 插入语句</span><br><span class="line"></span><br><span class="line">insert into yyl (name,pwd,age) </span><br><span class="line">value(concat(&#x27;用户&#x27;,i),UUID(),floor(rand()*100));</span><br><span class="line">set i = i + 1;</span><br><span class="line">end while;</span><br><span class="line">return i;</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">-- 执行一下</span><br><span class="line">select mock_data();</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">select mock_data();</span><br><span class="line">受影响的行: 0</span><br><span class="line">时间: 42.708ms</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">-- 插入表数据</span><br><span class="line">insert into yyl (name,pwd,age) </span><br><span class="line">value(concat(&#x27;用户&#x27;,i),UUID(),floor(rand()*100));</span><br><span class="line"></span><br><span class="line">-- 由于插入了1000000条数据，那么查询一个值</span><br><span class="line">select * from yyl where name = &#x27;用户99999&#x27;;</span><br><span class="line">/*</span><br><span class="line">没创建索引的时候去查询数据</span><br><span class="line">[SQL] select * from yyl where name = &#x27;用户99999&#x27;;</span><br><span class="line">受影响的行: 0</span><br><span class="line">时间: 0.744ms</span><br><span class="line">我们发现时间比较长</span><br><span class="line">*/</span><br><span class="line">explain select * from yyl where name = &#x27;用户99999&#x27;; -- rows 1000539次</span><br><span class="line"></span><br><span class="line">-- 创建索引 id_表名_字段名 on 索引名 on 表（字段）</span><br><span class="line">create index id_yyl_name on yyl(name);</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">drop index id_yyl_name ;</span><br><span class="line">/*</span><br><span class="line">创建索引后再去查询数据非常快</span><br><span class="line">[SQL] select * from yyl where name = &#x27;用户99999&#x27;; </span><br><span class="line">受影响的行: 0</span><br><span class="line">时间: 0.009ms</span><br><span class="line">*/</span><br><span class="line">-- 此时explain   rows =1;</span><br><span class="line">explain select * from yyl where name = &#x27;用户99999&#x27;;</span><br></pre></td></tr></table></figure><p>==创建索引==</p><p>​==create index id _ 表名_ 字段名 on 索引名 表(字段)；==</p><p>==索引在小数据量的时候，用处不大，但是在大数据的时候，区别十分明显。==</p><h4 id="索引原则">索引原则</h4><ul><li>索引不是越多越好</li><li>不要对进程变动数据加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在常常用来查询的字段上！</li></ul><p>索引的数据结构：</p><ul><li>Hash 类型的索引</li><li>B+树：innodb的默认数据结构</li></ul><h5 id="讨论为啥Innodb要使用B-树而不使用其他数据结构呢？">讨论为啥Innodb要使用B+树而不使用其他数据结构呢？</h5><ul><li><p>​B-树：（不是二分查找，却相似于二分查找）</p><ul><li>B-树是一种多路自平衡的搜索树，它类似普通的平衡二叉树，不同的一点是B-树允许每个节点有更多的子节点。B-Tree相对于AVLTree缩减了节点个数，使每次磁盘I/O取到内存的数据都发挥了作用，从而提高了查询效率。</li><li>存在问题：<ul><li>每个节点中有key，也有data，而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小。 当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率</li></ul></li></ul></li><li><p>B+树：</p><ul><li>B+Tree是在B-Tree基础上的一种优化，InnoDB存储引擎就是用B+Tree实现其索引结构。</li><li>它带来的变化点：<ul><li>B+树每个节点可以包含更多的节点，这样做有两个原因，一个是降低树的高度。另外一个是将数据范围变为多个区间，区间越多，数据检索越快</li><li>非叶子节点存储key，叶子节点存储key和数据叶子节点两两指针相互链接（符合磁盘的预读特性），顺序查询性能更高</li></ul></li><li>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。</li><li>因此可以对B+Tree进行两种查找运算：<ul><li>一种是对于主键的范围查找的分页查找。</li><li>另一种是从根节点开始，进行随机查找。</li></ul></li></ul><p><strong>B树和B+树的区别：</strong></p><blockquote><p>B+树内节点不存储数据，所有数据存储在叶节点导致查询时间复杂度固定为log n<br>B-树查询时间复杂度不固定，与Key在树中的位置有关，最好为O(1)<br>B+树叶节点两两相连可大大增加区间访问性，可使用在范围查询等<br>B+树更适合外部存储（存储磁盘数据）。由于内节点无data域，每个节点能索引的范围更大更精确。</p></blockquote></li></ul><h3 id="DCL（数据库控制语言）：">DCL（数据库控制语言）：</h3><p><strong>数据控制语言 用户权限控制 grant、revoke</strong></p><h4 id="权限管理">权限管理</h4><h5 id="用户管理">用户管理</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 创建用户 create user 用户名 identified by &#x27;密码&#x27;</span><br><span class="line">create user xh identitied by &#x27;a&#x27;;</span><br><span class="line">-- 修改密码</span><br><span class="line">set password = password(&#x27;123321&#x27;);</span><br><span class="line">-- 修改密码（修改指定用户密码）</span><br><span class="line">set password from xh = password(&#x27;a&#x27;);</span><br><span class="line">-- 重命名</span><br><span class="line">rename user 原来名 to 新名字;</span><br><span class="line">-- 用户授权</span><br><span class="line">-- all privileges 除了给别人授权，其他都能干</span><br><span class="line">grant all privileges on *.* to xh;</span><br><span class="line">-- 查询权限</span><br><span class="line">show grant for xh ; -- 查看指定用户的权限</span><br><span class="line">show grant for root@loaclhost</span><br><span class="line">-- root用户权限：Grant all privileges on *.* to &#x27;root&#x27;@&#x27;localhost&#x27; with grant option </span><br><span class="line">Grant all privileges on *.* to &#x27;root&#x27;@&#x27;localhost&#x27; with grant option </span><br><span class="line">-- 撤销权限 revoke 哪些权限，在哪个库撤销，给谁撤销</span><br><span class="line">revoke all privileges on *.* from xh;</span><br><span class="line">-- 删除用户</span><br><span class="line">drop user xh;</span><br></pre></td></tr></table></figure><h4 id="MYSQL备份">MYSQL备份</h4><p>为啥要备份：</p><ul><li><p>保证重要数据不丢失。</p></li><li><p>数据转移。</p></li></ul><p>MYSQL数据库备份的方式：</p><ul><li>直接拷贝物理文件</li><li>在可视化编辑器中手动导出</li><li>使用命令行导出  mysqldump  命令行导出。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出数据库，windows或者linux导出</span></span><br><span class="line"><span class="comment"># -p 后密码 ，数据库名 ，表名 &gt;D:/文件名.sql</span></span><br><span class="line">mysqldump -hlocalhost -uroot -pa <span class="built_in">test</span> test1 &gt;D:/a.sql</span><br><span class="line"><span class="comment"># 导入数据库</span></span><br><span class="line">mysql -uroot -pa 库名 &lt; 备份文件</span><br><span class="line"></span><br><span class="line">use <span class="built_in">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> d:/文件名.sql;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数据库规范">数据库规范</h4><h5 id="为啥需要设计？">为啥需要设计？</h5><p>==当数据库比较复杂的时候，我们需要设计==</p><p>一个糟糕的数据库设计：</p><ul><li>存在数据沉余，浪费空间</li><li>数据插入和删除都会比较麻烦，异常【屏蔽使用物理外键】</li><li>程序的性能很差</li></ul><p>良好的数据库设计：</p><ul><li>节省内存空间。</li><li>保证数据库的完整性。</li><li>方便我们进行开发。</li></ul><p>软件开发中，关于数据库设计</p><ul><li>分析需求：分析业务和需要处理的数据库的需求。</li><li>概要设计：设计关系图E-R图。</li></ul><p>用个人博客：</p><ul><li>收集用户信息：<ul><li>用户表（用户登录注册，用户信息，写博客，创建分类）</li><li>分类表（类型编号，类型名，类型图片）</li><li>文章表(文章id,文章名，文章类型，文章内容，作者)</li><li>友链表（）</li><li>自定义表（）</li></ul></li></ul><h4 id="三大范式">三大范式</h4><p>为什么需要数据规范化</p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效的信息</li></ul></li></ul><blockquote><p>三大范式</p></blockquote><p>​第一范式：保证原子性，也就是每一列都不可再分。</p><p>​第二范式：必须先满足第一范式，然后才能判断是否满足第二范式，确保==每张表只干一件事==</p><p>​</p><p>​第三范式：确保满足第二范式的基础下，确保每张表每一列的数据都和主键直接相关，而不是间接相关。</p><p><strong>规范性和性能问题</strong></p><p>关联查询的表不得超过三张表</p><ul><li>在考虑商业化的需求和目标（成本和用户体验！）数据库的性能更加重要</li><li>在规范性能问题的时候，需要适当考虑一下规范性。</li><li>故意给某些表增加一些冗余的字段（从多表查询中变为单表查询，问就是增快查询数据呗）</li><li>故意增加一些计算列（从大数据量降为小数据量：索引）。</li></ul><h4 id="JDBC">JDBC</h4><p>连接数据库的一个包，可以通过这个包，我们通过包提供的封装类，完成连接数据库指令操作。</p><p>创建一个JDBC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接mysql</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBC</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">        <span class="comment">//1加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//固定语法，加载驱动，注意mysql5.0和8.0直接驱动连接有差别.5.0的不需要有cj，也就是com.mysql.jdbc.Driver,但是8.0的是com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2用户信息，url</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/数据库名？useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>; </span><br><span class="line">        <span class="comment">//3连接成功,数据库对象 Connection 代表数据库</span></span><br><span class="line">       <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password); </span><br><span class="line">        <span class="comment">//4执行sql对象  Statement 执行sql对象的</span></span><br><span class="line">     <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();   </span><br><span class="line">        <span class="comment">//执行sql对象去执行sql的可能存在的结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;你要写的sql语句&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ResuletSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);<span class="comment">//返回结果集，结果集中封装了我们全部查询出来的结果</span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">            <span class="comment">//以下全为表中的列字段</span></span><br><span class="line">            System.out.println(<span class="string">&quot;id= &quot;</span> resultSet.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">               System.out.println(<span class="string">&quot;name= &quot;</span> resultSet.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">               System.out.println(<span class="string">&quot;pwd= &quot;</span> resultSet.getObject(<span class="string">&quot;pwd&quot;</span>));</span><br><span class="line">               System.out.println(<span class="string">&quot;email= &quot;</span> resultSet.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">               System.out.println(<span class="string">&quot;birth= &quot;</span> resultSet.getObject(<span class="string">&quot;brithday&quot;</span>));</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="comment">//释放连接，关闭。</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤总结：</p><ol><li>加载驱动</li><li>连接数据库DriverManager</li><li>获取执行sql的对象Statement</li><li>返回获得的结果集（list）</li><li>释放连接</li></ol><blockquote><p>DriverManager</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,username,password);<span class="comment">//连接数据库</span></span><br><span class="line"><span class="comment">//事务以及自动提交都可以通过这个操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Url</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=true&quot;</span>;</span><br><span class="line"><span class="comment">// mysql 3306 </span></span><br><span class="line"><span class="comment">// jdbc:mysql://主机地址：端口号/数据库名？参数1&amp;参数2.。。。</span></span><br><span class="line"><span class="comment">//oracle 1521</span></span><br><span class="line"><span class="comment">//jdbc:oracle:thin:@localhost:1521:表名？</span></span><br></pre></td></tr></table></figure><blockquote><p>Statement</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//4执行sql对象  Statement 执行sql对象的</span></span><br><span class="line">    <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();   </span><br><span class="line">statement.executeQuery();<span class="comment">// 查询操作返回ResultSet</span></span><br><span class="line">statement.execute();<span class="comment">//执行任何Sql</span></span><br><span class="line">statement.executeUpdate()；<span class="comment">//更新，插入删除，都是通过这个。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>ResultSet查询的结果集：封装了所有的查询结果</p></blockquote><p>获得指定的数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="type">ResuletSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(sql);<span class="comment">//返回结果集，结果集中封装了我们全部查询出来的结果</span></span><br><span class="line"><span class="comment">//如果不知道列类型的话我们就使用</span></span><br><span class="line">resultSet.getObject();</span><br><span class="line"><span class="comment">//知道的话</span></span><br><span class="line">resultSet.getString();</span><br><span class="line">resultSet.getInt();</span><br><span class="line">resultSet.getFloat();</span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>遍历指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resultSet.beforeFirst();<span class="comment">//移动到最前边</span></span><br><span class="line">resultSet.afterLast();<span class="comment">//移动到最后边</span></span><br><span class="line">resultSet.next();<span class="comment">//移动到下一个数据</span></span><br><span class="line">resultSet.previous();<span class="comment">//移动到前一行</span></span><br><span class="line">resultSet.absolute(row)；<span class="comment">//移动到指定行</span></span><br></pre></td></tr></table></figure><blockquote><p>释放资源:必须要做的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resultSet.close();</span><br><span class="line">statement.close();</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><h5 id="工具类">工具类</h5><p>创建一个JDBC链接的工具类（oracle）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBHelper</span> &#123;</span><br><span class="line"><span class="comment">//加载成功，在整个程序中，只需要加载在一次就好了</span></span><br><span class="line">    <span class="comment">//放到静态快里边：因为静态快，自动执行，并且只执行一次</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(MyProperties.getInstance().getProperty(<span class="string">&quot;driverClass&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="comment">//静态方法，可以不实例化，而直接调用</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取连接这一段代码，太长了，对此我们封装一下</span></span><br><span class="line"><span class="keyword">public</span> Connection <span class="title function_">getCon</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//在这里，连接地址，用户名，和密码，对于不同的用户，可能不一样</span></span><br><span class="line"><span class="comment">//我们可以将这个三个东西，作为配置项，配置到程序中</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = DriverManager.getConnection(MyProperties.getInstance().getProperty(<span class="string">&quot;url&quot;</span>),</span><br><span class="line">MyProperties.getInstance());</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 增删改</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql 要执行的语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 要注入的参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(String sql,List&lt;Object&gt; params)</span> &#123;</span><br><span class="line"><span class="comment">//定义返回值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getCon();</span><br><span class="line"><span class="comment">//创建预处理语句对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//如果有问号，有参数，要注入参数</span></span><br><span class="line">doParams(ps,params);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">result = ps.executeUpdate();</span><br><span class="line"><span class="comment">//关闭各种连接，接口</span></span><br><span class="line">closeAll(conn,<span class="literal">null</span>,ps);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终返回数据</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">findAll</span><span class="params">(String sql,List&lt;Object&gt;params)</span>&#123;</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getCon();</span><br><span class="line"><span class="comment">//创建预处理语句对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//如果有问号，有参数，要注入参数</span></span><br><span class="line">doParams(ps, params);</span><br><span class="line"><span class="comment">//执行这里开始不一样</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"><span class="comment">//我们要将resultSet里边的值，转化为List&lt;Map&lt;String,Object&gt;&gt;</span></span><br><span class="line"><span class="comment">//Map&lt;String,Object&gt; 键值对     键  ： 表的字段  值:这个字段对应的值</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span>rs.getMetaData();</span><br><span class="line"><span class="comment">//我们将所有的列名，存到一个数组中</span></span><br><span class="line">String [] cnames = <span class="keyword">new</span> <span class="title class_">String</span> [rsmd.getColumnCount()];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;cnames.length;i++) &#123;</span><br><span class="line">cnames[i] = rsmd.getColumnName(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始获得数据</span></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="comment">//创建map对象</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;cnames.length;i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.getObject(cnames[i])== <span class="literal">null</span>)&#123;</span><br><span class="line">map.put(cnames[i].toLowerCase(), <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;oracle.sql.BLOB&quot;</span>.equals(rs.getObject(cnames[i]).getClass().getName()))&#123;</span><br><span class="line">map.put(cnames[i].toLowerCase(), rs.getBytes(cnames[i]));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//键  转换为小写     值  </span></span><br><span class="line">map.put(cnames[i].toLowerCase(),rs.getObject(cnames[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将map添加到list中</span></span><br><span class="line">list.add(map);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭</span></span><br><span class="line">closeAll(conn,rs,ps);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; <span class="title function_">findAll</span><span class="params">(String sql,Object...params)</span>&#123;</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getCon();</span><br><span class="line"><span class="comment">//创建预处理语句对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//如果有问号，有参数，要注入参数</span></span><br><span class="line">doParams(ps, params);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行这里开始不一样</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"><span class="comment">//我们要将resultSet里边的值，转化为List&lt;Map&lt;String,Object&gt;&gt;</span></span><br><span class="line"><span class="comment">//Map&lt;String,Object&gt; 键值对     键  ： 表的字段  值:这个字段对应的值</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span>rs.getMetaData();</span><br><span class="line"><span class="comment">//我们将所有的列名，存到一个数组中</span></span><br><span class="line">String [] cnames = <span class="keyword">new</span> <span class="title class_">String</span> [rsmd.getColumnCount()];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;cnames.length;i++) &#123;</span><br><span class="line">cnames[i] = rsmd.getColumnName(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始获得数据</span></span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line"><span class="comment">//创建map对象</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;cnames.length;i++) &#123;</span><br><span class="line"><span class="comment">// 键          转为小写    值</span></span><br><span class="line"><span class="comment">//对于blob 的值，我们这里要区分一下</span></span><br><span class="line"><span class="keyword">if</span>(rs.getObject(cnames[i])== <span class="literal">null</span>)&#123;</span><br><span class="line">map.put(cnames[i].toLowerCase(), <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(rs.getObject(cnames[i]).getClass().getName());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;oracle.sql.BLOB&quot;</span>.equals(rs.getObject(cnames[i]).getClass().getName()))&#123;</span><br><span class="line">map.put(cnames[i].toLowerCase(), rs.getBytes(cnames[i]));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//键  转换为小写     值  </span></span><br><span class="line">map.put(cnames[i].toLowerCase(),rs.getObject(cnames[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将map添加到list中</span></span><br><span class="line">list.add(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注入参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doParams</span><span class="params">(PreparedStatement ps, List&lt;Object&gt; params)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(ps != <span class="literal">null</span> &amp;&amp;params!= <span class="literal">null</span>&amp;&amp; params.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//循环注入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;params.size();i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, params.get(i));</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载                                                                                                                      ...量词参数  代表任意个参数 本质是数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doParams</span><span class="params">(PreparedStatement ps, Object...params)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(ps != <span class="literal">null</span> &amp;&amp; params.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//循环注入</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;params.length;i++) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(String sql,Object... params)</span> &#123;</span><br><span class="line"><span class="comment">//定义返回值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getCon();</span><br><span class="line"><span class="comment">//创建预处理语句对象</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//如果有问号，有参数，要注入参数</span></span><br><span class="line">doParams(ps,params);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">result = ps.executeUpdate();</span><br><span class="line"><span class="comment">//关闭各种连接，接口</span></span><br><span class="line">closeAll(conn,<span class="literal">null</span>,ps);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终返回数据</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">closeAll</span><span class="params">(Connection conn, ResultSet rs, PreparedStatement ps)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(conn != <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(rs != <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(ps != <span class="literal">null</span> ) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">ps.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="工具类（单例）-Oracle">工具类（单例）(Oracle)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyProperties</span> <span class="keyword">extends</span> <span class="title class_">Properties</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> MyProperties myProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数私有化  单例模式</span></span><br><span class="line"><span class="comment">//单例  只有一个实例</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">MyProperties</span><span class="params">()</span>&#123;<span class="comment">//装载通过数据流获得的资源配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> MyProperties.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//load 装载配置文件  void java.util.Properties.load(InputStream inStream) throws IOException</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.load(is);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例模式设计之后 ，一定要有一个公有的方法，让其他对象访问到这个属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> MyProperties <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>( myProperties  == <span class="literal">null</span> )&#123;</span><br><span class="line">myProperties = <span class="keyword">new</span> <span class="title class_">MyProperties</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> myProperties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="db-properties">db.properties</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#db.properties</span></span><br><span class="line"><span class="attr">driverClass</span>=oracle.jdbc.OracleDriver</span><br><span class="line"><span class="attr">url</span>=jdbc:oracle:thin:@<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">1521</span>:orcl</span><br><span class="line"><span class="attr">user</span>=scott</span><br><span class="line"><span class="attr">password</span>=a</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql连接方式</span></span><br><span class="line"><span class="comment">#driverClass=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#url=jdbc:mysql://127.0.0.1:3306/res</span></span><br><span class="line"><span class="comment">#user=root</span></span><br><span class="line"><span class="comment">#password=a</span></span><br></pre></td></tr></table></figure><h5 id="工具类（Mysql-DBHelper）">工具类（Mysql,DBHelper）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装  数据库操作的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 38929</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>  2021年5月29日 下午4:43:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBHelper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置信息</span></span><br><span class="line"><span class="comment">//ORACLE</span></span><br><span class="line"><span class="comment">//private static String driverClassName = &quot;oracle.jdbc.driver.OracleDriver&quot;;</span></span><br><span class="line"><span class="comment">//private String url = &quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot;;</span></span><br><span class="line"><span class="comment">//private String user = &quot;scott&quot;;</span></span><br><span class="line"><span class="comment">//private String password = &quot;a&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相关对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//连接对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//预编译</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//结果集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只在类中第一次加载才执行 且 执行一次      -&gt;   当使用JNDI连接数据库时  可以注释该静态加载 </span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//2、加载并注册依赖oracle.jdbc.driver.OracleDriver.class</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName( ReadConfig.getInstance().getProperty(<span class="string">&quot;driverClassName&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"><span class="keyword">private</span> Connection <span class="title function_">getConn</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//3、建立连接     url  uname  pwd</span></span><br><span class="line"><span class="comment">//url 统一资源定位符   jdbc:oracle:thin:@数据库的IP地址:1521:实例名    127.0.0.1 | localhost:1521:ORCL </span></span><br><span class="line"><span class="comment">//ctrl 1 + 2 -&gt; L</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//conn = DriverManager.getConnection(&quot;jdbc:oracle:thin:@localhost:1521:ORCL&quot;, &quot;scott&quot;, &quot;a&quot;);</span></span><br><span class="line">conn = DriverManager.getConnection(ReadConfig.getInstance().getProperty(<span class="string">&quot;url&quot;</span>), ReadConfig.getInstance());</span><br><span class="line"></span><br><span class="line"><span class="comment">//从服务器 context.xml 中 上下文获取配置的DataSource  </span></span><br><span class="line"><span class="comment">//Context context= new InitialContext();</span></span><br><span class="line"><span class="comment">//从命名目录接口中根据资源名查询  前面 java:comp/env/blog 固定的   类似于协议</span></span><br><span class="line"><span class="comment">//DataSource dataSource =  (DataSource)context.lookup(&quot;java:comp/env/blog&quot;);</span></span><br><span class="line"><span class="comment">//从数据库连接池获取一个空闲的连接 </span></span><br><span class="line"><span class="comment">//conn = dataSource.getConnection();</span></span><br><span class="line"><span class="comment">/*&#125; catch (NamingException e) &#123;</span></span><br><span class="line"><span class="comment">e.printStackTrace();*/</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pstmt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">closeAll</span><span class="params">(ResultSet rs, PreparedStatement pstmt, Connection conn)</span> &#123;</span><br><span class="line"><span class="comment">//7、关闭资源  先开启的后关闭  后开启的先关闭  结果集 -&gt; 语句块 -&gt; 连接</span></span><br><span class="line"><span class="keyword">if</span>( rs != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( pstmt != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pstmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( conn != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新操作   Object ... params  不定参数   类似于数组  万物皆对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql  要执行的更新语句   可以 insert update delete </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 要执行的SQL语句中的占位符？ 所对应参数的值 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql, Object ... params)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//定义默认的范围值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = <span class="built_in">this</span>.getConn();<span class="comment">//获取连接</span></span><br><span class="line">pstmt = conn.prepareStatement(sql);<span class="comment">//预编译对象装载SQL</span></span><br><span class="line"><span class="built_in">this</span>.setParams(pstmt, params);<span class="comment">//需要给占位符注入参数</span></span><br><span class="line">result = pstmt.executeUpdate();<span class="comment">//执行更新语句</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给预编译语句块中占位符 赋值 设置参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pstmt   预编译对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params  要执行的SQL语句中的占位符？ 所对应参数的值 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setParams</span><span class="params">(PreparedStatement pstmt, Object ... params)</span> &#123;</span><br><span class="line"><span class="comment">//去空判断  说明没有参数给我   也就是执行的SQL语句中没有占位符</span></span><br><span class="line"><span class="keyword">if</span>( <span class="literal">null</span> == params || params.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参数 则循环参数  给预编译语句块中占位符 赋值</span></span><br><span class="line"><span class="comment">//先获取参数的长度  节省资源 提高性能</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, len = params.length; i &lt; len; i++) &#123;</span><br><span class="line"><span class="comment">//我不清楚占位符 对应的详细数据类型    万物皆对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pstmt.setObject( i + <span class="number">1</span>, params[i]);<span class="comment">// % +v+ %</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">//项目可以使用日志来记录</span></span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span> + (i+<span class="number">1</span>) + <span class="string">&quot;个参数注值失败...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单条查询 返回一条记录   select * from userinfo where user_name = ? and user_pwd = ?</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql  查询SQL  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> map  一条记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">findSingle</span><span class="params">(String sql, Object ... params)</span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = <span class="built_in">this</span>.getConn();<span class="comment">//获取连接</span></span><br><span class="line">pstmt = conn.prepareStatement(sql);<span class="comment">//预编译对象装载SQL</span></span><br><span class="line"><span class="built_in">this</span>.setParams(pstmt, params);<span class="comment">//需要给占位符注入参数</span></span><br><span class="line">rs = pstmt.executeQuery();<span class="comment">//执行更新语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现获取所有的列名</span></span><br><span class="line">List&lt;String&gt; columnNames = <span class="built_in">this</span>.getAllColumnNames(rs);</span><br><span class="line"><span class="keyword">if</span>( rs.next()) &#123; <span class="comment">//处理结果集</span></span><br><span class="line">map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"><span class="comment">//map.put(&quot;user_id&quot;, rs.getInt(&quot;user_id&quot;));</span></span><br><span class="line"><span class="comment">//map.put(&quot;user_name&quot;, rs.getString(&quot;user_name&quot;));</span></span><br><span class="line"><span class="comment">//map.put(&quot;user_pwd&quot;, rs.getString(&quot;user_pwd&quot;));</span></span><br><span class="line"><span class="comment">//如果换了查询的表  还会有这些列吗？  select * from emp; </span></span><br><span class="line"><span class="comment">//如何查询表所对应各个列的名称？  请去API 先行查看 rs.getMetaData()</span></span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//列所对应的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">//列所对应的值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增强for</span></span><br><span class="line"><span class="keyword">for</span>(String columnName : columnNames) &#123;</span><br><span class="line"><span class="comment">//列对应的类型不确定</span></span><br><span class="line"><span class="comment">//map.put(columnName, rs.getObject(columnName));</span></span><br><span class="line">value = rs.getObject(columnName);</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="keyword">if</span>( <span class="literal">null</span> == value) &#123;</span><br><span class="line">map.put(columnName, value);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">type = value.getClass().getName(); <span class="comment">//获取类型</span></span><br><span class="line"><span class="comment">//System.out.println(type); //oracle.sql.BLOB   java.math.BigDecimal</span></span><br><span class="line"><span class="comment">//判断类型</span></span><br><span class="line"><span class="comment">//TODO 如果是Blob类型 该怎么办 ?  图片的处理？？? 想办法获取对应的数据类型？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;oracle.sql.BLOB&quot;</span>.equals(type)) &#123;</span><br><span class="line"><span class="comment">//获取对应类型数据</span></span><br><span class="line"><span class="type">Blob</span> <span class="variable">blob</span> <span class="operator">=</span> rs.getBlob(columnName);</span><br><span class="line"><span class="comment">//获取对应二进制流操作</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> blob.getBinaryStream())&#123;</span><br><span class="line"><span class="type">byte</span> [] bt = <span class="keyword">new</span> <span class="title class_">byte</span>[ (<span class="type">int</span>)blob.length()];</span><br><span class="line">is.read(bt);</span><br><span class="line">map.put(columnName, bt);<span class="comment">//存入字节数组</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">map.put(columnName, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC2.0 获取所有的列名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getAllColumnNames</span><span class="params">(ResultSet rs)</span>&#123;</span><br><span class="line"><span class="comment">//存储列的集合</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//getMetaData() 获取此 ResultSet 对象的列的编号、类型和属性</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"><span class="comment">//获取列的数量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"><span class="comment">//列的范围确定 循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= count; i++)&#123;</span><br><span class="line"><span class="comment">//获取对应列的列名</span></span><br><span class="line">list.add(rsmd.getColumnName(i).toLowerCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多行查询 返回多条  select * from emp; </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql  查询SQL  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 查询参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">findMultiple</span><span class="params">(String sql, Object ... params)</span>&#123;</span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Map&lt;String,Object&gt;&gt;();</span><br><span class="line">Map&lt;String, Object&gt; map = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = <span class="built_in">this</span>.getConn();<span class="comment">//获取连接</span></span><br><span class="line">pstmt = conn.prepareStatement(sql);<span class="comment">//预编译对象装载SQL</span></span><br><span class="line"><span class="built_in">this</span>.setParams(pstmt, params);<span class="comment">//需要给占位符注入参数</span></span><br><span class="line">rs = pstmt.executeQuery();<span class="comment">//执行更新语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现获取所有的列名</span></span><br><span class="line">List&lt;String&gt; columnNames = <span class="built_in">this</span>.getAllColumnNames(rs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( rs.next()) &#123; <span class="comment">//处理结果集</span></span><br><span class="line">map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//列所对应的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">//列所对应的值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增强for</span></span><br><span class="line"><span class="keyword">for</span>(String columnName : columnNames) &#123;</span><br><span class="line"><span class="comment">//列对应的类型不确定</span></span><br><span class="line"><span class="comment">//map.put(columnName, rs.getObject(columnName));</span></span><br><span class="line">value = rs.getObject(columnName);</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="keyword">if</span>( <span class="literal">null</span> == value) &#123;</span><br><span class="line">map.put(columnName, value);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">type = value.getClass().getName(); <span class="comment">//获取类型</span></span><br><span class="line"><span class="comment">//System.out.println(type); //oracle.sql.BLOB   java.math.BigDecimal</span></span><br><span class="line"><span class="comment">//判断类型</span></span><br><span class="line"><span class="comment">//TODO 如果是Blob类型 该怎么办 ?  图片的处理？？? 想办法获取对应的数据类型？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;oracle.sql.BLOB&quot;</span>.equals(type)) &#123;</span><br><span class="line"><span class="comment">//获取对应类型数据</span></span><br><span class="line"><span class="type">Blob</span> <span class="variable">blob</span> <span class="operator">=</span> rs.getBlob(columnName);</span><br><span class="line"><span class="comment">//获取对应二进制流操作</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> blob.getBinaryStream())&#123;</span><br><span class="line"><span class="type">byte</span> [] bt = <span class="keyword">new</span> <span class="title class_">byte</span>[ (<span class="type">int</span>)blob.length()];</span><br><span class="line">is.read(bt);</span><br><span class="line">map.put(columnName, bt);<span class="comment">//存入字节数组</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">map.put(columnName, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">list.add(map);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  以对象的方式 将将查询结果返回</span></span><br><span class="line"><span class="comment"> *   c.newInstance() -&gt; new AdminInfo() </span></span><br><span class="line"><span class="comment"> *   m.invoke(obj, value)  激活m方法</span></span><br><span class="line"><span class="comment"> *   获取当前class实例中所有的方法和属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 限定类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql  查询SQL </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 注入的参数 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt;List&lt;T&gt; <span class="title function_">findMultiple</span><span class="params">(Class c,String sql, Object ... params)</span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line">System.out.println(<span class="number">1111</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = <span class="built_in">this</span>.getConn();<span class="comment">//获取连接</span></span><br><span class="line">pstmt = conn.prepareStatement(sql);<span class="comment">//预编译对象装载SQL</span></span><br><span class="line"><span class="built_in">this</span>.setParams(pstmt, params);<span class="comment">//需要给占位符注入参数</span></span><br><span class="line">rs = pstmt.executeQuery();<span class="comment">//执行更新语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现获取所有的列名</span></span><br><span class="line">List&lt;String&gt; columnNames = <span class="built_in">this</span>.getAllColumnNames(rs);</span><br><span class="line"></span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//声明一个对象</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//列所对应的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">//列所对应的值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射来获取类中所有的方法 methods</span></span><br><span class="line">Method [] methods = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( rs.next()) &#123; <span class="comment">//处理结果集</span></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">t =  (T)c.newInstance();<span class="comment">//调用无参数的构造方法  AdminInfo admin = new AdminInfo();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增强for  列</span></span><br><span class="line"><span class="keyword">for</span>(String columnName : columnNames) &#123;</span><br><span class="line"><span class="comment">//列对应的类型不确定</span></span><br><span class="line">value = rs.getObject(columnName);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="keyword">if</span>( <span class="literal">null</span> == value) &#123; <span class="comment">// 数据库无数据</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环类中所有的方法</span></span><br><span class="line"><span class="keyword">for</span>(Method method : methods) &#123;</span><br><span class="line"><span class="comment">//是否有对应setXXX 方法名   set + columnName -&gt; method的名字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;set&quot;</span> + columnName;</span><br><span class="line"><span class="comment">//获取列对应值的类型</span></span><br><span class="line">typeName = value.getClass().getName();</span><br><span class="line"><span class="comment">//System.out.println( typeName );</span></span><br><span class="line"><span class="comment">//找到对应的方法名</span></span><br><span class="line"><span class="keyword">if</span>( name.equalsIgnoreCase( method.getName())) &#123;</span><br><span class="line"><span class="comment">//判断数据类型</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;java.math.BigDecimal&quot;</span>.equals(typeName)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">method.invoke( t, rs.getDouble( columnName ));</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">method.invoke( t, rs.getString( columnName ));</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;java.lang.String&quot;</span>.equals(typeName)) &#123;</span><br><span class="line">method.invoke( t, rs.getString( columnName ));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;java.lang.Double&quot;</span>.equals(typeName)) &#123;</span><br><span class="line">method.invoke( t, rs.getDouble( columnName ));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;java.lang.Integer&quot;</span>.equals(typeName)) &#123;</span><br><span class="line">method.invoke( t, rs.getInt( columnName ));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;java.lang.Date&quot;</span>.equals(typeName)) &#123;</span><br><span class="line"><span class="comment">//MySQL 中date 数据类型 转换成JavaBean 对象中使用String </span></span><br><span class="line">method.invoke( t, rs.getString( columnName ));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;oracle.sql.BLOB&quot;</span>.equals(typeName)) &#123;  <span class="comment">//TODO 如果是Blob类型 该怎么办 ?  图片的处理？？? 想办法获取对应的数据类型？</span></span><br><span class="line"><span class="comment">//获取对应类型数据</span></span><br><span class="line"><span class="type">Blob</span> <span class="variable">blob</span> <span class="operator">=</span> rs.getBlob(columnName);</span><br><span class="line"><span class="comment">//获取对应二进制流操作</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> blob.getBinaryStream())&#123;</span><br><span class="line"><span class="type">byte</span> [] bt = <span class="keyword">new</span> <span class="title class_">byte</span>[ (<span class="type">int</span>)blob.length()];</span><br><span class="line">is.read(bt);</span><br><span class="line">method.invoke( t, bt);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;oracle.sql.CLOB&quot;</span>.equals(typeName))&#123;</span><br><span class="line"><span class="type">Reader</span> <span class="variable">in</span> <span class="operator">=</span> rs.getCharacterStream(columnName);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>( in );</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();<span class="comment">//每次读取一行数据</span></span><br><span class="line"><span class="keyword">while</span>( <span class="literal">null</span> != str ) &#123;</span><br><span class="line">sb.append( str );</span><br><span class="line">str = br.readLine();</span><br><span class="line">&#125;</span><br><span class="line">method.invoke( t, sb.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//TODO 后期需要 自行扩展</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">list.add(t); <span class="comment">//设置对象到list集合中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span> (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  以对象的方式 将将查询结果返回</span></span><br><span class="line"><span class="comment"> *   c.newInstance() -&gt; new AdminInfo() </span></span><br><span class="line"><span class="comment"> *   m.invoke(obj, value)  激活m方法</span></span><br><span class="line"><span class="comment"> *   获取当前class实例中所有的方法和属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 限定类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql  查询SQL </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 注入的参数 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">findSingle</span><span class="params">(Class c,String sql, Object ... params)</span>&#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//声明一个对象</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = <span class="built_in">this</span>.getConn();<span class="comment">//获取连接</span></span><br><span class="line">pstmt = conn.prepareStatement(sql);<span class="comment">//预编译对象装载SQL</span></span><br><span class="line"><span class="built_in">this</span>.setParams(pstmt, params);<span class="comment">//需要给占位符注入参数</span></span><br><span class="line">rs = pstmt.executeQuery();<span class="comment">//执行更新语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现获取所有的列名</span></span><br><span class="line">List&lt;String&gt; columnNames = <span class="built_in">this</span>.getAllColumnNames(rs);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//列所对应的值</span></span><br><span class="line"><span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;<span class="comment">//列所对应的值的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射来获取类中所有的方法 methods</span></span><br><span class="line">Method [] methods = c.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( rs.next()) &#123; <span class="comment">//处理结果集</span></span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">t =  (T)c.newInstance();<span class="comment">//调用无参数的构造方法  AdminInfo admin = new AdminInfo();</span></span><br><span class="line"><span class="comment">//增强for  列</span></span><br><span class="line"><span class="keyword">for</span>(String columnName : columnNames) &#123;</span><br><span class="line"><span class="comment">//列对应的类型不确定</span></span><br><span class="line">value = rs.getObject(columnName);</span><br><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="keyword">if</span>( <span class="literal">null</span> == value) &#123; <span class="comment">// 数据库无数据</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环类中所有的方法</span></span><br><span class="line"><span class="keyword">for</span>(Method method : methods) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否有对应setXXX 方法名   set + columnName -&gt; method的名字</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;set&quot;</span> + columnName;</span><br><span class="line"><span class="comment">//获取列对应值的类型</span></span><br><span class="line">typeName = value.getClass().getName();</span><br><span class="line"><span class="comment">//System.out.println( name + &quot;--&quot; + typeName );</span></span><br><span class="line"><span class="comment">//找到对应的方法名</span></span><br><span class="line"><span class="keyword">if</span>( name.equalsIgnoreCase( method.getName())) &#123;</span><br><span class="line"><span class="comment">//判断数据类型</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;java.math.BigDecimal&quot;</span>.equals(typeName)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">method.invoke( t, rs.getDouble( columnName ));</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">method.invoke( t, rs.getString( columnName ));</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;java.lang.String&quot;</span>.equals(typeName)) &#123;</span><br><span class="line">method.invoke( t, rs.getString( columnName ));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;java.lang.Double&quot;</span>.equals(typeName)) &#123;</span><br><span class="line">method.invoke( t, rs.getDouble( columnName ));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;java.lang.Integer&quot;</span>.equals(typeName)) &#123;</span><br><span class="line">method.invoke( t, rs.getInt( columnName ));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;java.lang.Date&quot;</span>.equals(typeName)) &#123;</span><br><span class="line"><span class="comment">//MySQL 中date 数据类型 转换成JavaBean 对象中使用String </span></span><br><span class="line">method.invoke( t, rs.getString( columnName ));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;oracle.sql.BLOB&quot;</span>.equals(typeName)) &#123;  <span class="comment">//TODO 如果是Blob类型 该怎么办 ?  图片的处理？？? 想办法获取对应的数据类型？</span></span><br><span class="line"><span class="comment">//获取对应类型数据</span></span><br><span class="line"><span class="type">Blob</span> <span class="variable">blob</span> <span class="operator">=</span> rs.getBlob(columnName);</span><br><span class="line"><span class="comment">//获取对应二进制流操作</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> blob.getBinaryStream())&#123;</span><br><span class="line"><span class="type">byte</span> [] bt = <span class="keyword">new</span> <span class="title class_">byte</span>[ (<span class="type">int</span>)blob.length()];</span><br><span class="line">is.read(bt);</span><br><span class="line">method.invoke( t, bt);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;oracle.sql.CLOB&quot;</span>.equals(typeName))&#123;</span><br><span class="line"><span class="type">Reader</span> <span class="variable">in</span> <span class="operator">=</span> rs.getCharacterStream(columnName);</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>( in );</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();<span class="comment">//每次读取一行数据</span></span><br><span class="line"><span class="keyword">while</span>( <span class="literal">null</span> != str ) &#123;</span><br><span class="line">sb.append( str );</span><br><span class="line">str = br.readLine();</span><br><span class="line">&#125;</span><br><span class="line">method.invoke( t, sb.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//TODO 后期需要 自行扩展</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">catch</span> (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">total</span><span class="params">(String sql,Object...params)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = <span class="built_in">this</span>.getConn();</span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//设置参数</span></span><br><span class="line">setParams(pstmt,params);</span><br><span class="line"><span class="comment">//执行语句块</span></span><br><span class="line">rs= pstmt.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理结果集</span></span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line">result = rs.getInt(<span class="number">1</span>);<span class="comment">//列索引第一列</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.closeAll(rs, pstmt, conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="工具类（mysql-也是单例）">工具类（mysql,也是单例）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadConfig</span> <span class="keyword">extends</span> <span class="title class_">Properties</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1560020482133144083L</span>;</span><br><span class="line"><span class="comment">//饿汉单例   提前实例化对�?</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ReadConfig</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadConfig</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造方法私有化  </span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">ReadConfig</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//想办法读取自己的配置文件   </span></span><br><span class="line"><span class="comment">//JDK1.7 会自动关闭且�?定关闭资�?   try - with -resources</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>))&#123;</span><br><span class="line"><span class="comment">//业务代码  流处�? </span></span><br><span class="line"><span class="built_in">this</span>.load(is); <span class="comment">//读取配置文件</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为构�?�私有化就意味着外部无法实例化该对象 必须对外提供�?个获取实例的方法  并在内部提前实例�? </span></span><br><span class="line"><span class="comment">//又因为外部无法是实例�? 只能通过类名方法 该方�? �?声明为静态的 </span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> ReadConfig <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="db-properties-2">db.properties</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MySQL5</span></span><br><span class="line"><span class="comment">#driverClassName=com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment">#url=jdbc:mysql://localhost:3306/blog</span></span><br><span class="line"><span class="comment">#user=root</span></span><br><span class="line"><span class="comment">#password=a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MySQL8</span></span><br><span class="line"><span class="attr">driverClassName</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line"><span class="attr">url</span>=jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/数据库?useOldAliasMetadataBehavior=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span>&amp;useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;serverTimezone=GMT%<span class="number">2</span>B8</span><br><span class="line"><span class="attr">user</span>=root</span><br><span class="line"><span class="attr">password</span>=a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Oracle</span></span><br><span class="line"><span class="comment">#driverClassName=oracle.jdbc.driver.OracleDriver</span></span><br><span class="line"><span class="comment">#url=jdbc:oracle:thin:@localhost:1521:orcl</span></span><br><span class="line"><span class="comment">#user=scott</span></span><br><span class="line"><span class="comment">#password=a</span></span><br></pre></td></tr></table></figure><h4 id="SQL注入">SQL注入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminInfoDAOImpl</span> <span class="keyword">implements</span> <span class="title class_">IAdminInfoDAO</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> AdminInfo <span class="title function_">login</span><span class="params">(String aname, String pwd)</span> &#123;</span><br><span class="line">         <span class="type">DBHelper</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DBHelper</span>();</span><br><span class="line">         <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from admininfo where aname = ? and pwd = md5(?)&quot;</span>;</span><br><span class="line">         <span class="keyword">return</span> db.findSingle(AdminInfo.class,sql,aname,pwd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(String aname, String pwd, String photo)</span> &#123;</span><br><span class="line"><span class="type">DBHelper</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DBHelper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into admininfo value(0,?,md5(?),?)&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> db.update(sql, aname,pwd,photo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认不查询密码 如果需要查询 将来界面渲染密码  必须摘码显示 123456 -&gt; 1***6</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;AdminInfo&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">DBHelper</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DBHelper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select aid,aname,photo from admininfo order by aid desc&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> db.findMultiple(AdminInfo.class, sql);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==sql注入漏洞也就是sql拼接==</p><p>PreparedStatement：可以预防SQL注入</p><p>上述我们使用的工具类就是使用PreparedStatement来的。</p><p>事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新操作   Object ... params  不定参数   类似于数组  万物皆对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql  要执行的更新语句   可以 insert update delete </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params 要执行的SQL语句中的占位符？ 所对应参数的值 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String sql, Object ... params)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//定义默认的范围值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = <span class="built_in">this</span>.getConn();<span class="comment">//获取连接</span></span><br><span class="line"><span class="comment">//开启事务   conn.setAutoCommit(false);</span></span><br><span class="line">pstmt = conn.prepareStatement(sql);<span class="comment">//预编译对象装载SQL</span></span><br><span class="line"><span class="built_in">this</span>.setParams(pstmt, params);<span class="comment">//需要给占位符注入参数</span></span><br><span class="line">result = pstmt.executeUpdate();<span class="comment">//执行更新语句</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//事务提交conn.commit();</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">//如果失败事务提交失败则回滚</span></span><br><span class="line"><span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">conn.rollback();</span></span><br><span class="line"><span class="comment">&#125;catch(SQLException e)&#123;</span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库链接池，池化技术">数据库链接池，池化技术</h3><p>数据库链接–执行完毕–释放</p><p>连接–释放十分浪费资源</p><p>池化技术：</p><p>准备一些预先的资源，过来就连接预先准备好的</p><p>需要的包下载：<a href="https://blog.csdn.net/qq_51178489/article/details/118805942">https://blog.csdn.net/qq_51178489/article/details/118805942</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils_C3P0</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource dataSource=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//xml数据源直接加载不用反射</span></span><br><span class="line"><span class="comment">//            dataSource= new ComboPooledDataSource();     //无参数时用默认数据源</span></span><br><span class="line">            dataSource=<span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;MySQL&quot;</span>); <span class="comment">//用配置name=&quot;MySQL&quot;的数据源   也可以datasource.setMaxPoolSize();等</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;     <span class="comment">//提供连接</span></span><br><span class="line">        <span class="keyword">return</span> dataSource.getConnection();         <span class="comment">//数据源中获取连接，自动装好参数比如账号密码url</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(Connection con, PreparedStatement st, ResultSet re)</span>&#123;   <span class="comment">//提供关闭</span></span><br><span class="line">        <span class="keyword">if</span>(re!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                re.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(st!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(con!=<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认配置，如果没有指定则使用这个配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>a<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/school<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;idleConnectionTestPeriod&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdleTime&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxStatements&quot;</span>&gt;</span>200<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 命名的配置,可以通过方法调用实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">&quot;MySQL&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/school<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果池中数据连接不够时一次增长多少个 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireIncrement&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;initialPoolSize&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span>&gt;</span>25<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的常用语句纪录</title>
      <link href="/posts/a9be6930.html"/>
      <url>/posts/a9be6930.html</url>
      
        <content type="html"><![CDATA[<h1>MySQL基础</h1><h2 id="MySql基本指令">MySql基本指令</h2><h3 id="1、MySQL常用命令">1、MySQL常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库</span><br><span class="line">create database name;  </span><br><span class="line">#选择数据库</span><br><span class="line">use databasename;</span><br><span class="line">#直接删除数据库，不提醒</span><br><span class="line">drop database name ;</span><br><span class="line">#显示表</span><br><span class="line">show tables; </span><br><span class="line">#表的详细描述</span><br><span class="line">describe tablename; </span><br><span class="line"></span><br><span class="line">select 中加上distinct去除重复字段</span><br><span class="line"></span><br><span class="line">#删除数据库前，有提示。</span><br><span class="line">mysqladmin drop databasename </span><br><span class="line"></span><br><span class="line">#显示当前mysql版本和当前日期</span><br><span class="line"></span><br><span class="line">select version(),current_date;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、修改mysql中root的密码：">2、修改mysql中root的密码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">shell&gt;</span><span class="language-bash">mysql -u root -p</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">update user <span class="built_in">set</span> password=password(”xueok654123″) <span class="built_in">where</span> user=’root’;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">flush privileges //刷新数据库</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash">use dbname； 打开数据库：</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash">show databases; 显示所有数据库</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash">show tables; 显示数据库mysql中所有的表：先use mysql；然后</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span><span class="language-bash">describe user; 显示表mysql数据库中user表的列信息)；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、grant授权">3、grant授权</h3><p>创建一个可以从任何地方连接服务器的一个完全的超级用户，但是必须使用一个口令something做这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all privileges on *.* to user@localhost identified by ’something’ with</span><br></pre></td></tr></table></figure><p>增加新用户</p><p><em><em>格式：grant select on 数据库.</em> to 用户名@登录主机 identified by “密码”</em>*</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO monty@localhost IDENTIFIED BY ’something’ WITH GRANT OPTION;</span><br><span class="line">GRANT ALL PRIVILEGES ON . TO monty@”%” IDENTIFIED BY ’something’ WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p><strong>删除授权：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; revoke all privileges on . from root@”%”;</span><br><span class="line"></span><br><span class="line">mysql&gt; delete from user <span class="built_in">where</span> user=”root” and host=”%”;</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建一个用户custom在特定客户端it363.com登录，可访问特定数据库fangchandb</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt;grant select, insert, update, delete, create,drop on fangchandb.* to custom@ it363.com identified by ‘ passwd’</span><br></pre></td></tr></table></figure><p><strong>重命名表:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; alter table t1 rename t2;</span><br></pre></td></tr></table></figure><h3 id="4、mysqldump">4、mysqldump</h3><p><strong>备份数据库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysqldump -h host -u root -p dbname &gt;dbname_backup.sql</span><br></pre></td></tr></table></figure><p><strong>恢复数据库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysqladmin -h myhost -u root -p create dbname</span><br><span class="line">shell&gt; mysqldump -h host -u root -p dbname &lt; dbname_backup.sql</span><br></pre></td></tr></table></figure><p><strong>如果只想卸出建表指令，则命令如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; mysqladmin -u root -p -d databasename &gt; a.sql</span><br></pre></td></tr></table></figure><p>如果只想卸出插入数据的sql命令，而不需要建表命令，则命令如下：</p><p>shell&gt; mysqladmin -u root -p -t databasename &gt; a.sql</p><p>那么如果我只想要数据，而不想要什么sql命令时，应该如何操作呢？</p><p>mysqldump -T./ phptest driver</p><p>其中，只有指定了-T参数才可以卸出纯文本文件，表示卸出数据的目录，./表示当前目录，即与mysqldump同一目录。如果不指定driver 表，则将卸出整个数据库的数据。每个表会生成两个文件，一个为.sql文件，包含建表执行。另一个为.txt文件，只包含数据，且没有sql指令。</p><h3 id="5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。">5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。</h3><p>例如，如果在文件my_file.sql 中存放有查询，可如下执行这些查询：</p><p>例如，如果您想将建表语句提前写在sql.txt中:</p><p>mysql &gt; mysql -h myhost -u root -p database &lt; sql.txt</p><p>转 mysql命令</p><h2 id="一-安装与配置MYSQL">一 . 安装与配置MYSQL</h2><p>这个就不说了，一般分为Windows安装和Linux安装</p><h2 id="二-常用mysql命令行命令">二 . 常用mysql命令行命令</h2><p>1 .mysql的启动与停止</p><p>启动MYSQL服务 <code>net start mysql</code></p><p>停止MYSQL服务 <code>net stop mysql</code></p><p>2 .<code> netstat –na | findstr 3306</code> 查看被监听的端口 , findstr用于查找后面的端口是否存在</p><p>3 . 在命令行中登陆MYSQL控制台 , 即使用 <code>MYSQL COMMEND LINE TOOL</code></p><p>语法格式 <code>mysql –user=root –password=123456 db_name</code></p><p>或 <code>mysql –u root –p123456 db_name</code></p><p>4 . 进入MYSQL命令行工具后 , 使用<code>status; </code>或/s 查看运行环境信息</p><p>5 . 切换连接数据库的语法 :<code> use new_dbname;</code></p><p>6 . 显示所有数据库 : <code>show databases;</code></p><p>7 . 显示数据库中的所有表 :<code>show tables;</code></p><p>8 . 显示某个表创建时的全部信息 : <code>show create table table_name;</code></p><p>9 . 查看表的具体属性信息及表中各字段的描述</p><p><code>Describe table_name;</code> 缩写形式 : <code>desc table_name;</code></p><h2 id="三-MySql中的SQL语句">三 . MySql中的SQL语句</h2><ol><li><p>数据库创建 : <code>Create database db_name;</code></p><p>数据库删除 : <code>Drop database db_name;</code> 删除时可先判断是否存在，写成 : <code>drop database if exits db_name</code></p></li><li><p>建表 : 创建数据表的语法 :<code> create table table_name (字段1 数据类型 , 字段2 数据类型);</code></p><p>例 : create table mytable (id int , username char(20));</p></li><li><p>删表 :<code>drop table table_name;</code>例 : drop table mytable;</p></li><li><p>添加数据 : <code>Insert into 表名 [(字段1 , 字段2 , ….)] values (值1 , 值2 , …..);</code></p><p>如果向表中的每个字段都插入一个值,那么前面 [ ] 括号内字段名可写也可不写</p><p>例 : insert into mytable (id,username) values (1,’zhangsan’);</p></li><li><p>查询 : 查询所有数据 : <code>select * from table_name;</code></p><p>查询指定字段的数据 :<code> select 字段1 , 字段2 from table_name;</code></p><p>例 : select id,username from mytable where id=1 order by desc;多表查询语句------------参照第17条实例</p></li><li><p>更新指定数据 , 更新某一个字段的数据(注意，不是更新字段的名字)</p></li></ol><p><code>Update table_name set 字段名=’新值’ [, 字段2 =’新值’ , …..][where id=id_num] [order by 字段 顺序]</code></p><p>​例 : update mytable set username=’lisi’ where id=1;</p><p>​Order语句是查询的顺序 , 如 : <code>order by id desc(或asc)</code> , 顺序有两种 : desc倒序(100—1,即从最新数据往后查询),asc(从1-100)，Where和order语句也可用于查询select 与删除delete</p><ol start="7"><li><p>删除表中的信息 :</p><p>删除整个表中的信息 : <code>delete from table_name;</code></p><p>删除表中指定条件的语句 : <code>delete from table_name where 条件语句 ;</code> 条件语句如 : id=3;</p></li><li><p>创建数据库用户</p><p>一次可以创建多个数据库用户如：</p><p><code>CREATE USER username1 identified BY ‘password’ , username2 IDENTIFIED BY ‘password’….</code></p></li><li><p>用户的权限控制：grant库，表级的权限控制 : 将某个库中的某个表的控制权赋予某个用户</p><p><code>Grant all ON db_name.table_name TO user_name [ indentified by ‘password’ ];</code></p></li><li><p>表结构的修改</p><p>(1)增加一个字段格式：</p><p>​<code>alter table table_name add column (字段名 字段类型); ----此方法带括号</code></p><p>(2)指定字段插入的位置：</p><p>​<code>alter table table_name add column 字段名 字段类型 after 某字段；</code></p><p>删除一个字段：</p><p>​<code>alter table table_name drop字段名;</code></p><p>(3)修改字段名称/类型</p><p>​<code>alter table table_name change 旧字段名 新字段名 新字段的类型;</code></p><p>(4)改表的名字</p><p>​<code>alter table table_name rename to new_table_name;</code></p><p>(5)一次性清空表中的所有数据</p><p>​<code>truncate table table_name; 此方法也会使表中的取号器(ID)从1开始</code></p></li><li><p>增加主键，外键，约束，索引。。。。(使用方法见17实例)</p><p>① <strong>约束(主键Primary key、唯一性Unique、非空Not Null)</strong></p><p>② <strong>自动增张 auto_increment</strong></p><p>③<strong>外键Foreign key-----与reference table_name(col_name列名)配合使用，建表时单独使用</strong></p><p>④ <strong>删除多个表中有关联的数据----设置foreign key 为set null —具体设置参考帮助文档</strong></p></li><li><p>查看数据库当前引擎</p><p>``SHOW CREATE TABLE table_name;`</p></li><li><p>修改数据库引擎</p><p><code>ALTER TABLE table_name ENGINE=MyISAM | InnoDB;</code></p></li><li><p>SQL语句运用实例:</p><p><strong>–1 建users表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table users (</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">nikename varchar(20) not null unique,</span><br><span class="line">password varchar(100) not null,</span><br><span class="line">address varchar(200), </span><br><span class="line">reg_date timestamp not null default CURRENT_TIMESTAMP</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>–2 建articles表,在建表时设置外键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table articles (</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    content longtext not null,</span><br><span class="line">    userid int,</span><br><span class="line">    constraint foreign key (userid) references users(id) on delete set null</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​<strong>–2.1 建articles表,建表时不设置外键</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table articles (</span><br><span class="line">    id int primary key auto_increment,</span><br><span class="line">    content longtext not null,</span><br><span class="line">    userid int</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​-<strong>-2.2 给articles表设置外键</strong></p><p>​<code>alter table articles add constraint foreign key (userid) references users(id) on delete set null;</code></p><p><strong>–3. 向users表中插入数据,同时插入多条</strong></p><p><code>insert into users (id,nikename,password,address) values (1,'lyh1','1234',null),(10,'lyh22','4321','湖北武汉'),(null,'lyh333','5678', '北京海淀');</code></p></li></ol><p>​<strong>–4. 向article中插入三条数据</strong></p><p>​<code>insert into articles (id,content,userid) values (2,'hahahahahaha',11),(null,'xixixixixix',10),(13,'aiaiaiaiaiaiaiaiaiaiaiaia',1),(14,'hohoahaoaoooooooooo',10);</code></p><p>​<strong>–5. 进行多表查询，选择users表中ID=10的用户发布的所有留言及该用户的所有信息</strong></p><p>​<code>select articles.id,articles.content,users.* from users,articles where users.id=10 and articles.userid=users.id order by articles.id desc;</code></p><p>​<strong>–6. 查看数据库引擎类型</strong></p><p>​<code>show create table users;</code></p><p>​<strong>–7. 修改数据库引擎类型</strong></p><p>​<code>alter table users engine=MyISAM; </code>—因为users表中ID被设置成外键，执行此句会出错</p><p>​-<strong>-8. 同表查询,已知一个条件的情况下.查询ID号大于用户lyh1的ID号的所有用户</strong></p><p>​<code>select a.id,a.nikename,a.address from users a,users b where b.nikename='lyh1' and a.id&gt;b.id;</code></p><p>​------也可写成</p><p>​<code>select id,nikename,address from users where id&gt;(select id from users where nikename='lyh1');</code></p><h3 id="习题：">习题：</h3><ol><li><strong>显示年龄比领导还大的员工：</strong></li></ol><p><code>select a.name from users a,users b where a.managerid=b.id and a.age&gt;b.age;</code></p><ol start="2"><li><p><strong>查询编号为2的发帖人: 先查articles表,得到发帖人的编号,再根据编号查users得到的用户名。</strong></p><p><strong>接着用关联查询.</strong></p><ol><li><code>select * from articles,users</code>得到笛卡儿积,再加<code>order by articles.id</code>以便观察</li><li>使用<code>select * from articles,users where articles.id=2</code> 筛选出2号帖子与每个用户的组合记录</li><li>再使用<code>select * from articles,users where articles.id=2 and articles.userid=users.id</code>选出users.id等于2号帖的发帖人id的记录.</li><li>只取用户名:select user where user.id=(select userid from articles where <a href="http://article.id">article.id</a> =2)</li></ol></li><li><p><strong>找出年龄比小王还大的人:假设小王是28岁,先想找出年龄大于28的人</strong></p><p><code>select * from users where age&gt;(select age from users where name='xiaowang');</code></p><p><strong>要查询的记录需要参照表里面的其他记录:</strong></p></li></ol><p><code>select a.name from users a,users b where b.name='xiaowang' and a.age&gt;b.age</code></p><p>表里的每个用户都想pk一下.<code>select a.nickname,b.nickname from users a,users b where a.id&gt;b.id ;</code></p><p>更保险的语句:<code>select a.nickname,b.nickname from (select * from users order by id) a,(select * from users order by id) b where a.id&gt;b.id ;</code></p><p>再查询某个人发的所有帖子.</p><p><code>select b.* from articles a , articles b where a.id=2 and a.userid=b.userid</code></p><p>说明: 表之间存在着关系，ER概念的解释，用access中的示例数据库演示表之间的关系.<strong>只有innodb引擎才支持foreign key，mysql的任何引擎目前都不支持check约束。</strong></p><h2 id="四-字符集出现错误解决办法"><strong>四. 字符集出现错误解决办法</strong></h2><p>出现的问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update <span class="built_in">users</span></span><br><span class="line">-&gt; <span class="built_in">set</span> username=<span class="string">&#x27;关羽&#x27;</span></span><br><span class="line">-&gt; <span class="built_in">where</span> userid=2;</span><br><span class="line"></span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: <span class="string">&#x27;/xB9/xD8/xD3/xF0&#x27;</span> <span class="keyword">for</span> column <span class="string">&#x27;username&#x27;</span> at row 1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>向表中插入中文字符时，出现错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from <span class="built_in">users</span>;</span><br><span class="line">+--------+----------+</span><br><span class="line">| userid | username |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 2 | ???? |</span><br><span class="line">| 3 | ???? |</span><br><span class="line">| 4 | ?í?ù |</span><br><span class="line">+--------+----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>表中的中文字符位乱码。</p><p>解决办法：</p><p>使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; status;</span><br><span class="line">mysql Ver 14.12 Distrib 5.0.45, <span class="keyword">for</span> Win32 (ia32)</span><br><span class="line">Connection <span class="built_in">id</span>: 8</span><br><span class="line">Current database: <span class="built_in">test</span></span><br><span class="line">Current user: root@localhost</span><br><span class="line">SSL: Not <span class="keyword">in</span> use</span><br><span class="line">Using delimiter: ;</span><br><span class="line">Server version: 5.0.45-community-nt MySQL Community Edition (GPL)</span><br><span class="line">Protocol version: 10</span><br><span class="line">Connection: localhost via TCP/IP</span><br><span class="line">Server characterset: latin1</span><br><span class="line">Db characterset: latin1</span><br><span class="line">Client characterset: gbk</span><br><span class="line">Conn. characterset: gbk</span><br><span class="line">TCP port: 3306</span><br><span class="line">Uptime: 7 hours 39 min 19 sec</span><br><span class="line">Threads: 2 Questions: 174 Slow queries: 0 Opens: 57 Flush tables: 1 Open ta</span><br><span class="line">bles: 1 Queries per second avg: 0.006</span><br></pre></td></tr></table></figure><p>查看mysql发现<strong>Server characterset，Db characterset的字符集设成了latin1</strong>，所以出现中文乱码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| <span class="built_in">users</span> |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>更改表的字符集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">users</span> character <span class="built_in">set</span> GBK;</span><br><span class="line">Query OK, 3 rows affected (0.08 sec)</span><br><span class="line">Records: 3 Duplicates: 0 Warnings: 0</span><br></pre></td></tr></table></figure><p>查看表的结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show create <span class="built_in">users</span>;</span><br><span class="line"></span><br><span class="line">ERROR 1064 (42000): You have an error <span class="keyword">in</span> your SQL syntax; check the manual that corresponds to your MySQL server version <span class="keyword">for</span> the right syntax to use near <span class="string">&#x27;users&#x27;</span> at line 1</span><br><span class="line">mysql&gt; show create table <span class="built_in">users</span>;</span><br><span class="line"></span><br><span class="line">| Table | Create Table|| <span class="built_in">users</span> | </span><br><span class="line">CREATE TABLE <span class="built_in">users</span> (</span><br><span class="line">userid int(11) default NULL,</span><br><span class="line">username char(20) character <span class="built_in">set</span> latin1 default NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=gbk |</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc <span class="built_in">users</span>;</span><br><span class="line"></span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type | Null | Key | Default | Extra |</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">| userid | int(11) | YES | | NULL | |</span><br><span class="line">| username | char(20) | YES | | NULL | |</span><br><span class="line">+----------+----------+------+-----+---------+-------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><p>这时向表中插入中文然后有错误。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into <span class="built_in">users</span> values(88,<span class="string">&#x27;中文&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: <span class="string">&#x27;/xD6/xD0/xCE/xC4&#x27;</span> <span class="keyword">for</span> column <span class="string">&#x27;username&#x27;</span> at row 1</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into <span class="built_in">users</span> values(88,<span class="string">&#x27;中文&#x27;</span>);</span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: <span class="string">&#x27;/xD6/xD0/xCE/xC4&#x27;</span> <span class="keyword">for</span> column <span class="string">&#x27;username&#x27;</span> at row 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还要更改users表的username的字符集。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">users</span> modify username char(20) character <span class="built_in">set</span> gbk;</span><br><span class="line"></span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: <span class="string">&#x27;/xC0/xEE/xCB/xC4&#x27;</span> <span class="keyword">for</span> column <span class="string">&#x27;username&#x27;</span> at row 1</span><br><span class="line"></span><br><span class="line">mysql&gt; alter table <span class="built_in">users</span> modify username char(20) character <span class="built_in">set</span> gbk;</span><br><span class="line"></span><br><span class="line">ERROR 1366 (HY000): Incorrect string value: <span class="string">&#x27;/xC0/xEE/xCB/xC4&#x27;</span> <span class="keyword">for</span> column <span class="string">&#x27;username&#x27;</span> at row 1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为表中已经有数据，所以更改username字符集的操作没有成功</p><p>清空users表中的数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">truncate</span> table <span class="built_in">users</span>;</span><br><span class="line">Query OK, 3 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p>重新更改user表中username的字符集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table <span class="built_in">users</span> modify username char(20) character <span class="built_in">set</span> gbk;</span><br><span class="line"></span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line">Records: 0 Duplicates: 0 Warnings: 0</span><br></pre></td></tr></table></figure><p>这时再插入中文字符，插入成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into <span class="built_in">users</span> values(88,<span class="string">&#x27;中文&#x27;</span>);</span><br><span class="line"></span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">mysql&gt; select * from <span class="built_in">users</span>;</span><br><span class="line">+--------+----------+</span><br><span class="line">| userid | username |</span><br><span class="line">+--------+----------+</span><br><span class="line">| 88 | 中文 |</span><br><span class="line">+--------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt;<span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure><p><strong>学习MySQL常用操作命令</strong></p><p><strong>1、启动MySQL服务器</strong></p><p>实际上上篇已讲到如何启动MySQL。两种方法： <strong>一是用winmysqladmin，如果机器启动时已自动运行，则可直接进入下一步操作。 二是在DOS方式下运行 d:mysqlbinmysqld</strong></p><p><strong>2、进入mysql交互操作界面</strong></p><p>在DOS方式下，运行： <code>d:mysqlbinmysql</code></p><p>出现: mysql 的提示符，此时已进入mysql的交互操作方式。</p><p>如果出现 &quot;ERROR 2003: Can′t connect to MySQL server on ′localhost′ (10061)“，</p><p>说明你的MySQL还没有启动。</p><p><strong>3、退出MySQL操作界面</strong></p><p>在mysql&gt;提示符下输入quit可以随时退出交互操作界面：</p><p><code>mysql&gt; quit</code></p><p>Bye</p><p>你也可以用control-D退出。</p><p><strong>4、第一条命令</strong></p><p><code>mysql&gt; select version(),current_date();</code></p><p>±---------------±----------------+</p><p>| version() | current_date() |</p><p>±---------------±----------------+</p><p>| 3.23.25a-debug | 2001-05-17 |</p><p>±---------------±----------------+</p><p>1 row in set (0.01 sec)</p><p>mysql&gt;</p><p>此命令要求mysql服务器告诉你它的版本号和当前日期。尝试用不同大小写操作上述命令，看结果如何。结果说明mysql命令的大小写结果是一致的。</p><p>练习如下操作：</p><p><code>mysql&gt;Select (20+5)*4;</code></p><p><code>mysql&gt;Select (20+5)*4,sin(pi()/3);</code></p><p><code>mysql&gt;Select (20+5)*4 AS Result,sin(pi()/3);</code> (AS: 指定假名为Result)</p><p><strong>5、多行语句</strong></p><p>一条命令可以分成多行输入，直到出现分号“；”为止：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> mysql&gt; select</span><br><span class="line">-&gt; USER()</span><br><span class="line">-&gt; ,</span><br><span class="line">-&gt; now()</span><br><span class="line">-&gt;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+--------------------+---------------------+</span><br><span class="line">| USER() | now() |</span><br><span class="line">+--------------------+---------------------+</span><br><span class="line">| ODBC@localhost | 2001-05-17 22:59:15 |</span><br><span class="line">+--------------------+---------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.06 sec)</span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意中间的逗号和最后的分号的使用方法。</p><p><strong>6、一行多命令</strong></p><p>输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT USER(); SELECT NOW();</span><br><span class="line">+------------------+</span><br><span class="line">| USER() |</span><br><span class="line">+------------------+</span><br><span class="line">| ODBC@localhost |</span><br><span class="line">+------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">+---------------------+</span><br><span class="line">| NOW() |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2001-05-17 23:06:15 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>注意中间的分号，命令之间用分号隔开。</p><p><strong>7、显示当前存在的数据库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+----------+</span><br><span class="line">| Database |</span><br><span class="line">+----------+</span><br><span class="line">| mysql |</span><br><span class="line">| <span class="built_in">test</span> |</span><br><span class="line">+----------+</span><br><span class="line">2 row <span class="keyword">in</span> <span class="built_in">set</span> (0.06 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong>8、选择数据库并显示当前选择的数据库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; USE mysql</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt;</span><br><span class="line">(USE 和 QUIT 命令不需要分号结束。)</span><br><span class="line">mysql&gt; select database();</span><br><span class="line">±--------------+</span><br><span class="line">| database() |</span><br><span class="line">±--------------+</span><br><span class="line">| mysql |</span><br><span class="line">±--------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>9、显示当前数据库中存在的表</strong></p><p><code>mysql&gt; SHOW TABLES;</code></p><p><strong>10、显示表(db)的内容</strong></p><p><code>mysql&gt;select * from db;</code></p><p><strong>11、命令的取消</strong></p><p>当命令输入错误而又无法改变(多行语句情形)时，只要在分号出现前就可以用 c来取消该条命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select</span><br><span class="line">-&gt; user()</span><br><span class="line">-&gt; c</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>这是一些最常用的最基本的操作命令，通过多次练习就可以牢牢掌捂了</p><p>==========================================================================</p><h2 id="五-mysql命令">五. mysql命令</h2><p>测试环境：mysql 5.0.45</p><p>【注：可以在mysql中通过mysql&gt; SELECT VERSION();来查看数据库版本】</p><p>整理：leo</p><h3 id="一、连接MYSQL。">一、连接MYSQL。</h3><p>格式： <code>mysql -h主机地址 -u用户名 －p用户密码</code></p><h4 id="1、连接到本机上的MYSQL。"><strong>1、连接到本机上的MYSQL。</strong></h4><p>首先打开DOS窗口，然后进入目录mysql/bin，再键入命令<code>mysql -u root -p</code>，回车后提示你输密码.注意用户名前可以有空格也可以没有空格，但是密码前必须没有空格，否则让你重新输入密码.</p><p>如果刚安装好MYSQL，超级用户root是没有密码的，故直接回车即可进入到MYSQL中了，MYSQL的提示符是： mysql&gt;</p><h4 id="2、连接到远程主机上的MYSQL。"><strong>2、连接到远程主机上的MYSQL。</strong></h4><p>假设远程主机的IP为：110.110.110.110，用户名为root,密码为abcd123。则键入以下命令：</p><p><code>mysql -h110.110.110.110 -u root -p abcd123;</code> (注:u与root之间可以不用加空格，其它也一样)</p><p><strong>3、退出MYSQL命令： exit (回车)</strong></p><h3 id="二、修改密码。"><strong>二、修改密码。</strong></h3><p>格式：<code>mysqladmin -u用户名 -p旧密码 password 新密码</code></p><h4 id="1、给root加个密码ab12。">1、给root加个密码ab12。</h4><p>首先在DOS下进入目录mysql/bin，然后键入以下命令</p><p><code>mysqladmin -u root -password ab12</code></p><p>注：因为开始时root没有密码，所以-p旧密码一项就可以省略了。</p><h4 id="2、再将root的密码改为djg345。">2、再将root的密码改为djg345。</h4><p><code>mysqladmin -u root -p ab12 password djg345</code></p><h3 id="三、增加新用户。">三、增加新用户。</h3><p>(注意：和上面不同，下面的因为是MYSQL环境中的命令，所以后面都带一个分号作为命令结束符)</p><p>格式：<code>grant select on 数据库.* to 用户名@登录主机 identified by “密码”</code></p><p>1、增加一个用户test1密码为abc，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用root用户连入MYSQL，然后键入以下命令：</p><p><code>grant select,insert,update,delete on *.* to [email=test1@”%]test1@”%[/email]” Identified by “abc”;</code></p><p><strong>但增加的用户是十分危险的，你想如某个人知道test1的密码，那么他就可以在internet上的任何一台电脑上登录你的mysql数据库并对你的数据可以为所欲为了，解决办法见2。</strong></p><p>2、增加一个用户test2密码为abc,让他只可以在localhost上登录，并可以对数据库mydb进行查询、插入、修改、删除的操作(localhost指本地主机，即MYSQL数据库所在的那台主机)，</p><p>这样用户即使用知道test2的密码，他也无法从internet上直接访问数据库，<strong>只能通过MYSQL主机上的web页来访问了。</strong></p><p><code>grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “abc”;</code></p><p>如果<strong>你不想test2有密码，可以再打一个命令将密码消掉。</strong></p><p><code>grant select,insert,update,delete on mydb.* to [email=test2@localhost]test2@localhost[/email] identified by “”;</code></p><h2 id="六-MYSQL中有关数据库方面的操作。">六. MYSQL中有关数据库方面的操作。</h2><p>注意：你必须首先登录到MYSQL中，以下操作都是在MYSQL的提示符下进行的，而且每个命令以分号结束。</p><h3 id="一、操作技巧">一、操作技巧</h3><p>1、如果你打命令时，回车后发现忘记加分号，你无须重打一遍命令，只要打个分号回车就可以了。也就是说你可以把一个完整的命令分成几行来打，完后用分号作结束标志就OK。</p><p>2、你可以使用光标上下键调出以前的命令。</p><h3 id="二、显示命令">二、显示命令</h3><p>1、显示当前数据库服务器中的数据库列表：</p><p><code>mysql&gt; SHOW DATABASES;</code></p><p>注意：mysql库里面有MYSQL的系统信息，我们改密码和新增用户，实际上就是用这个库进行操作。</p><p>2、显示数据库中的数据表：</p><p><code>mysql&gt; USE 库名；</code></p><p><code>mysql&gt; SHOW TABLES;</code></p><p>3、显示数据表的结构：</p><p><code>mysql&gt; DESCRIBE 表名;</code></p><p>4、建立数据库：</p><p><code>mysql&gt; CREATE DATABASE 库名;</code></p><p>5、建立数据表：</p><p><code>mysql&gt; USE 库名;</code></p><p><code>mysql&gt; CREATE TABLE 表名 (字段名 VARCHAR(20), 字段名 CHAR(1));</code></p><p>6、删除数据库：</p><p><code>mysql&gt; DROP DATABASE 库名;</code></p><p>7、删除数据表：</p><p><code>mysql&gt; DROP TABLE 表名；</code></p><p>8、将表中记录清空：</p><p><code>mysql&gt; DELETE FROM 表名;</code></p><p>9、显示表中的记录：</p><p><code>mysql&gt; SELECT * FROM 表名;</code></p><p>10、往表中插入记录：</p><p><code>mysql&gt; INSERT INTO 表名 VALUES (”hyq”,”M”);</code></p><p>11、更新表中数据：</p><p><code>mysql-&gt; UPDATE 表名 SET 字段名1=’a',字段名2=’b’ WHERE 字段名3=’c';</code></p><p>12、用文本方式将数据装入数据表中：</p><p><code>mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE 表名;</code></p><p>13、导入.sql文件命令：</p><p><code>mysql&gt; USE 数据库名;</code></p><p><code>mysql&gt; SOURCE d:/mysql.sql;</code></p><p>14、命令行修改root密码：</p><p><code>mysql&gt; UPDATE mysql.user SET password=PASSWORD(’新密码’) WHERE User=’root’;</code></p><p><code>mysql&gt; FLUSH PRIVILEGES;</code></p><p>15、显示use的数据库名：</p><p><code>mysql&gt; SELECT DATABASE();</code></p><p>16、显示当前的user：</p><p><code>mysql&gt; SELECT USER();</code></p><h3 id="三、一个建库和建表以及插入数据的实例">三、一个建库和建表以及插入数据的实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists school; //如果存在SCHOOL则删除</span><br><span class="line">create database school;       //建立库SCHOOL</span><br><span class="line">use school; //打开库SCHOOL</span><br><span class="line"></span><br><span class="line">create table teacher //建立表TEACHER(</span><br><span class="line">id int(3) auto_increment not null primary key,</span><br><span class="line">name char(10) not null,</span><br><span class="line">address varchar(50) default ‘深圳’,</span><br><span class="line">year date</span><br><span class="line">); //建表结束</span><br><span class="line"></span><br><span class="line">//以下为插入字段</span><br><span class="line">insert into teacher values(”,’allen’,&#x27;大连一中’,&#x27;1976-10-10′);</span><br><span class="line">insert into teacher values(”,’jack’,&#x27;大连二中’,&#x27;1975-12-23′);</span><br></pre></td></tr></table></figure><p>如果你在mysql提示符键入上面的命令也可以，但不方便调试。</p><p>​(1)<strong>你可以将以上命令原样写入一个文本文件中，假设为school.sql，然后复制到c://下，并在DOS状态进入目录[url=file:mysql//bin]//mysql//bin[/url]，然后键入以下命令：</strong></p><p>​<code>mysql -uroot -p密码 &lt; c://school.sql</code></p><p><strong>如果成功，空出一行无任何显示；如有错误，会有提示。(以上命令已经调试，你只要将//的注释去掉即可使用)。</strong></p><p>(2)或者进入命令行后使用 <code>mysql&gt; source c://school.sql; </code>也可以将school.sql文件导入数据库中。</p><h3 id="四、将文本数据转到数据库中">四、将文本数据转到数据库中</h3><p>1、文本数据应符合的格式：字段数据之间用<strong>tab</strong>键隔开，null值用<code>[url=file:n]//n[/url]</code>来代替.例：</p><p><code>3 rose 大连二中 1976-10-10</code></p><p><code>4 mike 大连一中 1975-12-23</code></p><p><strong>假设你把这两组数据存为school.txt文件，放在c盘根目录下。</strong></p><p>数据传入命令 <code>load data local infile “c://school.txt” into table 表名;</code></p><p>注意：你最好将文件复制到[url=file:mysql//bin]//mysql//bin[/url]目录下，并且要先用use命令打表所在的库。</p><h3 id="五、备份数据库1-导出整个数据库">五、备份数据库1.导出整个数据库</h3><p>导出文件默认是存在mysql/bin目录下</p><p><strong>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</strong></p><p><code>mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql</code></p><p>2.导出一个表</p><p><strong>mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</strong></p><p><code>mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql</code></p><p>3.导出一个数据库结构</p><p><code>mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql</code></p><p><strong>-d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</strong></p><p>4.带语言参数导出</p><p><code>mysqldump -uroot -p –default-character-set=latin1 –set-charset=gbk –skip-opt database_name &gt; outfile_name.sql</code></p><h3 id="六、导入数据库">六、导入数据库</h3><p>例如：数据库名为 dbTest</p><p>首先，进入mysql</p><p><code>mysql -uroot -p123456</code></p><p>然后，创建数据库</p><p><code>create dbTest</code></p><p><code>exit</code></p><p>最后，导入数据库</p><p><code>mysql -uroot -p123456 dbTest </code></p><p>数据库及表导出导入示例：</p><p>导出数据库</p><p><code>mysqldump -u root -p123456 gameTop &gt; gameTop_db.sql</code></p><p>导出数据库的表</p><p><code>mysqldump -u -p123456 root gameTop gametop800 &gt; gameTop_table.sql</code></p><p>导出数据库的特定表</p><p><code>mysqldump -u root -p123456  gameTop --table gametop800  &gt; gameTop_table.sql</code></p><p>导出数据库(只导结构，不要数据)</p><p><code>mysqldump -u root -p123456 --opt -d gameTop &gt; gameTop_db.sql</code></p><p>或者</p><p><code>mysqldump -u root -p123456  -d gameTop &gt; gameTop_db.sql</code></p><p>导出数据库(只导数据，不要结构)</p><p><code>mysqldump -u root -p123456  -t gameTop &gt; gameTop_db.sql</code></p><p>注：不加 -d 和 -t 则既导出结构，也导出数据</p><p>mysqldump导出抛出异常：</p><p><code>mysqldump: Got error: 1044: Access denied for user 'username'@'%' to database 'dbname' when using LOCK TABLES</code></p><p>解决办法，添加参数 --skip-lock-tables：</p><p><code>mysqldump --skip-lock-tables -h172.88.12.102 -username-pAnJnVs3C2tYXyTwV dbname&gt; dbname_bk.sql</code></p><p>导入数据库：</p><p>登录MySQL:      <code>mysql -uroot -p123456</code></p><p>创建数据库：    <code>create database gameTop;</code></p><p>导入数据库：</p><p><code>mysql -uroot -p123456 gameTop </code></p><p>导入数据库表：</p><p><code>mysql -uroot -p123456 gameTop  gametop800 &lt;  gameTop_table.sql</code></p><p>导入数据库表：</p><p><code>mysql -uroot -p123456 gameTop  </code></p><p>1:使用SHOW语句找出在服务器上当前存在什么数据库：</p><p><code>mysql&gt; SHOW DATABASES;</code></p><p>2:创建一个数据库MYSQLDATA</p><p><code>mysql&gt; CREATE DATABASE MYSQLDATA;</code></p><p>3:选择你所创建的数据库</p><p><code>mysql&gt; USE MYSQLDATA;</code> (按回车键出现Database changed 时说明操作成功！)</p><p>4:查看现在的数据库中存在什么表</p><p><code>mysql&gt; SHOW TABLES;</code></p><p>5:创建一个数据库表</p><p><code>mysql&gt; CREATE TABLE MYTABLE (name VARCHAR(20), sex CHAR(1));</code></p><p>6:显示表的结构：</p><p><code>mysql&gt; DESCRIBE MYTABLE;</code></p><p>7:往表中加入记录</p><p><code>mysql&gt; insert into MYTABLE values (”hyq”,”M”);</code></p><p>8:用文本方式将数据装入数据库表中(例如D:/mysql.txt)</p><p><code>mysql&gt; LOAD DATA LOCAL INFILE “D:/mysql.txt” INTO TABLE MYTABLE;</code></p><p>9:导入.sql文件命令(例如D:/mysql.sql)</p><p><code>mysql&gt;use database;</code></p><p><code>mysql&gt;source d:/mysql.sql;</code></p><p>10:删除表</p><p><code>mysql&gt;drop TABLE MYTABLE;</code></p><p>11:清空表</p><p><code>mysql&gt;delete from MYTABLE;</code></p><p>12:更新表中数据</p><p><code>mysql&gt;update MYTABLE set sex=”f” where name=’hyq’;</code></p><p>以下是无意中在网络看到的使用MySql的管理心得,</p><ul><li><p>在windows中MySql以服务形式存在，在使用前应确保此服务已经启动，未启动可用net start mysql命令启动。而Linux中启动时可用“/etc/rc.d/init.d/mysqld start”命令，注意启动者应具有管理员权限。</p></li><li><p>刚安装好的MySql包含一个含空密码的root帐户和一个匿名帐户，这是很大的安全隐患，对于一些重要的应用我们应将安全性尽可能提高，在这里应把匿名帐户删除、 root帐户设置密码，可用如下命令进行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">delete from User <span class="built_in">where</span> User=”<span class="string">&quot;;</span></span><br><span class="line"><span class="string">update User set Password=PASSWORD(’newpassword’) where User=’root’;</span></span><br></pre></td></tr></table></figure></li><li><p>如果要对用户所用的登录终端进行限制，可以更新User表中相应用户的Host字段，在进行了以上更改后应重新启动数据库服务，此时登录时可用如下类似命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p;</span><br><span class="line">mysql -uroot -pnewpassword;</span><br><span class="line">mysql mydb -uroot -p;</span><br><span class="line">mysql mydb -uroot -pnewpassword;</span><br></pre></td></tr></table></figure><p>上面命令参数是常用参数的一部分，详细情况可参考文档。此处的mydb是要登录的数据库的名称。</p></li><li><p>在 进行开发和实际应用中，用户不应该只用root用户进行连接数据库，虽然使用root用户进行测试时很方便，但会给系统带来重大安全隐患，也不利于管理技 术的提高。我们给一个应用中使用的用户赋予最恰当的数据库权限。如一个只进行数据插入的用户不应赋予其删除数据的权限。</p></li><li><p>MySql的用户管理是通过 User表来实现的，添加新用户常用的方法有两个，一是在User表插入相应的数据行，同时设置相应的权限；二是通过GRANT命令创建具有某种权限的用 户。其中GRANT的常用用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grant all on mydb.* to NewUserName@HostName identified by “password” ;</span><br><span class="line">grant usage on . to NewUserName@HostName identified by “password”;</span><br><span class="line">grant select,insert,update on mydb.* to NewUserName@HostName identified by “password”;</span><br><span class="line">grant update,delete on mydb.TestTable to NewUserName@HostName identified by “password”;</span><br></pre></td></tr></table></figure></li><li><p>若 要给此用户赋予他在相应对象上的权限的管理能力，可在GRANT后面添加WITH GRANT OPTION选项。而对于用插入User表添加的用户，Password字段应用PASSWORD 函数进行更新加密，以防不轨之人窃看密码。对于那些已经不用的用户应给予清除，权限过界的用户应及时回收权限，回收权限可以通过更新User表相应字段， 也可以使用REVOKE操作。</p></li></ul><p>下面给出本人从其它资料(<a href="http://www.cn-Java.com">www.cn-Java.com</a>)获得的对常用权限的解释：</p><h2 id="七-全局管理权限：">七. 全局管理权限：</h2><ol><li><strong>FILE: 在MySQL服务器上读写文件。</strong></li><li><strong>PROCESS: 显示或杀死属于其它用户的服务线程。</strong></li><li><strong>RELOAD: 重载访问控制表，刷新日志等。</strong></li><li><strong>SHUTDOWN: 关闭MySQL服务。</strong></li><li><strong>数据库/数据表/数据列权限：</strong></li><li><strong>ALTER: 修改已存在的数据表(例如增加/删除列)和索引。</strong></li><li><strong>CREATE: 建立新的数据库或数据表.</strong></li><li><strong>DELETE: 删除表的记录。</strong></li><li><strong>DROP: 删除数据表或数据库。</strong></li><li><strong>INDEX: 建立或删除索引。</strong></li><li><strong>INSERT: 增加表的记录。</strong></li><li><strong>SELECT: 显示/搜索表的记录。</strong></li><li><strong>UPDATE: 修改表中已存在的记录。</strong></li><li><strong>特别的权限：ALL: 允许做任何事(和root一样)。</strong></li><li><strong>USAGE: 只允许登录–其它什么也不允许做。</strong></li></ol><p>知识拓展：</p><p><code>mysql -uroot -p123456 gameTop  gametop800</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaJUC学习篇</title>
      <link href="/posts/e45e7a2d.html"/>
      <url>/posts/e45e7a2d.html</url>
      
        <content type="html"><![CDATA[<h1>JavaJUC学习篇</h1><h4 id="什么是JUC">什么是JUC</h4><p>java.util 工具包、包、分类</p><h4 id="线程和进程">线程和进程</h4><p>进程：一个程序，比如qq,酷我音乐啥的一个进程往往包含一个多个线程。</p><p>线程：java默认两个线程一个main，一个GC</p><p>java线程实现的方式：</p><p>继承Thread，实现Runnable接口，实现callable</p><h4 id="并行和并发">并行和并发</h4><p>并行：多线程操作处理同一个资源，或者说多个人完成同一件事情</p><p>并发：为了达到某件事，每个人负责不同的模块然后完成事情。</p><h4 id="线程的状态：">线程的状态：</h4><p>创建  --》 就绪 --》 运行 --》阻塞  --&gt;死亡</p><p>（我们通常分为五种，但是有些情况下分为7种，加的两种为等待和超时等待）</p><h4 id="wait和sleep的区别">wait和sleep的区别</h4><p>首先：</p><p>wait来自Object</p><p>sleep来自Thread</p><p>其次：</p><p>wait会释放锁</p><p>sleep不会</p><p>使用范围不一样：</p><p>wait必须放到同步块中</p><p>sleep没有要求</p><h4 id="Lock和Synchonized">Lock和Synchonized</h4><p><strong>传统的synchonized锁</strong></p><p>synchonized（）{</p><p>}</p><p>括号里边一般两种</p><p>1对象</p><p>2类名.class</p><p>还有 private synchonized void name(){}</p><p><strong>Lock接口</strong></p><p>ReentrantLock： 可重用锁</p><p>readLock: 读锁</p><p>writeLock:写锁</p><p><strong>Synchronized 和 Lock 区别</strong></p><p>1、Synchronized 内置的Java关键字， Lock 是一个Java类</p><p>2、Synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁</p><p>3、Synchronized 会自动释放锁，lock 必须要手动释放锁！如果不释放锁，死锁</p><p>4、Synchronized 线程 1（获得锁，阻塞）、线程2（等待，傻傻的等）；Lock锁就不一定会等待下</p><p>去；</p><p>5、Synchronized 可重入锁，不可以中断的，非公平；Lock ，可重入锁，可以 判断锁，非公平（可以</p><p>自己设置）；</p><p>6、Synchronized 适合锁少量的代码同步问题，Lock 适合锁大量的同步代码！</p><h4 id="生产者消费者问题">生产者消费者问题</h4><blockquote><p>生产者和消费者问题Synchronized版</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xh.juc.day02;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  罗小黑</span></span><br><span class="line"><span class="comment"> * 线程之间的通信问题，常用的是生产者和消费者问题。 等待唤醒，通知唤醒。</span></span><br><span class="line"><span class="comment"> * 线程交替执行 A B操作同一个变量 num = 0;</span></span><br><span class="line"><span class="comment"> * A num + 1</span></span><br><span class="line"><span class="comment"> * B num  - 1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/2 16:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> 2844135670@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    date.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    date.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者消费者： 判断等待 ，业务 ， 通知</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>&#123;</span><br><span class="line">    <span class="comment">//数字资源锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span>(number != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通知其他线程我加1完毕了</span></span><br><span class="line">        number ++ ;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> +number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span>  <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number --;</span><br><span class="line">        <span class="comment">//通知其他线程我-1完毕了</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> +number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者消费者问题：两个还好，但是到了三个或者四个就会产生问题</p><p>面试常问： 单例模式，排序算法，生产者消费者问题，死锁</p><p>问题存在：A,B,C,D四个线程的情况下出现问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程A进行加</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    date.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    date.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    date.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    date.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>A=&gt;1<br>C=&gt;0<br>B=&gt;1<br>A=&gt;2<br>B=&gt;3<br>C=&gt;2<br>C=&gt;1<br>C=&gt;0<br>B=&gt;1<br>A=&gt;2<br>B=&gt;3<br>C=&gt;2<br>B=&gt;3<br>A=&gt;4<br>D=&gt;3<br>D=&gt;2<br>D=&gt;1<br>D=&gt;0<br>A=&gt;1<br>D=&gt;0</p></blockquote><p>以上原因是由于线程产生了虚假唤醒，导致出现问题。</p><p>==解决办法，我们将if改成while判断==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Date1</span>&#123;</span><br><span class="line">    <span class="comment">//数字资源锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span>(number != <span class="number">0</span>)&#123;<span class="comment">//if改成while解决线程虚拟唤醒</span></span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通知其他线程我加1完毕了</span></span><br><span class="line">        number ++ ;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> +number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span>  <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span>(number == <span class="number">0</span>)&#123;<span class="comment">//改成while解决线程虚拟唤醒</span></span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number --;</span><br><span class="line">        <span class="comment">//通知其他线程我-1完毕了</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> +number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Lock解决生产者和消费者问题JUC版本的</p></blockquote><p>基本实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加一操作</span></span><br><span class="line">    <span class="comment">/*  condition.await();//等待相当于wait</span></span><br><span class="line"><span class="comment">        condition.signalAll();//唤醒全部*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span> <span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">0</span>)&#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number ++;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+ number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减一操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span> <span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number--;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() +<span class="string">&quot;=&gt;&quot;</span>+ number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>任何一个新的技术绝对不是仅仅覆盖了一起的技术，一定会在原来的技术上进行相应的拓展</p></blockquote><p>Condtion实现精准唤醒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">D</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data2</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data2.printA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data2.printB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data2.printC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data2</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//1A 2B 3C</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//业务，判断 -&gt;执行 -&gt;通知</span></span><br><span class="line">            <span class="keyword">while</span>(number != <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;==&gt;AA&quot;</span> );</span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//业务，判断 -&gt;执行 -&gt;通知</span></span><br><span class="line">            <span class="keyword">while</span> ( number != <span class="number">2</span>)&#123;</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;==&gt;BB&quot;</span>);</span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            condition2.signal();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//业务，判断 -&gt;执行 -&gt;通知</span></span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">3</span>)&#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;==&gt;CC&quot;</span>);</span><br><span class="line">            number =<span class="number">1</span>;</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="什么是锁，如何判断锁对象（8种锁）：">什么是锁，如何判断锁对象（8种锁）：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="comment">//并不是谁先谁后，而是由于锁的存在，谁先拿到谁执行</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone.sendSms();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);<span class="comment">//休眠一秒，比较谁快</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone.sendTel();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendTel</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//创建两个不同的对象，每个对象都 持有一把锁，故而有两把锁</span></span><br><span class="line">        <span class="type">Phone2</span> <span class="variable">phone2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="comment">//并不是谁先谁后，而是由于锁的存在，谁先拿到谁执行</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//存在锁 phone2.sendSms();</span></span><br><span class="line">                phone.sendSms();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);<span class="comment">//休眠一秒，比较谁快</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">           <span class="comment">// phone2.hello();</span></span><br><span class="line">            phone2.sendTel();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span>&#123;</span><br><span class="line">        <span class="comment">//synchronized锁的对象时方法的调用者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendTel</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有加锁，普通方法，故而没有收到锁的限制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;说hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//加了static保证锁住类，而不是之前的对象了</span></span><br><span class="line">        <span class="type">Phone3</span> <span class="variable">phone3</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Phone3</span>();</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//存在锁 phone2.sendSms();</span></span><br><span class="line">                phone.sendSms();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);<span class="comment">//休眠一秒，比较谁快</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// phone2.hello();</span></span><br><span class="line">            phone3.sendTel();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone3</span>&#123;</span><br><span class="line">    <span class="comment">//synchronized锁的对象时方法的调用者</span></span><br><span class="line">    <span class="comment">//static类一加载就有了 此时锁的是类而不是一开始的对象了锁的是Phone3.class</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendTel</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有加锁，普通方法，故而没有收到锁的限制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;说hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone4</span> <span class="variable">phone4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone4</span>();</span><br><span class="line">        <span class="type">Phone2</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                phone4.sendSms();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone2.sendTel();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone4</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new this 具体的一个手机</p><p>static Class 唯一的一个模板</p><h4 id="集合类是不安全的">集合类是不安全的</h4><blockquote><p>List</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.util.ConcurrentModificationException  并发修改异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//并发下ArrayList是不安全的。   java.util.ConcurrentModificationException</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         解决办法，使用Vector可以保证不报错</span></span><br><span class="line"><span class="comment">           List&lt;String&gt; list =  new Vector&lt;&gt;();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         解决方法二，使用Collection将ArrayList转变成安全的，使用锁机制</span></span><br><span class="line"><span class="comment">         List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        解决办法三：使用JUC下的CopyOnWriteArrayList</span></span><br><span class="line"><span class="comment">        List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;(); //JUC里边自带的解决办法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//copyOnWrite写入时复制  COW计算程序领域的一种优化策略</span></span><br><span class="line">        <span class="comment">//多个线程调用的时候，list,读取的时候固定的，写入（覆盖）</span></span><br><span class="line">        <span class="comment">//写入时候避免覆盖，造成数据问题</span></span><br><span class="line">        <span class="comment">// copyOnWrite 比vector nb在哪？</span></span><br><span class="line">       <span class="comment">// List&lt;String&gt; list = new ArrayList&lt;&gt;();</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;(); <span class="comment">//JUC里边自带的解决办法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Set的不安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span> java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 同理可得还是出现并发修改异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  罗小黑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/5 14:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> 2844135670@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//解决办法，还是如以前一样</span></span><br><span class="line">        <span class="comment">// Set&lt;String&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line">        <span class="comment">//方法一使用Collection.synchronizedSet方法解决</span></span><br><span class="line">       <span class="comment">// Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line">        <span class="comment">//方法二使用JUC下的Copy...</span></span><br><span class="line">        <span class="comment">//Set&lt;String &gt; set = new CopyOnWriteArraySet&lt;&gt;();</span></span><br><span class="line">        Set&lt;String &gt; set = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet的底层就是HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//add  set 本质上就是map key 是无法重复的</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e,PRESENT) == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();  <span class="comment">//不可变的值</span></span><br></pre></td></tr></table></figure><blockquote><p>HashMap</p></blockquote><p>回顾hashMap的 简单用法加载因子为0.75</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConcurrentModificationException存在并发修改异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//map 是这样子用的吗？不是，工作中不用HashMap(16,0.75)</span></span><br><span class="line">        <span class="comment">//默认等价干什么？</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">////ConcurrentModificationException存在并发修改异常</span></span><br><span class="line">        <span class="comment">//Map&lt;String ,Object&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line">       <span class="comment">//解决办法一，还是使用        Map&lt;String ,String&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;());</span></span><br><span class="line">        <span class="comment">//Map&lt;String ,String&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决办法二</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Callable重点讲解">Callable重点讲解</h4><ol><li>有返回值</li><li>可以抛出异常</li><li>方法不同，run()/call()</li></ol><blockquote><p>代码测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallabelTest</span> &#123;</span><br><span class="line">    <span class="comment">//两者对比，看到这里实现的Runnable接口没有返回值</span></span><br><span class="line">    <span class="comment">//new Thread (new Runnable()).start();</span></span><br><span class="line">    <span class="comment">//new Thread (new FutureTask&lt;V&gt;()).start();</span></span><br><span class="line">    <span class="comment">//new Thread (new FutureTask&lt;V&gt;(Callable)).start();</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>().start(); <span class="comment">//怎么启动Callable</span></span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">FutureTask</span>(thread);</span><br><span class="line">        <span class="comment">// 适配类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;B&quot;</span>).start(); <span class="comment">//结果会被缓存，效率会高</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">o</span> <span class="operator">=</span> (Integer)futureTask.get();<span class="comment">//获取callbale的返回结果</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Runnable接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现Callable接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对比发现，这里实现的Callable接口是存在返回值的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Call()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>细节：</p><ol><li>存在缓存</li><li>结果可能需要等待，会阻塞</li></ol><h4 id="常用的辅助类（必须掌握）">常用的辅助类（必须掌握）</h4><p>CountDownLatch</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计数器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//总数是6,必须要执行任务的时候，再使用</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>( ()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; \t GO OUT&quot;</span>);</span><br><span class="line">                countDownLatch.countDown(); <span class="comment">//数量减1</span></span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await(); <span class="comment">//等待计数器归零，让向下执行</span></span><br><span class="line">        <span class="comment">//保证数据全部执行之后才将程序结束</span></span><br><span class="line">        <span class="comment">//countDownLatch.countDown(); // -1</span></span><br><span class="line">        System.out.println(<span class="string">&quot;关门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减法计数器：</p><p>原理是数量减一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countDownLatch.countDown(); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countDownLatch.await(); <span class="comment">//等待计数器归零，让向下执行</span></span><br></pre></td></tr></table></figure><p>每次有线程调用countDown()数量1，假设计数器变为0，countDownLatch.await就会被唤醒，继续执行！</p><p>CycliBarrier： 加法计数器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CycliBarrierDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//如果这里的数值没有在for循环中体现的话，就不能结束事件，也就会一直运行，占用程序运行</span></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">6</span>,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;事件完成&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//加法计数器</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span>  <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="comment">//lambda能操作到i吗      --不能直接操作到</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>( ()-&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;收集&quot;</span>+ temp + <span class="string">&quot;个龙珠&quot;</span>); <span class="comment">//我们发现是操作不到i的</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cyclicBarrier.await();  <span class="comment">//等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Semaphore :  信号量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//线程数量;停车位,限流</span></span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="comment">//acquire()得到</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;抢到车位&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;离开车位&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//release()释放</span></span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原理：</p><p>semaphore.acquire();获得，假如已经满了，等待，等待被释放</p><p>semaphore.release();释放，会将当前的信号量释放 +1 ，然后唤醒等待的线程。</p><h4 id="读写锁">读写锁</h4><p>ReadWriteLock:读可以被多个线程读，但写的时候只能是一个线程写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyCacheLock</span> <span class="variable">myCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCacheLock</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span>  <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i; <span class="comment">//lamada表达式中不能直接读取i，只能通过这样的转换</span></span><br><span class="line">            <span class="comment">//只做写入的操作</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                myCache.put(temp + <span class="string">&quot;&quot;</span>,temp +<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只做读取的操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span>  <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i; <span class="comment">//lamada表达式中不能直接读取i，只能通过这样的转换</span></span><br><span class="line">            <span class="comment">//只做写入的操作</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                myCache.get(temp + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//未加锁导致，我在写入1的时候由于线程影响可能会产生1没写入完成，</span></span><br><span class="line"><span class="comment">// 二也进行写入了</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCache</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个是一个存的过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key , Object obj)</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;写入&quot;</span>+ key);</span><br><span class="line">        map.put(key,obj);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;写入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个是一个取的过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;读取&quot;</span>+ key);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  map.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCacheLock</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//private Lock lock = new ReentrantLock(); //普通锁</span></span><br><span class="line">    <span class="comment">//读写锁，存写入的时候，只希望同时只有一个线程写</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="comment">//这个是一个存的过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key , Object obj)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个时候就是进行枷锁了</span></span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;写入&quot;</span>+ key);</span><br><span class="line">            map.put(key,obj);</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;写入成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个是一个取的过程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加上读锁</span></span><br><span class="line">        lock.readLock().lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;读取&quot;</span>+ key);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阻塞队列">阻塞队列</h4><p>队列（FIFO）</p><p>写入的时候：如果队列是满的，那么久必须阻塞等待。</p><p>取出来的时候：如果队列是空的，那么必须阻塞等待生产。</p><p>BlockingQueue</p><p>在线程下，我们使用的时候需要注意阻塞队列是多线程下并发处理，线程池处理。</p><p><strong>学会使用队列</strong></p><p>添加，移除</p><p><strong>四组API</strong>(熟练掌握并使用 )</p><table><thead><tr><th>方式</th><th>抛出异常</th><th>不会抛出异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer</td><td>put</td><td>offer(,)</td></tr><tr><td>移除</td><td>remove</td><td>poll</td><td>take</td><td>poll(,)</td></tr><tr><td>判断队列首位</td><td>element</td><td>peek</td><td>–</td><td>–</td></tr></tbody></table><ol><li>抛出异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BlockingQueueDemo</span> &#123;</span><br><span class="line">   <span class="comment">/* Collections</span></span><br><span class="line"><span class="comment">    List</span></span><br><span class="line"><span class="comment">    Set</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//队列的大小</span></span><br><span class="line">        <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(blockingQueue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        System.out.println(blockingQueue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">        <span class="comment">/*由于我定义的是3个值，故而如果添加四个值的话导致保持</span></span><br><span class="line"><span class="comment">       队列满了，这就说明和我们创建一个数组一样，定于一个大小，超出这个大小就好报错</span></span><br><span class="line"><span class="comment">         抛出异常 Queue full*/</span></span><br><span class="line">       <span class="comment">// System.out.println(blockingQueue.add(&quot;d&quot;));</span></span><br><span class="line">        <span class="comment">//讲队列的所有添加值全部移除，使得队列为空</span></span><br><span class="line">       <span class="comment">// 一次只能移除一个</span></span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        次数队列为空，我们可以发现将会产生问题</span></span><br><span class="line"><span class="comment">        java.util.NoSuchElementException</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(blockingQueue.remove());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>不会抛出异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">       不抛出异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//设置队列的大小</span></span><br><span class="line">       <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">       System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">       System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">       System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">       <span class="comment">//不会抛出异常</span></span><br><span class="line">       System.out.println(blockingQueue.offer(<span class="string">&quot;d&quot;</span>));<span class="comment">//false</span></span><br><span class="line">       System.out.println(blockingQueue.peek()); <span class="comment">//判断队首元素</span></span><br><span class="line">       System.out.println(<span class="string">&quot;===========================&quot;</span>);</span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       System.out.println(blockingQueue.poll());  <span class="comment">//null</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li>阻塞 , 等待</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        等待，阻塞（一直阻塞）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//老样子设置队列大小</span></span><br><span class="line">        <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一直阻塞</span></span><br><span class="line">        blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        blockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        blockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">      <span class="comment">//  blockingQueue.put(&quot;d&quot;);//队列没有位置</span></span><br><span class="line">        System.out.println(blockingQueue.take());</span><br><span class="line">        System.out.println(blockingQueue.take());</span><br><span class="line">        System.out.println(blockingQueue.take());</span><br><span class="line">        <span class="comment">//会导致一直阻塞</span></span><br><span class="line">       <span class="comment">// System.out.println(blockingQueue.take());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>超时等待</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">       超时等待</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">       <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">       blockingQueue.offer(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">       blockingQueue.offer(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">       blockingQueue.offer(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">       <span class="comment">//超时等待啊，超过两秒钟就退出</span></span><br><span class="line">       blockingQueue.offer(<span class="string">&quot;d&quot;</span>,<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       blockingQueue.poll(<span class="number">2</span>,TimeUnit.SECONDS);<span class="comment">//超过2秒钟就退出</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="SynchronousQueue">SynchronousQueue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    同步队列</span></span><br><span class="line"><span class="comment">    和其他的是不一样的，SynchronousQueue不存储元素</span></span><br><span class="line"><span class="comment">    put了一个元素，必须从里边先take出来，否则不能在put进去值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronousQueueDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//同步队列</span></span><br><span class="line">     <span class="type">SynchronousQueue</span> <span class="variable">synchronousQueue</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 1&quot;</span> );</span><br><span class="line">             synchronousQueue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">             System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 2&quot;</span> );</span><br><span class="line">             synchronousQueue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">             System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 3&quot;</span> );</span><br><span class="line">             synchronousQueue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line">     <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">             System.out.println(Thread.currentThread().getName() +<span class="string">&quot;=&gt;&quot;</span>+ synchronousQueue.take() );</span><br><span class="line">             TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">             System.out.println(Thread.currentThread().getName() +<span class="string">&quot;=&gt;&quot;</span>+ synchronousQueue.take());</span><br><span class="line">             TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">             System.out.println(Thread.currentThread().getName()+<span class="string">&quot;=&gt;&quot;</span>+ synchronousQueue.take() );</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="线程池（重点）">线程池（重点）</h4><blockquote><p>池化技术</p></blockquote><p>程序的运行，本质：占用系统的资源，优化资源的使用！=&gt;池化技术</p><p>线程池，连接池，内存池，对象池。。。  创建，销毁，十分浪费资源</p><p>池化技术，事先准备好一些资源，有人要用，就可以来我这里拿，用完之后还给我</p><p><strong>线程池的好处</strong></p><ol><li>降低资源的消耗</li><li>提高响应的速度</li><li>方便管理</li></ol><p>线程复用，可以控制最大的并发数，管理线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Executor 工具类，里边有三大方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// ExecutorService threadPool =  Executors.newSingleThreadExecutor();//创建一个单例的线程池</span></span><br><span class="line">       <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span>  Executors.newCachedThreadPool();<span class="comment">//创建一个缓存的线程池，遇强则强，遇弱则弱</span></span><br><span class="line">       <span class="comment">//ExecutorService threadPool =  Executors.newFixedThreadPool(5);//创建一个固定的线程大小</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 线程使用完毕是要关闭的                                           </span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="comment">//new Thread(()-&gt;&#123;&#125;).start();//常规的创建线程的方式</span></span><br><span class="line">                <span class="comment">//现在线程池的创建方式 threadPool.execute(()-&gt;&#123;&#125;);</span></span><br><span class="line">                threadPool.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;=&gt;&quot;</span> + <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>7大参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE, <span class="comment">//最大21亿</span></span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//我们发现都是调用 ThreadPoolExecutor</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> corePoolSize,  //创建线程创大小</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize, //最大核心线程的大小</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,  //超时了，没人调用就好释放</span></span><br><span class="line"><span class="params">                              TimeUnit unit,//超时单位</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue, //阻塞队列</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory, //线程工厂，创建线程的，一般不用动</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler //拒绝策略)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">                <span class="literal">null</span> :</span><br><span class="line">                AccessController.getContext();</span><br><span class="line">        <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>【强制】线程**池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式，**这样 的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>说明：Executors 返回的线程池对象的弊端如下：</p><p>1）FixedThreadPool 和 SingleThreadPool:</p><p>允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。</p><p>2）CachedThreadPool 和 ScheduledThreadPool:</p><p>允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Executor 工具类，里边有三大方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    七大参数</span></span><br><span class="line"><span class="comment">    四种拒绝策略</span></span><br><span class="line"><span class="comment">    new ThreadPoolExecutor.AbortPolicy() //银行满了，但还有人进去</span></span><br><span class="line"><span class="comment">    new ThreadPoolExecutor.CallerRunsPolicy() //哪来的去哪里</span></span><br><span class="line"><span class="comment">    new ThreadPoolExecutor.DiscardPolicy()  //队列满了不会抛出异常，会丢到任务</span></span><br><span class="line"><span class="comment">    new ThreadPoolExecutor.DiscardOldestPolicy()//队列满了，尝试和最早的去竞争</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// ExecutorService threadPool =  Executors.newSingleThreadExecutor();//创建一个单例的线程池</span></span><br><span class="line">      <span class="comment">// ExecutorService threadPool =  Executors.newCachedThreadPool();//创建一个缓存的线程池，遇强则强，遇弱则弱</span></span><br><span class="line">       <span class="comment">//ExecutorService threadPool =  Executors.newFixedThreadPool(5);//创建一个固定的线程大小</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">            七大参数 ，自定义线程池，一般是工作中使用，因为使用工具了类会出现问题</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy()<span class="comment">//队列满了，尝试和最早的去竞争</span></span><br><span class="line">                );</span><br><span class="line">        <span class="comment">//TODO 线程使用完毕是要关闭的</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="comment">//new Thread(()-&gt;&#123;&#125;).start();//常规的创建线程的方式</span></span><br><span class="line">                <span class="comment">//现在线程池的创建方式 threadPool.execute(()-&gt;&#123;&#125;);</span></span><br><span class="line">                threadPool.execute(()-&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;=&gt;&quot;</span> + <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程池大小如何去设置</p><p>CPU密集型和IO密集型（调优）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        最大线程数应该如何定义？</span></span><br><span class="line"><span class="comment">        IO密集型 十分占用资源 程序 ， 15个类型任务  判断你的程序中判断程序中占用IO的线程</span></span><br><span class="line"><span class="comment">        CPU密集型 ，几核就是几，可以保持CPU的效率最高</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//输出CPU的核心数</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="四大函数接口（必需掌握）">四大函数接口（必需掌握）</h4><p>新时代的程序员需要掌握的lambda表达式，链式编程，函数式接口，Stream流式计算</p><blockquote><p>函数式接口：只有一个方法的接口</p></blockquote><p>比如：Runnable</p><p>简化开发模型，在新版本中大量使用</p><p>比如foreach</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Title 函数式接口</span></span><br><span class="line"><span class="comment"> * @Description  Function</span></span><br><span class="line"><span class="comment"> * 有一个输入参数，有一个输出</span></span><br><span class="line"><span class="comment"> * 只要是 函数式接口，那么我们都可以用lambda 表达式简化</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author  罗小黑</span></span><br><span class="line"><span class="comment"> * @param null</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> * @date 2022/10/7 18:38</span></span><br><span class="line"><span class="comment"> * @email 2844135670@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FunctionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Function</span> <span class="variable">function</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Function</span>&lt;String,String&gt;()&#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//工具类，输出输入的值</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(String o)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">       <span class="type">Function</span> <span class="variable">function1</span> <span class="operator">=</span> (str)-&gt;&#123; <span class="keyword">return</span>  str;&#125;;</span><br><span class="line">        System.out.println(function.apply(<span class="string">&quot;asd&quot;</span>));</span><br><span class="line">        System.out.println(function1.apply(<span class="string">&quot;add&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//断定性接口；有一个输入参数，返回值只能是布尔值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PredicateDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Predicate</span> <span class="variable">predicate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String &gt;()&#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//判断字符串是否为空</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String o)</span> &#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> o.isEmpty();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//注意一下，这里泛型需要定义一下</span></span><br><span class="line">       Predicate&lt;String&gt; predicate1 = (str)-&gt;&#123;<span class="keyword">return</span> str.isEmpty();&#125;;</span><br><span class="line">        System.out.println(predicate.test(<span class="string">&quot;aad&quot;</span>));</span><br><span class="line">        System.out.println(predicate1.test(<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    消费型接口</span></span><br><span class="line"><span class="comment">    只有输入，没有返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">consumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String o)</span> &#123;</span><br><span class="line">                System.out.println(o);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Consumer&lt;String&gt; consumer1 = (str)-&gt;&#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;;</span><br><span class="line">        consumer.accept(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        consumer1.accept(<span class="string">&quot;我喜欢你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//供给型函数接口，没有参数，只有返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SupplierDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Supplier</span> <span class="variable">supplier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Supplier</span> <span class="variable">supplier1</span> <span class="operator">=</span> ()-&gt;&#123;<span class="keyword">return</span> <span class="string">&quot;我还是喜欢你&quot;</span>;&#125;;</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line">        System.out.println(supplier1.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老程序员，泛型，反射，枚举都需要会</p><p>新程序员，lambda表达式，函数式接口，Stream流式计算</p><blockquote><p>什么是流式计算</p></blockquote><p>大数据：存储+计算</p><p>集合，MySql本质上就是存储东西</p><p>计算都应该交给流来处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">流式计算</span></span><br><span class="line"><span class="comment">现有一个题目：要求一分钟内完成此题，只能用一行代码实现</span></span><br><span class="line"><span class="comment">    现有五个用户，</span></span><br><span class="line"><span class="comment">       1.ID必须为偶数</span></span><br><span class="line"><span class="comment">       2.年龄必须要大于23岁</span></span><br><span class="line"><span class="comment">       3.用户名必须转换为大写</span></span><br><span class="line"><span class="comment">       4.用户名字倒叙排序</span></span><br><span class="line"><span class="comment">       5.只输出一个用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="number">12</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="number">25</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="number">23</span>,<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="number">15</span>,<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5</span>,<span class="number">16</span>,<span class="string">&quot;e&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用List集合存储,将集合类对象转换</span></span><br><span class="line">        List&lt;User&gt; list =  Arrays.asList(u1,u2,u3,u4,u5);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//计算交给Steam流</span></span><br><span class="line">        list.stream()</span><br><span class="line">                .filter(u-&gt;&#123;<span class="keyword">return</span>  u.getId()%<span class="number">2</span> ==<span class="number">0</span>;&#125;)<span class="comment">//过滤id为偶数的</span></span><br><span class="line">                .filter(u-&gt;&#123;<span class="keyword">return</span>  u.getAge() &gt; <span class="number">16</span>;&#125;) <span class="comment">//过滤年龄小于16的</span></span><br><span class="line">                .map(u-&gt;&#123;<span class="keyword">return</span> u.getName().toUpperCase();&#125;) <span class="comment">//通过map函数式接口将名字转换为大写</span></span><br><span class="line">                .sorted((uu1,uu2) -&gt; &#123;<span class="keyword">return</span>  uu1.compareTo(uu2);&#125;)<span class="comment">//排序并比较</span></span><br><span class="line">                .limit(<span class="number">1</span>)<span class="comment">//只显示一条数据</span></span><br><span class="line">                .forEach(System.out::println);<span class="comment">//将他遍历出来</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ForkJoin">ForkJoin</h4><p>ForkJoin在JDK1.7中，并行执行任务，提交效率，一般通用于大数据量！</p><p>大数据：Map Reduce（把大任务拆分为小任务）</p><p><strong>ForkJoin特点</strong></p><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">      <span class="comment">// test1();</span></span><br><span class="line">        <span class="comment">//test2();</span></span><br><span class="line">        test3(); <span class="comment">//贼强，速度很快一般大型的时候使用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通程序员</span></span><br><span class="line">    <span class="comment">// Sum=时间4099</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1L</span>; i &lt;= <span class="number">10_0000_0000</span>; i++) &#123;</span><br><span class="line">            sum +=  i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Sum=&quot;</span>+sum+<span class="string">&quot;时间\t&quot;</span> + (end -start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//中级程序员</span></span><br><span class="line">    <span class="comment">//Sum=时间11302</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(<span class="number">1L</span>,<span class="number">10_0000_0000L</span>);</span><br><span class="line">        forkJoinPool.execute(task);</span><br><span class="line">       ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);<span class="comment">//提交任务</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> submit.get();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum=&quot;</span>+<span class="string">&quot;时间&quot;</span> + (end -start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//并行流  时间241</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> LongStream.rangeClosed(<span class="number">0L</span>,<span class="number">10_0000_0000L</span>).parallel().reduce(<span class="number">0</span>,Long::sum);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;Sum=&quot;</span>+sum + <span class="string">&quot;\n时间&quot;</span> + (end -start));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异步回调">异步回调</h4><blockquote><p>Future设计初衷，对将来某个事件结果进行建模</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">异步调用ajax技术，一般上ajax使用原理就异步调用</span></span><br><span class="line"><span class="comment">异步执行：</span></span><br><span class="line"><span class="comment">成功回调</span></span><br><span class="line"><span class="comment">失败回调</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//发送一个请求  ，没有返回值的异步回调</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;RunAsny=&gt;Void&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        completableFuture.get();<span class="comment">//获取执行结果</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">        <span class="comment">//有返回值的异步回调</span></span><br><span class="line">        <span class="comment">//有返回值的是supplyAsync异步回调</span></span><br><span class="line">        <span class="comment">//ajax，成功和失败的回调</span></span><br><span class="line">        <span class="comment">//返回的是错误的信息。</span></span><br><span class="line">      CompletableFuture&lt;Integer&gt; completableFuture1 =   CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot;supplyAsync=&gt;Integer&quot;</span>);</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>  <span class="number">4</span>/<span class="number">0</span>;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1024</span> ;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">      completableFuture1.whenComplete((t,u)-&gt;&#123;</span><br><span class="line">          System.out.println( <span class="string">&quot; --&gt; &quot;</span> +t); <span class="comment">//正确的返回结果</span></span><br><span class="line">          System.out.println( <span class="string">&quot; -- &gt;&quot;</span> + u);  <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">      &#125;).exceptionally((e)-&gt;&#123;</span><br><span class="line">          System.out.println(e.getMessage());</span><br><span class="line">          <span class="keyword">return</span> <span class="number">444</span>; <span class="comment">//可以通过这个标识码获取错误的返回结果</span></span><br><span class="line">      &#125;).get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="JVM初步理解">JVM初步理解</h4><blockquote><p>谈谈你对Volatile的理解</p></blockquote><p>volatile是javaJVM提供的轻量级的同步机制</p><ol><li>保证可见性</li><li><strong>不保证原子性</strong></li><li>静止指令重排</li></ol><p>JMM：java内存模型，不存在的东西，就是一个概念！约定****</p><p><strong>关于JMM的一些同步的约定</strong></p><ol><li>线程解锁前，必须把共享变量<strong>立刻</strong> 刷回主存。</li><li>线程加锁前，必须读取主存中的最新值到工作内存中。</li><li>加锁和解锁是同一把锁。</li></ol><p>线程工作内存，主内存</p><p>jvm的8种操作：</p><ol><li>read - &gt; load</li><li>user -&gt; assign</li><li>write -&gt;store</li><li>lock -&gt; unlock</li></ol><p><strong>内存交互操作有8种，虚拟机实现必须保证每一个操作都是原子的，不可在分的（对于double和long类 型的变量来说，load、store、read和write操作在某些平台上允许例外）</strong></p><blockquote><p>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</p><p>unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量 才可以被其他线程锁定</p><p>read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便 随后的load动作使用</p><p>load （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</p><p>use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机 遇到一个需要使用到变量的值，就会使用到这个指令</p><p>assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变 量副本中</p><p>store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，</p></blockquote><p><strong>以便后续的write使用write （写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内 存的变量中</strong></p><p><strong>JMM对这八种指令的使用，制定了如下规则</strong>：</p><ul><li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须 write</li><li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li><li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li><li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量 实施use、store操作之前，必须经过assign和load操作</li><li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解 锁</li><li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前， 必须重新load或assign操作初始化变量的值</li><li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量 对一个变量进行unlock操作之前，必须把此变量同步回主内存</li></ul><h4 id="Volatile">Volatile</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在这个例子中我们发现，当执行线程的时候，num =0是一开始的时候，之后我们将</span></span><br><span class="line"><span class="comment">改成num = 1，但是程序输出1却没有终止</span></span><br><span class="line"><span class="comment">这里原因是，我们更改了num的值，但是线程B知道而线程A却不知道</span></span><br><span class="line"><span class="comment">也就是main线程知道，但是Thread线程却是不知道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num =<span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>验证特性</p></blockquote><ul><li>保证可见性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在这个例子中我们发现，当执行线程的时候，num =0是一开始的时候，之后我们将</span></span><br><span class="line"><span class="comment">改成num = 1，但是程序输出1却没有终止</span></span><br><span class="line"><span class="comment">这里原因是，我们更改了num的值，但是线程B知道而线程A却不知道</span></span><br><span class="line"><span class="comment">也就是main线程知道，但是Thread线程却是不知道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileDemo</span> &#123;</span><br><span class="line">    <span class="comment">//不加volatile就会陷入无限循环</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span>   <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>( ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        num =<span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>不保证原子性：不可分割</li></ul><p>原子性： 线程A在执行任务的时候，不能被打扰到，也不能被分割，要么同时成功要么同时失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不保证原子性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileDemo2</span> &#123;</span><br><span class="line">    <span class="comment">//这个时候我们可以发现，volatile无法保证原子性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span>   <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized可保证为结果为20000</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        num ++; <span class="comment">// 不是原子性</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//理论上num 为20000</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        java中默认两个线程，第一个main,第二个GC线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不保证原子性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileDemo2</span> &#123;</span><br><span class="line">    <span class="comment">//这个时候我们可以发现，volatile无法保证原子性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span>   <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//synchronized可保证为结果为20000</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//我们此时发现，lock也可以保证结果为20000</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            num ++;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//理论上num 为20000</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        java中默认两个线程，第一个main,第二个GC线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  &quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>如果不加Lock和synochronized如何保证原子性。</strong></p><p>使用原子类解决原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不保证原子性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileDemo2</span> &#123;</span><br><span class="line">    <span class="comment">//这个时候我们可以发现，volatile无法保证原子性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    private volatile   static  int num = 0;</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span>  <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized可保证为结果为20000</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//我们此时发现，lock也可以保证结果为20000</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/*    lock.lock();</span></span><br><span class="line"><span class="comment">        try&#123;</span></span><br><span class="line"><span class="comment">            num ++;</span></span><br><span class="line"><span class="comment">        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;finally &#123;</span></span><br><span class="line"><span class="comment">            lock.unlock();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        num.getAndIncrement(); <span class="comment">//AtomicInteger +1方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//理论上num 为20000</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        java中默认两个线程，第一个main,第二个GC线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount()&gt;<span class="number">2</span>)&#123;</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;  &quot;</span> + num);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这些类的底层都是和操作系统挂钩，在内存中修改中，Unsafe是一个特殊的存在。</p><blockquote><p>指令重排</p></blockquote><p>什么是指令重排：你写的程序，计算机并不是按照你写的程序那样去执行的。</p><p>源代码 - –  编译器里边的优化的重排 ------  指令并行也可能会重排 –  内存系统也会重排-----执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">//2</span></span><br><span class="line">x = x+ <span class="number">5</span>;<span class="comment">// 3</span></span><br><span class="line">y = x +x;  <span class="comment">// 4</span></span><br><span class="line"><span class="comment">//我们希望的顺序是 1234   可能是 1234  2134 1324 但不可能是 4123</span></span><br></pre></td></tr></table></figure><p>可能造成影响的结果： a b x y 这四个值 默认都是 0</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>x =a</td><td>y =b</td></tr><tr><td>b =1</td><td>a = 2</td></tr><tr><td></td><td></td></tr></tbody></table><p>正常的结果 x = 0; y = 0;</p><p><strong>volatile可以避免指令重排</strong></p><p>内存屏障，CPU指令，作用：</p><ol><li>保证特定的操作执行顺序</li><li>保证某些变量的内存可见性（利用这些特性Volatile实现可见性）</li></ol><p>volatile可保证可见性，不能保证原子性，由于内存屏障，可以避免指令重排的现象产生。</p><p><strong>内存屏障使用最多的场景是单例模式</strong></p><h4 id="单例模式">单例模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleDemo</span> &#123;</span><br><span class="line">    <span class="comment">//饿汉式单例这些数据都没有使用，但是被创建的时候还是占用很多内存</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">byte</span>[] d1 =  <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>* <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">byte</span>[] d2 =  <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>* <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">byte</span>[] d3 =  <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>* <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">byte</span>[] d4 =  <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>* <span class="number">1024</span>];</span><br><span class="line">    <span class="comment">//无参构造 只要是单例，我们都要创建一个私有化构造</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="title function_">SingleDemo</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单例模式的调用方式</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="type">SingleDemo</span> <span class="variable">singleDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleDemo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  SingleDemo <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  singleDemo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Title 懒汉式单例模式</span></span><br><span class="line"><span class="comment"> * @Description </span></span><br><span class="line"><span class="comment"> * @author  罗小黑</span></span><br><span class="line"><span class="comment"> * @param null</span></span><br><span class="line"><span class="comment"> * @return </span></span><br><span class="line"><span class="comment"> * @date 2022/10/9 0:04</span></span><br><span class="line"><span class="comment"> * @email 2844135670@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyDemo</span> &#123;</span><br><span class="line">    <span class="comment">//不说二话直接整上构造器,只要是单例模式，构造器私有</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="title function_">LazyDemo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//先创建一个lazy对象，为保证不会产生指令重排，我们需要在这加入volatile</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">volatile</span> <span class="keyword">static</span>  LazyDemo lazyDemo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Title 双重检测模式下的懒汉式单例，DCL懒汉式</span></span><br><span class="line"><span class="comment"> * @Description</span></span><br><span class="line"><span class="comment"> * @author  罗小黑</span></span><br><span class="line"><span class="comment"> * @return com.xh.juc.day06.Single.LazyDemo</span></span><br><span class="line"><span class="comment"> * @date 2022/10/9 0:15</span></span><br><span class="line"><span class="comment"> * @email 2844135670@qq.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="comment">//重点是getInstance在单例模式中我们直接使用的是getInstance()</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  LazyDemo <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//解决办法之一最常用的加锁。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lazyDemo == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyDemo.class)&#123;</span><br><span class="line">                lazyDemo = <span class="keyword">new</span> <span class="title class_">LazyDemo</span>(); <span class="comment">//不是一个原子性操作</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    有三步：</span></span><br><span class="line"><span class="comment">           1. 分配内存空间</span></span><br><span class="line"><span class="comment">           2. 执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">           3.把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">           这个时候可能会产生指令重排，会出现故障</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果传如的对象为空，那么我们就需要将对爱心给他赋予</span></span><br><span class="line">            <span class="comment">//   lazyDemo = new LazyDemo();</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyDemo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//问题，单线程下没问题，但是多线性下出现问题.</span></span><br><span class="line">    <span class="comment">// 我们发现在多线程下会产生不一样的结果，而且也不会创建10个线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                LazyDemo.getInstance();</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态内部类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Holder</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Holder <span class="title function_">getInstace</span><span class="params">()</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Holder</span> <span class="variable">HOLDER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Holder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例不安全，反射</span></span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"> <span class="comment">// enum 是一个什么？ 本身也是一个Class类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingle</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123; </span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">instance1</span> <span class="operator">=</span> EnumSingle.INSTANCE; </span><br><span class="line">        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class,<span class="type">int</span>.class); </span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">instance2</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line">        <span class="comment">// NoSuchMethodException: com.kuang.single.EnumSingle.&lt;init&gt;() </span></span><br><span class="line">        System.out.println(instance1);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CAS">CAS</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="comment">//CAS compareAndSet ： 比较并交换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2022</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//期望，更新</span></span><br><span class="line">       <span class="comment">// public final boolean compareAndSet(int expect,int update);</span></span><br><span class="line">        <span class="comment">//如果我期望的值达到了，那么就更新，否则不更新 CAS是CPU的调度</span></span><br><span class="line">        <span class="comment">//java 无法操作内存，java可以调用C++ native  C++可以操作内存，java的后门，可以操作这个类（Unsafe）调度</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2022</span>, <span class="number">2123</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS:比较当前工作内存中的值和主内存的值，如果这个值是期望的，那么执行操作，如果不是就一直循环</p><p><strong>缺点:</strong></p><ol><li>循环会耗时</li><li>一次性只能保证一个共享变量的原子性</li><li>ABA问题</li></ol><blockquote><p>CAS:ABA问题（狸猫换太子）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="comment">//CAS compareAndSet ： 比较并交换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2022</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//期望，更新</span></span><br><span class="line">       <span class="comment">// public final boolean compareAndSet(int expect,int update);</span></span><br><span class="line">        <span class="comment">//如果我期望的值达到了，那么就更新，否则不更新 CAS是CPU的调度</span></span><br><span class="line">        <span class="comment">//java 无法操作内存，java可以调用C++ native  C++可以操作内存，java的后门，可以操作这个类（Unsafe）调度</span></span><br><span class="line">        <span class="comment">//(A)</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2022</span>, <span class="number">2123</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"><span class="comment">// B</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2123</span>, <span class="number">2022</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    <span class="comment">//A    </span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2022</span>, <span class="number">2123</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原子引用（ABA问题）">原子引用（ABA问题）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//乐观锁和悲观锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//注意如果泛型是包装类，需要注意引用类型和范围Integer的范围是-128 到 127</span></span><br><span class="line">        <span class="comment">//正常的应用的时候，我们使用的都是对象，而不是直接使用Integer的等，</span></span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();<span class="comment">//获取版本号</span></span><br><span class="line">            System.out.println( Thread.currentThread().getName()+ <span class="string">&quot; &quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(</span><br><span class="line">                    <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line">                    atomicStampedReference.getStamp(),</span><br><span class="line">                    atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println( Thread.currentThread().getName()+ <span class="string">&quot; -A2- &quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(</span><br><span class="line">                    <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">                    atomicStampedReference.getStamp(),</span><br><span class="line">                    atomicStampedReference.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println( Thread.currentThread().getName()+ <span class="string">&quot; -A3- &quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较AB两个线程的版本号</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicStampedReference.getStamp();<span class="comment">//获取版本号</span></span><br><span class="line">            System.out.println( Thread.currentThread().getName()+ <span class="string">&quot; &quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(atomicStampedReference.compareAndSet(<span class="number">2020</span>, <span class="number">6666</span>,</span><br><span class="line">                    stamp, stamp + <span class="number">1</span>));</span><br><span class="line">            System.out.println( Thread.currentThread().getName()+ <span class="string">&quot; -B2- &quot;</span> + atomicStampedReference.getStamp());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁机制的了解">锁机制的了解</h4><h5 id="公平锁（包含读写锁）">公平锁（包含读写锁）</h5><p>公平锁：非常公平，不能插队，必须先来先到</p><p>非公平锁：java自带默认非公平锁，可以插队</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java源码</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//我们发现，这里默认就是不公平锁</span></span><br><span class="line">        sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 公平锁 &#123;</span><br><span class="line">    <span class="comment">//创建一个公平锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//synchronized</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                phone.sms();</span><br><span class="line">            &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">            <span class="keyword">new</span>  <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                phone.sms();</span><br><span class="line">            &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sms</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">        call();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">synchronized</span>  <span class="keyword">void</span>  <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone2</span> <span class="variable">phone2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone2.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            phone2.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        <span class="type">Test</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            te.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            te.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">sms</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;发消息&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">sms</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;发消息&quot;</span>);</span><br><span class="line">        call();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="可重入锁">可重入锁</h5><p>可重入锁是<strong>某个线程已经获得某个锁，可以再次获取锁而不会出现死锁</strong>。再次获取锁的时候会判断当前线程是否是已经加锁的线程，如果是<strong>对锁的次数+1，释放锁的时候加了几次锁，就需要释放几次锁</strong>。</p><p>代码中的锁的递归只是锁的一种表现及证明形式，除了这种形式外，还有另一种表现形式。同一个线程在没有释放锁的情况下多次调用一个加锁方法，如果成功，则也说明是可重入锁。</p><h5 id="自旋锁">自旋锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">自旋锁:</span></span><br><span class="line"><span class="comment">我们自己定义一个自旋锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 自旋锁 &#123;</span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicStampedReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //加锁</span></span><br><span class="line"><span class="comment">    所谓自旋锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">myLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt; MY Lock&quot;</span>);</span><br><span class="line">        <span class="comment">//自旋开始</span></span><br><span class="line">        <span class="keyword">while</span> (!atomicStampedReference.compareAndSet(<span class="literal">null</span>,thread))&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     解锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myUnLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt; MY UnLock&quot;</span>);</span><br><span class="line">        atomicStampedReference.compareAndSet(thread,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_Self</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        一般情况下使用的方式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ReentrantLock reentrantLock = new ReentrantLock();</span></span><br><span class="line"><span class="comment">        reentrantLock.lock();</span></span><br><span class="line"><span class="comment">        reentrantLock.unlock();</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        使用我们自定义下的方式</span></span><br><span class="line"><span class="comment">        我们使用的是CAS比较的也就是compareAndSet</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        自旋锁  t = <span class="keyword">new</span> 自旋锁();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            t.myLock();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                t.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            t.myLock();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                t.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="悲观锁">悲观锁</h5><p>总是以悲观的角度来看问题，当用户拿到锁之后，认为用户会修改</p><h5 id="乐观锁">乐观锁</h5><p>总是以乐观的方式看待问题，当用户每次拿到锁后，都不会对数据进行修改</p><h5 id="死锁">死锁</h5><p>两个线程强制一个资源造成的两个线程处于等待状态，在不经过人的干预的情况之下一直会保持这种状态，我们称之为死锁。</p><p>如何去避免死锁（避免死锁产生的条件）</p><blockquote><p>如何去判断线程产生死锁问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 死锁&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockA</span> <span class="operator">=</span> <span class="string">&quot;lockA&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockB</span> <span class="operator">=</span> <span class="string">&quot;lockB&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyTest</span>(lockA,lockB),<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyTest</span>(lockB,lockA),<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">MyTest</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  String lockA;</span><br><span class="line">    <span class="keyword">private</span>  String lockB;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyTest</span><span class="params">(String lockA, String lockB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lockA = lockA;</span><br><span class="line">        <span class="built_in">this</span>.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;Lock A &quot;</span>  + <span class="string">&quot;=&gt; get &quot;</span> + lockB);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//我们让线程A休眠2秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;Lock B &quot;</span> + lockB + <span class="string">&quot;=&gt; get &quot;</span> + lockA);</span><br><span class="line">                <span class="comment">//我们让线程A休眠2秒</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>使用   <code>jps -l</code>   定位进程号</p></li><li><p>使用    <code>jstack   进程号</code>  查看进程的信息 ,找到死锁问题</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">PS E:<span class="keyword">\IDEAProgram</span><span class="keyword">\juc</span>-learning&gt; jstack 2400</span><br><span class="line">2022-10-09 21:13:37</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.261-b12 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;DestroyJavaVM&quot; <span class="params">#1</span>4 prio=5 os<span class="built_in">_</span>prio=0 tid=0x000001f454e10800 nid=0x31ec wait</span><br><span class="line">ing on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;B&quot; <span class="params">#1</span>3 prio=5 os<span class="built_in">_</span>prio=0 tid=0x000001f470d10800 nid=0x3690 waiting for moni</span><br><span class="line">tor entry [0x000000870e7ff000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at com.xh.juc.day07.锁.MyTest.run(死锁.java:40)</span><br><span class="line">        - waiting to lock &lt;0x0000000775b9f8a0&gt; (a java.lang.String)        </span><br><span class="line">        - locked &lt;0x0000000775b9f8d8&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">&quot;A&quot; <span class="params">#1</span>2 prio=5 os<span class="built_in">_</span>prio=0 tid=0x000001f470d03000 nid=0x39e0 waiting for moni</span><br><span class="line">tor entry [0x000000870e6ff000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at com.xh.juc.day07.锁.MyTest.run(死锁.java:40)</span><br><span class="line">        - waiting to lock &lt;0x0000000775b9f8d8&gt; (a java.lang.String)        </span><br><span class="line">        - locked &lt;0x0000000775b9f8a0&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">&quot;Service Thread&quot; <span class="params">#1</span>1 daemon prio=9 os<span class="built_in">_</span>prio=0 tid=0x000001f470ba4000 nid=0x3</span><br><span class="line">ea0 runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C1 CompilerThread3&quot; <span class="params">#1</span>0 daemon prio=9 os<span class="built_in">_</span>prio=2 tid=0x000001f470af0000 nid</span><br><span class="line">=0x3f94 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread2&quot; <span class="params">#9</span> daemon prio=9 os<span class="built_in">_</span>prio=2 tid=0x000001f470aef000 nid=</span><br><span class="line">0x3168 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread1&quot; <span class="params">#8</span> daemon prio=9 os<span class="built_in">_</span>prio=2 tid=0x000001f470ade000 nid=</span><br><span class="line">0xd1c waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread0&quot; <span class="params">#7</span> daemon prio=9 os<span class="built_in">_</span>prio=2 tid=0x000001f470add000 nid=</span><br><span class="line">0x1d30 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Monitor Ctrl-Break&quot; <span class="params">#6</span> daemon prio=5 os<span class="built_in">_</span>prio=0 tid=0x000001f470adb000 nid=</span><br><span class="line">0x268c runnable [0x000000870dffe000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116</span><br><span class="line">)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:171)     </span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:141)     </span><br><span class="line">        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)      </span><br><span class="line">        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)       </span><br><span class="line">        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</span><br><span class="line">        - locked &lt;0x0000000775c8d1c0&gt; (a java.io.InputStreamReader)        </span><br><span class="line">        at java.io.InputStreamReader.read(InputStreamReader.java:184)      </span><br><span class="line">        at java.io.BufferedReader.fill(BufferedReader.java:161)</span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:324)        </span><br><span class="line">        - locked &lt;0x0000000775c8d1c0&gt; (a java.io.InputStreamReader)        </span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:389)        </span><br><span class="line">        at com.intellij.rt.execution.application.AppMainV2<span class="built_in">$</span>1.run(AppMainV2.</span><br><span class="line">java:49)</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; <span class="params">#5</span> daemon prio=5 os<span class="built_in">_</span>prio=2 tid=0x000001f46edb9800 nid=0xd</span><br><span class="line">64 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Signal Dispatcher&quot; <span class="params">#4</span> daemon prio=9 os<span class="built_in">_</span>prio=2 tid=0x000001f46ee1e000 nid=0</span><br><span class="line">x10e8 runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Finalizer&quot; <span class="params">#3</span> daemon prio=8 os<span class="built_in">_</span>prio=1 tid=0x000001f454eb7000 nid=0x2ee0 in</span><br><span class="line"> Object.wait() [0x000000870dcfe000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x0000000775a08ee0&gt; (a java.lang.ref.ReferenceQueue<span class="built_in">$</span>L</span><br><span class="line">ock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)    </span><br><span class="line">        - locked &lt;0x0000000775a08ee0&gt; (a java.lang.ref.ReferenceQueue<span class="built_in">$</span>Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)    </span><br><span class="line">        at java.lang.ref.Finalizer<span class="built_in">$</span>FinalizerThread.run(Finalizer.java:216) </span><br><span class="line"></span><br><span class="line">&quot;Reference Handler&quot; <span class="params">#2</span> daemon prio=10 os<span class="built_in">_</span>prio=2 tid=0x000001f454eb0000 nid=</span><br><span class="line">0x35e0 in Object.wait() [0x000000870dbff000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x0000000775a06c00&gt; (a java.lang.ref.Reference<span class="built_in">$</span>Lock) </span><br><span class="line">        at java.lang.Object.wait(Object.java:502)</span><br><span class="line">        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)    </span><br><span class="line">        - locked &lt;0x0000000775a06c00&gt; (a java.lang.ref.Reference<span class="built_in">$</span>Lock)     </span><br><span class="line">        at java.lang.ref.Reference<span class="built_in">$</span>ReferenceHandler.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os<span class="built_in">_</span>prio=2 tid=0x000001f454ead800 nid=0x1f50 runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread<span class="params">#0</span> (ParallelGC)&quot; os<span class="built_in">_</span>prio=0 tid=0x000001f454e26000 nid=0x3f00</span><br><span class="line"> runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread<span class="params">#1</span> (ParallelGC)&quot; os<span class="built_in">_</span>prio=0 tid=0x000001f454e28800 nid=0x3eb0</span><br><span class="line"> runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread<span class="params">#2</span> (ParallelGC)&quot; os<span class="built_in">_</span>prio=0 tid=0x000001f454e29800 nid=0x3e84</span><br><span class="line"> runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread<span class="params">#3</span> (ParallelGC)&quot; os<span class="built_in">_</span>prio=0 tid=0x000001f454e2d000 nid=0x3fb8</span><br><span class="line"> runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread<span class="params">#4</span> (ParallelGC)&quot; os<span class="built_in">_</span>prio=0 tid=0x000001f454e32000 nid=0x3ca0</span><br><span class="line"> runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread<span class="params">#5</span> (ParallelGC)&quot; os<span class="built_in">_</span>prio=0 tid=0x000001f454e32800 nid=0x3df8</span><br><span class="line"> runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread<span class="params">#6</span> (ParallelGC)&quot; os<span class="built_in">_</span>prio=0 tid=0x000001f454e35800 nid=0x3630</span><br><span class="line"> runnable</span><br><span class="line"></span><br><span class="line">&quot;GC task thread<span class="params">#7</span> (ParallelGC)&quot; os<span class="built_in">_</span>prio=0 tid=0x000001f454e36800 nid=0x8ec </span><br><span class="line">runnable</span><br><span class="line"></span><br><span class="line">&quot;VM Periodic Task Thread&quot; os<span class="built_in">_</span>prio=2 tid=0x000001f470be6000 nid=0x21f4 waiti</span><br><span class="line">ng on condition</span><br><span class="line"></span><br><span class="line">JNI global references: 12</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line">&quot;B&quot;:</span><br><span class="line">  waiting to lock monitor 0x000001f454eb3c68 (object 0x0000000775b9f8a0, a </span><br><span class="line">java.lang.String),</span><br><span class="line">  which is held by &quot;A&quot;</span><br><span class="line">&quot;A&quot;:</span><br><span class="line">  waiting to lock monitor 0x000001f454eb65a8 (object 0x0000000775b9f8d8, a </span><br><span class="line">java.lang.String),</span><br><span class="line">  which is held by &quot;B&quot;</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">&quot;B&quot;:</span><br><span class="line">        at com.xh.juc.day07.???.MyTest.run(死锁.java:40)</span><br><span class="line">        - waiting to lock &lt;0x0000000775b9f8a0&gt; (a java.lang.String)        </span><br><span class="line">        - locked &lt;0x0000000775b9f8d8&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">&quot;A&quot;:</span><br><span class="line">        at com.xh.juc.day07.锁.MyTest.run(死锁.java:40)</span><br><span class="line">        - waiting to lock &lt;0x0000000775b9f8d8&gt; (a java.lang.String)        </span><br><span class="line">        - locked &lt;0x0000000775b9f8a0&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何检测死锁：</p><ol><li>查看日志</li><li>堆栈信息</li></ol></li></ol><h5 id="轻量锁">轻量锁</h5><p>① 当一个线程要进入同步块时，首先会创建一个Lock Record（锁记录）对象，该对象包含Displaced Mark Word和Owner。<br>② 锁记录对象会拷贝对象头中的Mark Word，即Displaced Mark Word。<br>③ 拷贝成功后，锁记录将owner指向对象头，然后尝试通过cas将对象头的Mark Word更改为指向Lock Record的指针，并且将对象Mark Word的锁标志位设置为“00”。<br>④ 如果更新成功，则表示该对象处于轻量级锁定状态。如果失败，那么首先检测是否是可重入，如果可重入则进入执行。<br>⑤ 如果不可重入，则膨胀为重量锁。（有的文章说会进行自旋，有的说不进行自旋只要存在竞争就膨胀为重量锁，美团说当只有一个等待线程时，该线程自旋。当超过一定次数或者超过一个自旋线程时直接膨胀为重量锁）。<br>⑥ 释放锁时，使用cas对象头的Mark Word恢复，如果cas成功，则解锁成功。如果cas失败，则进入重量锁解锁流程。</p><h5 id="重量锁">重量锁</h5><p>JDK1.6之前，锁没被优化，synchronized使用的是重量锁。重量锁需要操作系统帮忙，所以需要进行用户态到内核态的切换，同时还会带来线程上下文切换。<br>原理</p><p><img src="F:%5C%E4%B8%89%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%5C%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%5CJUC%5C1665323626063.png" alt="1665323626063"></p><p>Monitor对象分为3部分组成：Owner、EntryList和WaitSet<br>① JVM会创建一个Monitor对象，然后将锁对象的对象头中MarkWord改变成指向Monitor对象的指针。<br>② 当其中一个线程抢占到锁后，Monitor的Owner会置为该线程id，只能有一个。<br>③ 其余没抢到的，会被放置到EntryList中阻塞。<br>④ 进入WAITING状态的线程，会被放在WaitSet中。</p><h5 id="排他锁">排他锁</h5><p>排他锁（EXclusive Lock），又称X锁、独占锁、写锁。针对行锁。<br>当有事务对数据加写锁后，其他事务不能再对锁定的数据加任何锁，又因为InnoDB对select语句默认不加锁，所以其他事务除了不能写操作外，照样是允许读的（尽管不允许加读锁）。</p><p>📢主要为了在事务进行写操作时，不允许其他事务修改。</p><h5 id="偏向锁">偏向锁</h5><p>轻量锁每次重入和退出时还是会执行cas操作，并且要创建锁记录对象。如果在大多数情况下，锁总是由一个线程多次获得，不存在多线程竞争，就可以使用偏向锁优化。<br>原理<br>① 第一次使用CAS将线程ID设置到对象的Mark Word。<br>② 以后该线程进入同步块时，不需要CAS进行加锁，只会往当前线程的栈中添加一条Displaced Mark Word为空的Lock Record中，用来统计重入的次数。</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05Spring Boot 的实际开发中生产就绪功能</title>
      <link href="/posts/f95521c8.html"/>
      <url>/posts/f95521c8.html</url>
      
        <content type="html"><![CDATA[<p><a id="production-ready"></a></p><h1>五、Spring Boot Actuator: 生产就绪功能</h1><p>Spring Boot 包含许多其他功能，可帮助你在将应用程序推送到生产环境时监控和管理应用程序。你可以选择使用 HTTP 端点或 JMX 来管理和监控应用程序。审计、健康和指标收集也可以自动应用于你的应用程序。</p><p><a id="production-ready-enabling"></a></p><h2 id="52、启用生产就绪功能">52、启用生产就绪功能</h2><p><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator"><code>spring-boot-actuator</code></a> 模块提供了 Spring Boot 的所有生产就绪功能。启用这些功能的最简单方法是添加 <code>spring-boot-starter-actuator</code> starter 到依赖中。</p><blockquote><p><strong>Actuator 的定义</strong></p><p>Actuator 是制造术语，指的是用于移动或控制某物的机械装置。Actuator 可以通过一个小的变化产生大量的运动。</p></blockquote><p>要将 actuator 添加到基于 Maven 的项目，请添加以下 starter 依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于 Gradle，请使用以下声明：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile(<span class="string">&quot;org.springframework.boot:spring-boot-starter-actuator&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="production-ready-endpoints"></a></p><h2 id="53、端点">53、端点</h2><p>通过 Actuator 端点，你可以监控应用程序并与之交互。Spring Boot 包含许多内置端点，也允许你添加自己的端点。例如，<code>health</code> 端点提供基本的应用程序健康信息。</p><p>可以<a href="#production-ready-endpoints-enabling-endpoints">启用或禁用</a>每个端点。它可控制当其 bean 存在于应用程序上下文中是否创建端点。要进行远程访问，必须<a href="#production-ready-endpoints-exposing-endpoints">通过 JMX 或 HTTP 暴露端点</a>。大多数应用程序选择 HTTP 方式，端点的 ID 以及 <code>/actuator</code> 的前缀映射到一个 URL。例如，默认情况下，<code>health</code> 端点映射到 <code>/actuator/health</code>。</p><p>可以使用以下与技术无关的端点：</p><table><thead><tr><th>ID</th><th>描述</th><th style="text-align:center">默认启用</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>暴露当前应用程序的审计事件信息。</td><td style="text-align:center">是</td></tr><tr><td><code>beans</code></td><td>显示应用程序中所有 Spring bean 的完整列表。</td><td style="text-align:center">是</td></tr><tr><td><code>caches</code></td><td>暴露可用的缓存。</td><td style="text-align:center">是</td></tr><tr><td><code>conditions</code></td><td>显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因。</td><td style="text-align:center">是</td></tr><tr><td><code>configprops</code></td><td>显示所有 <code>@ConfigurationProperties</code> 的校对清单。</td><td style="text-align:center">是</td></tr><tr><td><code>env</code></td><td>暴露 Spring <code>ConfigurableEnvironment</code> 中的属性。</td><td style="text-align:center">是</td></tr><tr><td><code>flyway</code></td><td>显示已应用的 Flyway 数据库迁移。</td><td style="text-align:center">是</td></tr><tr><td><code>health</code></td><td>显示应用程序健康信息</td><td style="text-align:center">是</td></tr><tr><td><code>httptrace</code></td><td>显示 HTTP 追踪信息（默认情况下，最后 100 个 HTTP 请求/响应交换）。</td><td style="text-align:center">是</td></tr><tr><td><code>info</code></td><td>显示应用程序信息。</td><td style="text-align:center">是</td></tr><tr><td><code>integrationgraph</code></td><td>显示 Spring Integration 图。</td><td style="text-align:center">是</td></tr><tr><td><code>loggers</code></td><td>显示和修改应用程序中日志记录器的配置。</td><td style="text-align:center">是</td></tr><tr><td><code>liquibase</code></td><td>显示已应用的 Liquibase 数据库迁移。</td><td style="text-align:center">是</td></tr><tr><td><code>metrics</code></td><td>显示当前应用程序的指标度量信息。</td><td style="text-align:center">是</td></tr><tr><td><code>mappings</code></td><td>显示所有 <code>@RequestMapping</code> 路径的整理清单。</td><td style="text-align:center">是</td></tr><tr><td><code>scheduledtasks</code></td><td>显示应用程序中的调度任务。</td><td style="text-align:center">是</td></tr><tr><td><code>sessions</code></td><td>允许从 Spring Session 支持的会话存储中检索和删除用户会话。当使用 Spring Session 的响应式 Web 应用程序支持时不可用。</td><td style="text-align:center">是</td></tr><tr><td><code>shutdown</code></td><td>正常关闭应用程序。</td><td style="text-align:center">否</td></tr><tr><td><code>threaddump</code></td><td>执行线程 dump。</td><td style="text-align:center">是</td></tr></tbody></table><p>如果你的应用程序是 Web 应用程序（Spring MVC、Spring WebFlux 或 Jersey），则可以使用以下附加端点：</p><table><thead><tr><th>ID</th><th>描述</th><th style="text-align:center">默认启用</th></tr></thead><tbody><tr><td><code>heapdump</code></td><td>返回一个 <code>hprof</code> 堆 dump 文件。</td><td style="text-align:center">是</td></tr><tr><td><code>jolokia</code></td><td>通过 HTTP 暴露 JMX bean（当 Jolokia 在 classpath 上时，不适用于 WebFlux）。</td><td style="text-align:center">是</td></tr><tr><td><code>logfile</code></td><td>返回日志文件的内容（如果已设置 <code>logging.file</code> 或 <code>logging.path</code> 属性）。支持使用 HTTP <code>Range</code> 头来检索部分日志文件的内容。</td><td style="text-align:center">是</td></tr><tr><td><code>prometheus</code></td><td>以可以由 Prometheus 服务器抓取的格式暴露指标。</td><td style="text-align:center">是</td></tr></tbody></table><p>想了解有关 Actuator 端点及其请求和响应格式的更多信息，请参阅单独的 API 文档（<a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/actuator-api//html">HTML</a> 或 <a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/actuator-api//pdf/spring-boot-actuator-web-api.pdf">PDF</a>）。</p><p><a id="production-ready-endpoints-enabling-endpoints"></a></p><h3 id="53-1、启用端点">53.1、启用端点</h3><p>默认情况下，Actuator 启用除 <code>shutdown</code> 之外的所有端点。要配置端点的启用，请使用其 <code>management.endpoint.&lt;id&gt;.enabled</code> 属性。以下示例展示了如何启用关闭端点：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoint.shutdown.enabled</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果你希望端点启用是选择性加入而不是选择性退出，请将 <code>management.endpoints.enabled-by-default</code> 属性设置为 <code>false</code>，并使用各个端点的 <code>enabled</code> 属性重新加入。以下示例启用 <code>info</code> 端点并禁用所有其他端点：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.enabled-by-default</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">management.endpoint.info.enabled</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>已完全从应用程序上下文中删除已禁用的端点。如果只想更改端点所暴露的技术，请改用 <a href="#production-ready-endpoints-exposing-endpoints"><code>include</code> 和 <code>exclude</code> 属性</a>。</p></blockquote><p><a id="production-ready-endpoints-exposing-endpoints"></a></p><h3 id="53-2、暴露端点">53.2、暴露端点</h3><p>由于端点可能包含敏感信息，因此应仔细考虑何时暴露它们。下表显示了内置端点和默认暴露情况：</p><table><thead><tr><th>ID</th><th>JMX</th><th style="text-align:center">Web</th></tr></thead><tbody><tr><td><code>auditevents</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>beans</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>caches</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>conditions</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>configprops</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>env</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>flyway</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>health</code></td><td>是</td><td style="text-align:center">是</td></tr><tr><td><code>heapdump</code></td><td>N/A</td><td style="text-align:center">否</td></tr><tr><td><code>httptrace</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>info</code></td><td>是</td><td style="text-align:center">是</td></tr><tr><td><code>integrationgraph</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>jolokia</code></td><td>N/A</td><td style="text-align:center">否</td></tr><tr><td><code>logfile</code></td><td>N/A</td><td style="text-align:center">否</td></tr><tr><td><code>loggers</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>liquibase</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>metrics</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>mappings</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>prometheus</code></td><td>N/A</td><td style="text-align:center">否</td></tr><tr><td><code>scheduledtasks</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>sessions</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>shutdown</code></td><td>是</td><td style="text-align:center">否</td></tr><tr><td><code>threaddump</code></td><td>是</td><td style="text-align:center">否</td></tr></tbody></table><p>要更改暴露的端点，请使用以下特定的 <code>include</code> 和 <code>exclude</code> 属性：</p><table><thead><tr><th>属性</th><th>默认</th></tr></thead><tbody><tr><td><code>management.endpoints.jmx.exposure.exclude</code></td><td></td></tr><tr><td><code>management.endpoints.jmx.exposure.include</code></td><td><code>*</code></td></tr><tr><td><code>management.endpoints.web.exposure.exclude</code></td><td></td></tr><tr><td><code>management.endpoints.web.exposure.include</code></td><td><code>info, health</code></td></tr></tbody></table><p><code>include</code> 属性列出了暴露的端点的 ID。<code>exclude</code> 属性列出了不应暴露的端点的 ID。<code>exclude</code> 属性优先于 <code>include</code> 属性。可以使用端点 ID 列表配置 <code>include</code> 和 <code>exclude</code> 属性。</p><p>例如，要停止通过 JMX 暴露所有端点并仅暴露 <code>health</code> 和 <code>info</code> 端点，请使用以下属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.jmx.exposure.include</span>=health,info</span><br></pre></td></tr></table></figure><p><code>*</code> 可用于选择所有端点。例如，要通过 HTTP 暴露除 <code>env</code> 和 <code>beans</code> 之外的所有端点，请使用以下属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=*</span><br><span class="line"><span class="attr">management.endpoints.web.exposure.exclude</span>=env,beans</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p><code>*</code> 在 YAML 中具有特殊含义，因此如果要包含（或排除）所有端点，请务必添加引号，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p><strong>注意</strong></p><blockquote><p>如果你的应用程序是公开的，我们强烈建议你也<a href="#production-ready-endpoints-security">保护你的端点</a>。</p></blockquote><p><strong>提示</strong></p><blockquote><p>如果要在暴露端点时实现自己的策略，可以注册一个 <code>EndpointFilter</code> bean。</p></blockquote><p><a id="production-ready-endpoints-security"></a></p><h3 id="53-3、保护-HTTP-端点">53.3、保护 HTTP 端点</h3><p>你应该像保护所有其他敏感 URL 一样注意保护 HTTP 端点。如果存在 Spring Security，则默认使用 Spring Security 的内容协商策略来保护端点。例如，如果你希望为 HTTP 端点配置自定义安全策略，只允许具有特定角色身份的用户访问它们，Spring Boot 提供了方便的 <code>RequestMatcher</code> 对象，可以与 Spring Security 结合使用。</p><p>典型的 Spring Security 配置可能如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActuatorSecurity</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests()</span><br><span class="line">.anyRequest().hasRole(<span class="string">&quot;ENDPOINT_ADMIN&quot;</span>)</span><br><span class="line">.and()</span><br><span class="line">.httpBasic();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的示例使用 <code>EndpointRequest.toAnyEndpoint()</code> 将请求与所有端点进行匹配，然后确保所有端点都具有 <code>ENDPOINT_ADMIN</code> 角色。<code>EndpointRequest</code> 上还提供了其他几种匹配器方法。有关详细信息，请参阅 API 文档（<a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/actuator-api//html">HTML</a>或 <a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/actuator-api//pdf/spring-boot-actuator-web-api.pdf">PDF</a>）。</p><p>如果应用程序部署在有防火墙的环境，你可能希望无需身份验证即可访问所有 Actuator 端点。你可以通过更改 <code>management.endpoints.web.exposure.include</code> 属性来执行此操作，如下所示：</p><p><strong>application.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=*</span><br></pre></td></tr></table></figure><p>此外，如果存在 Spring Security，则需要添加自定义安全配置，以允许对端点进行未经身份验证的访问，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActuatorSecurity</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests()</span><br><span class="line">.anyRequest().permitAll();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="production-ready-endpoints-caching"></a></p><h3 id="53-4、配置端点">53.4、配置端点</h3><p>端点对不带参数读取操作的响应自动缓存。要配置端点缓存响应的时间长度，请使用其 <code>cache.time-to-live</code> 属性。以下示例将beans端点缓存的生存时间设置为10秒：</p><p><strong>application.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoint.beans.cache.time-to-live</span>=<span class="number">10</span>s</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>前缀 <code>management.endpoint.&lt;name&gt;</code> 用于唯一标识配置的端点。</p></blockquote><p><strong>注意</strong></p><blockquote><p>在进行一个身份验证 HTTP 请求时，<code>Principal</code> 被视为端点的输入，因此不会缓存响应。</p></blockquote><p><a id="production-ready-endpoints-hypermedia"></a></p><h3 id="53-5、Actuator-Web-端点超媒体">53.5、Actuator Web 端点超媒体</h3><p>添加 <strong>discovery page</strong>，其包含指向所有端点的链接。默认情况下，<strong>discovery page</strong> 在 <code>/actuator</code> 上可访问。</p><p>配置一个自定义管理上下文（management context）路径时，<strong>discovery page</strong> 会自动从 <code>/actuator</code> 移动到管理上下文的根目录。例如，如果管理上下文路径是 <code>/management</code>，则可以从 <code>/management</code> 获取 discovery page。当管理上下文路径设置为 <code>/</code> 时，将禁用发现页面以防止与其他映射冲突。</p><p><a id="production-ready-endpoints-cors"></a></p><h3 id="53-6、跨域支持">53.6、跨域支持</h3><p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">跨源资源共享</a>（CORS）是一个 <a href="https://www.w3.org/TR/cors/">W3C 规范</a>，允许你以灵活的方式指定授权的跨域请求类型。如果你使用 Spring MVC 或 Spring WebFlux，则可以配置 Actuator 的 Web 端点以支持此类方案。</p><p>默认情况下 CORS 支持被禁用，仅在设置了 <code>management.endpoints.web.cors.allowed-origins</code> 属性后才启用 CORS 支持。以下配置允许来自 <code>example.com</code> 域的 GET 和 POST 调用：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.web.cors.allowed-origins</span>=http://example.com</span><br><span class="line"><span class="attr">management.endpoints.web.cors.allowed-methods</span>=GET,POST</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>有关选项的完整列表，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java">CorsEndpointProperties</a>。</p></blockquote><p><a id="production-ready-endpoints-custom"></a></p><h3 id="53-7、实现自定义端点">53.7、实现自定义端点</h3><p>如果你添加一个使用了 <code>@Endpoint</code> 注解的 <code>@Bean</code>，则使用 <code>@ReadOperation</code>、<code>@WritOperation</code> 或 <code>@DeleteOperation</code> 注解的所有方法都将通过 JMX 自动暴露，并且在 Web 应用程序中也将通过 HTTP 暴露。可以使用 Jersey、Spring MVC 或 Spring WebFlux 通过 HTTP 暴露端点。</p><p>你还可以使用 <code>@JmxEndpoint</code> 或 <code>@WebEndpoint</code> 编写特定技术的端点。这些端点仅限于各自的技术。例如，<code>@WebEndpoint</code> 仅通过 HTTP 暴露，而不是 JMX。</p><p>你可以使用 <code>@EndpointWebExtension</code> 和 <code>@EndpointJmxExtension</code> 编写特定技术的扩展。通过这些注解，你可以提供特定技术的操作来扩充现有端点。</p><p>最后，如果你需要访问特定 Web 框架的功能，则可以实现 Servlet 或 Spring <code>@Controller</code> 和 <code>@RestController</code> 端点，但代价是它们无法通过 JMX 或使用其他 Web 框架。</p><p><a id="production-ready-endpoints-custom-input"></a></p><h4 id="53-7-1、接收输入">53.7.1、接收输入</h4><p>端点上的操作通过参数接收输入。通过 Web 暴露时，这些参数的值取自 URL 的查询参数和 JSON 请求体。通过 JMX 暴露时，参数将映射到 MBean 操作的参数。默认情况下参数是必须的。可以使用 <code>@org.springframework.lang.Nullable</code> 对它们进行注解，使它们成为可选项。</p><p>JSON 请求体中的每个根属性都可以映射到端点的参数。考虑以下 JSON 请求体：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;counter&quot;</span><span class="punctuation">:</span> <span class="number">42</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这可用于调用带有 <code>String name</code> 和 <code>int counter</code> 参数的写操作。</p><p><strong>提示</strong></p><blockquote><p>由于端点与技术无关，因此只能在方法签名中指定简单类型。特别是不支持使用定义一个 <code>name</code> 和 <code>counter</code> 属性的自定义类型声明单个参数。</p></blockquote><p><strong>注意</strong></p><blockquote><p>要允许将输入映射到操作方法的参数，应使用 <code>-parameters</code> 编译实现端点的 Java 代码，并且应使用 <code>-java-parameters</code> 编译实现端点的 Kotlin 代码。如果你使用的是 Spring Boot 的 Gradle 插件，或者是 Maven 和 spring-boot-starter-parent，则它们会自动执行此操作。</p></blockquote><p><a id="production-ready-endpoints-custom-input-conversion"></a></p><h5 id="输入类型转换">输入类型转换</h5><p>如有必要，传递给端点操作方法的参数将自动转换为所需类型。在调用操作方法之前，使用 <code>ApplicationConversionService</code> 实例将通过 JMX 或 HTTP 请求接收的输入转换为所需类型。</p><p><a id="production-ready-endpoints-custom-web"></a></p><h4 id="53-7-2、自定义-Web-端点">53.7.2、自定义 Web 端点</h4><p><code>@Endpoint</code>、<code>@WebEndpoint</code> 或 <code>@EndpointWebExtension</code> 上的操作将使用 Jersey、Spring MVC 或 Spring WebFlux 通过 HTTP 自动暴露。</p><p><a id="production-ready-endpoints-custom-web-predicate"></a></p><h5 id="Web-端点请求谓词">Web 端点请求谓词</h5><p>为 Web 暴露的端点上的每个操作自动生成请求谓词。</p><p><a id="production-ready-endpoints-custom-web-predicate-path"></a></p><h5 id="路径">路径</h5><p>谓词的路径由端点的 ID 和 Web 暴露的端点的基础路径确定。默认基础路径是 <code>/actuator</code>。例如，有 ID 为 <code>sessions</code> 的端点将使用 <code>/actuator/sessions</code> 作为其在谓词中的路径。</p><p>通过使用 <code>@Selector</code> 注解操作方法的一个或多个参数，可以进一步自定义路径。这样的参数作为路径变量添加到路径谓词中。调用端点操作时，变量的值将传递给操作方法。</p><p><a id="production-ready-endpoints-custom-web-predicate-http-method"></a></p><h5 id="HTTP-方法">HTTP 方法</h5><p>谓词的 HTTP 方法由操作类型决定，如下表所示：</p><table><thead><tr><th>操作</th><th>HTTP 方法</th></tr></thead><tbody><tr><td><code>@ReadOperation</code></td><td><code>GET</code></td></tr><tr><td><code>@WriteOperation</code></td><td><code>POST</code></td></tr><tr><td><code>@DeleteOperation</code></td><td><code>DELETE</code></td></tr></tbody></table><p><a id="production-ready-endpoints-custom-web-predicate-consumes"></a></p><h5 id="Consume">Consume</h5><p>对于使用请求体的 <code>@WriteOperation</code>（HTTP <code>POST</code>），谓词的 consume 子句是 <code>application/vnd.spring-boot.actuator.v2+json, application/json</code>。对于所有其他操作，consume 子句为空。</p><p><a id="production-ready-endpoints-custom-web-predicate-produces"></a></p><h5 id="Produce">Produce</h5><p>谓词的 produce 子句可以由 <code>@DeleteOperation</code>、<code>@ReadOperation</code> 和 <code>@WriteOperation</code> 注解的 <code>produce</code> 属性确定。该属性是可选的。如果未使用，则自动确定 produce 子句。</p><p>如果操作方法返回 <code>void</code> 或 <code>Void</code>，则 produce 子句为空。如果操作方法返回 <code>org.springframework.core.io.Resource</code>，则 produce 子句为 <code>application/octet-stream</code>。对于所有其他操作，produce 子句是 <code>application/vnd.spring-boot.actuator.v2+json, application/json</code>。</p><p><a id="production-ready-endpoints-custom-web-response-status"></a></p><h5 id="Web-端点响应状态">Web 端点响应状态</h5><p>端点操作的默认响应状态取决于操作类型（读取、写入或删除）以及操作返回的内容（如果有）。</p><p><code>@ReadOperation</code> 返回一个值，响应状态为 200（OK）。如果它未返回值，则响应状态将为 404（未找到）。</p><p>如果 <code>@WriteOperation</code> 或 <code>@DeleteOperation</code> 返回值，则响应状态将为 200（OK）。如果它没有返回值，则响应状态将为 204（无内容）。</p><p>如果在没有必需参数的情况下调用操作，或者使用无法转换为所需类型的参数，则不会调用操作方法，并且响应状态将为 400（错误请求）。</p><p><a id="production-ready-endpoints-custom-web-range-requests"></a></p><h5 id="Web-端点范围请求">Web 端点范围请求</h5><p>可用 HTTP 范围请求请求部分 HTTP 资源。使用 Spring MVC 或 Spring Web Flux 时，返回 <code>org.springframework.core.io.Resource</code> 的操作会自动支持范围请求。</p><p><strong>注意</strong></p><blockquote><p>使用 Jersey 时不支持范围请求。</p></blockquote><p><a id="production-ready-endpoints-custom-web-security"></a></p><h5 id="Web-端点安全">Web 端点安全</h5><p>Web 端点或特定 Web 的端点扩展上的操作可以接收当前的 <code>java.security.Principal</code> 或 <code>org.springframework.boot.actuate.endpoint.SecurityContext</code> 作为方法参数。前者通常与 <code>@Nullable</code> 结合使用，为经过身份验证和未经身份验证的用户提供不同的行为。后者通常用于使用其 <code>isUserInRole(String)</code> 方法执行授权检查。</p><p><a id="production-ready-endpoints-custom-servlet"></a></p><h4 id="53-7-3、Servlet-端点">53.7.3、Servlet 端点</h4><p>通过实现一个带有 <code>@ServletEndpoint</code> 注解的类，<code>Servlet</code> 可以作为端点暴露，该类也实现了 <code>Supplier&lt;EndpointServlet&gt;</code>。Servlet 端点提供了与 Servlet 容器更深层次的集成，但代价是可移植性。它们旨在用于将现有 Servlet 作为端点暴露。对于新端点，应尽可能首选 <code>@Endpoint</code> 和 <code>@WebEndpoint</code> 注解。</p><p><a id="production-ready-endpoints-custom-controller"></a></p><h4 id="53-7-4、控制器端点">53.7.4、控制器端点</h4><p><code>@ControllerEndpoint</code> 和 <code>@RestControllerEndpoint</code> 可用于实现仅由 Spring MVC 或 Spring WebFlux 暴露的端点。使用 Spring MVC 和 Spring WebFlux 的标准注解（如 <code>@RequestMapping</code> 和 <code>@GetMapping</code>）映射方法，并将端点的 ID 用作路径的前缀。控制器端点提供了与 Spring 的 Web 框架更深层次的集成，但代价是可移植性。应尽可能首选 <code>@Endpoint</code> 和 <code>@WebEndpoint</code> 注解。</p><p><a id="production-ready-health"></a></p><h3 id="53-8、健康信息">53.8、健康信息</h3><p>你可以使用健康信息来检查正在运行的应用程序的状态。监控软件经常在生产系统出现故障时使用它提醒某人。<code>health</code> 端点暴露的信息取决于 <code>management.endpoint.health.show-details</code> 属性，该属性可以使用以下值之一进行配置：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><code>never</code></td><td>永远不会显示细节。</td></tr><tr><td><code>when-authorized</code></td><td>详细信息仅向授权用户显示。可以使用 <code>management.endpoint.health.roles</code> 配置授权角色。</td></tr><tr><td><code>always</code></td><td>向所有用户显示详细信息。</td></tr></tbody></table><p>默认值为 <code>never</code>。当用户处于一个或多个端点的角色时，将被视为已获得授权。如果端点没有配置角色（默认值），则认为所有经过身份验证的用户都已获得授权。可以使用 <code>management.endpoint.health.roles</code> 属性配置角色。</p><p><strong>注意</strong></p><blockquote><p>如果你已保护应用程序并希望使用 <code>always</code>，则安全配置必须允许经过身份验证和未经身份验证的用户对健康端点的访问。</p></blockquote><p>健康信息是从 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicatorRegistry.java"><code>HealthIndicatorRegistry</code></a> 的内容中收集的（默认情况下，<code>ApplicationContext</code> 中定义的所有 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java"><code>HealthIndicator</code></a> 实例）。Spring Boot 包含许多自动配置的 <code>HealthIndicators</code>，你也可以自己编写。默认情况下，最终系统状态由 <code>HealthAggregator</code> 根据状态的有序列表对每个 <code>HealthIndicator</code> 的状态进行排序。排序列表中的第一个状态作为整体健康状态。如果没有 <code>HealthIndicator</code> 返回一个 <code>HealthAggregator</code> 已知的状态，则使用 <code>UNKNOWN</code> 状态。</p><p><strong>提示</strong></p><blockquote><p><code>HealthIndicatorRegistry</code> 可用于在运行时注册和注销健康指示器。</p></blockquote><p><a id="_auto_configured_healthindicators"></a></p><h4 id="53-8-1、自动配置的-HealthIndicator">53.8.1、自动配置的 HealthIndicator</h4><p>适当时，Spring Boot 会自动配置以下 <code>HealthIndicator</code>：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cassandra/CassandraHealthIndicator.java"><code>CassandraHealthIndicator</code></a></td><td>检查 Cassandra 数据库是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseHealthIndicator.java"><code>CouchbaseHealthIndicator</code></a></td><td>检查 Couchbase 集群是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/DiskSpaceHealthIndicator.java"><code>DiskSpaceHealthIndicator</code></a></td><td>检查是否磁盘空间不足。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java"><code>DataSourceHealthIndicator</code></a></td><td>检查是否可以获得与 <code>DataSource</code> 的连接。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicator.java"><code>ElasticsearchHealthIndicator</code></a></td><td>检查 Elasticsearch 集群是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/influx/InfluxDbHealthIndicator.java"><code>InfluxDbHealthIndicator</code></a></td><td>检查 InfluxDB 服务器是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jms/JmsHealthIndicator.java"><code>JmsHealthIndicator</code></a></td><td>检查 JMS broker 是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/mail/MailHealthIndicator.java"><code>MailHealthIndicator</code></a></td><td>检查邮件服务器是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/mongo/MongoHealthIndicator.java"><code>MongoHealthIndicator</code></a></td><td>检查 Mongo 数据库是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/neo4j/Neo4jHealthIndicator.java"><code>Neo4jHealthIndicator</code></a></td><td>检查 Neo4j 服务器是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/amqp/RabbitHealthIndicator.java"><code>RabbitHealthIndicator</code></a></td><td>检查 Rabbit 服务器是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/redis/RedisHealthIndicator.java"><code>RedisHealthIndicator</code></a></td><td>检查 Redis 服务器是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/solr/SolrHealthIndicator.java"><code>SolrHealthIndicator</code></a></td><td>检查 Solr 服务器是否已启动。</td></tr></tbody></table><p><strong>提示</strong></p><blockquote><p>你可以通过设置 <code>management.health.defaults.enabled</code> 属性来禁用它们。</p></blockquote><p><a id="_writing_custom_healthindicators"></a></p><h4 id="53-8-2、编写自定义-HealthIndicator">53.8.2、编写自定义 HealthIndicator</h4><p>要提供自定义健康信息，可以注册实现 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java"><code>HealthIndicator</code></a> 接口的 Spring bean。你需要提供 <code>health()</code> 方法的实现并返回一个 <code>Health</code> 响应。<code>Health</code> 响应应包括一个状态，并且可以选择包括要显示的其他详细信息。以下代码展示了一个 HealthIndicator 实现示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.Health;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.health.HealthIndicator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHealthIndicator</span> <span class="keyword">implements</span> <span class="title class_">HealthIndicator</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Health <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">errorCode</span> <span class="operator">=</span> check(); <span class="comment">// 执行某些特定的健康检查</span></span><br><span class="line"><span class="keyword">if</span> (errorCode != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Health.down().withDetail(<span class="string">&quot;Error Code&quot;</span>, errorCode).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Health.up().build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>给定 <code>HealthIndicator</code> 的标识符是没有 <code>HealthIndicator</code> 后缀的 bean 的名称（如果存在）。在前面的示例中，健康信息在名为 <code>my</code> 的条目中可用。</p></blockquote><p>除了 Spring Boot 的预定义 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Status.java"><code>Status</code></a> 类型之外，<code>Health</code> 还可以返回一个表示新系统状态的自定义 <code>Status</code>。在这种情况下，还需要提供 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthAggregator.java"><code>HealthAggregator</code></a> 接口的自定义实现，或者必须使用 <code>management.health.status.order</code> 配置属性配置默认实现。</p><p>例如，假设在你的一个 <code>HealthIndicator</code> 实现中使用了代码为 <code>FATAL</code> 的新 <code>Status</code>。需要配置严重性顺序，请将以下属性添加到应用程序属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.health.status.order</span>=FATAL, DOWN, OUT_OF_SERVICE, UNKNOWN, UP</span><br></pre></td></tr></table></figure><p>响应中的 HTTP 状态码反映了整体运行状况（例如，<code>UP</code> 映射到 200，而 <code>OUT_OF_SERVICE</code> 和 <code>DOWN</code> 映射到 503）。如果通过 HTTP 访问健康端点，则可能还需要注册自定义状态映射。例如，以下属性将 <code>FATAL</code> 映射到 503（服务不可用）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.health.status.http-mapping.FATAL</span>=<span class="number">503</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>如果需要控制更多，可以定义自己的 <code>HealthStatusHttpMapper</code> bean。</p></blockquote><p>下表展示了内置状态的默认状态映射：</p><table><thead><tr><th>状态</th><th>映射</th></tr></thead><tbody><tr><td>DOWN</td><td>SERVICE_UNAVAILABLE (503)</td></tr><tr><td>OUT_OF_SERVICE</td><td>SERVICE_UNAVAILABLE (503)</td></tr><tr><td>UP</td><td>默认没有映射，因此状态码为 200</td></tr><tr><td>UNKNOWN</td><td>默认没有映射，因此状态码为 200</td></tr></tbody></table><p><a id="reactive-health-indicators"></a></p><h4 id="53-8-3、响应式健康指示器">53.8.3、响应式健康指示器</h4><p>对于响应式应用程序，例如使用 Spring WebFlux 的应用程序，<code>ReactiveHealthIndicator</code> 提供了一个非阻塞的接口来获取应用程序健康信息。与传统的 <code>HealthIndicator</code> 类似，健康信息从 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicatorRegistry.java"><code>ReactiveHealthIndicatorRegistry</code></a> 的内容中收集（默认情况下，<code>ApplicationContext</code> 中定义的所有 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthIndicator.java"><code>HealthIndicator</code></a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java"><code>ReactiveHealthIndicator</code></a> 实例）。不检查响应式 API 的常规 <code>HealthIndicator</code>在弹性调度程序上执行。</p><p><strong>提示</strong></p><blockquote><p>在响应式应用程序中，<code>ReactiveHealthIndicatorRegistry</code> 可用于在运行时注册和取消注册健康指示器。</p></blockquote><p>要从响应式 API 提供自定义健康信息，可以注册实现 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/ReactiveHealthIndicator.java"><code>ReactiveHealthIndicator</code></a> 接口的 Spring bean。以下代码展示了 <code>ReactiveHealthIndicator</code> 实现的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyReactiveHealthIndicator</span> <span class="keyword">implements</span> <span class="title class_">ReactiveHealthIndicator</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Health&gt; <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> doHealthCheck() <span class="comment">// 执行一些特定的健康检查并返回一个 Mono&lt;Health&gt;</span></span><br><span class="line">.onErrorResume(ex -&gt; Mono.just(<span class="keyword">new</span> <span class="title class_">Health</span>.Builder().down(ex).build())));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>要自动处理错误，请考虑从 <code>AbstractReactiveHealthIndicator</code> 进行扩展。</p></blockquote><p><a id="_auto_configured_reactivehealthindicators"></a></p><h4 id="53-8-4、自动配置的-ReactiveHealthIndicator">53.8.4、自动配置的 ReactiveHealthIndicator</h4><p>适当时，Spring Boot 会自动配置以下 <code>ReactiveHealthIndicator</code>：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cassandra/CassandraReactiveHealthIndicator.java"><code>CassandraReactiveHealthIndicator</code></a></td><td>检查 Cassandra 数据库是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/couchbase/CouchbaseReactiveHealthIndicator.java"><code>CouchbaseReactiveHealthIndicator</code></a></td><td>检查 Couchbase 集群是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/mongo/MongoReactiveHealthIndicator.java"><code>MongoReactiveHealthIndicator</code></a></td><td>检查 Mongo 数据库是否已启动。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/redis/RedisReactiveHealthIndicator.java"><code>RedisReactiveHealthIndicator</code></a></td><td>检查 Redis 服务器是否已启动。</td></tr></tbody></table><p><strong>提示</strong></p><blockquote><p>必要时，响应式指示器取代常规指示器。此外，任何未明确处理的 <code>HealthIndicator</code> 都会自动包装。</p></blockquote><p><a id="production-ready-application-info"></a></p><h3 id="53-9、应用程序信息">53.9、应用程序信息</h3><p>应用程序信息暴露从 <code>ApplicationContext</code> 中定义的所有 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoContributor.java"><code>InfoContributor</code></a> bean 收集的各种信息。Spring Boot 包含许多自动配置的 <code>InfoContributor</code> bean，你可以编写自己的 bean。</p><p><a id="production-ready-application-info"></a></p><h4 id="53-9-1、自动配置的-InfoContributor">53.9.1、自动配置的 InfoContributor</h4><p>适当时，Spring Boot 会自动配置以下 <code>InfoContributor</code> bean：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/EnvironmentInfoContributor.java"><code>EnvironmentInfoContributor</code></a></td><td>在 <code>info</code> key 下显示 <code>Environment</code> 中的所有 key。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/GitInfoContributor.java"><code>GitInfoContributor</code></a></td><td>如果 <code>git.properties</code> 可用则暴露 git 信息。</td></tr><tr><td><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/BuildInfoContributor.java"><code>BuildInfoContributor</code></a></td><td>如果 <code>META-INF/build-info.properties</code> 可用则暴露构建信息。</td></tr></tbody></table><p><strong>提示</strong></p><blockquote><p>可以通过设置 <code>management.info.defaults.enabled</code> 属性来禁用它们。</p></blockquote><p><a id="production-ready-application-info-env"></a></p><h4 id="53-9-2、自定义应用程序信息">53.9.2、自定义应用程序信息</h4><p>你可以通过设置 <code>info.*</code> 字符串属性来自定义 <code>info</code>端点暴露的数据。<code>info</code> key 下的所有 <code>Environment</code> 属性都会自动暴露。例如，你可以将以下设置添加到 <code>application.properties</code> 文件中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info.app.encoding</span>=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">info.app.java.source</span>=<span class="number">1.8</span></span><br><span class="line"><span class="attr">info.app.java.target</span>=<span class="number">1.8</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>你可以在<a href="how-to.md#howto-automatic-expansion">构建时扩展 info 属性</a>，而不是对这些值进行硬编码。<br>假设你使用 Maven，你可以按如下方式重写前面的示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info.app.encoding</span>=@project.build.sourceEncoding@</span><br><span class="line"><span class="attr">info.app.java.source</span>=@java.version@</span><br><span class="line"><span class="attr">info.app.java.target</span>=@java.version@</span><br></pre></td></tr></table></figure></blockquote><p><a id="production-ready-application-info-git"></a></p><h4 id="53-9-3、Git-提交信息">53.9.3、Git 提交信息</h4><p><code>info</code> 端点的另一个有用功能是它能够在构建项目时发布 git 源码仓库相关的状态的信息。如果 <code>GitProperties</code> bean 可用，则暴露 <code>git.branch</code>、<code>git.commit.id</code> 和 <code>git.commit.time</code> 属性。</p><p><strong>提示</strong></p><blockquote><p>如果 <code>git.properties</code> 文件在 classpath 的根目录中可用，则会自动配置 <code>GitProperties</code> bean。有关更多详细信息，请参阅<a href="how-to.md#howto-git-info"><strong>生成 git 信息</strong></a>。</p></blockquote><p>如果要显示完整的 git 信息（即 <code>git.properties</code> 的完整内容），请使用 <code>management.info.git.mode</code> 属性，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.info.git.mode</span>=full</span><br></pre></td></tr></table></figure><p><a id="production-ready-application-info-build"></a></p><h4 id="53-9-4、构建信息">53.9.4、构建信息</h4><p>如果 <code>BuildProperties</code> bean 可用，则 <code>info</code> 端点还可以发布构建相关的信息。如果 classpath 中有 <code>META-INF/build-info.properties</code> 文件，则会发生这种情况。</p><p><strong>提示</strong></p><blockquote><p>Maven 和 Gradle 插件都可以生成该文件。有关更多详细信息，请参阅<a href="how-to.md#howto-build-info"><strong>生成构建信息</strong></a>。</p></blockquote><p><a id="production-ready-application-info-build"></a></p><h4 id="53-9-5、编写自定义-InfoContributor">53.9.5、编写自定义 InfoContributor</h4><p>要提供自定义应用程序信息，可以注册实现 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/info/InfoContributor.java"><code>InfoContributor</code></a> 接口的 Spring bean。</p><p>以下示例提供了具有单个值的 <code>example</code> 条目：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.info.Info;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.info.InfoContributor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleInfoContributor</span> <span class="keyword">implements</span> <span class="title class_">InfoContributor</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line">builder.withDetail(<span class="string">&quot;example&quot;</span>,</span><br><span class="line">Collections.singletonMap(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果访问 <code>info</code> 端点，你应该能看到包含以下附加条目的响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;example&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-monitoring"></a></p><h2 id="54、通过-HTTP-监控和管理">54、通过 HTTP 监控和管理</h2><p>如果你正在开发 Web 应用程序，Spring Boot Actuator 会自动配置所有已启用的端点以通过 HTTP 暴露。默认约定是使用前缀为 <code>/actuator</code> 的端点的 <code>id</code> 作为 URL 路径。例如，<code>health</code> 以 <code>/actuator/health</code> 暴露。提示：Spring MVC、Spring WebFlux 和 Jersey 本身支持 Actuator。</p><p><a id="production-ready-customizing-management-server-context-path"></a></p><h3 id="54-1、自定义-Management-端点路径">54.1、自定义 Management 端点路径</h3><p>有时，自定义 management 端点的前缀很有用。例如，你的应用程序可能已将 <code>/actuator</code> 用于其他目的。你可以使用 <code>management.endpoints.web.base-path</code> 属性更改 management 端点的前缀，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.web.base-path</span>=/manage</span><br></pre></td></tr></table></figure><p>前面的 <code>application.properties</code> 示例将端点从 <code>/actuator/&#123;id&#125;</code> 更改为 <code>/manage/&#123;id&#125;</code>（例如，<code>/manage/info</code>）。</p><p><strong>注意</strong></p><blockquote><p>除非已将 management 端口配置为<a href="production-ready-customizing-management-server-port">使用其他 HTTP 端口暴露端点</a>，否则 <code>management.endpoints.web.base-path</code> 与 <code>server.servlet.context-path</code> 相关联。如果配置了 <code>management.server.port</code>，则 <code>management.endpoints.web.base-path</code> 与 <code>management.server.servlet.context-path</code> 相关联。</p></blockquote><p>如果要将端点映射到其他路径，可以使用 <code>management.endpoints.web.path-mapping</code> 属性。</p><p>以下示例将 <code>/actuator/health</code> 重新映射到 <code>/healthcheck</code>：</p><p><strong>application.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.web.base-path</span>=/</span><br><span class="line"><span class="attr">management.endpoints.web.path-mapping.health</span>=healthcheck</span><br></pre></td></tr></table></figure><p><a id="production-ready-customizing-management-server-port"></a></p><h3 id="54-2、自定义-Management-服务器端口">54.2、自定义 Management 服务器端口</h3><p>使用默认 HTTP 端口暴露 management 端点是基于云部署的明智选择。但是，如果应用程序是在自己的数据中心内运行，你可能更喜欢使用其他 HTTP 端口暴露端点。</p><p>你可以设置 <code>management.server.port</code> 属性以更改 HTTP 端口，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.server.port</span>=<span class="number">8081</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-management-specific-ssl"></a></p><h3 id="54-3、配置-Management-的-SSL">54.3、配置 Management 的 SSL</h3><p>当配置为使用自定义端口时，还可以使用各种 <code>management.server.ssl.*</code> 属性为 management 服务器配置自己的 SSL。例如，这样做可以在主应用程序使用 HTTPS 时可通过 HTTP 使用 management 服务器，如以下属性设置所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8443</span></span><br><span class="line"><span class="attr">server.ssl.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">server.ssl.key-store</span>=classpath:store.jks</span><br><span class="line"><span class="attr">server.ssl.key-password</span>=secret</span><br><span class="line"><span class="attr">management.server.port</span>=<span class="number">8080</span></span><br><span class="line"><span class="attr">management.server.ssl.enabled</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>或者，主服务器和 management 服务器都可以使用 SSL，但他们的 key store 不同，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8443</span></span><br><span class="line"><span class="attr">server.ssl.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">server.ssl.key-store</span>=classpath:main.jks</span><br><span class="line"><span class="attr">server.ssl.key-password</span>=secret</span><br><span class="line"><span class="attr">management.server.port</span>=<span class="number">8080</span></span><br><span class="line"><span class="attr">management.server.ssl.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">management.server.ssl.key-store</span>=classpath:management.jks</span><br><span class="line"><span class="attr">management.server.ssl.key-password</span>=secret</span><br></pre></td></tr></table></figure><p><a id="production-ready-customizing-management-server-address"></a></p><h3 id="54-4、配置-Management-服务器地址">54.4、配置 Management 服务器地址</h3><p>你可以通过设置 <code>management.server.address</code> 属性来自定义 management 端点可用的地址。如果你只想在内部或操作的网络上监听或仅监听来自 <code>localhost</code> 的连接，那么这样做会非常有用。</p><p><strong>注意</strong></p><blockquote><p>仅当端口与主服务器端口不同时，才能监听不同的地址。</p></blockquote><p>以下 <code>application.properties</code> 示例不允许远程连接 management：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.server.port</span>=<span class="number">8081</span></span><br><span class="line"><span class="attr">management.server.address</span>=<span class="number">127.0</span>.<span class="number">0.1</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-disabling-http-endpoints"></a></p><h3 id="54-5、禁用-HTTP-端点">54.5、禁用 HTTP 端点</h3><p>如果你不希望通过 HTTP 暴露端点，则可以将 management 端口设置为 <code>-1</code>，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.server.port</span>=-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>这可以使用 <code>management.endpoints.web.exposure.exclude</code> 属性来实现，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.web.exposure.exclude</span>=*</span><br></pre></td></tr></table></figure><p><a id="production-ready-jmx"></a></p><h2 id="55、通过-JMX-监控和管理">55、通过 JMX 监控和管理</h2><p>Java 管理扩展（Java Management Extensions，JMX）提供了一种监控和管理应用程序的标准机制。默认情况下，Spring Boot 将 management 端点暴露为 <code>org.springframework.boot</code> 域下的 JMX MBean。</p><p><a id="production-ready-custom-mbean-names"></a></p><h3 id="55-1、自定义-MBean-名称">55.1、自定义 MBean 名称</h3><p>MBean 的名称通常是从端点的 <code>id</code> 生成的。例如，<code>health</code> 端点公开为 <code>org.springframework.boot:type=Endpoint,name=Health</code>。</p><p>如果你的应用程序包含多个 Spring <code>ApplicationContext</code>，可能会发生名称冲突。要解决此问题，可以将 <code>spring.jmx.unique-names</code> 属性设置为 <code>true</code>，以保证 MBean 名称始终唯一。</p><p>你还可以自定义暴露端点的 JMX 域。以下设置展示了在 <code>application.properties</code> 中执行此操作的示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jmx.unique-names</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">management.endpoints.jmx.domain</span>=com.example.myapp</span><br></pre></td></tr></table></figure><p><a id="production-ready-disable-jmx-endpoints"></a></p><h3 id="55-2、禁用-JMX-端点">55.2、禁用 JMX 端点</h3><p>如果你不想通过 JMX 暴露端点，可以将 <code>management.endpoints.jmx.exposure.exclude</code> 属性设置为 <code>*</code>，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoints.jmx.exposure.exclude</span>=*</span><br></pre></td></tr></table></figure><p><a id="production-ready-jolokia"></a></p><h3 id="55-3、通过-HTTP-使用-Jolokia-访问-JMX">55.3、通过 HTTP 使用 Jolokia 访问 JMX</h3><p>Jolokia 是一个 JMX-HTTP 桥，它提供了一种访问 JMX bean 的新方式。要使用 Jolokia，请引入依赖：<code>org.jolokia:jolokia-core</code>。例如，使用 Maven，你将添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jolokia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jolokia-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后可以通过将 <code>jolokia</code> 或 <code>*</code> 添加到 <code>management.endpoints.web.exposure.include</code> 属性来暴露 Jolokia 端点。最后，你可以在 management HTTP 服务器上使用 <code>/actuator/jolokia</code> 访问它。</p><p><a id="production-ready-customizing-jolokia"></a></p><h4 id="55-3-1、自定义-Jolokia">55.3.1、自定义 Jolokia</h4><p>Jolokia 有许多设置，你可以通过设置 servlet 参数来使用传统方式进行配置。使用 Spring Boot 时，你可以使用 <code>application.properties</code> 文件配置。请在参数前加上 <code>management.endpoint.jolokia.config</code>。如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoint.jolokia.config.debug</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-disabling-jolokia"></a></p><h4 id="55-3-2、禁用-Jolokia">55.3.2、禁用 Jolokia</h4><p>如果你使用 Jolokia 但不希望 Spring Boot 配置它，请将 <code>management.endpoint.jolokia.enabled</code> 属性设置为 <code>false</code>，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.endpoint.jolokia.enabled</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-loggers"></a></p><h2 id="56、日志记录器">56、日志记录器</h2><p>Spring Boot Actuator 有可在运行时查看和配置应用程序日志级别的功能。你可以查看全部或单个日志记录器的配置，该配置由显式配置的日志记录级别以及日志记录框架为其提供的有效日志记录级别组成。这些级别可以是以下之一：</p><ul><li><code>TRACE</code></li><li><code>DEBUG</code></li><li><code>INFO</code></li><li><code>WARN</code></li><li><code>ERROR</code></li><li><code>FATAL</code></li><li><code>OFF</code></li><li><code>null</code></li></ul><p><code>null</code> 表示没有显式配置。</p><p><a id="production-ready-logger-configuration"></a></p><h3 id="56-1、配置一个日志记录器">56.1、配置一个日志记录器</h3><p>要配置日志记录器，请将部分实体 <code>POST</code> 到资源的 URI，如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;configuredLevel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DEBUG&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>要<strong>重置</strong>日志记录器的特定级别（并使用默认配置代替），可以将 <code>null</code> 值作为 <code>configuredLevel</code> 传递。</p></blockquote><p><a id="production-ready-metrics"></a></p><h2 id="57、指标">57、指标</h2><p>Spring Boot Actuator 为 <a href="https://micrometer.io/">Micrometer</a> 提供了依赖管理和自动配置，Micrometer 是一个支持众多监控系统的应用程序指标门面，包括：</p><ul><li><a href="#production-ready-metrics-export-appoptics">AppOptics</a></li><li><a href="#production-ready-metrics-export-atlas">Atlas</a></li><li><a href="#production-ready-metrics-export-datadog">Datadog</a></li><li><a href="#production-ready-metrics-export-dynatrace">Dynatrace</a></li><li><a href="#production-ready-metrics-export-elastic">Elastic</a></li><li><a href="#production-ready-metrics-export-ganglia">Ganglia</a></li><li><a href="#production-ready-metrics-export-graphite">Graphite</a></li><li><a href="#production-ready-metrics-export-humio">Humio</a></li><li><a href="#production-ready-metrics-export-influx">Influx</a></li><li><a href="#production-ready-metrics-export-jmx">JMX</a></li><li><a href="#production-ready-metrics-export-kairos">KairosDB</a></li><li><a href="#production-ready-metrics-export-newrelic">New Relic</a></li><li><a href="#production-ready-metrics-export-prometheus">Prometheus</a></li><li><a href="#production-ready-metrics-export-signalfx">SignalFx</a></li><li><a href="#production-ready-metrics-export-simple">Simple (in-memory)</a></li><li><a href="#production-ready-metrics-export-statsd">StatsD</a></li><li><a href="#production-ready-metrics-export-wavefront">Wavefront</a></li></ul><p><strong>提示</strong></p><p>要了解有关 Micrometer 功能的更多信息，请参阅其<a href="https://micrometer.io/docs">参考文档</a>，特别是<a href="https://micrometer.io/docs/concepts">概念部分</a>。</p><p><a id="production-ready-metrics-getting-started"></a></p><h3 id="57-1、入门">57.1、入门</h3><p>Spring Boot 自动配置了一个组合的 <code>MeterRegistry</code>，并为 classpath 中每个受支持的实现向该组合注册一个注册表。在运行时，只需要 classpath 中有 <code>micrometer-registry-&#123;system&#125;</code> 依赖即可让 Spring Boot 配置该注册表。</p><p>大部分注册表都有共同点 例如，即使 Micrometer 注册实现位于 classpath 上，你也可以禁用特定的注册表。例如，要禁用 Datadog：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.datadog.enabled</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>Spring Boot 还会将所有自动配置的注册表添加到 <code>Metrics</code> 类的全局静态复合注册表中，除非你明确禁止：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.use-global-registry</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>在注册表中注册任何指标之前，你可以注册任意数量的 <code>MeterRegistryCustomizer</code> bean 以进一步配置注册表，例如通用标签：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">MeterRegistryCustomizer&lt;MeterRegistry&gt; <span class="title function_">metricsCommonTags</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> registry -&gt; registry.config().commonTags(<span class="string">&quot;region&quot;</span>, <span class="string">&quot;us-east-1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过指定泛型类型，自定义注册表实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">MeterRegistryCustomizer&lt;GraphiteMeterRegistry&gt; <span class="title function_">graphiteMetricsNamingConvention</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> registry -&gt; registry.config().namingConvention(MY_CUSTOM_CONVENTION);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用该设置，你可以在组件中注入 <code>MeterRegistry</code> 并注册指标：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Counter counter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SampleBean</span><span class="params">(MeterRegistry registry)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.counter = registry.counter(<span class="string">&quot;received.messages&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.counter.increment();</span><br><span class="line"><span class="comment">// 处理消息实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Boot 还<a href="https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE/reference/htmlsingle/#production-ready-metrics-meter">配置内置的测量工具</a>（即 <code>MeterBinder</code> 实现），你可以通过配置或专用注解标记来控制。</p><p><a id="production-ready-metrics-export"></a></p><h3 id="57-2、支持的监控系统">57.2、支持的监控系统</h3><p><a id="production-ready-metrics-export-appoptics"></a></p><h4 id="57-2-1、AppOptics">57.2.1、AppOptics</h4><p>默认情况下，AppOptics 注册表会定期将指标推送到 <a href="https://api.appoptics.com/v1/measurements">api.appoptics.com/v1/measurements</a>。要将指标导出到 SaaS <a href="https://micrometer.io/docs/registry/appoptics">AppOptics</a>，你必须提供 API 令牌：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.appoptics.api-token</span>=YOUR_TOKEN</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-atlas"></a></p><h4 id="57-2-2、Atlas">57.2.2、Atlas</h4><p>默认情况下，度量标准将导出到本地的 <a href="https://micrometer.io/docs/registry/atlas">Atlas</a>。可以使用以下方式指定 <a href="https://github.com/Netflix/atlas">Atlas 服务器</a>的位置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.atlas.uri</span>=https://atlas.example.com:<span class="number">7101</span>/api/v1/publish</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-datadog"></a></p><h4 id="57-2-3、Datadog">57.2.3、Datadog</h4><p>Datadog 注册表会定期将指标推送到 <a href="https://www.datadoghq.com/">datadoghq</a>。要将指标导出到 <a href="https://micrometer.io/docs/registry/datadog">Datadog</a>，你必须提供 API 密钥：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.datadog.api-key</span>=YOUR_KEY</span><br></pre></td></tr></table></figure><p>你还可以更改度量标准发送到 Datadog 的间隔时间：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.datadog.step</span>=<span class="number">30</span>s</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-dynatrace"></a></p><h4 id="57-2-4、Dynatrace">57.2.4、Dynatrace</h4><p>Dynatrace 注册表定期将指标推送到配置的 URI。要将指标导出到 <a href="https://micrometer.io/docs/registry/dynatrace">Dynatrace</a>，必须提供 API 令牌、设备 ID 和 URI：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.dynatrace.api-token</span>=YOUR_TOKEN</span><br><span class="line"><span class="attr">management.metrics.export.dynatrace.device-id</span>=YOUR_DEVICE_ID</span><br><span class="line"><span class="attr">management.metrics.export.dynatrace.uri</span>=YOUR_URI</span><br></pre></td></tr></table></figure><p>你还可以更改度量标准发送到 Dynatrace 的间隔时间：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.dynatrace.step</span>=<span class="number">30</span>s</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-elastic"></a></p><h4 id="57-2-5、Elastic">57.2.5、Elastic</h4><p>默认情况下，度量将导出到本地的 <a href="https://micrometer.io/docs/registry/elastic">Elastic</a>。可以使用以下属性提供 Elastic 服务器的位置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.elastic.host</span>=https://elastic.example.com:<span class="number">8086</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-ganglia"></a></p><h4 id="57-2-6、Ganglia">57.2.6、Ganglia</h4><p>默认情况下，度量将导出到本地的 <a href="https://micrometer.io/docs/registry/ganglia">Ganglia</a>。可以使用以下方式提供 <a href="http://ganglia.sourceforge.net/">Ganglia 服务器</a>主机和端口：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.ganglia.host</span>=ganglia.example.com</span><br><span class="line"><span class="attr">management.metrics.export.ganglia.port</span>=<span class="number">9649</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-graphite"></a></p><h4 id="57-2-7、Graphite">57.2.7、Graphite</h4><p>默认情况下，度量将导出到本地的 <a href="https://micrometer.io/docs/registry/graphite">Graphite</a>。可以使用以下方式提供 <a href="https://graphiteapp.org/">Graphite 服务器</a>主机和端口：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.graphite.host</span>=graphite.example.com</span><br><span class="line"><span class="attr">management.metrics.export.graphite.port</span>=<span class="number">9004</span></span><br></pre></td></tr></table></figure><p>Micrometer 提供了一个默认的 <code>HierarchicalNameMapper</code>，它管理维度计数器 id 如何<a href="https://micrometer.io/docs/registry/graphite#_hierarchical_name_mapping">映射到平面分层名称</a>。</p><p><strong>提示</strong></p><blockquote><p>要控制此行为，请定义 <code>GraphiteMeterRegistry</code> 并提供自己的 <code>HierarchicalNameMapper</code>。除非你自己定义，否则使用自动配置的 <code>GraphiteConfig</code> 和 <code>Clock</code> bean：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> GraphiteMeterRegistry <span class="title function_">graphiteMeterRegistry</span><span class="params">(GraphiteConfig config, Clock clock)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GraphiteMeterRegistry</span>(config, clock, MY_HIERARCHICAL_MAPPER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-humio"></a></p><h4 id="57-2-8、Humio">57.2.8、Humio</h4><p>默认情况下，Humio 注册表会定期将指标推送到 <a href="https://cloud.humio.com/">cloud.humio.com</a>。要将指标导出到 SaaS <a href="https://micrometer.io/docs/registry/humio">Humio</a>，你必须提供 API 令牌：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.humio.api-token</span>=YOUR_TOKEN</span><br></pre></td></tr></table></figure><p>你还应配置一个或多个标记，以标识要推送指标的数据源：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.humio.tags.alpha</span>=a</span><br><span class="line"><span class="attr">management.metrics.export.humio.tags.bravo</span>=b</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-influx"></a></p><h4 id="57-2-9、Influx">57.2.9、Influx</h4><p>默认情况下，度量将导出到本地的 <a href="https://micrometer.io/docs/registry/influx">Influx</a>。要指定 <a href="https://www.influxdata.com/">Influx 服务器</a>的位置，可以使用：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.influx.uri</span>=https://influx.example.com:<span class="number">8086</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-jmx"></a></p><h4 id="57-2-10、JMX">57.2.10、JMX</h4><p>Micrometer 提供了与 <a href="https://micrometer.io/docs/registry/jmx">JMX</a> 的分层映射，主要为了方便在本地查看指标且可移植。默认情况下，度量将导出到 <code>metrics</code> JMX 域。可以使用以下方式提供要使用的域：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.jmx.domain</span>=com.example.app.metrics</span><br></pre></td></tr></table></figure><p>Micrometer 提供了一个默认的 <code>HierarchicalNameMapper</code>，它管理维度计数器 id 如何<a href="https://micrometer.io/docs/registry/jmx#_hierarchical_name_mapping">映射到平面分层名称</a>。</p><p><strong>提示</strong></p><blockquote><p>要控制此行为，请定义 <code>JmxMeterRegistry</code> 并提供自己的 <code>HierarchicalNameMapper</code>。除非你自己定义，否则使用自动配置的 <code>JmxConfig</code> 和 <code>Clock</code> bean：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> JmxMeterRegistry <span class="title function_">jmxMeterRegistry</span><span class="params">(JmxConfig config, Clock clock)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JmxMeterRegistry</span>(config, clock, MY_HIERARCHICAL_MAPPER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-kairos"></a></p><h4 id="57-2-11、KairosDB">57.2.11、KairosDB</h4><p>默认情况下，度量将导出到本地的 <a href="https://micrometer.io/docs/registry/kairos">KairosDB</a>。可以使用以下方式提供 <a href="https://kairosdb.github.io/">KairosDB 服务器</a>的位置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.kairos.uri</span>=https://kairosdb.example.com:<span class="number">8080</span>/api/v1/datapoints</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-newrelic"></a></p><h4 id="57-2-12、New-Relic">57.2.12、New Relic</h4><p>New Relic 注册表定期将指标推送到 <a href="https://micrometer.io/docs/registry/new-relic">New Relic</a>。要将指标导出到 <a href="https://newrelic.com/">New Relic</a>，你必须提供 API 密钥和帐户 ID：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.newrelic.api-key</span>=YOUR_KEY</span><br><span class="line"><span class="attr">management.metrics.export.newrelic.account-id</span>=YOUR_ACCOUNT_ID</span><br></pre></td></tr></table></figure><p>你还可以更改将度量发送到 New Relic 的间隔时间：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.newrelic.step</span>=<span class="number">30</span>s</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-prometheus"></a></p><h4 id="57-2-13、Prometheus">57.2.13、Prometheus</h4><p><a href="https://micrometer.io/docs/registry/prometheus">Prometheus</a> 希望抓取或轮询各个应用实例以获取指标数据。Spring Boot 在 <code>/actuator/prometheus</code> 上提供 actuator 端点，以适当的格式呈现 <a href="https://prometheus.io/">Prometheus scrape </a>。</p><p><strong>提示</strong></p><blockquote><p>默认情况下端点不可用，必须暴露，请参阅<a href="#production-ready-endpoints-exposing-endpoints">暴露端点</a>以获取更多详细信息。</p></blockquote><p>以下是要添加到 <code>prometheus.yml</code> 的示例 <code>scrape_config</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&#x27;spring&#x27;</span></span><br><span class="line"><span class="attr">metrics_path:</span> <span class="string">&#x27;/actuator/prometheus&#x27;</span></span><br><span class="line"><span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&#x27;HOST:PORT&#x27;</span>]</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-signalfx"></a></p><h4 id="57-2-14、SignalFx">57.2.14、SignalFx</h4><p>SignalFx 注册表定期将指标推送到 <a href="https://micrometer.io/docs/registry/signalfx">SignalFx</a>。要将指标导出到 <a href="https://signalfx.com/">SignalFx</a>，你必须提供访问令牌：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.signalfx.access-token</span>=YOUR_ACCESS_TOKEN</span><br></pre></td></tr></table></figure><p>你还可以更改将指标发送到 SignalFx 的间隔时间：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.signalfx.step</span>=<span class="number">30</span>s</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-simple"></a></p><h4 id="57-2-15、Simple">57.2.15、Simple</h4><p>Micrometer 附带一个简单的内存后端，如果没有配置其他注册表，它将自动用作后备。这使你可以查看<a href="#production-ready-metrics-endpoint">指标端点</a>中收集的指标信息。</p><p>只要你使用了任何其他可用的后端，内存后端就会自动禁用。你也可以显式禁用它：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.simple.enabled</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-statsd"></a></p><h4 id="57-2-16、StatsD">57.2.16、StatsD</h4><p>StatsD 注册表将 UDP 上的指标推送到 <a href="https://micrometer.io/docs/registry/statsd">StatsD</a> 代理。 默认情况下，度量将导出到本地的 StatsD 代理，可以使用以下方式提供 StatsD 代理主机和端口：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.statsd.host</span>=statsd.example.com</span><br><span class="line"><span class="attr">management.metrics.export.statsd.port</span>=<span class="number">9125</span></span><br></pre></td></tr></table></figure><p>你还可以更改要使用的 StatsD 线路协议（默认为 Datadog）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.statsd.flavor</span>=etsy</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-export-wavefront"></a></p><h4 id="57-2-17、Wavefront">57.2.17、Wavefront</h4><p>Wavefront 注册表定期将指标推送到 <a href="https://micrometer.io/docs/registry/wavefront">Wavefront</a>。如果要将指标直接导出到 <a href="https://www.wavefront.com/">Wavefront</a>，则你必须提供 API 令牌：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.wavefront.api-token</span>=YOUR_API_TOKEN</span><br></pre></td></tr></table></figure><p>或者，你可以在环境中使用 Wavefront sidecar 或内部代理设置，将指标数据转发到 Wavefront API 主机：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.wavefront.uri</span>=proxy://localhost:<span class="number">2878</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>如果将度量发布到 Wavefront 代理（如<a href="https://docs.wavefront.com/proxies_installing.html">文档</a>中所述），则主机必须采用 <code>proxy://HOST:PORT</code> 格式。</p></blockquote><p>你还可以更改将指标发送到 Wavefront 的间隔时间：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.export.wavefront.step</span>=<span class="number">30</span>s</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-meter"></a></p><h3 id="57-3、支持的指标">57.3、支持的指标</h3><p>Spring Boot 在适当的环境注册以下核心指标：</p><ul><li>JVM 指标，报告利用率：<ul><li>各种内存和缓冲池</li><li>与垃圾回收有关的统计</li><li>线程利用率</li><li>加载/卸载 class 的数量</li></ul></li><li>CPU 指标</li><li>文件描述符指标</li><li>Kafka 消费者指标</li><li>Log4j2 指标：记录每个级别记录到 Log4j2 的事件数</li><li>Logback 指标：记录每个级别记录到 Logback 的事件数</li><li>正常运行时间指标：报告正常运行时间和表示应用程序绝对启动时间的固定计量值</li><li>Tomcat 指标</li><li><a href="https://docs.spring.io/spring-integration/docs/current/reference/html/system-management-chapter.html#micrometer-integration">Spring Integration</a> 指标</li></ul><p><a id="production-ready-metrics-spring-mvc"></a></p><h4 id="57-3-1、Spring-MVC-指标">57.3.1、Spring MVC 指标</h4><p>自动配置启用 Spring MVC 处理的请求的指标记录。当 <code>management.metrics.web.server.auto-time-requests</code> 为 <code>true</code> 时，将对所有请求进行此检测。或者，当设置为 <code>false</code> 时，你可以通过将 <code>@Timed</code> 添加到请求处理方法来启用检测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Timed</span> <span class="comment">// &lt;1&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/api/people&quot;)</span></span><br><span class="line"><span class="meta">@Timed(extraTags = &#123; &quot;region&quot;, &quot;us-east-1&quot; &#125;)</span> <span class="comment">// &lt;2&gt;</span></span><br><span class="line"><span class="meta">@Timed(value = &quot;all.people&quot;, longTask = true)</span> <span class="comment">// &lt;3&gt;</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">listPeople</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>一个控制器类，为控制器中的每个请求处理程序启用计时。</li><li>启用单个端点。如果你在类上使用了它，就不需要在方法上再次声明，但可以用它来进一步自定义该特定端点的计时器。</li><li>使用 <code>longTask = true</code> 的方法为该方法启用长任务计时器。长任务计时器需要单独的指标名称，并且可以使用短任务计时器进行堆叠。</li></ol><p>默认情况下，使用名称为 <code>http.server.requests</code> 生成度量指标。可以通过设置 <code>management.metrics.web.server.requests-metric-name</code> 属性来自定义名称。</p><p>默认情况下，Spring MVC 相关指标使用了以下标签标记：</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>exception</code></td><td>处理请求时抛出的异常的简单类名。</td></tr><tr><td><code>method</code></td><td>请求的方法（例如，<code>GET</code> 或 <code>POST</code>）</td></tr><tr><td><code>outcome</code></td><td>根据响应状态码生成结果。1xx 是 <code>INFORMATIONAL</code>，2xx 是 <code>SUCCESS</code>，3xx 是 <code>REDIRECTION</code>，4xx 是 <code>CLIENT_ERROR</code>，5xx 是 <code>SERVER_ERROR</code></td></tr><tr><td><code>status</code></td><td>响应的 HTTP 状态码（例如，<code>200</code> 或 <code>500</code>）</td></tr><tr><td><code>uri</code></td><td>如果可能，在变量替换之前请求 URI 模板（例如，<code>/api/person/&#123;id&#125;</code>）</td></tr></tbody></table><p>要自定义标签，请提供一个实现了 <code>WebMvcTagsProvider</code> 的 <code>@Bean</code>。</p><p><a id="production-ready-metrics-web-flux"></a></p><h4 id="57-3-2、Spring-WebFlux-指标">57.3.2、Spring WebFlux 指标</h4><p>自动配置启用了 WebFlux 控制器和函数式处理程序处理的所有请求的指标记录功能。</p><p>默认情况下，使用名为 <code>http.server.requests</code> 生成度量指标。你可以通过设置 <code>management.metrics.web.server.requests-metric-name</code> 属性来自定义名称。</p><p>默认情况下，与 WebFlux 相关的指标使用以下标签标记：</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>exception</code></td><td>处理请求时抛出的异常的简单类名。</td></tr><tr><td><code>method</code></td><td>请求方法（例如，<code>GET</code>或 <code>POST</code>）</td></tr><tr><td><code>outcome</code></td><td>根据响应状态码生成请求结果。1xx 是 <code>INFORMATIONAL</code>，2xx 是 <code>SUCCESS</code>，3xx 是 <code>REDIRECTION</code>，4xx 是 <code>CLIENT_ERROR</code>，5xx 是 <code>SERVER_ERROR</code></td></tr><tr><td><code>status</code></td><td>响应的 HTTP 状态码（例如，<code>200</code> 或 <code>500</code>）</td></tr><tr><td><code>uri</code></td><td>如果可能，在变量替换之前请求 URI 模板（例如，<code>/api/person/&#123;id&#125;</code>）</td></tr></tbody></table><p>要自定义标签，请提供一个实现了 <code>WebFluxTagsProvider</code> 的 <code>@Bean</code>。</p><p><a id="production-ready-metrics-jersey-server"></a></p><h4 id="57-3-3、Jersey-Server-指标">57.3.3、Jersey Server 指标</h4><p>自动配置启用了由 Jersey JAX-RS 实现处理的请求的指标记录功能。当 <code>management.metrics.web.server.auto-time-requests</code> 为 <code>true</code> 时，将对所有请求进行该项检测。当设置为 <code>false</code> 时，你可以通过将 <code>@Timed</code> 添加到请求处理方法上来启用检测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Path(&quot;/api/people&quot;)</span></span><br><span class="line"><span class="meta">@Timed</span> <span class="comment">// &lt;1&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Endpoint</span> &#123;</span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="meta">@Timed(extraTags = &#123; &quot;region&quot;, &quot;us-east-1&quot; &#125;)</span> <span class="comment">// &lt;2&gt;</span></span><br><span class="line"><span class="meta">@Timed(value = &quot;all.people&quot;, longTask = true)</span> <span class="comment">// &lt;3&gt;</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Person&gt; <span class="title function_">listPeople</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在资源类上，为资源中的每个请求处理程序启用计时。</li><li>在方法上则启用单个端点。如果你在类上使用了它，则不需在方法上再次声明，但可以用它来进一步自定义该特定端点的计时器。</li><li>在有 <code>longTask = true</code> 的方法上，为该方法启用长任务计时器。长任务计时器需要单独的度量名称，并且可以使用短任务计时器进行堆叠。</li></ol><p>默认情况下，使用名为 <code>http.server.requests</code> 生成度量指标。可以通过设置 <code>management.metrics.web.server.requests-metric-name</code> 属性来自定义名称。</p><p>默认情况下，Jersey 服务器指标使用以下标签标记：</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><code>exception</code></td><td>处理请求时抛出的异常的简单类名。</td></tr><tr><td><code>method</code></td><td>请求的方法（例如，<code>GET</code> 或 <code>POST</code>）</td></tr><tr><td><code>outcome</code></td><td>根据响应状态码生成的请求结果。1xx 是 <code>INFORMATIONAL</code>，2xx 是 <code>SUCCESS</code>，3xx 是 <code>REDIRECTION</code>，4xx 是 <code>CLIENT_ERROR</code>，5xx 是 <code>SERVER_ERROR</code></td></tr><tr><td><code>status</code></td><td>响应的 HTTP 状态码（例如，<code>200</code>或 <code>500</code>）</td></tr><tr><td><code>uri</code></td><td>如果可能，在变量替换之前请求 URI 模板（例如，<code>/api/person/&#123;id&#125;</code>）</td></tr></tbody></table><p>要自定义标签，请提供一个实现了 <code>JerseyTagsProvider</code> 的 <code>@Bean</code>。</p><p><a id="production-ready-metrics-http-clients"></a></p><h4 id="57-3-4、HTTP-Client-指标">57.3.4、HTTP Client 指标</h4><p>Spring Boot Actuator 管理 RestTemplate 和 WebClient 的指标记录。为此，你必须注入一个自动配置的 builder 并使用它来创建实例：</p><ul><li><code>RestTemplateBuilder</code> 用于 <code>RestTemplate</code></li><li><code>WebClient.Builder</code> 用于 <code>WebClient</code></li></ul><p>也可以手动指定负责此指标记录的自定义程序，即 <code>MetricsRestTemplateCustomizer</code> 和 <code>MetricsWebClientCustomizer</code>。</p><p>默认情况下，使用名为 <code>http.client.requests</code> 生成度量指标。可以通过设置 <code>management.metrics.web.client.requests-metric-name</code> 属性来自定义名称。</p><p>默认情况下，已指标记录客户端生成的度量指标使用以下标签标记：</p><ul><li><code>method</code>，请求的方法（例如，<code>GET</code>或 <code>POST</code>）。</li><li><code>uri</code>，变量替换之前的请求 URI 模板（如果可能）（例如，<code>/api/person/&#123;id&#125;</code>）。</li><li><code>status</code>，响应的 HTTP 状态码（例如，<code>200</code> 或 <code>500</code>）。</li><li><code>clientName</code>，URI 的主机部分 。</li></ul><p>要根据你选择的客户端自定义标签，你可以提供一个实现了 <code>RestTemplateExchangeTagsProvider</code> 或 <code>WebClientExchangeTagsProvider</code> 的 <code>@Bean</code>。<code>RestTemplateExchangeTags</code> 和 <code>WebClientExchangeTags</code> 中有便捷的静态函数。</p><p><a id="production-ready-metrics-cache"></a></p><h4 id="57-3-5、Cache-指标">57.3.5、Cache 指标</h4><p>在启动时，自动配置启动所有可用 <code>Cache</code> 的指标记录功能，指标以 <code>cache</code> 为前缀。缓存指标记录针对一组基本指标进行了标准化。此外，还提供了缓存特定的指标。</p><p>支持以下缓存库：</p><ul><li>Caffeine</li><li>EhCache 2</li><li>Hazelcast</li><li>所有兼容 JCache（JSR-107）的实现</li></ul><p>度量指标由缓存的名称和从 bean 名称派生的 <code>CacheManager</code> 的名称标记。</p><p><strong>注意</strong></p><blockquote><p>只有启动时可用的缓存才会绑定到注册表。对于在启动阶段之后即时或以编程方式创建的缓存，需要显式注册。可用 <code>CacheMetricsRegistrar</code> bean 简化该过程。</p></blockquote><p><a id="production-ready-metrics-jdbc"></a></p><h4 id="57-3-6、数据源指标">57.3.6、数据源指标</h4><p>自动配置启用对所有可用 <code>DataSource</code> 对象进行指标记录功能，指标的名称为 <code>jdbc</code>。数据源指标记录会生成表示池中当前活动、大允许和最小允许连接的计量器（gauge）。这些计量器都有一个以 <code>jdbc</code> 为前缀的名称。</p><p>度量指标也由基于 bean 名称计算的 <code>DataSource</code> 的名称标记。</p><p><strong>提示</strong></p><blockquote><p>默认情况下，Spring Boot 为所有支持的数据源提供了元数据。如果开箱即用不支持你喜欢的数据源，则可以添加其他 <code>DataSourcePoolMetadataProvider</code> bean。有关示例，请参阅 <code>DataSourcePoolMetadataProvidersConfiguration</code>。</p></blockquote><p>此外，Hikari 特定的指标用 <code>hikaricp</code> 前缀暴露。每个度量指标都由池名称标记（可以使用 <code>spring.datasource.name</code> 控制）。</p><p><a id="production-ready-metrics-hibernate"></a></p><h4 id="57-3-7、Hibernate-指标">57.3.7、Hibernate 指标</h4><p>自动配置启用所有可用 Hibernate <code>EntityManagerFactory</code> 实例的指标记录功能，这些实例使用名为 <code>hibernate</code> 的度量指标统计信息。</p><p>度量指标也由从 bean 名称派生的 <code>EntityManagerFactory</code> 的名称标记。</p><p>要启用信息统计，必须将标准 JPA 属性 <code>hibernate.generate_statistics</code> 设置为 <code>true</code>。你可以在自动配置的 <code>EntityManagerFactory</code> 上启用它，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jpa.properties.hibernate.generate_statistics</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-rabbitmq"></a></p><h4 id="57-3-8、RabbitMQ-指标">57.3.8、RabbitMQ 指标</h4><p>自动配置将使用名为 <code>rabbitmq</code> 的度量指标启用对所有可用 RabbitMQ 连接工厂进行指标记录。</p><p><a id="production-ready-metrics-custom"></a></p><h3 id="57-4、注册自定义指标">57.4、注册自定义指标</h3><p>要注册自定义指标，请将 <code>MeterRegistry</code> 注入你的组件中，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dictionary</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; words = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Dictionary(MeterRegistry registry) &#123;</span><br><span class="line">registry.gaugeCollectionSize(<span class="string">&quot;dictionary.size&quot;</span>, Tags.empty(), <span class="built_in">this</span>.words);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// …</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你发现跨组件或应用程序重复记录一套度量指标，则可以将此套件封装在 <code>MeterBinder</code> 实现中。默认情况下，所有 <code>MeterBinder</code> bean 的指标都将自动绑定到 Spring 管理的 <code>MeterRegistry</code>。</p><p><a id="production-ready-metrics-per-meter-properties"></a></p><h3 id="57-5、自定义单独指标">57.5、自定义单独指标</h3><p>如果需要将自定义特定的 <code>Meter</code> 实例，可以使用 <code>io.micrometer.core.instrument.config.MeterFilter</code> 接口。默认情况下，所有 <code>MeterFilter</code> bean 都将自动应用于 <code>MeterRegistry.Config</code>。</p><p>例如，如果要将 <code>mytag.region</code> 标记重命名为 <code>mytag.area</code> 以获取以 <code>com.example</code> 开头的所有 meter ID，则可以执行以下操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MeterFilter <span class="title function_">renameRegionTagMeterFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> MeterFilter.renameTag(<span class="string">&quot;com.example&quot;</span>, <span class="string">&quot;mytag.region&quot;</span>, <span class="string">&quot;mytag.area&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="production-ready-metrics-common-tags"></a></p><h4 id="57-5-1、自定义标签">57.5.1、自定义标签</h4><p>通用标签通常用于操作环境中的维度下钻，例如主机、实例、区域、堆栈等。通用标签应用于所有 meter，并且可以按照以下示例进行配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.tags.region</span>=us-east-<span class="number">1</span></span><br><span class="line"><span class="attr">management.metrics.tags.stack</span>=prod</span><br></pre></td></tr></table></figure><p>上面的示例将 <code>region</code> 和 <code>stack</code> 标签添加到所有 meter 中，其值分别为 <code>us-east-1</code> 和 <code>prod</code>。</p><p><strong>注意</strong></p><blockquote><p>如果你使用 Graphite，那么标签的顺序很重要。由于使用此方法无法保证通用标签的顺序，因此建议 Graphite 用户定义自定义 <code>MeterFilter</code>。</p></blockquote><p><a id="_per_meter_properties"></a></p><h4 id="57-5-2、Per-meter-属性">57.5.2、Per-meter 属性</h4><p>除了 <code>MeterFilter</code> bean 之外，还可以使用 properties 在 per-meter 基础上自定义。Per-meter 定义适用于以给定名称开头的所有 meter ID。例如，以下将禁用任何以 <code>example.remote</code> 开头的 ID 的 meter：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.metrics.enable.example.remote</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>以下属性允许 per-meter 自定义：</p><p><strong>表 57.1、Per-meter 自定义</strong></p><p>| 属性 | 描述 |<br>| <code>management.metrics.enable</code> | 是否拒绝 meter 发布任何指标。 |<br>| <code>management.metrics.distribution.percentiles-histogram</code> | 是否发布一个适用于计算可聚合（跨维度）的百分比近似柱状图。 |<br>| <code>management.metrics.distribution.minimum-expected-value</code>，<br/> <code>management.metrics.distribution.maximum-expected-value</code>| 通过限制预期值的范围来发布较少的柱状图桶。 |<br>| <code>management.metrics.distribution.percentiles</code> | 发布在你自己的应用程序中计算的百分比数值 |<br>| <code>management.metrics.distribution.sla</code> | 发一个使用 SLA 定义的存储桶发布累积柱状图。 |</p><p>有关 <code>percentiles-histogram</code>、<code>percentiles</code> 和 <code>sla</code> 概念的更多详细信息，请参阅「<a href="https://micrometer.io/docs/concepts#_histograms_and_percentiles">柱状图与百分位数</a>」部分的文档。</p><p><a id="production-ready-metrics-endpoint"></a></p><h3 id="57-6、指标端点">57.6、指标端点</h3><p>Spring Boot 提供了一个 <code>metrics</code> 端点，可以在诊断中用于检查应用程序收集的度量指标。默认情况下端点不可用，必须手动暴露，请参阅<a href="#production-ready-endpoints-exposing-endpoints">暴露端点</a>以获取更多详细信息。</p><p>访问 <code>/actuator/metrics</code> 会显示可用的 meter 名称列表。你可以查看某一个 meter 的信息，方法是将其名称作为选择器，例如，<code>/actuator/metrics/jvm.memory.max</code>。</p><p><strong>提示</strong></p><blockquote><p>你在此处使用的名称应与代码中使用的名称相匹配，而不是在命名约定规范化后的名称 —— 为了发送到监控系统。换句话说，如果 <code>jvm.memory.max</code> 由于 Prometheus 命名约定而显示为 <code>jvm_memory_max</code>，则在审查度量指标端点中的 meter 时，应仍使用 <code>jvm.memory.max</code> 作为选择器。</p></blockquote><p>你还可以在 URL 的末尾添加任意数量的 <code>tag=KEY:VALUE</code> 查询参数，以便多维度向下钻取 meter，例如 <code>/actuator/metrics/jvm.memory.max?tag=area:nonheap</code>。</p><p><strong>提示</strong></p><p>报告的测量值是与 meter 名称和已应用的任何标签匹配的所有 meter 的统计数据的总和。因此，在上面的示例中，返回的 Value 统计信息是堆的 Code Cache，Compressed Class Space 和 Metaspace 区域的最大内存占用量的总和。如果你只想查看 Metaspace 的最大大小，可以添加一个额外的 <code>tag=id:Metaspace</code>，即 <code>/actuator/metrics/jvm.memory.max?tag=area:nonheap&amp;tag=id:Metaspace</code>。</p><p><a id="production-ready-auditing"></a></p><h2 id="58、审计">58、审计</h2><p>一旦 Spring Security 生效，Spring Boot Actuator 就拥有一个灵活的审计框架，它可以发布事件（默认情况下，<code>authentication success</code>、<code>failure</code> 和 <code>access denied</code> 例外）。此功能对事件报告和基于身份验证失败实现一个锁定策略非常有用。要自定义发布的安全事件，你可以提供自己的 <code>AbstractAuthenticationAuditListener</code> 和 <code>AbstractAuthorizationAuditListener</code> 实现。</p><p>你还可以将审计服务用于自己的业务事件。为此，请将现有的 <code>AuditEventRepository</code> 注入自己的组件并直接使用它或使用 Spring <code>ApplicationEventPublisher</code>（通过实现 <code>ApplicationEventPublisherAware</code>）发布 <code>AuditApplicationEvent</code>。</p><p><a id="production-ready-http-tracing"></a></p><h2 id="59、HTTP-追踪">59、HTTP 追踪</h2><p>所有 HTTP 请求将自动启用追踪功能。你可以通过查看 <code>httptrace</code> 端点来获取最近相关的 100 个请求响应信息。</p><p><a id="production-ready-http-tracing-custom"></a></p><h3 id="59-1、自定义-HTTP-追踪">59.1、自定义 HTTP 追踪</h3><p>要自定义每个追踪信息中包含的项，请使用 <code>management.trace.http.include</code> 属性配置。对于高级自定义，请考虑注册自己的 <code>HttpExchangeTracer</code> 实现。</p><p>默认情况下，使用一个 <code>InMemoryHttpTraceRepository</code> 存储最新的 100 个请求响应信息。如果需要扩展容量，可定义自己的 <code>InMemoryHttpTraceRepository</code> bean 实例。你还可以创建自己的 <code>HttpTraceRepository</code> 实现来替代默认配置。</p><p><a id="production-ready-process-monitoring"></a></p><h2 id="60、进程监控">60、进程监控</h2><p>在 <code>spring-boot</code> 模块中，你可以找到两个类来创建文件，他们通常用于进程监控：</p><ul><li><code>ApplicationPidFileWriter</code> 创建一个包含应用程序 PID 的文件（默认在应用程序目录中，文件名为 <code>application.pid</code>）。</li><li><code>WebServerPortFileWriter</code> 创建一个或多个文件，其包含正在运行的 Web 服务器的端口（默认在应用程序目录中，文件名为 <code>application.port</code>）。</li></ul><p>默认情况下，这些 writer 未激活，但你可以启用：</p><ul><li><a href="#production-ready-process-monitoring-configuration">扩展配置</a></li><li><a href="#production-ready-process-monitoring-programmatically">第 60.2 节、编程方式</a></li></ul><p><a id="production-ready-process-monitoring-configuration"></a></p><h3 id="60-1、扩展配置">60.1、扩展配置</h3><p>你可以在 <code>META-INF/spring.factories</code> 文件中激活生成和写入 PID 文件的监听器（Listener），如下所示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.context</span>.ApplicationListener=\</span><br><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.context</span><span class="selector-class">.ApplicationPidFileWriter</span>,\</span><br><span class="line">org<span class="selector-class">.springframework</span><span class="selector-class">.boot</span><span class="selector-class">.web</span><span class="selector-class">.context</span>.WebServerPortFileWriter</span><br></pre></td></tr></table></figure><p><a id="production-ready-process-monitoring-configuration"></a></p><h3 id="60-2、编程方式">60.2、编程方式</h3><p>你还可以通过调用 <code>SpringApplication.addListeners(...)</code> 方法并传递相应的 <code>Writer</code> 对象来激活监听器。此方法还允许你在 <code>Writer</code> 构造方法中自定义文件名和路径。</p><p><a id="production-ready-cloudfoundry"></a></p><h2 id="61、Cloud-Foundry-支持">61、Cloud Foundry 支持</h2><p>当你部署到一个兼容 Cloud Foundry 的实例时，Spring Boot 的 Actuator 模块包含的其他支持将被激活。<code>/cloudfoundryapplication</code> 路径为所有 <code>@Endpoint</code> bean 提供了另外一个安全路由。</p><p>该扩展支持允许使用 Spring Boot Actuator 信息扩充 Cloud Foundry 管理 UI（例如可用于查看已部署应用的 Web 应用）。比如，应用程序状态页面可以包括完整的健康信息而不是常见的 running 或 stop 状态。</p><p><strong>注意</strong></p><blockquote><p>常规用户无法直接访问 <code>/cloudfoundryapplication</code> 路径。为了能访问端点，你必须在请求时传递一个有效的 UAA 令牌。</p></blockquote><p><a id="production-ready-cloudfoundry-disable"></a></p><h3 id="61-1、禁用-Cloud-Foundry-Actuator-扩展支持">61.1、禁用 Cloud Foundry Actuator 扩展支持</h3><p>如果要完全禁用 <code>/cloudfoundryapplication</code> 端点，可以将以下设置添加到 <code>application.properties</code> 文件中：</p><p><strong>application.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.cloudfoundry.enabled</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><a id="production-ready-cloudfoundry-ssl"></a></p><h3 id="61-2、Cloud-Foundry-自签名证书">61.2、Cloud Foundry 自签名证书</h3><p>默认情况下，<code>/cloudfoundryapplication</code> 端点的安全验证会对各种 Cloud Foundry 服务进行 SSL 调用。如果你的 Cloud Foundry UAA 或 Cloud Controller 服务使用自签名证书，则需要设置以下属性：</p><p><strong>application.properties</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management.cloudfoundry.skip-ssl-validation</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><a id="_custom_context_path"></a></p><h3 id="61-3、自定义上下文路径">61.3、自定义上下文路径</h3><p>如果服务器的 context-path 已配置为 <code>/</code> 以外的其他内容，则 Cloud Foundry 端点将无法在应用程序的根目录中使用。例如，如果 <code>server.servlet.context-path=/app</code>，Cloud Foundry 端点将在 <code>/app/cloudfoundryapplication/*</code> 上可用。</p><p>如果你希望 Cloud Foundry 端点始终在 <code>/cloudfoundryapplication/*</code> 上可用，则无论服务器的 context-path 如何，你都需要在应用程序中明确配置它。配置因使用的 Web 服务器而有所不同。针对 Tomcat，可以添加以下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> TomcatServletWebServerFactory <span class="title function_">servletWebServerFactory</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">prepareContext</span><span class="params">(Host host,</span></span><br><span class="line"><span class="params">ServletContextInitializer[] initializers)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.prepareContext(host, initializers);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">child</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardContext</span>();</span><br><span class="line">child.addLifecycleListener(<span class="keyword">new</span> <span class="title class_">Tomcat</span>.FixContextListener());</span><br><span class="line">child.setPath(<span class="string">&quot;/cloudfoundryapplication&quot;</span>);</span><br><span class="line"><span class="type">ServletContainerInitializer</span> <span class="variable">initializer</span> <span class="operator">=</span> getServletContextInitializer(</span><br><span class="line">getContextPath());</span><br><span class="line">child.addServletContainerInitializer(initializer, Collections.emptySet());</span><br><span class="line">child.setCrossContext(<span class="literal">true</span>);</span><br><span class="line">host.addChild(child);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ServletContainerInitializer <span class="title function_">getServletContextInitializer</span><span class="params">(String contextPath)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (c, context) -&gt; &#123;</span><br><span class="line"><span class="type">Servlet</span> <span class="variable">servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericServlet</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">context</span> <span class="operator">=</span> req.getServletContext()</span><br><span class="line">.getContext(contextPath);</span><br><span class="line">context.getRequestDispatcher(<span class="string">&quot;/cloudfoundryapplication&quot;</span>).forward(req,</span><br><span class="line">res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">context.addServlet(<span class="string">&quot;cloudfoundry&quot;</span>, servlet).addMapping(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="production-ready-whats-next"></a></p><h2 id="62、下一步">62、下一步</h2><p>如果你想了解本章中讨论的一些概念，你可以查看 actuator <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.5.RELEASE/spring-boot-samples">示例应用程序</a>。或许你还想了解 <a href="https://graphite.wikidot.com/">Graphite</a> 等图形工具的相关知识。</p><p>此外，你可以继续阅读<a href="deployment.md">应用部署</a>相关内容，或继续阅读有关 Spring Boot <a href="build-tool-plugins.md">构建工具插件</a>的相关内容。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06pring Boot 的部署</title>
      <link href="/posts/fed2c244.html"/>
      <url>/posts/fed2c244.html</url>
      
        <content type="html"><![CDATA[<p><a id="deployment"></a></p><h1>六、部署 Spring Boot 应用程序</h1><p>Spring Boot 的可执行 jar 是现成的，适用于大多数流行的云 PaaS（Platform-as-a-Service，平台即服务）提供商。这些提供商往往要求你「自带容器」。它们负责管理应用程序进程（而不是 Java 应用程序），因此它们需要一个中间层，使你的应用程序适应云概念中的运行进程。</p><p>有两个流行的云提供商 Heroku 和 Cloud Foundry 采用了 buildpack 方式。buildpack 将你部署的代码包装在启动应用程序所需的环境中。它可能是一个用于调用 <code>java</code> 的 JDK、一个内嵌 Web 服务器或一个完整的应用程序服务器。buildpack 是可插拔的，但理想情况下，你应尽可能少地进行自定义。其减少了不受控制的功能数，最大限度地减少了开发和生产环境之间的差异。</p><p>理想情况下，你的应用程序（比如一个 Spring Boot 可执行 jar）打包了运行所需的所有内容。</p><p>在本节中，我们将使用「<a href="getting-started.md">起步</a>」章节中开发的一个<a href="getting-started.md#getting-started-first-application">简单应用程序</a>作为范例，并将其运行在云中。</p><p><strong>待续</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04Spring Boot的特性</title>
      <link href="/posts/f0bff9f3.html"/>
      <url>/posts/f0bff9f3.html</url>
      
        <content type="html"><![CDATA[<p><a id="boot-features"></a></p><h1>四、Spring Boot 特性</h1><p>本部分将介绍 Spring Boot 相关的细节内容。在这里，您可以学习到可能需要使用和自定义的主要功能。您如果还没有做好充分准备，可能需要阅读<a href="#getting-started">第二部分：入门</a>和<a href="#using-boot">第三部分：使用 Spring Boot</a>，以便打下前期基础。</p><p><a id="boot-features-spring-application"></a></p><h2 id="23、SpringApplication">23、SpringApplication</h2><p><code>SpringApplication</code> 类提供了一种可通过运行 <code>main()</code> 方法来启动 Spring 应用的简单方式。多数情况下，您只需要委托给静态的 <code>SpringApplication.run</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(MySpringConfiguration.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当应用启动时，您应该会看到类似以下的内容输出：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ |<span class="string"> &#x27;_ </span>|<span class="string"> &#x27;_</span>|<span class="string"> </span>|<span class="string"> &#x27;_ \/ _` </span>|<span class="string"> \ \ \ \</span></span><br><span class="line"><span class="string"> \\/  ___)</span>|<span class="string"> </span>|<span class="string">_)</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>||<span class="string"> (_</span>|<span class="string"> </span>|<span class="string">  ) ) ) )</span></span><br><span class="line"><span class="string">  &#x27;  </span>|<span class="string">____</span>|<span class="string"> .__</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_\__, </span>|<span class="string"> / / / /</span></span><br><span class="line"><span class="string"> =========</span>|<span class="string">_</span>|<span class="string">==============</span>|<span class="string">___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::   v2.1.1.RELEASE</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2013-07-31 00:08:16.117  INFO 56603 --- [           main] o.s.b.s.app.SampleApplication            : Starting SampleApplication v0.1.0 on mycomputer with PID 56603 (/apps/myapp.jar started by pwebb)</span></span><br><span class="line"><span class="string">2013-07-31 00:08:16.166  INFO 56603 --- [           main] ationConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@6e5a8246: startup date [Wed Jul 31 00:08:16 PDT 2013]; root of context hierarchy</span></span><br><span class="line"><span class="string">2014-03-04 13:09:54.912  INFO 41370 --- [           main] .t.TomcatServletWebServerFactory : Server initialized with port: 8080</span></span><br><span class="line"><span class="string">2014-03-04 13:09:56.501  INFO 41370 --- [           main] o.s.b.s.app.SampleApplication            : Started SampleApplication in 2.992 seconds (JVM running for 3.658)</span></span><br></pre></td></tr></table></figure><p>默认情况下，将显示 <code>INFO</code> 级别的日志信息，包括一些应用启动相关信息。如果您需要修改 <code>INFO</code> 日志级别，请参考 <a href="#boot-features-custom-log-levels">26.4 部分：日志等级</a>。</p><p><a id="boot-features-startup-failure"></a></p><h3 id="23-1、启动失败">23.1、启动失败</h3><p>如果您的应用无法启动，注册的 <code>FailureAnalyzers</code> 可能会提供有相关的错误信息和解决问题的具体方法。例如，如果您在已经被占用的 <code>8080</code> 端口上启动了一个 web 应用，会看到类似以下的错误信息：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">***</span></span><br><span class="line"><span class="strong">APPLICATION FAILED TO START</span></span><br><span class="line"><span class="strong">**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span>*</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Embedded servlet container failed to start. Port 8080 was already in use.</span><br><span class="line"></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Identify and stop the process that&#x27;s listening on port 8080 or configure this application to listen on another port.</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>Spring Boot 提供了许多的 <code>FailureAnalyzer</code> 实现，您也可以<a href="#howto-failure-analyzer">添加自己的实现</a>。</p></blockquote><p>如果没有失败分析器能够处理的异常，您仍然可以显示完整的条件报告以便更好地了解出现的问题。为此，您需要针对 <code>org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener</code> <a href="#boot-features-external-config">启用 <code>debug</code> 属性</a>或者<a href="#boot-features-custom-log-levels">开启 <code>DEBUG</code> 日志</a>。</p><p>例如，如果您使用 <code>java -jar</code> 运行应用，可以按以下方式启用 <code>debug</code> 属性：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">java </span>-<span class="keyword">jar </span>myproject<span class="number">-0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.<span class="keyword">jar </span>--<span class="built_in">debug</span></span><br></pre></td></tr></table></figure><p><a id="boot-features-banner"></a></p><h3 id="23-2、自定义-banner">23.2、自定义 banner</h3><p>可以通过在 classpath 下添加一个 <code>banner.txt</code> 文件，或者将 <code>spring.banner.location</code> 属性指向该文件的位置来更改启动时打印的 banner。如果文件采用了非 UTF-8 编码，您可以设置 <code>spring.banner.charset</code> 来解决。除了文本文件，您还可以将 <code>banner.gif</code>、<code>banner.jpg</code> 或者 <code>banner.png</code> 图片文件添加到 classpath 下，或者设置 <code>spring.banner.image.location</code> 属性。指定的图片将会被转换成 ASCII 形式并打印在 banner 文本上方。</p><p>您可以在 <code>banner.txt</code> 文件中使用以下占位符：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>$&#123;application.version&#125;</code></td><td>您的应用版本号，声明在 <code>MANIFEST.MF</code> 中。例如，<code>Implementation-Version: 1.0</code> 将被打印为 <code>1.0</code>。</td></tr><tr><td><code>$&#123;application.formatted-version&#125;</code></td><td>您的应用版本号，声明在 <code>MANIFEST.MF</code> 中，格式化之后打印（用括号括起来，以 <code>v</code> 为前缀），例如 (<code>v1.0</code>)。</td></tr><tr><td><code>$&#123;spring-boot.version&#125;</code></td><td>您使用的 Spring Boot 版本。例如 <code>2.1.1.RELEASE.</code>。</td></tr><tr><td><code>$&#123;spring-boot.formatted-version&#125;</code></td><td>您使用的 Spring Boot 版本格式化之后显示（用括号括起来，以 <code>v</code> 为前缀）。例如 (<code>v2.1.1.RELEASE</code>)。</td></tr><tr><td><code>$&#123;Ansi.NAME&#125;</code>（或 <code>$&#123;AnsiColor.NAME&#125;</code>、<br/><code>$&#123;AnsiBackground.NAME&#125;</code>、<br/><code>$&#123;AnsiStyle.NAME&#125;</code>）</td><td>其中 <code>NAME</code> 是 ANSI 转义码的名称。有关详细信息，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiPropertySource.java">AnsiPropertySource</a>。</td></tr><tr><td><code>$&#123;application.title&#125;</code></td><td>您的应用标题，声明在 <code>MANIFEST.MF</code> 中，例如 <code>Implementation-Title: MyApp</code> 打印为 <code>MyApp</code>。</td></tr></tbody></table><p><strong>提示</strong></p><blockquote><p>如果您想以编程的方式生成 banner，可以使用 <code>SpringApplication.setBanner(​...)</code> 方法。使用 <code>org.springframework.boot.Banner</code> 接口并实现自己的 <code>printBanner()</code> 方法。</p></blockquote><p>您还可以使用 <code>spring.main.banner-mode</code> 属性来确定是否必须在 <code>System.out</code>（<code>console</code>）上打印 banner，还是使用日志记录器（<code>log</code>）或者都不打印（<code>off</code>）。</p><p>打印的 banner 被注册名为 <code>springBootBanner</code> 的单例 bean。</p><p><strong>注意</strong></p><blockquote><p>YAML 将 <code>off</code> 映射为 <code>false</code>，因此如果要禁用应用程序 banner，请确保属性添加引号。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">main:</span></span><br><span class="line">        <span class="attr">banner-mode:</span> <span class="string">&quot;off&quot;</span></span><br></pre></td></tr></table></figure><p><a id="boot-features-customizing-spring-application"></a></p><h3 id="23-3、自定义-SpringApplication">23.3、自定义 SpringApplication</h3><p>如果 <code>SpringApplication</code> 的默认设置不符合您的想法，您可以创建本地实例进行定制化。例如，要关闭 banner，您可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">SpringApplication</span> <span class="variable">app</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(MySpringConfiguration.class);</span><br><span class="line">app.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">app.run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>传入 <code>SpringApplication</code> 的构造参数是 spring bean 的配置源。大多情况下是引用 <code>@Configuration</code> 类，但您也可以引用 XML 配置或者被扫描的包。</p></blockquote><p>也可以使用 <code>application.properties</code> 文件配置 <code>SpringApplication</code>。有关详细信息，请参见<a href="#boot-features-external-config">第 24 章：外部化配置</a>。</p><p>关于配置选项的完整列表，请参阅 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/SpringApplication.html">SpringApplication Javadoc</a>。</p><p><a id="boot-features-customizing-spring-application"></a></p><h3 id="23-4、Fluent-Builder-API">23.4、Fluent Builder API</h3><p>如果您需要构建一个有层级关系的 <code>ApplicationContext</code>（具有父/子关系的多上下文），或者偏向使用 <strong>fluent</strong>（流式）构建器 API，可以使用 <code>SpringApplicationBuilder</code>。</p><p><code>SpringApplicationBuilder</code> 允许您链式调用多个方法，包括能创建出具有层次结构的 <code>parent</code> 和 <code>child</code> 方法。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>()</span><br><span class="line">        .sources(Parent.class)</span><br><span class="line">        .child(Application.class)</span><br><span class="line">        .bannerMode(Banner.Mode.OFF)</span><br><span class="line">        .run(args);</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>创建层级的 <code>ApplicationContext</code> 时有部分限制，比如 Web 组件<strong>必须</strong>包含在子上下文中，并且相同的 <code>Environment</code> 将作用于父子上下文。有关详细信息，请参阅 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/builder/SpringApplicationBuilder.html">SpringApplicationBuilder Javadoc</a>。</p></blockquote><p><a id="boot-features-application-events-and-listeners"></a></p><h3 id="23-5、应用程序事件与监听器">23.5、应用程序事件与监听器</h3><p>除了常见的 Spring Framework 事件，比如 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/context/event/ContextRefreshedEvent.html"><code>ContextRefreshedEvent</code></a>，<code>SpringApplication</code> 还会发送其他应用程序事件。</p><p><strong>注意</strong></p><blockquote><p>在 <code>ApplicationContext</code> 创建之前，实际上触发了一些事件，因此您不能像 <code>@Bean</code> 一样注册监听器。您可以通过 <code>SpringApplication.addListeners(​...)</code> 或者 <code>SpringApplicationBuilder.listeners(...​)</code> 方法注册它们。如果您希望无论应用使用何种创建方式都能自动注册这些监听器，您都可以将 <code>META-INF/spring.factories</code> 文件添加到项目中，并使用 <code>org.springframework.context.ApplicationListener </code> 属性键指向您的监听器。比如：<code>org.springframework.context.ApplicationListener=com.example.project.MyListener</code></p></blockquote><p>当您运行应用时，应用程序事件将按照以下顺序发送：</p><ol><li>在开始应用开始运行但还没有进行任何处理时（除了注册监听器和初始化器[initializer]），将发送 <code>ApplicationStartingEvent</code>。</li><li>当 <code>Environment</code> 被上下文使用，但是在上下文创建之前，将发送 <code>ApplicationEnvironmentPreparedEvent</code>。</li><li>在开始刷新之前，bean 定义被加载之后发送 <code>ApplicationPreparedEvent</code>。</li><li>在上下文刷新之后且所有的应用和命令行运行器（command-line runner）被调用之前发送 <code>ApplicationStartedEvent</code>。</li><li>在应用程序和命令行运行器（command-line runner）被调用之后，将发出 <code>ApplicationReadyEvent</code>，该事件用于通知应用已经准备处理请求。</li><li>如果启动时发生异常，将发送 <code>ApplicationFailedEvent</code>。</li></ol><p><strong>提示</strong></p><blockquote><p>您可能不会经常使用应用程序事件，但了解他们的存在还是很有必要的。在框架内部，Spring Boot 使用这些事件来处理各种任务。</p></blockquote><p>应用程序事件发送使用了 Spring Framework 的事件发布机制。该部分机制确保在子上下文中发布给监听器的事件也会发布给所有祖先上下文中的监听器。因此，如果您的应用程序使用有层级结构的 SpringApplication 实例，则监听器可能会收到同种类型应用程序事件的多个实例。</p><p>为了让监听器能够区分其上下文事件和后代上下文事件，您应该注入其应用程序上下文，然后将注入的上下文与事件的上下文进行比较。可以通过实现 <code>ApplicationContextAware</code> 来注入上下文，如果监听器是 bean，则使用 <code>@Autowired</code> 注入上下文。</p><p><a id="boot-features-web-environment"></a></p><h3 id="23-6、Web-环境">23.6、Web 环境</h3><p><code>SpringApplication</code> 试图为您创建正确类型的 <code>ApplicationContext</code>。确定 <code>WebApplicationType</code> 的算法非常简单：</p><ul><li>如果存在 Spring MVC，则使用 <code>AnnotationConfigServletWebServerApplicationContext</code></li><li>如果 Spring MVC 不存在且存在 Spring WebFlux，则使用 <code>AnnotationConfigReactiveWebServerApplicationContext</code></li><li>否则，使用 <code>AnnotationConfigApplicationContext</code></li></ul><p>这意味着如果您在同一个应用程序中使用了 Spring MVC 和 Spring WebFlux 中的新 <code>WebClient</code>，默认情况下将使用 Spring MVC。您可以通过调用 <code>setWebApplicationType(WebApplicationType)</code> 修改默认行为。</p><p>也可以调用 <code>setApplicationContextClass(...)</code> 来完全控制 <code>ApplicationContext</code> 类型。</p><p><strong>提示</strong></p><blockquote><p>在 JUnit 测试中使用 <code>SpringApplication</code> 时，通常需要调用 <code>setWebApplicationType(WebApplicationType.NONE)</code>。</p></blockquote><p><a id="boot-features-application-arguments"></a></p><h3 id="23-7、访问应用程序参数">23.7、访问应用程序参数</h3><p>如果您需要访问从 <code>SpringApplication.run(​...) </code> 传入的应用程序参数，可以注入一个 <code>org.springframework.boot.ApplicationArguments</code> bean。<code>ApplicationArguments</code> 接口提供了访问原始 <code>String[]</code> 参数以及解析后的 <code>option</code> 和 <code>non-option</code> 参数的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(ApplicationArguments args)</span> &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">debug</span> <span class="operator">=</span> args.containsOption(<span class="string">&quot;debug&quot;</span>);</span><br><span class="line">List&lt;String&gt; files = args.getNonOptionArgs();</span><br><span class="line"><span class="comment">// if run with &quot;--debug logfile.txt&quot; debug=true, files=[&quot;logfile.txt&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>Spring Boot 还向 Spring <code>Environment</code> 注册了一个 <code>CommandLinePropertySource</code>。这允许您可以使用 <code>@Value</code> 注解注入单个应用参数。</p></blockquote><p><a id="boot-features-command-line-runner"></a></p><h3 id="23-8、使用-ApplicationRunner-或-ApplicationRunner">23.8、使用 ApplicationRunner 或 ApplicationRunner</h3><p>如果您需要在 SpringApplication 启动时运行一些代码，可以实现 <code>ApplicationRunner</code> 或者 <code>CommandLineRunner</code> 接口。这两个接口的工作方式是一样的，都提供了一个单独的 <code>run</code> 方法，它将在 <code>SpringApplication.run(​...)</code> 完成之前调用。</p><p><code>CommandLineRunner</code> 接口提供了访问应用程序字符串数组形式参数的方法，而 <code>ApplicationRunner</code> 则使用了上述的 <code>ApplicationArguments</code> 接口。以下示例展示 <code>CommandLineRunner</code> 和 <code>run</code> 方法的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line"><span class="comment">// Do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您定义了多个 <code>CommandLineRunner</code> 或者 <code>ApplicationRunner</code> bean，则必须指定调用顺序，您可以实现 <code>org.springframework.core.Ordered</code> 接口，也可以使用 <code>org.springframework.core.annotation.Order</code> 注解解决顺序问题。</p><p><a id="boot-features-application-exit"></a></p><h3 id="23-9、应用程序退出">23.9、应用程序退出</h3><p>每个 <code>SpringApplication</code> 注册了一个 JVM 关闭钩子，以确保 <code>ApplicationContext</code> 在退出时可以优雅关闭。所有标准的 Spring 生命周期回调（比如 <code>DisposableBean</code> 接口，或者 <code>@PreDestroy</code> 注解）都可以使用。</p><p>此外，如果希望在调用 <code>SpringApplication.exit()</code> 时返回特定的退出码，则 bean 可以实现 <code>org.springframework.boot.ExitCodeGenerator</code> 接口。之后退出码将传递给 <code>System.exit()</code> 以将其作为状态码返回，如示例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExitCodeApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ExitCodeGenerator <span class="title function_">exitCodeGenerator</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> () -&gt; <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.exit(SpringApplication</span><br><span class="line">.exit(SpringApplication.run(ExitCodeApplication.class, args)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，<code>ExitCodeGenerator</code> 接口可以通过异常实现。遇到这类异常时，Spring Boot 将返回实现的 <code>getExitCode()</code> 方法提供的退出码。</p><p><a id="boot-features-application-admin"></a></p><h3 id="23-10、管理功能">23.10、管理功能</h3><p>可以通过指定 <code>spring.application.admin.enabled</code> 属性来为应用程序启用管理相关的功能。其将在 <code>MBeanServer</code> 平台上暴露 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/admin/SpringApplicationAdminMXBean.java"><code>SpringApplicationAdminMXBean</code></a>。您可以使用此功能来远程管理 Spring Boot 应用。该功能对服务包装器的实现也是非常有用的。</p><p><strong>提示</strong></p><blockquote><p>如果您想知道应用程序在哪一个 HTTP 端口上运行，请使用 <code>local.server.port</code> 键获取该属性。</p></blockquote><p><strong>注意</strong></p><blockquote><p>启用此功能时请小心，因为 MBean 暴露了关闭应用程序的方法。</p></blockquote><p><a id="boot-features-external-config"></a></p><h2 id="24、外部化配置">24、外部化配置</h2><p>Spring Boot 可以让您的配置外部化，以便可以在不同环境中使用相同的应用程序代码。您可以使用 properties 文件、YAML 文件、环境变量或者命令行参数来外部化配置。可以使用 <code>@Value</code> 注解将属性值直接注入到 bean 中，可通过 Spring 的 <code>Environment</code> 访问，或者通过 <code>@ConfigurationProperties</code> 绑定到<a href="#boot-features-external-config-typesafe-configuration-properties">结构化对象</a>。</p><p>Spring Boot 使用了一个非常特别的 <code>PropertySource</code> 指令，用于智能覆盖默认值。属性将按照以下顺序处理：</p><ol><li>在您的主目录（当 devtools 被激活，则为 <code>~/.spring-boot-devtools.properties</code> ）中的 <a href="#using-boot-devtools-globalsettings">Devtools 全局设置属性</a>。</li><li>在测试中使用到的 <code>@TestPropertySource</code> 注解。</li><li>在测试中使用到的 <code>properties</code> 属性，可以是 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/test/context/SpringBootTest.html"><code>@SpringBootTest</code></a> 和<a href="#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests">用于测试应用程序某部分的测试注解</a>。</li><li>命令行参数。</li><li>来自 <code>SPRING_APPLICATION_JSON</code> 的属性（嵌入在环境变量或者系统属性【system propert】中的内联 JSON）。</li><li><code>ServletConfig</code> 初始化参数。</li><li><code>ServletContext</code> 初始化参数。</li><li>来自 <code>java:comp/env</code> 的 JNDI 属性。</li><li>Java 系统属性（<code>System.getProperties()</code>）。</li><li>操作系统环境变量。</li><li>只有 <code>random.*</code> 属性的 <code>RandomValuePropertySource</code>。</li><li>在已打包的 jar 外部的<a href="#boot-features-external-config-profile-specific-properties">指定 profile 的应用属性文件</a>（<code>application-&#123;profile&#125;.properties</code> 和 YAML 变量）。</li><li>在已打包的 jar 内部的<a href="#boot-features-external-config-profile-specific-properties">指定 profile 的应用属性文件</a>（<code>application-&#123;profile&#125;.properties</code> 和 YAML 变量）。</li><li>在已打包的 jar 外部的应用属性文件（<code>application.properties</code> 和 YAML 变量）。</li><li>在已打包的 jar 内部的应用属性文件（<code>application.properties</code> 和 YAML 变量）。</li><li>在 <code>@Configuration</code> 类上的 <code>@PropertySource</code> 注解。</li><li>默认属性（使用 <code>SpringApplication.setDefaultProperties</code> 指定）。</li></ol><p>举个例子，假设开发的 <code>@Component</code> 使用了 <code>name</code> 属性，可以这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在您的应用程序的 classpath 中（比如在 jar 中），您可以有一个 <code>application.properties</code>，它为 <code>name</code> 提供了一个合适的默认属性值。当在新环境中运行时，您可以在 jar 外面提供一个 <code>application.properties</code> 来覆盖 <code>name</code>。对于一次性测试，您可以使用命令行指定形式启动（比如 <code>java -jar app.jar --name=&quot;Spring&quot;</code>）。</p><p><strong>提示</strong></p><blockquote><p><code>SPRING_APPLICATION_JSON</code> 属性可以在命令行中提供一个环境变量。比如在 UN*X shell 中：</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ SPRING_APPLICATION_JSON=<span class="string">&#x27;&#123;&quot;</span>acme<span class="string">&quot;:&#123;&quot;</span>name<span class="string">&quot;:&quot;</span>test<span class="string">&quot;&#125;&#125;&#x27;</span> java -jar myapp.jar</span><br></pre></td></tr></table></figure><p>在此示例中，您可以在 Spring <code>Environment</code> 中使用 <code>acme.name=test</code>，也可以在系统属性（System property）中将 JSON 作为 <code>spring.application.json</code> 属性提供：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -Dspring.<span class="built_in">application</span>.json=&#x27;&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;test&quot;</span>&#125;&#x27; -jar myapp.jar</span><br></pre></td></tr></table></figure><p>或者以命令行参数形式：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar myapp<span class="selector-class">.jar</span> <span class="attr">--spring</span><span class="selector-class">.application</span>.json=<span class="string">&#x27;&#123;&quot;name&quot;:&quot;test&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>或者将 JSON 作为一个 JNDI 变量：<code>java:comp/env/spring.application.json</code>。</p></blockquote><p><a id="boot-features-external-config-random-values"></a></p><h3 id="24-1、配置随机值">24.1、配置随机值</h3><p><code>RandomValuePropertySource</code> 对于随机值注入非常有用（比如在保密场景或者测试用例中)。它可以产生 integer、long、uuid 和 string。如下示例：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my.secret</span>=<span class="variable">$&#123;random.value&#125;</span></span><br><span class="line"><span class="attr">my.number</span>=<span class="variable">$&#123;random.int&#125;</span></span><br><span class="line"><span class="attr">my.bignumber</span>=<span class="variable">$&#123;random.long&#125;</span></span><br><span class="line"><span class="attr">my.uuid</span>=<span class="variable">$&#123;random.uuid&#125;</span></span><br><span class="line"><span class="attr">my.number.less.than.ten</span>=<span class="variable">$&#123;random.int(10)&#125;</span></span><br><span class="line"><span class="attr">my.number.in.range</span>=<span class="variable">$&#123;random.int[1024,65536]&#125;</span></span><br></pre></td></tr></table></figure><p><code>random.int*</code> 语法为 <code>OPEN value (,max) CLOSE</code>，<code>OPEN,CLOSE</code> 可为任意字符，<code>value,max</code> 为整数。如果使用了 <code>max</code>，<code>value</code> 则为最小值，<code>max</code> 为最大值。</p><p><a id="boot-features-external-config-command-line-args"></a></p><h3 id="24-2、访问命令行属性">24.2、访问命令行属性</h3><p>默认情况下，<code>SpringApplication</code> 将所有命令行选项参数（即以 <code>--</code> 开头的参数，比如 <code>--server.port=9000</code>）转换为属性，并将它们添加到 Spring <code>Environment</code> 中。如之前所述，命令行属性始终优先于其他属性源。</p><p>如果您不希望将命令行属性添加到 <code>Environment</code>，可以使用 <code>SpringApplication.setAddCommandLineProperties(false)</code> 来禁用它们。</p><p><a id="boot-features-external-config-application-property-files"></a></p><h3 id="24-3、应用程序属性文件">24.3、应用程序属性文件</h3><p><code>SpringApplication</code> 从以下位置的 <code>application.properties</code> 文件中加载属性（properties），并将它们添加到 Spring <code>Environment</code> 中：</p><ol><li>当前目录的 <code>/config</code> 子目录</li><li>当前目录</li><li>classpath 上的 <code>/config</code> 包</li><li>classpath 根路径</li></ol><p>列表按序号优先级排序，序号越小，优先级越高。</p><p><strong>注意</strong></p><blockquote><p>您还可以使用 <a href="#boot-features-external-config-yaml">YAML（.yml）</a>文件来替代 <strong>.properties</strong>。</p></blockquote><p>如果您不喜欢 <code>application.properties</code> 作为配置文件名，则可以通过指定 <code>spring.config.name</code> 环境属性来切换到另一个文件名。您还可以使用 <code>spring.config.location</code> 环境属性来引用一个显式位置（以逗号分隔的目录位置或文件路径列表）。以下示例展示了如何指定其他文件名：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">java </span>-<span class="keyword">jar </span>myproject.<span class="keyword">jar </span>--spring.config.name=myproject</span><br></pre></td></tr></table></figure><p>以下示例展示了如何指定两个位置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar myproject<span class="selector-class">.jar</span> <span class="attr">--spring</span><span class="selector-class">.config</span>.location=classpath:/default<span class="selector-class">.properties</span>,classpath:/override.properties</span><br></pre></td></tr></table></figure><p><strong>警告</strong></p><blockquote><p><code>spring.config.name</code> 和 <code>spring.config.location</code> 在程序启动早期就用来确定哪些文件必须加载，因此必须将它们定义为环境属性（通常是 OS 环境变量、系统属性或命令行参数）。</p></blockquote><p>如果 <code>spring.config.location</code> 包含目录（而不是文件），则它们应该以 <code>/</code> 结尾（并且在运行期间，在加载之前追加从 <code>spring.config.name</code> 生成的名称，包括指定 profile 的文件名）。 <code>spring.config.location</code> 中指定的文件按原样使用，不支持指定 profile 形式，并且可被任何指定 profile 的文件的属性所覆盖。</p><p>配置位置以相反的顺序搜索。默认情况下，配置的位置为 <code>classpath:/,classpath:/config/,file:./,file:./config/</code>。生成的搜索顺序如下：</p><ol><li><code>file:./config/</code></li><li><code>file:./</code></li><li><code>classpath:/config/</code></li><li><code>classpath:/</code></li></ol><p>使用了 <code>spring.config.location</code> 配置自定义配置位置时，默认位置配置将被替代。例如，如果 <code>spring.config.location</code> 配置为 <code>classpath:/custom-config/,file:./custom-config/</code>，搜索顺序将变为以下：</p><ol><li><code>file:./custom-config/</code></li><li><code>classpath:custom-config/</code></li></ol><p>或者，当使用 <code>spring.config.additional-location</code> 配置自定义配置位置时，除了使用默认位置外，还会使用它们。这些其他（additional）位置将在默认位置之前搜索。例如，如果将其他位置配置为 <code>classpath:/custom-config/,file:./custom-config/</code>，则搜索顺序将变为以下内容：</p><ol><li><code>file:./custom-config/</code></li><li><code>classpath:custom-config/</code></li><li><code>file:./config/</code></li><li><code>file:./</code></li><li><code>classpath:/config/</code></li><li><code>classpath:/</code></li></ol><p>该搜索顺序允许您在一个配置文件中指定默认值，然后有选择地覆盖另一个配置文件中的值。您可以在 <code>application.properties</code>（或您使用 <code>spring.config.name</code> 指定的其他文件）中的某个默认位置为应用程序提供默认值。之后，在运行时，这些默认值将被自定义位置中的某个文件所覆盖。</p><p><strong>注意</strong></p><blockquote><p>如果您使用的是环境变量而不是系统属性，大部分操作系统都不允许使用 <code>.</code> 分隔的键名，但您可以使用下划线来代替（例如，使用 <code>SPRING_CONFIG_NAME</code> 而不是 <code>spring.config.name</code>）。</p></blockquote><p><strong>注意</strong></p><blockquote><p>如果应用程序在容器中运行，则可以使用 JNDI 属性（<code>java:comp/env</code>）或 servlet 上下文初始化参数来代替环境变量或系统属性。</p></blockquote><p><a id="boot-features-external-config-profile-specific-properties"></a></p><h3 id="24-4、特定-Profile-的属性文件">24.4、特定 Profile 的属性文件</h3><p>除 <code>application.properties</code> 文件外，还可以使用以下命名约定定义特定 profile 的属性文件：<code>application-&#123;profile&#125;.properties</code>。<code>Environment</code> 有一组默认配置文件（默认情况下为 <code>default</code>），如果未设置激活的（active）profile，则使用这些配置文件。换句话说，如果没有显式激活 profile，则会加载 <code>application-default.properties</code> 中的属性。</p><p>特定 profile 的属性文件从与标准 <code>application.properties</code> 相同的位置加载，特定 profile 的属性文件无论是否在打包的 jar 内部，都始终覆盖非特定文件。</p><p>如果指定了多个配置文件，则应用 last-wins 策略（优先采取最后一个）。例如，<code>spring.profiles.active</code> 属性指定的配置文件是在使用 <code>SpringApplication</code> API 配置的配置文件之后添加的，因此优先应用。</p><p><strong>注意</strong></p><blockquote><p>如果在 <code>spring.config.location</code> 中指定了文件，则不考虑这些文件的特定 profile 形式。如果您还想使用特定 profile 的属性文件，请在 <code>spring.config.location</code> 中使用目录形式。</p></blockquote><p><a id="boot-features-external-config-placeholders-in-properties"></a></p><h3 id="24-5、属性中的占位符">24.5、属性中的占位符</h3><p><code>application.properties</code> 中的值在使用时通过现有的 <code>Environment</code> 进行过滤，因此您可以返回之前定义的值（例如，从系统属性）。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">app.name</span>=MyApp</span><br><span class="line"><span class="attr">app.description</span>=<span class="variable">$&#123;app.name&#125;</span> is a Spring Boot application</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>您还可以使用此技术创建现有 Spring Boot 属性的<strong>简短</strong>形式。有关详细信息，请参见<a href="hwo-to.md#howto-use-short-command-line-arguments">第 77.4 章节：使用<strong>简短</strong>命令行参数</a>。</p></blockquote><p><a id="boot-features-encrypting-properties"></a></p><h3 id="24-6、加密属性">24.6、加密属性</h3><p>Spring Boot 没有为加密属性值提供任何内置支持，然而，它提供了修改 Spring <code>Environment</code> 包含的值所必需的钩子。<code>EnvironmentPostProcessor</code> 接口允许您在应用程序启动之前操作 <code>Environment</code>。有关详细信息，请参见<a href="how-to.md#howto-customize-the-environment-or-application-context">第 76.3 章节：在启动前自定义 Environment 或 ApplicationContext</a>。</p><p>如果您正在寻找一种可用于存储凭据和密码的安全方法，<a href="https://cloud.spring.io/spring-cloud-vault/">Spring Cloud Vault</a> 项目支持在 <a href="https://www.vaultproject.io/">HashiCorp Vault</a> 中存储外部化配置。</p><p><a id="boot-features-external-config-yaml"></a></p><h3 id="24-7、使用-YAML-代替属性文件">24.7、使用 YAML 代替属性文件</h3><p><a href="http://yaml.org/">YAML</a> 是 JSON 的超集，是一个可用于指定层级配置数据的便捷格式。只要在 classpath 上有 <a href="http://www.snakeyaml.org/">SnakeYAML</a> 库，<code>SpringApplication</code> 类就会自动支持 YAML 作为属性文件（properties）的替代。</p><p><strong>注意</strong></p><blockquote><p>如果使用 <strong>starter</strong>，则 <code>spring-boot-starter</code> 会自动提供 SnakeYAML。</p></blockquote><p><a id="boot-features-external-config-loading-yaml"></a></p><h4 id="24-7-1、加载-YAML">24.7.1、加载 YAML</h4><p>Spring Framework 提供了两个便捷类，可用于加载 YAML 文档。<code>YamlPropertiesFactoryBean</code> 将 YAML 加载为 <code>Properties</code>，<code>YamlMapFactoryBean</code> 将 YAML 加载为 <code>Map</code>。</p><p>例如以下 YAML 文档：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environments:</span></span><br><span class="line">  <span class="attr">dev:</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://dev.example.com</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Developer</span> <span class="string">Setup</span></span><br><span class="line">  <span class="attr">prod:</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://another.example.com</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">My</span> <span class="string">Cool</span> <span class="string">App</span></span><br></pre></td></tr></table></figure><p>前面的示例将转换为以下属性（properties）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environments.dev.url</span>=http://dev.example.com</span><br><span class="line"><span class="attr">environments.dev.name</span>=Developer Setup</span><br><span class="line"><span class="attr">environments.prod.url</span>=http://another.example.com</span><br><span class="line"><span class="attr">environments.prod.name</span>=My Cool App</span><br></pre></td></tr></table></figure><p>YAML 列表表示带有 <code>[index]</code> 下标引用的属性键。例如以下 YAML：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">my:</span></span><br><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dev.example.com</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">another.example.com</span></span><br></pre></td></tr></table></figure><p>以上示例将转成以下属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my.servers<span class="section">[0]</span>=dev.example.com</span><br><span class="line">my.servers<span class="section">[1]</span>=another.example.com</span><br></pre></td></tr></table></figure><p>要使用 Spring Boot 的 <code>Binder</code> 工具来绑定这样配置到属性（这是 <code>@ConfigurationProperties</code> 所做的），你需要在目标 bean 中有一个 <code>java.util.List</code>（或 <code>Set</code>）类型的属性，你需要为其提供一个 setter 或者使用可变值初始化它。 例如，以下示例展示将上述的配置与属性绑定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Config</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; servers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getServers</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.servers;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-external-config-exposing-yaml-to-spring"></a></p><h4 id="24-7-2、在-Spring-Environment-中将-YAML-暴露为属性">24.7.2、在 Spring Environment 中将 YAML 暴露为属性</h4><p><code>YamlPropertySourceLoader</code> 类可用于在 Spring <code>Environment</code> 中将 YAML 暴露为 <code>PropertySource</code>。这样做可以让您使用带占位符语法的 <code>@Value</code> 注解来访问 YAML 属性。</p><p><a id="boot-features-external-config-multi-profile-yaml"></a></p><h4 id="24-7-3、多-profile-YAML-文档">24.7.3、多 profile YAML 文档</h4><p>您可以使用 <code>spring.profiles</code> key 在单个文件中指定多个特定 profile 的 YAML 文档，以指示文档何时应用，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.100</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">development</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">production</span> <span class="string">&amp;</span> <span class="string">eu-central</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.120</span></span><br></pre></td></tr></table></figure><p>在前面示例中，如果 <code>development</code> profile 处于激活状态，则 <code>server.address</code> 属性得值为 <code>127.0.0.1</code>。 同样，如果 <code>production</code> 和 <code>eu-central</code> profile 处于激活状态，则 <code>server.address</code> 属性的值为 <code>192.168.1.120</code>。如果未激活 <code>development</code>、<code>production</code> 或 <code>eu-central</code> profile，则该属性的值为 <code>192.168.1.100</code>。</p><p><strong>注意</strong></p><blockquote><p>因此，<code>spring.profiles</code> 可以包含一个简单的 profile 名称（例如 <code>production</code>）或一个 profile 表达式。profile 表达式允许表达更复杂的 profile 逻辑，例如 <code>production &amp; (eu-central | eu-west)</code>。有关详细信息，请查阅<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/core.html#beans-definition-profiles-java">参考指南</a>。</p></blockquote><p>如果在应用程序上下文启动时没有显式激活，则激活默认 profile。因此，在以下 YAML 中，我们为 <code>spring.security.user.password</code> 设置了一个值，该值<strong>仅</strong>在 <code>default</code> profile 中可用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">weak</span></span><br></pre></td></tr></table></figure><p>然而，在以下示例中，始终设置密码，因为它未附加到任何 profile，如果需要更改，必须在所有其他 profile 中显式重置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">weak</span></span><br></pre></td></tr></table></figure><p>使用 <code>spring.profiles</code> 元素来指定 Spring profile 可以选择通过使用 <code>!</code> 字符来取反（否定）。如果为单个文档指定了否定和非否定的 profile，则至少一个非否定的 profile 必须匹配，没有否定的 profile 可以匹配。</p><p><a id="boot-features-external-config-yaml-shortcomings"></a></p><h4 id="24-7-4、YAML-的缺点">24.7.4、YAML 的缺点</h4><p>无法使用 <code>@PropertySource</code> 注解加载 YAML 文件。因此，如果您需要以这种方式加载值，请使用属性文件（properties）。</p><p><a id="boot-features-external-config-typesafe-configuration-properties"></a></p><h3 id="24-8、类型安全的配置属性">24.8、类型安全的配置属性</h3><p>使用 <code>@Value(&quot;$&#123;property&#125;&quot;)</code> 注解来注入配置属性有时会很麻烦，特别是如果您使用了多个属性或者您的数据本质上是分层结构。Spring Boot 提供了另一种使用属性的方法，该方法使用强类型的 bean 来管理和验证应用程序的配置，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;acme&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcmeProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> enabled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> InetAddress remoteAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Security</span> <span class="variable">security</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Security</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnabled</span><span class="params">(<span class="type">boolean</span> enabled)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> InetAddress <span class="title function_">getRemoteAddress</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRemoteAddress</span><span class="params">(InetAddress remoteAddress)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Security <span class="title function_">getSecurity</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Security</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; roles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Collections.singleton(<span class="string">&quot;USER&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRoles</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoles</span><span class="params">(List&lt;String&gt; roles)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的 POJO 定义了以下属性：</p><ul><li><code>acme.enabled</code>，默认值为 <code>false</code>。</li><li><code>acme.remote-address</code>，可以从 String 强制转换的类型。</li><li><code>acme.security.username</code>，内嵌一个 <strong>security</strong> 对象，其名称由属性名称决定。特别是，返回类型根本没有使用，可能是 <code>SecurityProperties</code>。</li><li><code>acme.security.password</code>。</li><li><code>acme.security.roles</code>，String 集合。</li></ul><p><strong>注意</strong></p><blockquote><p>getter 和 setter 通常是必需的，因为绑定是通过标准的 Java Bean 属性描述符来完成，就像在 Spring MVC 中一样。以下情况可以省略 setter：</p><ul><li>Map，只要它们要初始化，就需要一个 getter 但不一定需要setter，因为它们可以被 binder 修改。</li><li>集合和数组可以通过一个索引（通常使用 YAML）或使用单个逗号分隔值（属性）进行访问。最后一种情况必须使用 setter。我们建议始终为此类型添加 setter。如果初始化集合，请确保它是可变的（如上例所示）。</li><li>如果初始化嵌套的 POJO 属性（如前面示例中的 <code>Security</code> 字段），则不需要 setter。如果您希望 binder 使用其默认构造函数动态创建实例，则需要一个 setter。</li></ul><p>有些人可能会使用 Project Lombok 来自动生成 getter 和 setter。请确保 Lombok 不为此类型生成任何特定构造函数，因为容器会自动使用它来实例化对象。</p><p>最后，考虑到标准 Java Bean 属性，不支持对静态属性的绑定。</p></blockquote><p><strong>提示</strong></p><blockquote><p>另请参阅 <a href="#boot-features-external-config-vs-value">@Value 和 @ConfigurationProperties 之间的差异</a>。</p></blockquote><p>您还需要列出要在 <code>@EnableConfigurationProperties</code> 注解中注册的属性类，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(AcmeProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>当以这种方式注册 <code>@ConfigurationProperties</code> bean 时，bean 具有一个固定格式的名称：<code>&lt;prefix&gt;-&lt;fqn&gt;</code>，其中 <code>&lt;prefix&gt;</code> 是 <code>@ConfigurationProperties</code> 注解中指定的环境 key 前缀，<code>&lt;fqn&gt;</code> 是 bean 的完全限定类名。如果注解未提供任何前缀，则仅使用 bean 的完全限定类名。</p><p>上面示例中的 bean 名称为 <code>acme-com.example.AcmeProperties</code>。</p></blockquote><p>即使前面的配置为 <code>AcmeProperties</code> 创建了一个 bean，我们也建议 <code>@ConfigurationProperties</code> 只处理环境（environment），特别是不要从上下文中注入其他 bean。话虽如此，<code>@EnableConfigurationProperties</code> 注解也会自动应用到您的项目，以便从 <code>Environment</code> 配置使用了 <code>@ConfigurationProperties</code> 注解的所有<strong>现有</strong>的 bean。您可以通过确保 <code>AcmeProperties</code> 已经是一个 bean 来快捷生成 <code>MyConfiguration</code>，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;acme&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcmeProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... see the preceding example</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种配置风格特别适用于 <code>SpringApplication</code> 外部 YAML 配置，如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">acme:</span></span><br><span class="line"><span class="attr">remote-address:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">USER</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ADMIN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># additional configuration as required</span></span><br></pre></td></tr></table></figure><p>要使用 <code>@ConfigurationProperties</code> bean，您可以使用与其他 bean 相同的方式注入它们，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AcmeProperties properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(AcmeProperties properties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.properties = properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">openConnection</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="built_in">this</span>.properties.getRemoteAddress());</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>使用 <code>@ConfigurationProperties</code> 还可以生成元数据文件，IDE 可以通过这些文件来为您自己的 key 提供自动完成功能。有关详细信息，请参阅<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#configuration-metadata">附录 B：配置元数据</a>。</p></blockquote><p><a id="boot-features-external-config-3rd-party-configuration"></a></p><h4 id="24-8-1、第三方配置">24.8.1、第三方配置</h4><p><code>@ConfigurationProperties</code> 除了可以使用来注解类之外，您还可以在公共的 @Bean 方法上使用。当您想要将属性绑定到您掌控之外的第三方组件时，这样做特别有用。</p><p>要使用 <code>Environment</code> 属性配置 bean，请将 <code>@ConfigurationProperties</code> 添加到 bean 注册上，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;another&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AnotherComponent <span class="title function_">anotherComponent</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>another</code> 前缀定义的所有属性都使用与前面的 <code>AcmeProperties</code> 示例类似的方式映射到 <code>AnotherComponent</code> bean。</p><p><a id="boot-features-external-config-relaxed-binding"></a></p><h4 id="24-8-2、宽松绑定">24.8.2、宽松绑定</h4><p>Spring Boot 使用一些宽松的规则将 <code>Environment</code> 属性绑定到 <code>@ConfigurationProperties</code> bean，因此 <code>Environment</code> 属性名不需要和 bean 属性名精确匹配。常见的示例包括使用了 <code>-</code> 符号分割的环境属性（例如，<code>context-path</code> 绑定到 <code>contextPath</code>）和大写环境属性（例如，<code>PORT</code> 绑定到 <code>port</code>）。</p><p>如下 <code>@ConfigurationProperties</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;acme.my-project.person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OwnerProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getFirstName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirstName</span><span class="params">(String firstName)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述示例中，同样可以使用以下属性名称：</p><p><strong>表 24.1、宽松绑定</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>acme.my-project.person.first-name</code></td><td>Kebab 风格（短横线命名），建议在 <code>.properties</code> 和 <code>.yml</code> 文件中使用。</td></tr><tr><td><code>acme.myProject.person.firstName</code></td><td>标准驼峰式风格。</td></tr><tr><td><code>acme.my_project.person.first_name</code></td><td>下划线表示法，<code>.properties</code> 和 <code>.yaml</code> 文件中的另外一种格式。</td></tr><tr><td><code>ACME_MYPROJECT_PERSON_FIRSTNAME</code></td><td>大写风格，当使用系统环境变量时推荐使用该风格。</td></tr></tbody></table><p><strong>注意</strong></p><blockquote><p>注解的 <code>prefix</code> 值必须是 kebab (短横线命名)风格（小写并用 <code>-</code> 分隔，例如 <code>acme.my-project.person</code>）。</p></blockquote><p><strong>表 24.2、每种属性源（property source）的宽松绑定规则</strong></p><table><thead><tr><th>属性源</th><th>简单类型</th><th>列表集合类型</th></tr></thead><tbody><tr><td>properties 文件</td><td>驼峰式、短横线式或下划线式</td><td>标准列表语法使用 <code>[]</code> 或逗号分隔值</td></tr><tr><td>YAML 文件</td><td>驼峰式、短横线式或者下划线式</td><td>标准 YAML 列表语法或者逗号分隔值</td></tr><tr><td>环境变量</td><td>大写并且以下划线作为定界符，<code>_</code> 不能放在属性名之间使用</td><td>数字值两边使用下划线连接，例如 <code>MY_ACME_1_OTHER = my.acme[1].other</code></td></tr><tr><td>系统属性</td><td>驼峰式、短横线式或者下划线式</td><td>标准列表语法使用 <code>[]</code> 或逗号分隔值</td></tr></tbody></table><p><strong>提示</strong></p><blockquote><p>我们建议，属性尽可能以小写的短横线格式存储，比如 <code>my.property-name=acme</code>。</p></blockquote><p>当绑定到 <code>Map</code> 属性时，如果 key 包含除小写字母数字字符或 <code>-</code> 以外的任何内容，则需要使用括号表示法来保留原始值。如果 key 没有使用 <code>[]</code> 包裹，则里面的任何非字母数字字符或 <code>-</code> 的字符都将被删除。例如，将以下属性绑定到一个 <code>Map</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">acme:</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="string">&quot;[/key1]&quot;</span><span class="string">:</span> <span class="string">value1</span></span><br><span class="line">    <span class="string">&quot;[/key2]&quot;</span><span class="string">:</span> <span class="string">value2</span></span><br><span class="line">    <span class="string">/key3:</span> <span class="string">value3</span></span><br></pre></td></tr></table></figure><p>上面的属性将绑定到一个 <code>Map</code> 上，其中 <code>/key1</code>，<code>/key2</code> 和 <code>key3</code> 作为 map 的 key。</p><p><a id="boot-features-external-config-complex-type-merge"></a></p><h4 id="24-8-3、合并复杂类型">24.8.3、合并复杂类型</h4><p>当列表集合（list）在多个地方配置时，整个列表集合将被替换。</p><p>例如，假设带有 <code>name</code> 和 <code>description</code> 属性的 <code>MyPojo</code> 对象默认为 <code>null</code>。以下示例中，<code>AcmeProperties</code> 暴露了一个 <code>MyPojo</code> 对象列表集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;acme&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcmeProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;MyPojo&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;MyPojo&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置可以如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">acme:</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my</span> <span class="string">name</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">my</span> <span class="string">description</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">acme:</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my</span> <span class="string">another</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><p>如果 <code>dev</code> 配置文件未激活，则 <code>AcmeProperties.list</code> 只包含一条 <code>MyPojo</code> 条目，如之前所述。但是，如果激活了 <code>dev</code> 配置文件，列表集合仍然只包含一个条目（<code>name</code> 属性值为 <code>my another name</code>，<code>description</code> 为 <code>null</code>）。此配置不会向列表集合中添加第二个 <code>MyPojo</code> 实例，也不会合并条目。</p><p>在多个配置文件中指定一个 <code>List</code> 时，最高优先级（并且只有一个）的列表集合将被使用。可做如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">acme:</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my</span> <span class="string">name</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">my</span> <span class="string">description</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">another</span> <span class="string">name</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">another</span> <span class="string">description</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">acme:</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">my</span> <span class="string">another</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><p>在前面示例中，如果 <code>dev</code> 配置文件处于活动状态，则 <code>AcmeProperties.list</code> 包含一个 <code>MyPojo</code> 条目（<code>name</code> 为 <code>my another name</code>，<code>description</code> 为 <code>null</code>）。对于 YAML 而言，逗号分隔的列表和YAML 列表同样会完全覆盖列表集合的内容。</p><p>对于 <code>Map</code> 属性，您可以绑定来自多个源中提取的属性值。但是，对于多个源中的相同属性，则使用高优先级最高的属性。以下示例从 <code>AcmeProperties</code> 暴露了一个 <code>Map&lt;String, MyPojo&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;acme&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcmeProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, MyPojo&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, MyPojo&gt; <span class="title function_">getMap</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以考虑以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">acme:</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">key1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">my</span> <span class="string">name</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">my</span> <span class="string">description</span> <span class="number">1</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">acme:</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">key1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dev</span> <span class="string">name</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">key2:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">dev</span> <span class="string">name</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">description:</span> <span class="string">dev</span> <span class="string">description</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果 <code>dev</code> 配置文件未激活，则 <code>AcmeProperties.map</code> 只包含一个带 <code>key1</code> key 的条目（<code>name</code> 为 <code>my name 1</code>，<code>description</code> 为 <code>my description 1</code>）。但是，如果激活了 dev 配置文件，则 <code>map</code> 将包含两个条目， key 分别为 <code>key1</code>（<code>name</code> 为 <code>dev name 1</code> 和 <code>description</code> 为 <code>my description 1</code>）和 <code>key2</code>（<code>name</code> 为 <code>dev name 2</code> 和 <code>description</code> 为 <code>dev description 2</code>）。</p><p><strong>注意</strong></p><blockquote><p>前面的合并规则适用于所有不同属性源的属性，而不仅仅是 YAML 文件。</p></blockquote><p><a id="boot-features-external-config-conversion"></a></p><h4 id="24-8-4、属性转换">24.8.4、属性转换</h4><p>当外部应用程序属性（application properties） 绑定到 <code>@ConfigurationProperties</code> bean 时，Spring Boot 会尝试将其属性强制转换为正确的类型。如果需要自定义类型转换，可以提供 <code>ConversionService</code> bean（名为 <code>conversionService</code> 的 bean）或自定义属性编辑器（通过 <code>CustomEditorConfigurer</code> bean）或自定义转换器（带有注解为 <code>@ConfigurationPropertiesBinding</code> 的 bean 定义）。</p><p><strong>注意</strong></p><p>由于该 bean 在应用程序生命周期早期就被请求 ，因此请限制 <code>ConversionService</code> 使用的依赖。您在创建时可能无法完全初始化所需的依赖。如果配置 key 为非强制需要，您可能希望重命名自定义的 <code>ConversionService</code>，并仅依赖于使用 <code>@ConfigurationPropertiesBinding</code> 限定的自定义转换器。</p><p><a id="boot-features-external-config-conversion-duration"></a></p><h5 id="转换-duration">转换 duration</h5><p>Spring Boot 支持持续时间（duration）表达。如果您暴露一个 <code>java.time.Duration</code> 属性，则可以在应用程序属性中使用以下格式：</p><ul><li>常规 <code>long</code> 表示（除非指定 <code>@DurationUnit</code>，否则使用毫秒作为默认单位）</li><li><a href="https://docs.oracle.com/javase/8/docs/api//java/time/Duration.html#parse-java.lang.CharSequence-"><code>java.util.Duration</code></a> 使用的标准 ISO-8601 格式</li><li>一种更易读的格式，值和单位在一起（例如 <code>10s</code> 表示 10 秒）</li></ul><p>思考以下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;app.system&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppSystemProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DurationUnit(ChronoUnit.SECONDS)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Duration</span> <span class="variable">sessionTimeout</span> <span class="operator">=</span> Duration.ofSeconds(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">Duration</span> <span class="variable">readTimeout</span> <span class="operator">=</span> Duration.ofMillis(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Duration <span class="title function_">getSessionTimeout</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.sessionTimeout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSessionTimeout</span><span class="params">(Duration sessionTimeout)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sessionTimeout = sessionTimeout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Duration <span class="title function_">getReadTimeout</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.readTimeout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setReadTimeout</span><span class="params">(Duration readTimeout)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.readTimeout = readTimeout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定一个会话超时时间为 30 秒，使用 <code>30</code>、<code>PT30S</code> 和 <code>30s</code> 等形式都是可以的。读取超时时间设置为 500ms，可以采用以下任何一种形式：<code>500</code>、<code>PT0.5S</code> 和 <code>500ms</code>。</p><p>您也可以使用任何支持的单位来标识：</p><ul><li><code>ns</code> 为纳秒</li><li><code>us</code> 为微秒</li><li><code>ms</code> 为毫秒</li><li><code>s</code> 为秒</li><li><code>m</code> 为分钟</li><li><code>h</code> 为小时</li><li><code>d</code> 为天</li></ul><p>默认单位是毫秒，可以使用 <code>@DurationUnit</code> 配合上面的单位示例重写。</p><p><strong>提示</strong></p><blockquote><p>要从先前仅使用 <code>Long</code> 来表示持续时间的版本进行升级，如果切换到 <code>Duration</code> 时不是毫秒，请定义单位（使用 <code>@DurationUnit</code>）。这样做可以提供透明的升级路径，同时支持更丰富的格式。</p></blockquote><p><a id="boot-features-external-config-conversion-datasize"></a></p><h5 id="转换-Data-Size">转换 Data Size</h5><p>Spring Framework 有一个 <code>DataSize</code> 值类型，允许以字节表示大小。如果暴露一个 <code>DataSize</code> 属性，则可以在应用程序属性中使用以下格式：</p><ul><li>常规的 <code>Long</code> 表示（使用字节作为默认单位，除非指定了 <code>@DataSizeUnit</code>）</li><li>更具有可读性的格式，值和单位在一起（例如 <code>10MB</code> 表示 <code>10</code> 兆字节）</li></ul><p>请思考以下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;app.io&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppIoProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DataSizeUnit(DataUnit.MEGABYTES)</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">DataSize</span> <span class="variable">bufferSize</span> <span class="operator">=</span> DataSize.ofMegabytes(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">DataSize</span> <span class="variable">sizeThreshold</span> <span class="operator">=</span> DataSize.ofBytes(<span class="number">512</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DataSize <span class="title function_">getBufferSize</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.bufferSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBufferSize</span><span class="params">(DataSize bufferSize)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.bufferSize = bufferSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DataSize <span class="title function_">getSizeThreshold</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.sizeThreshold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSizeThreshold</span><span class="params">(DataSize sizeThreshold)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sizeThreshold = sizeThreshold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要指定 10 兆字节的缓冲大小，使用 <code>10</code> 和 <code>10MB</code> 是等效的。256 字节的大小可以指定为 <code>256</code> 或 <code>256B</code>。</p><p>您也可以使用任何支持的单位：</p><ul><li><code>B</code> 表示字节</li><li><code>KB</code> 为千字节</li><li><code>MB</code> 为兆字节</li><li><code>GB</code> 为千兆字节</li><li><code>TB</code> 为兆兆字节</li></ul><p>默认单位是字节，可以使用 <code>@DataSizeUnit</code> 配合上面的示例单位重写。</p><p><strong>提示</strong></p><blockquote><p>要从先前仅使用 <code>Long</code> 来表示大小的版本进行升级，请确保在切换到 <code>DataSize</code> 不是字节的情况下定义单位（使用 <code>@DataSizeUnit</code>）。这样做可以提供透明的升级路径，同时支持更丰富的格式。</p></blockquote><p><a id="boot-features-external-config-validation"></a></p><h4 id="24-8-5、-ConfigurationProperties-验证">24.8.5、@ConfigurationProperties 验证</h4><p>只要使用了 Spring 的 <code>@Validated</code> 注解，Spring Boot 就会尝试验证 <code>@ConfigurationProperties</code> 类。您可以直接在配置类上使用 JSR-303 <code>javax.validation</code> 约束注解。为此，请确保 JSR-303 实现在 classpath 上，然后将约束注解添加到字段上，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;acme&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcmeProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> InetAddress remoteAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... getters and setters</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>您还可以通过使用 <code>@Validated</code> 注解创建配置属性的 <code>@Bean</code> 方法来触发验证。</p></blockquote><p>虽然绑定时也会验证嵌套属性，但最好的做法还是将关联字段注解上 <code>@Valid</code>。这可确保即使未找到嵌套属性也会触发验证。以下示例基于前面的 <code>AcmeProperties</code> 示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;acme&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcmeProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> InetAddress remoteAddress;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Valid</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Security</span> <span class="variable">security</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Security</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... getters and setters</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Security</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="keyword">public</span> String username;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... getters and setters</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您还可以通过创建一个名为 <code>configurationPropertiesValidator</code> 的 bean 定义来添加自定义 Spring <code>Validator</code>。应该将 <code>@Bean</code> 方法声明为 <code>static</code>。配置属性验证器在应用程序生命周期的早期创建，将 <code>@Bean</code> 方法声明为 <code>static</code> 可以无需实例化 <code>@Configuration</code> 类来创建 bean。这样做可以避免早期实例化可能导致的意外问题。这里有一个<a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-samples/spring-boot-sample-property-validation">属性验证示例</a>，讲解了如何设置。</p><p><strong>提示</strong></p><blockquote><p><code>spring-boot-actuator</code> 模块包括一个暴露所有 <code>@ConfigurationProperties</code> bean 的端点。可将 Web 浏览器指向 <code>/actuator/configprops</code> 或使用等效的 JMX 端点。有关详细信息，请参阅<a href="#production-ready-endpoints">生产就绪功能</a>部分。</p></blockquote><p><a id="boot-features-external-config-vs-value"></a></p><h4 id="24-8-6、-ConfigurationProperties-与-Value-对比">24.8.6、@ConfigurationProperties 与 @Value 对比</h4><p><code>@Value</code> 注解是核心容器功能，它不提供与类型安全配置属性相同的功能。下表总结了 <code>@ConfigurationProperties</code> 和 <code>@Value</code> 支持的功能：</p><table><thead><tr><th>功能</th><th><code>@ConfigurationProperties</code></th><th><code>@Value</code></th></tr></thead><tbody><tr><td><a href="#boot-features-external-config-relaxed-binding">宽松绑定</a></td><td>是</td><td>否</td></tr><tr><td><a href="#configuration-metadata">元数据支持</a></td><td>是</td><td>否</td></tr><tr><td><code>SpEL</code> 表达式</td><td>否</td><td>是</td></tr></tbody></table><p>如果您要为自己的组件定义一组配置 key，我们建议您将它们分组到使用 <code>@ConfigurationProperties</code> 注解的 POJO 中。您应该知道，由于 <code>@Value</code> 不支持宽松绑定，因此如果您需要通过环境变量来提供值，它并不是一个好的选择。</p><p>最后，虽然您可以在 <code>@Value</code> 中编写 <code>SpEL</code> 表达式，但来自应用程序属性文件的此类表达式并不会被处理。</p><p><a id="boot-features-profiles"></a></p><h2 id="25、Profile">25、Profile</h2><p>Spring Profile 提供了一种应用程序配置部分隔离并使其仅在特定环境中可用的方法。可以使用 <code>@Profile</code> 来注解任何 <code>@Component</code> 或 <code>@Configuration</code> 以指定何时加载它，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile(&quot;production&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductionConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以使用 <code>spring.profiles.active</code> <code>Environment</code> 属性指定哪些配置文件处于激活状态。您可以使用本章前面介绍的任何方法指定属性。例如，您可以将其包含在 <code>application.properties</code> 中，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=dev,hsqldb</span><br></pre></td></tr></table></figure><p>您还可以在命令行上使用以下开关指定它：<code>--spring.profiles.active=dev,hsqldb</code>。</p><p><a id="boot-features-adding-active-profiles"></a></p><h3 id="25-1、添加激活-Profile">25.1、添加激活 Profile</h3><p><code>spring.profiles.active</code> 属性遵循与其他属性相同的排序规则：应用优先级最高的 <code>PropertySource</code>。这意味着您可以在 <code>application.properties</code> 中指定激活配置文件，然后使用命令行开关<strong>替换</strong>它们。</p><p>有时，将特定 profile 的属性<strong>添加</strong>到激活配置文件而不是替换它们，这种方式也是很有用的。<code>spring.profiles.include</code> 属性可无条件地添加激活配置文件。<code>SpringApplication</code> 入口还有一个 Java API，用于设置其他 profile（即，在 <code>spring.profiles.active</code> 属性激活的 profile 之上）。请参阅SpringApplication 中的 <code>setAdditionalProfiles()</code> 方法。</p><p>例如，当使用开关 <code>--spring.profiles.active=prod</code> 运行有以下属性的应用程序时，<code>proddb</code> 和 <code>prodmq</code> 配置文件也会被激活：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">my.property:</span> <span class="string">fromyamlfile</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring.profiles:</span> <span class="string">prod</span></span><br><span class="line"><span class="attr">spring.profiles.include:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">proddb</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">prodmq</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>请记住，可以在 YAML 文档中定义 <code>spring.profiles</code> 属性，以确定此特定文档何时包含在配置中。有关更多详细信息，请参见第 77.7 章节：<a href="howto.md#howto-change-configuration-depending-on-the-environment">根据环境更改配置</a>。</p></blockquote><p><a id="boot-features-programmatically-setting-profiles"></a></p><h3 id="25-2、以编程方式设置-Profile">25.2、以编程方式设置 Profile</h3><p>您可以在应用程序运行之前以编程方式通过调用 <code>SpringApplication.setAdditionalProfiles(...)</code> 设置激活 profile。也可以使用 Spring 的 <code>ConfigurableEnvironment</code> 接口激活 profile。</p><p><a id="boot-features-profile-specific-configuration"></a></p><h3 id="25-3、特定-Profile-的配置文件">25.3、特定 Profile 的配置文件</h3><p>特定 profile 的 <code>application.properties</code>（或 <code>application.yml</code>）和通过 <code>@ConfigurationProperties</code> 引用的文件被当做文件并加载。有关详细信息，请参见<a href="#boot-features-external-config-profile-specific-properties">第 24.4 章节：特定 Profile 的属性文件</a>。</p><p><a id="boot-features-logging"></a></p><h2 id="26、日志记录">26、日志记录</h2><p>Spring Boot 使用 <a href="https://commons.apache.org/logging">Commons Logging</a> 记录所有内部日志，但开放日志的底层实现。其为 <a href="https://docs.oracle.com/javase/8/docs/api//java/util/logging/package-summary.html">Java Util Logging<br></a>、<a href="https://logging.apache.org/log4j/2.x/">Log4J2</a> 和 <a href="http://logback.qos.ch/">Logback</a> 提供了默认配置。在每种情况下，日志记录器都预先配置为使用控制台输出，并且还提供可选的文件输出。</p><p>默认情况下，如果您使用了 <strong>Starter</strong>，则使用 Logback 进行日志记录。还包括合适的 Logback 路由，以确保在使用 Java Util Logging、Commons Logging、Log4J 或 SLF4J 的依赖库都能正常工作。</p><p><strong>提示</strong></p><blockquote><p>Java 有很多日志框架可供使用。如果以上列表让您感到困惑，请不要担心。通常，您不需要更改日志依赖，并且 Spring Boot 提供的默认配置可以保证日志正常工作。</p></blockquote><p><a id="boot-features-logging-format"></a></p><h3 id="26-1、日志格式">26.1、日志格式</h3><p>Spring Boot 默认日志输出类似于以下示例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">05</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">51.112</span>  INFO <span class="number">45469</span> --- <span class="selector-attr">[           main]</span> org<span class="selector-class">.apache</span><span class="selector-class">.catalina</span><span class="selector-class">.core</span><span class="selector-class">.StandardEngine</span>  : Starting Servlet Engine: Apache Tomcat/<span class="number">7.0</span>.<span class="number">52</span></span><br><span class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">05</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">51.253</span>  INFO <span class="number">45469</span> --- <span class="selector-attr">[ost-startStop-1]</span> o<span class="selector-class">.a</span><span class="selector-class">.c</span><span class="selector-class">.c</span><span class="selector-class">.C</span>.<span class="selector-attr">[Tomcat]</span>.<span class="selector-attr">[localhost]</span>.<span class="selector-attr">[/]</span>       : Initializing Spring embedded WebApplicationContext</span><br><span class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">05</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">51.253</span>  INFO <span class="number">45469</span> --- <span class="selector-attr">[ost-startStop-1]</span> o<span class="selector-class">.s</span><span class="selector-class">.web</span><span class="selector-class">.context</span><span class="selector-class">.ContextLoader</span>            : Root WebApplicationContext: initialization completed <span class="keyword">in</span> <span class="number">1358</span> ms</span><br><span class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">05</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">51.698</span>  INFO <span class="number">45469</span> --- <span class="selector-attr">[ost-startStop-1]</span> o<span class="selector-class">.s</span><span class="selector-class">.b</span><span class="selector-class">.c</span><span class="selector-class">.e</span><span class="selector-class">.ServletRegistrationBean</span>        : Mapping servlet: <span class="string">&#x27;dispatcherServlet&#x27;</span> to <span class="selector-attr">[/]</span></span><br><span class="line"><span class="number">2014</span>-<span class="number">03</span>-<span class="number">05</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">51.702</span>  INFO <span class="number">45469</span> --- <span class="selector-attr">[ost-startStop-1]</span> o<span class="selector-class">.s</span><span class="selector-class">.b</span><span class="selector-class">.c</span><span class="selector-class">.embedded</span><span class="selector-class">.FilterRegistrationBean</span>  : Mapping <span class="attribute">filter</span>: <span class="string">&#x27;hiddenHttpMethodFilter&#x27;</span> to: [<span class="comment">/*]</span></span><br></pre></td></tr></table></figure><p>输出以下项：</p><ul><li>日期和时间：毫秒精度，易于排序。</li><li>日志级别：<code>ERROR</code>、<code>WARN</code>、<code>INFO</code>、<code>DEBUG</code> 或 <code>TRACE</code>。</li><li>进程 ID。</li><li>一个 <code>---</code> 分隔符，用于区分实际日志内容的开始。</li><li>线程名称：在方括号中（可能会截断控制台输出）。</li><li>日志记录器名称：这通常是源类名称（通常为缩写）。</li><li>日志内容。</li></ul><p><strong>注意</strong></p><blockquote><p>Logback 没有 <code>FATAL</code> 级别。该级别映射到 <code>ERROR</code>。</p></blockquote><p><a id="boot-features-logging-console-output"></a></p><h3 id="26-2、控制台输出">26.2、控制台输出</h3><p>默认日志配置会在写入时将消息回显到控制台。默认情况下，会记录 <code>ERROR</code>、<code>WARN</code> 和 <code>INFO</code> 级别的日志。您还可以通过使用 <code>--debug</code> 标志启动应用程序来启用<strong>调试</strong>模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar myapp.jar --debug</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>您还可以在 <code>application.properties</code> 中指定 <code>debug=true</code>。</p></blockquote><p>启用调试模式后，核心日志记录器（内嵌容器、Hibernate 和 Spring Boot）将被配置为输出更多日志信息。启用调试模式不会将应用程序配置为使用 <code>DEBUG</code> 级别记录所有日志内容。</p><p>或者，您可以通过使用 <code>--trace</code> 标志（或在 <code>application.properties</code> 中的设置 <code>trace=true</code>）启动应用程序来启用<strong>跟踪</strong>模式。这样做可以为选择的核心日志记录器（内嵌容器、Hibernate 模式生成和整个 Spring 组合）启用日志追踪。</p><p><a id="boot-features-logging-color-coded-output"></a></p><h3 id="26-2-1、着色输出">26.2.1、着色输出</h3><p>如果您的终端支持 ANSI，则可以使用颜色输出来提高可读性。您可以将 <code>spring.output.ansi.enabled</code> 设置为<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/ansi/AnsiOutput.Enabled.html">受支持的值</a>以覆盖自动检测。</p><p>可使用 <code>％clr</code> 转换字配置颜色编码。最简单形式是，转换器根据日志级别对输出进行着色，如下所示：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">clr</span>(%5p)</span></span><br></pre></td></tr></table></figure><p>下表描述日志级别与颜色的映射关系：</p><table><thead><tr><th>级别</th><th>颜色</th></tr></thead><tbody><tr><td><code>FATAL</code></td><td>红（Red）</td></tr><tr><td><code>ERROR</code></td><td>红（Red）</td></tr><tr><td><code>WARN</code></td><td>黄（Yellow）</td></tr><tr><td><code>INFO</code></td><td>绿（Green）</td></tr><tr><td><code>DEBUG</code></td><td>绿（Green）</td></tr><tr><td><code>TRACE</code></td><td>绿（Green）</td></tr></tbody></table><p>或者，您可以通过将其作为转换选项指定应使用的颜色或样式。例如，要将文本变为黄色，请使用以下设置：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">clr</span>(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;yellow&#125;</span></span><br></pre></td></tr></table></figure><p>支持以下颜色和样式：</p><ul><li><code>blue</code></li><li><code>cyan</code></li><li><code>faint</code></li><li><code>green</code></li><li><code>magenta</code></li><li><code>red</code></li><li><code>yellow</code></li></ul><p><a id="boot-features-logging-file-output"></a></p><h3 id="26-3、文件输出">26.3、文件输出</h3><p>默认情况下，Spring Boot 仅记录到控制台，不会写入日志文件。想除了控制台输出之外还要写入日志文件，则需要设置 <code>logging.file</code> 或 <code>logging.path</code> 属性（例如，在 <code>application.properties</code> 中）。</p><p>下表展示了如何与 <code>logging.*</code> 属性一起使用：</p><p><strong>表 26.1、Logging 属性</strong></p><table><thead><tr><th><code>logging.file</code></th><th><code>logging.path</code></th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>（无）</td><td>（无）</td><td></td><td>仅在控制台输出</td></tr><tr><td>指定文件</td><td>(无)</td><td><code>my.log</code></td><td>写入指定的日志文件。名称可以是绝对位置或相对于当前目录。</td></tr><tr><td>（无）</td><td>指定目录</td><td><code>/var/log</code></td><td>将 <code>spring.log</code> 写入指定的目录。名称可以是绝对位置或相对于当前目录。</td></tr></tbody></table><p>日志文件在达到 10MB 时会轮转，并且与控制台输出一样，默认情况下会记录 <code>ERROR</code>、<code>WARN</code> 和 <code>INFO</code> 级别的内容。可以使用 <code>logging.file.max-size</code> 属性更改大小限制。除非已设置 <code>logging.file.max-history</code> 属性，否则以前轮转的文件将无限期归档。</p><p><strong>注意</strong></p><blockquote><p>日志记录系统在应用程序生命周期的早期开始初始化。因此，通过 <code>@PropertySource</code> 注解加载的属性文件中是找不到日志属性的。</p></blockquote><p><strong>提示</strong></p><blockquote><p>日志属性独立于实际的日志底层。因此，spring Boot 不管理特定的配置 key（例如 Logback 的 <code>logback.configurationFile</code>）。</p></blockquote><p><a id="boot-features-custom-log-levels"></a></p><h3 id="26-4、日志等级">26.4、日志等级</h3><p>所有受支持的日志记录系统都可以使用 <code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code> 来设置 Spring <code>Environment</code> 中的记录器等级（例如，在 <code>application.properties</code> 中）。其中 <code>level</code> 是 TRACE、DEBUG、INFO、WARN、ERROR、FATAL 和 OFF 其中之一。可以使用 <code>logging.level.root</code> 配置 <code>root</code> 记录器。</p><p>以下示例展示了 <code>application.properties</code> 中默认的日志记录设置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging.level.root</span>=WARN</span><br><span class="line"><span class="attr">logging.level.org.springframework.web</span>=DEBUG</span><br><span class="line"><span class="attr">logging.level.org.hibernate</span>=ERROR</span><br></pre></td></tr></table></figure><p><a id="boot-features-custom-log-groups"></a></p><h3 id="26-5、日志组">26.5、日志组</h3><p>将相关记录器组合在一起以便可以同时配置，这通常很有用。例如，您可以更改<strong>所有</strong> Tomcat 相关记录器的日志记录级别，但您无法轻松记住顶层的包名。</p><p>为了解决这个问题，Spring Boot 允许您在 Spring <code>Environment</code> 中定义日志记录组。例如，以下通过将 <strong>tomcat</strong> 组添加到 <code>application.properties</code> 来定义 <strong>tomcat</strong> 组：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging.group.tomcat</span>=org.apache.catalina, org.apache.coyote, org.apache.tomcat</span><br></pre></td></tr></table></figure><p>定义后，您可以使用一行配置来更改组中所有记录器的级别：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging.level.tomcat</span>=TRACE</span><br></pre></td></tr></table></figure><p>Spring Boot 包含以下预定义的日志记录组，可以直接使用：</p><table><thead><tr><th>名称</th><th>日志记录器</th></tr></thead><tbody><tr><td>web</td><td><code>org.springframework.core.codec</code>、<code>org.springframework.http</code>、<code>org.springframework.web</code></td></tr><tr><td>sql</td><td><code>org.springframework.jdbc.core</code>、<code>org.hibernate.SQL</code></td></tr></tbody></table><p><a id="boot-features-custom-log-configuration"></a></p><h3 id="26-6、自定义日志配置">26.6、自定义日志配置</h3><p>可以通过在 classpath 中引入适合的库来激活各种日志记录系统，并且可以通过在 classpath 的根目录中或在以下 Spring <code>Environment</code> 属性指定的位置提供合适的配置文件来进一步自定义：<code>logging.config</code>。</p><p>您可以使用 <code>org.springframework.boot.logging.LoggingSystem</code> 系统属性强制 Spring Boot 使用特定的日志记录系统。该值应该是一个实现了 <code>LoggingSystem</code> 的类的完全限定类名。您还可以使用 <code>none</code> 值完全禁用 Spring Boot 的日志记录配置。</p><p><strong>注意</strong></p><blockquote><p>由于日志记录在创建 <code>ApplicationContext</code> 之前初始化，因此无法在 Spring <code>@Configuration</code> 文件中控制来自 <code>@PropertySources</code> 的日志记录。更改日志记录系统或完全禁用它的唯一方法是通过系统属性设置。</p></blockquote><p>根据您的日志记录系统，将加载以下文件：</p><table><thead><tr><th>日志记录系统</th><th>文件</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>、<code>logback-spring.groovy</code>、<code>logback.xml</code> 或者 <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> 或者 <code>log4j2.xml</code></td></tr><tr><td>JDK（Java Util Logging）</td><td><code>logging.properties</code></td></tr></tbody></table><p><strong>注意</strong></p><blockquote><p>如果可能，我们建议您使用 <code>-spring</code> 的形式来配置日志记录（比如 <code>logback-spring.xml</code> 而不是 <code>logback.xml</code>）。如果使用标准的配置位置，Spring 无法完全控制日志初始化。</p></blockquote><p><strong>警告</strong></p><blockquote><p>Java Util Logging 存在已知的类加载问题，这些问题在以<strong>可执行 jar</strong> 运行时会触发。如果可能的话，我们建议您在使用<strong>可执行 jar</strong> 方式运行时避免使用它。</p></blockquote><p>为了进行自定义，部分其他属性会从 Spring <code>Environment</code> 传输到 System 属性，如下表所述：</p><table><thead><tr><th>Spring Environment</th><th>系统属性</th><th>说明</th></tr></thead><tbody><tr><td><code>logging.exception-conversion-word</code></td><td><code>LOG_EXCEPTION_CONVERSION_WORD</code></td><td>记录异常时使用的转换字。</td></tr><tr><td><code>logging.file</code></td><td><code>LOG_FILE</code></td><td>如果已定义，则在默认日志配置中使用它。</td></tr><tr><td><code>logging.file.max-size</code></td><td><code>LOG_FILE_MAX_SIZE</code></td><td>最大日志文件大小（如果启用了 LOG_FILE）。（仅支持默认的 Logback 设置。）</td></tr><tr><td><code>logging.file.max-history</code></td><td><code>LOG_FILE_MAX_HISTORY</code></td><td>要保留的归档日志文件最大数量（如果启用了 LOG_FILE）。（仅支持默认的 Logback 设置。）</td></tr><tr><td><code>logging.path</code></td><td><code>LOG_PATH</code></td><td>如果已定义，则在默认日志配置中使用它。</td></tr><tr><td><code>logging.pattern.console</code></td><td><code>CONSOLE_LOG_PATTERN</code></td><td>要在控制台上使用的日志模式（stdout）。（仅支持默认的 Logback 设置。）</td></tr><tr><td><code>logging.pattern.dateformat</code></td><td><code>LOG_DATEFORMAT_PATTERN</code></td><td>日志日期格式的 Appender 模式。（仅支持默认的 Logback 设置。）</td></tr><tr><td><code>logging.pattern.file</code></td><td><code>FILE_LOG_PATTERN</code></td><td>要在文件中使用的日志模式（如果启用了 <code>LOG_FILE</code>）。（仅支持默认的 Logback 设置。）</td></tr><tr><td><code>logging.pattern.level</code></td><td><code>LOG_LEVEL_PATTERN</code></td><td>渲染日志级别时使用的格式（默认值为 <code>％5p</code>）。（仅支持默认的 Logback 设置。）</td></tr><tr><td><code>PID</code></td><td><code>PID</code></td><td>当前进程 ID（如果可能，则在未定义为 OS 环境变量时发现）。</td></tr></tbody></table><p>所有受支持的日志记录系统在解析其配置文件时都可以参考系统属性。有关示例，请参阅 <code>spring-boot.jar</code> 中的默认配置：</p><ul><li><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/logback/defaults.xml">Logback</a></li><li><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/log4j2/log4j2.xml">Log4j 2</a></li><li><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/resources/org/springframework/boot/logging/java/logging-file.properties">Java Util logging</a></li></ul><p><strong>提示</strong></p><blockquote><p>如果要在日志记录属性中使用占位符，则应使用 <a href="#boot-features-external-config-placeholders-in-properties">Spring Boot 的语法</a>，而不是使用底层框架的语法。值得注意的是，如果使用 Logback，则应使用 <code>:</code> 作为属性名称与其默认值之间的分隔符，而不是使用 <code>:-</code>。</p></blockquote><p><strong>提示</strong></p><blockquote><p>您可以通过仅覆盖 <code>LOG_LEVEL_PATTERN</code>（或带 Logback 的 <code>logging.pattern.level</code>）将 MDC 和其他特别的内容添加到日志行。例如，如果使用 <code>logging.pattern.level=user:%X&#123;user&#125; %5p</code>，则默认日志格式包含 <strong>user</strong> MDC 项（如果存在），如下所示:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">2015</span>-<span class="number">09</span>-<span class="number">30</span> <span class="number">12</span>:<span class="number">30</span>:<span class="number">04</span>.<span class="number">031</span> user:someone INFO <span class="number">22174</span> ---<span class="meta"> [  nio-8080-exec-0] demo.Controller</span></span><br><span class="line"><span class="meta">Handling authenticated request</span></span><br></pre></td></tr></table></figure></blockquote><p><a id="boot-features-logback-extensions"></a></p><h3 id="26-7、Logback-扩展">26.7、Logback 扩展</h3><p>Spring Boot 包含许多 Logback 扩展，可用于进行高级配置。您可以在 <code>logback-spring.xml</code> 配置文件中使用这些扩展。</p><p><strong>注意</strong></p><blockquote><p>由于标准的 logback.xml 配置文件加载过早，因此无法在其中使用扩展。您需要使用 <code>logback-spring.xml</code> 或定义 <code>logging.config</code> 属性。</p></blockquote><p><strong>警告</strong></p><blockquote><p>扩展不能与 Logback 的<a href="http://logback.qos.ch/manual/configuration.html#autoScan">配置扫描</a>一起使用。如果尝试这样做，更改配置文件会导致发生类似以下错误日志：</p></blockquote><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ERROR </span>in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProperty], current ElementPath is [[configuration][springProperty]]</span><br><span class="line"><span class="keyword">ERROR </span>in ch.qos.logback.core.joran.spi.Interpreter@4:71 - no applicable action for [springProfile], current ElementPath is [[configuration][springProfile]]</span><br></pre></td></tr></table></figure><p><a id="_profile_specific_configuration"></a></p><h3 id="26-7-1、特定-Profile-配置">26.7.1、特定 Profile 配置</h3><p><code>&lt;springProfile&gt;</code> 标签允许您根据激活的 Spring profile 选择性地包含或排除配置部分。在 <code>&lt;configuration&gt;</code> 元素中的任何位置都支持配置 profile。使用 <code>name</code> 属性指定哪个 proifle 接受配置。<code>&lt;springProfile&gt;</code> 标记可以包含简单的 proifle 名称（例如 <code>staging</code>）或 profile 表达式。profile 表达式允许表达更复杂的 profile 逻辑，例如 <code>production &amp; (eu-central | eu-west)</code>。有关详细信息，请查阅<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/core.html#beans-definition-profiles-java">参考指南</a>。以下清单展示了三个示例 profile：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;staging&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev | staging&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- configuration to be enabled when the &quot;dev&quot; or &quot;staging&quot; profiles are active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;!production&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- configuration to be enabled when the &quot;production&quot; profile is not active --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a id="_environment_properties"></a></p><h3 id="26-7-2、环境属性">26.7.2、环境属性</h3><p>使用 <code>&lt;springProperty&gt;</code> 标记可以让您暴露 Spring 环境（<code>Environment</code>）中的属性，以便在 Logback 中使用。如果在 Logback 配置中访问来自 <code>application.properties</code> 文件的值，这样做很有用。标签的工作方式与 Logback 的标准 <code>&lt;property&gt;</code> 标签类似。但是，您可以指定属性（来自 <code>Environment</code>）的 <code>source</code>，而不是指定直接的 <code>value</code>。如果需要将属性存储在 <code>local</code> 范围以外的其他位置，则可以使用 <code>scope</code> 属性。如果需要回退值（如果未在 <code>Environment</code> 中设置该属性），则可以使用 <code>defaultValue</code> 属性。以下示例展示了如何暴露属性以便在 Logback 中使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fluentHost&quot;</span> <span class="attr">source</span>=<span class="string">&quot;myapp.fluentd.host&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">defaultValue</span>=<span class="string">&quot;localhost&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FLUENT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.more.appenders.DataFluentAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remoteHost</span>&gt;</span>$&#123;fluentHost&#125;<span class="tag">&lt;/<span class="name">remoteHost</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>必须以 kebab 风格（短横线小写风格）指定 <code>source</code>（例如 <code>my.property-name</code>）。但可以使用宽松规则将属性添加到 <code>Environment</code> 中。</p></blockquote><p><a id="boot-features-json"></a></p><h2 id="27、JSON">27、JSON</h2><p>Spring Boot 为三个 JSON 映射库提供了内置集成：</p><ul><li>GSON</li><li>Jackson</li><li>JSON-B</li></ul><p>Jackson 是首选和默认的库。</p><p><a id="boot-features-json-jackson"></a></p><h2 id="27-1、Jackson">27.1、Jackson</h2><p>Spring Boot 提供了 Jackson 的自动配置，Jackson 是 <code>spring-boot-starter-json</code> 的一部分。当 Jackson 在 classpath 上时，会自动配置 <code>ObjectMapper</code> bean。Spring Boot 提供了几个配置属性来<a href="howto.md#howto-customize-the-jackson-objectmapper">自定义 <code>ObjectMapper</code> 的配置</a>。</p><p><a id="boot-features-json-gson"></a></p><h2 id="27-2、Gson">27.2、Gson</h2><p>Spring Boot 提供 Gson 的自动配置。当 Gson 在 classpath 上时，会自动配置 <code>Gson</code> bean。Spring Boot 提供了几个 <code>spring.gson.*</code> 配置属性来自定义配置。为了获得更多控制，可以使用一个或多个 <code>GsonBuilderCustomizer</code> bean。</p><p><a id="boot-features-json-json-b"></a></p><h2 id="27-3、JSON-B">27.3、JSON-B</h2><p>Spring Boot 提供了 JSON-B 的自动配置。当 JSON-B API 和实现在 classpath 上时，将自动配置 <code>Jsonb</code> bean。首选的 JSON-B 实现是 Apache Johnzon，它提供了依赖管理。</p><p><a id="boot-features-developing-web-applications"></a></p><h2 id="28、开发-Web-应用程序">28、开发 Web 应用程序</h2><p>Spring Boot 非常适合用于开发 web 应用程序。您可以使用嵌入式 Tomcat、Jetty 或者 Undertow 来创建一个独立（self-contained）的 HTTP 服务器。大多数 web 应用程序使用 <code>spring-boot-starter-web</code> 模块来快速搭建和运行，您也可以选择使用 <code>spring-boot-starter-webflux</code> 模块来构建响应式（reactive） web 应用程序。</p><p>如果您尚未开发过 Spring Boot web 应用程序，则可以按照<a href="#getting-started-first-application">入门</a>章节中的“Hello World!”示例进行操作。</p><p><a id="boot-features-spring-mvc"></a></p><h3 id="28-1、Spring-Web-MVC-框架">28.1、Spring Web MVC 框架</h3><p><a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc">Spring Web MVC 框架</a>（通常简称“Spring MVC”）是一个富<strong>模型-视图-控制器</strong>的 web 框架。Spring MVC 允许您创建 <code>@Controller</code> 或者 <code>@RestController</code> bean 来处理传入的 HTTP 请求。控制器中的方法通过 <code>@RequestMapping</code> 注解映射到 HTTP。</p><p>以下是一个使用了 <code>@RestController</code> 来响应 JSON 数据的典型示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRestController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/&#123;user&#125;&quot;, method=RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long user)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/&#123;user&#125;/customers&quot;, method=RequestMethod.GET)</span></span><br><span class="line">List&lt;Customer&gt; <span class="title function_">getUserCustomers</span><span class="params">(<span class="meta">@PathVariable</span> Long user)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/&#123;user&#125;&quot;, method=RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long user)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring MVC 是 Spring Framework 核心的一部分，详细介绍可参考其<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc">参考文档</a>。<a href="https://spring.io/guides">spring.io/guides</a> 还提供了几个 Spring MVC 相关的指南。</p><p><a id="boot-features-spring-mvc-auto-configuration"></a></p><h4 id="28-1-1、Spring-MVC-自动配置">28.1.1、Spring MVC 自动配置</h4><p>Spring Boot 提供了适用于大多数 Spring MVC 应用的自动配置（auto-configuration）。</p><p>自动配置在 Spring 默认功能上添加了以下功能：</p><ul><li>引入 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewResolver</code> bean。</li><li>支持服务静态资源，包括对 WebJar 的支持（<a href="#boot-features-spring-mvc-static-content">见下文</a>）。</li><li>自动注册 <code>Converter</code>、<code>GenericConverter</code> 和 <code>Formatter</code> bean。</li><li>支持 <code>HttpMessageConverter</code>（见<a href="#boot-features-spring-mvc-message-converters">下文</a>）。</li><li>自动注册 <code>MessageCodesResolver</code>（见<a href="#boot-features-spring-message-codes">下文</a>）。</li><li>支持静态 index.html。</li><li>支持自定义 Favicon （见<a href="#boot-features-spring-mvc-favicon">下文</a>）。</li><li>自动使用 <code>ConfigurableWebBindingInitializer</code> bean（见<a href="#boot-features-spring-mvc-web-binding-initializer">下文</a>）。</li></ul><p>如果您想保留 Spring Boot MVC 的功能，并且需要添加其他 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc">MVC 配置</a>（interceptor、formatter 和视图控制器等），可以添加自己的 <code>WebMvcConfigurerAdapter</code> 类型的 <code>@Configuration</code> 类，但<strong>不能</strong>带 <code>@EnableWebMvc</code> 注解。如果您想自定义 <code>RequestMappingHandlerMapping</code>、<code>RequestMappingHandlerAdapter</code> 或者 <code>ExceptionHandlerExceptionResolver</code> 实例，可以声明一个 <code>WebMvcRegistrationsAdapter</code> 实例来提供这些组件。</p><p>如果您想完全掌控 Spring MVC，可以添加自定义注解了 <code>@EnableWebMvc</code> 的 @Configuration 配置类。</p><p><a id="boot-features-spring-mvc-message-converters"></a></p><h4 id="28-1-2、HttpMessageConverters">28.1.2、HttpMessageConverters</h4><p>Spring MVC 使用 <code>HttpMessageConverter</code> 接口来转换 HTTP 的请求和响应。开箱即用功能包含了合适的默认值，比如对象可以自动转换为 JSON（使用 Jackson 库）或者 XML（优先使用 Jackson XML 扩展，其次为 JAXB）。字符串默认使用 <code>UTF-8</code> 编码。</p><p>如果您需要添加或者自定义转换器（converter），可以使用 Spring Boot 的 <code>HttpMessageConverters</code> 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.web.HttpMessageConverters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> HttpMessageConverters <span class="title function_">customConverters</span><span class="params">()</span> &#123;</span><br><span class="line">HttpMessageConverter&lt;?&gt; additional = ...</span><br><span class="line">HttpMessageConverter&lt;?&gt; another = ...</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpMessageConverters</span>(additional, another);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上下文中的所有 <code>HttpMessageConverter</code> bean 都将被添加到转换器列表中。您也可以用这种方式来覆盖默认转换器。</p><p><a id="boot-features-json-components"></a></p><h4 id="28-1-3、自定义-JSON-Serializer-和-Deserializer">28.1.3、自定义 JSON Serializer 和 Deserializer</h4><p>如果您使用 Jackson 序列化和反序列化 JSON 数据，可能需要自己编写 <code>JsonSerializer</code> 和 <code>JsonDeserializer</code> 类。自定义序列化器（serializer）的做法通常是通过<a href="https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers">一个模块来注册 Jackson</a>， 然而 Spring Boot 提供了一个备选的 <code>@JsonComponent</code> 注解，它可以更加容易地直接注册 Spring Bean。</p><p>您可以直接在 <code>JsonSerializer</code> 或者 <code>JsonDeserializer</code> 实现上使用 <code>@JsonComponent</code> 注解。您也可以在将序列化器/反序列化器（deserializer）作为内部类的类上使用。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.*;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jackson.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonComponent</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Serializer</span> <span class="keyword">extends</span> <span class="title class_">JsonSerializer</span>&lt;SomeObject&gt; &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Deserializer</span> <span class="keyword">extends</span> <span class="title class_">JsonDeserializer</span>&lt;SomeObject&gt; &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ApplicationContext</code> 中所有的 <code>@JsonComponent</code> bean 将被自动注册到 Jackson 中，由于 <code>@JsonComponent</code> 使用 <code>@Component</code> 注解标记，因此组件扫描（component-scanning）规则将对其生效。</p><p>Spring Boot 还提供了 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectSerializer.java">JsonObjectSerializer</a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jackson/JsonObjectDeserializer.java">JsonObjectDeserializer</a> 基类，它们在序列化对象时为标准的 Jackson 版本提供了有用的替代方案。有关详细信息，请参阅 Javadoc 中的 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/jackson/JsonObjectSerializer.html">JsonObjectSerializer</a> 和 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/jackson/JsonObjectDeserializer.html">JsonObjectDeserializer</a>。</p><p><a id="boot-features-spring-message-codes"></a></p><h4 id="28-1-4、MessageCodesResolver">28.1.4、MessageCodesResolver</h4><p>Spring MVC 有一个从绑定错误中生成错误码的策略，用于渲染错误信息：<code>MessageCodesResolver</code>。如果您设置了 <code>spring.mvc.message-codes-resolver.format</code> 属性值为 <code>PREFIX_ERROR_CODE</code> 或 <code>POSTFIX_ERROR_CODE</code>，Spring Boot 将为你创建该策略（请参阅 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/validation/DefaultMessageCodesResolver.Format.html">DefaultMessageCodesResolver.Format</a> 中的枚举）。</p><p><a id="boot-features-spring-mvc-static-content"></a></p><h4 id="28-1-5、静态内容">28.1.5、静态内容</h4><p>默认情况下，Spring Boot 将在 classpath 或者 <code>ServletContext</code> 根目录下从名为 <code>/static</code> （<code>/public</code>、<code>/resources</code> 或 <code>/META-INF/resources</code>）目录中服务静态内容。它使用了 Spring MVC 的 <code>ResourceHttpRequestHandler</code>，因此您可以通过添加自己的 <code>WebMvcConfigurerAdapter</code> 并重写 <code>addResourceHandlers</code> 方法来修改此行为。</p><p>在一个独立的（stand-alone） web 应用程序中，来自容器的默认 servlet 也是被启用的，并充当一个回退支援，Spring 决定不处理 <code>ServletContext</code> 根目录下的静态资源，容器的默认 servlet 也将会处理。大多情况下，这是不会发生的（除非您修改了默认的 MVC 配置），因为 Spring 始终能通过 <code>DispatcherServlet</code> 来处理请求。</p><p>默认情况下，资源被映射到 <code>/**</code>，但可以通过 <code>spring.mvc.static-path-pattern</code> 属性调整。比如，将所有资源重定位到 <code>/resources/**</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.<span class="keyword">static</span>-path-pattern=<span class="regexp">/resources/</span>**</span><br></pre></td></tr></table></figure><p>您还可以使用 <code>spring.resources.static-locations</code> 属性来自定义静态资源的位置（使用一个目录位置列表替换默认值）。根 Servlet context path <code>/</code> 自动作为一个 location 添加进来。</p><p>除了上述提到的<strong>标准</strong>静态资源位置之外，还有一种特殊情况是用于 <a href="https://www.webjars.org/">Webjar 内容</a>。如果以 Webjar 格式打包，则所有符合 <code>/webjars/**</code> 的资源都将从 jar 文件中服务。</p><p><strong>提示</strong></p><blockquote><p>如果您的应用程序要包成 jar，请不要使用 <code>src/main/webapp</code> 目录。虽然此目录是一个通用标准，但它<strong>只</strong>适用于 war 打包，如果生成的是一个 jar，它将被绝大多数的构建工具所忽略。</p></blockquote><p>Spring Boot 还支持 Spring MVC 提供的高级资源处理功能，允许使用例如静态资源缓存清除（cache busting）或者 Webjar 版本无关 URL。</p><p>要使用 Webjar 版本无关 URL 功能，只需要添加 <code>webjars-locator-core</code> 依赖。然后声明您的 Webjar，以 jQuery 为例，添加的 <code>&quot;/webjars/jquery/dist/jquery.min.js&quot;</code> 将变成 <code>&quot;/webjars/jquery/x.y.z/dist/jquery.min.js&quot;</code>，其中 <code>x.y.z</code> 是 Webjar 的版本。</p><p><strong>注意</strong></p><blockquote><p>如果您使用 JBoss，则需要声明 <code>webjars-locator-jboss-vfs</code> 依赖，而不是 <code>webjars-locator-core</code>，否则所有 Webjar 将被解析成 <code>404</code>。</p></blockquote><p>要使用缓存清除功能，以下配置为所有静态资源配置了一个缓存清除方案，实际上是在 URL 上添加了一个内容哈希，例如 <code>&lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&gt;</code>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pring<span class="selector-class">.resources</span><span class="selector-class">.chain</span><span class="selector-class">.strategy</span><span class="selector-class">.content</span>.enabled=true</span><br><span class="line">spring<span class="selector-class">.resources</span><span class="selector-class">.chain</span><span class="selector-class">.strategy</span><span class="selector-class">.content</span>.paths=<span class="comment">/**</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>模板中的资源链接在运行时被重写，这得益于 <code>ResourceUrlEncodingFilter</code> 为 Thymeleaf 和 FreeMarker 自动配置。在使用 JSP 时，您应该手动声明此过滤器。其他模板引擎现在还不会自动支持，但可以与自定义模板宏（macro）/helper 和 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/servlet/resource/ResourceUrlProvider.html"><code>ResourceUrlProvider</code></a> 结合使用。</p></blockquote><p>当使用例如 Javascript 模块加载器动态加载资源时，重命名文件是不可选的。这也是为什么支持其他策略并且可以组合使用的原因。<strong>fixed</strong>策略将在 URL 中添加一个静态版本字符串，而不是更改文件名：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.resources.chain.strategy.content.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.resources.chain.strategy.content.paths</span>=/**</span><br><span class="line"><span class="attr">spring.resources.chain.strategy.fixed.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.resources.chain.strategy.fixed.paths</span>=/js/lib/</span><br><span class="line"><span class="attr">spring.resources.chain.strategy.fixed.version</span>=v12</span><br></pre></td></tr></table></figure><p>使用此配置，JavaScript 模块定位在 <code>&quot;/js/lib/&quot;</code> 下使用固定版本策略（<code>&quot;/v12/js/lib/mymodule.js&quot;</code>），而其他资源仍使用内容策略（<code>&lt;link href=&quot;/css/spring-2a2d595e6ed9a0b24f027f2b63b134d6.css&quot;/&gt;</code>）。</p><p>有关更多支持选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java">ResourceProperties</a>。</p><p><strong>提示</strong></p><blockquote><p>该功能已经在一个专门的<a href="https://spring.io/blog/2014/07/24/spring-framework-4-1-handling-static-web-resources">博客文章</a>和 Spring 框架的<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc-config-static-resources">参考文档</a>中进行了详细描述。</p></blockquote><p><a id="boot-features-spring-mvc-welcome-page"></a></p><h4 id="28-1-6、欢迎页面">28.1.6、欢迎页面</h4><p>Spring Boot 支持静态和模板化的欢迎页面。它首先在配置的静态内容位置中查找 <code>index.html</code> 文件。如果找不到，则查找 <code>index</code> 模板。如果找到其中任何一个，它将自动用作应用程序的欢迎页面。</p><p><a id="boot-features-spring-mvc-favicon"></a></p><h4 id="28-1-7、自定义-Favicon">28.1.7、自定义 Favicon</h4><p>Spring Boot 在配置的静态内容位置和根 classpath 中查找 <code>favicon.ico</code>（按顺序）。如果该文件存在，则将被自动用作应用程序的 favicon。</p><p><a id="boot-features-spring-mvc-pathmatch"></a></p><h4 id="28-1-8、路径匹配与内容协商">28.1.8、路径匹配与内容协商</h4><p>Spring MVC 可以通过查看请求路径并将其与应用程序中定义的映射相匹配，将传入的 HTTP 请求映射到处理程序（例如 Controller 方法上的 <code>@GetMapping</code> 注解）。</p><p>Spring Boot 默认选择禁用后缀模式匹配，这意味着像 <code>&quot;GET /projects/spring-boot.json&quot;</code> 这样的请求将不会与 <code>@GetMapping(&quot;/projects/spring-boot&quot;)</code> 映射匹配。这被视为是 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc-ann-requestmapping-suffix-pattern-match">Spring MVC 应用程序的最佳实践</a>。此功能在过去对于 HTTP 客户端没有发送正确的 <strong>Accept</strong> 请求头的情况还是很有用的，我们需要确保将正确的内容类型发送给客户端。如今，内容协商（Content Negotiation）更加可靠。</p><p>还有其他方法可以处理 HTTP 客户端发送不一致 <strong>Accept</strong> 请求头问题。我们可以使用查询参数来确保像 <code>&quot;GET /projects/spring-boot?format=json&quot;</code> 这样的请求映射到 <code>@GetMapping(&quot;/projects/spring-boot&quot;)</code>，而不是使用后缀匹配：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We can change the parameter name, which is &quot;format&quot; by default:</span></span><br><span class="line"><span class="comment"># spring.mvc.contentnegotiation.parameter-name=myparam</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We can also register additional file extensions/media types with:</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.markdown</span>=text/markdown</span><br></pre></td></tr></table></figure><p>如果您了解相关注意事项并仍希望应用程序使用后缀模式匹配，则需要以下配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-path-extension</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.mvc.pathmatch.use-suffix-pattern</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>或者，不打开所有后缀模式，仅打开支持已注册的后缀模式更加安全：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-path-extension</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.mvc.pathmatch.use-registered-suffix-pattern</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also register additional file extensions/media types with:</span></span><br><span class="line"><span class="comment"># spring.mvc.contentnegotiation.media-types.adoc=text/asciidoc</span></span><br></pre></td></tr></table></figure><p><a id="boot-features-spring-mvc-web-binding-initializer"></a></p><h4 id="28-1-9、ConfigurableWebBindingInitializer">28.1.9、ConfigurableWebBindingInitializer</h4><p>Spring MVC 使用一个 <code>WebBindingInitializer</code> 为特定的请求初始化 <code>WebDataBinder</code>。如果您创建了自己的 <code>ConfigurableWebBindingInitializer</code> <code>@Bean</code>，Spring Boot 将自动配置 Spring MVC 使用它。</p><p><a id="boot-features-spring-mvc-template-engines"></a></p><h4 id="28-1-10、模板引擎">28.1.10、模板引擎</h4><p>除了 REST web 服务之外，您还可以使用 Spring MVC 来服务动态 HTML 内容。Spring MVC 支持多种模板技术，包括 Thymeleaf、FreeMarker 和 JSP。当然，许多其他模板引擎也有自己的 Spring MVC 集成。</p><p>Spring Boot 包含了以下的模板引擎的自动配置支持：</p><ul><li><a href="https://freemarker.apache.org/docs/">FreeMarker</a></li><li><a href="http://docs.groovy-lang.org/docs/next/html/documentation/template-engines.html#_the_markuptemplateengine">Groovy</a></li><li><a href="http://www.thymeleaf.org/">Thymeleaf</a></li><li><a href="https://mustache.github.io/">Mustache</a></li></ul><p><strong>提示</strong></p><blockquote><p>如果可以，请尽量避免使用 JSP，当使用了内嵌 servlet 容器，会有几个<a href="#boot-features-jsp-limitations">已知限制</a>。</p></blockquote><p>当您使用这些模板引擎的其中一个并附带了默认配置时，您的模板将从 <code>src/main/resources/templates</code> 自动获取。</p><p><strong>提示</strong></p><blockquote><p>IntelliJ IDEA 根据您运行应用程序的方式来对 classpath 进行不同的排序。在 IDE 中通过 main 方法来运行应用程序将导致与使用 Maven 或 Gradle 或来以 jar 包方式引用程序的排序有所不同，可能会导致 Spring Boot 找不到 classpath 中的模板。如果您碰到到此问题，可以重新排序 IDE 的 classpath 来放置模块的 classes 和 resources 到首位。或者，您可以配置模板前缀来搜索 classpath 中的每一个 <code>templates</code> 目录，比如：<code>classpath*:/templates/</code>。</p></blockquote><p><a id="boot-features-error-handling"></a></p><h4 id="28-1-11、错误处理">28.1.11、错误处理</h4><p>默认情况下，Spring Boot 提供了一个使用了比较合理的方式来处理所有错误的 <code>/error</code> 映射，其在 servlet 容器中注册了一个<strong>全局</strong>错误页面。对于机器客户端而言，它将产生一个包含错误、HTTP 状态和异常消息的 JSON 响应。对于浏览器客户端而言，将以 HTML 格式呈现相同数据的 <strong>whitelabel</strong> 错误视图（可添加一个解析到 <code>error</code> 的 <code>View</code> 进行自定义）。要完全替换默认行为，您可以实现 <code>ErrorController</code> 并注册该类型的 bean，或者简单地添加一个类型为 <code>ErrorAttributes</code> 的 bean 来替换内容，但继续使用现用机制。</p><p><strong>提示</strong></p><blockquote><p><code>BasicErrorController</code> 可以作为自定义 <code>ErrorController</code> 的基类，这非常有用，尤其是在您想添加一个新的内容类型（默认专门处理 <code>text/html</code>，并为其他内容提供后备）处理器的情况下。要做到这点，您只需要继承 <code>BasicErrorController</code> 并添加一个带有 <code>produces</code> 属性的 <code>@RequestMapping</code> 注解的公共方法，之后创建一个新类型的 bean。</p></blockquote><p>您还可以定义一个带有 <code>@ControllerAdvice</code> 注解的类来自定义为特定控制器或异常类型返回的 JSON 文档：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice(basePackageClasses = AcmeController.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcmeControllerAdvice</span> <span class="keyword">extends</span> <span class="title class_">ResponseEntityExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler(YourException.class)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">ResponseEntity&lt;?&gt; handleControllerException(HttpServletRequest request, Throwable ex) &#123;</span><br><span class="line"><span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">CustomErrorType</span>(status.value(), ex.getMessage()), status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> HttpStatus <span class="title function_">getStatus</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">statusCode</span> <span class="operator">=</span> (Integer) request.getAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (statusCode == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> HttpStatus.INTERNAL_SERVER_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> HttpStatus.valueOf(statusCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例中，如果同包下定义的控制器 <code>AcmeController</code> 抛出了 <code>YourException</code>，则将使用 <code>CustomerErrorType</code> 类型的 POJO 来代替 <code>ErrorAttributes</code> 做 JSON 呈现。</p><p><a id="boot-features-error-handling-custom-error-pages"></a></p><h5 id="28-1-11-1、自定义错误页面">28.1.11.1、自定义错误页面</h5><p>如果您想在自定义的 HTML 错误页面上显示给定的状态码，请将文件添加到 <code>/error</code> 文件夹中。错误页面可以是静态 HTML（添加在任意静态资源文件夹下) 或者使用模板构建。文件的名称应该是确切的状态码或者一个序列掩码。</p><p>例如，要将 <code>404</code> 映射到一个静态 HTML 文件，文件夹结构可以如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line"> +- main/</span><br><span class="line">     +- java/</span><br><span class="line">     |   + &lt;source code&gt;</span><br><span class="line">     +- resources/</span><br><span class="line">         +- <span class="keyword">public</span>/</span><br><span class="line">             +- <span class="keyword">error</span>/</span><br><span class="line">             |   +- <span class="number">404.</span>html</span><br><span class="line">             +- &lt;other <span class="keyword">public</span> assets&gt;</span><br></pre></td></tr></table></figure><p>使用 FreeMarker 模板来映射所有 <code>5xx</code> 错误，文件夹的结构如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line"> +- main/</span><br><span class="line">     +- java/</span><br><span class="line">     <span class="string">|   + &lt;source code&gt;</span></span><br><span class="line">     +- resources/</span><br><span class="line">         +- templates/</span><br><span class="line">             +- error/</span><br><span class="line">             <span class="string">|   +- 5xx.ftl</span></span><br><span class="line">             +- &lt;other templates&gt;</span><br></pre></td></tr></table></figure><p>对于更复杂的映射，您还通过可以添加实现了 <code>ErrorViewResolver</code> 接口的 bean 来处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyErrorViewResolver</span> <span class="keyword">implements</span> <span class="title class_">ErrorViewResolver</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">resolveErrorView</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">HttpStatus status, Map&lt;String, Object&gt; model)</span> &#123;</span><br><span class="line"><span class="comment">// Use the request or status to optionally return a ModelAndView</span></span><br><span class="line"><span class="keyword">return</span> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您还可以使用常规的 Spring MVC 功能，比如 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc-exceptionhandlers"><code>@ExceptionHandler</code> 方法</a>和 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#mvc-ann-controller-advice">@ControllerAdvice</a><code>。之后，ErrorController</code> 将能接收任何未处理的异常。</p><p><a id="boot-features-error-handling-mapping-error-pages-without-mvc"></a></p><h5 id="28-1-11-2、映射到-Spring-MVC-之外的错误页面">28.1.11.2、映射到 Spring MVC 之外的错误页面</h5><p>对于不使用 Spring MVC 的应用程序，您可以使用 <code>ErrorPageRegistrar</code> 接口来直接注册 <code>ErrorPages</code>。抽象部分直接与底层的内嵌 servlet 容器一起工作，即使您没有 Spring MVC <code>DispatcherServlet</code> 也能使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ErrorPageRegistrar <span class="title function_">errorPageRegistrar</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyErrorPageRegistrar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyErrorPageRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ErrorPageRegistrar</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerErrorPages</span><span class="params">(ErrorPageRegistry registry)</span> &#123;</span><br><span class="line">registry.addErrorPages(<span class="keyword">new</span> <span class="title class_">ErrorPage</span>(HttpStatus.BAD_REQUEST, <span class="string">&quot;/400&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>如果您注册了一个 <code>ErrorPage</code>，它的路径最终由一个 <code>Filter</code>（例如，像一些非 Spring web 框架一样，比如 Jersey 和 Wicket）处理，则必须将 Filter 显式注册为一个 <code>ERROR</code> dispatcher，如下示例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">myFilter</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">FilterRegistrationBean</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">registration.setFilter(<span class="keyword">new</span> <span class="title class_">MyFilter</span>());</span><br><span class="line">...</span><br><span class="line">registration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class));</span><br><span class="line"><span class="keyword">return</span> registration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，默认的 <code>FilterRegistrationBean</code> 不包含 <code>ERROR</code> 调度器（dispatcher）类型。</p><p><strong>当心</strong>：当部署到 servlet 容器时，Spring Boot 使用其错误页面过滤器会将有错误状态的请求转发到相应的错误页面。如果尚未提交响应，则只能将请求转发到正确的错误页面。默认情况下，WebSphere Application Server 8.0 及更高版本在成功完成 servlet 的 service 方法后提交响应。您应该将 <code>com.ibm.ws.webcontainer.invokeFlushAfterService</code> 设置为 <code>false</code> 来禁用此行为。</p><p><a id="boot-features-spring-hateoas"></a></p><h4 id="28-1-12、Spring-HATEOAS">28.1.12、Spring HATEOAS</h4><p>如果您想开发一个使用超媒体（hypermedia）的 RESTful API，Spring Boot 提供的 Spring HATEOAS 自动配置在大多数应用程序都工作得非常好。自动配置取代了 <code>@EnableHypermediaSupport</code> 的需要，并注册了一些 bean，以便能轻松构建基于超媒体的应用程序，其包括了一个 <code>LinkDiscoverers</code> （用于客户端支持）和一个用于配置将响应正确呈现的 <code>ObjectMapper</code>。<code>ObjectMapper</code> 可以通过设置 <code>spring.jackson.*</code> 属性或者 <code>Jackson2ObjectMapperBuilder</code> bean （如果存在）自定义。</p><p>您可以使用 <code>@EnableHypermediaSupport</code> 来控制 Spring HATEOAS 的配置。请注意，这使得上述的自定义 ObjectMapper 被禁用。</p><p><a id="boot-features-cors"></a></p><h4 id="28-1-13、CORS-支持">28.1.13、CORS 支持</h4><p><a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing">跨域资源共享</a>（Cross-origin resource sharing，CORS）是<a href="https://caniuse.com/#feat=cors">大多数浏览器</a>实现的一个 <a href="https://www.w3.org/TR/cors/">W3C 规范</a>，其可允许您以灵活的方式指定何种跨域请求可以被授权，而不是使用一些不太安全和不太强大的方式（比如 IFRAME 或者 JSONP）。</p><p>Spring MVC 从 4.2 版本起开始<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#cors">支持 CORS</a>。您可在 Spring Boot 应用程序中使用 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#controller-method-cors-configuration"><code>@CrossOrigin</code></a> 注解配置<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#controller-method-cors-configuration">控制器方法启用 CORS</a>。还可以通过注册一个 WebMvcConfigurer bean 并自定义 <code>addCorsMappings(CorsRegistry)</code> 方法来定义<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#global-cors-configuration">全局 CORS 配置</a>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebMvcConfigurer <span class="title function_">corsConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">registry.addMapping(<span class="string">&quot;/api/**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-webflux"></a></p><h3 id="28-2、Spring-WebFlux-框架">28.2、Spring WebFlux 框架</h3><p>Spring WebFlux 是 Spring Framework 5.0 中新引入的一个响应式 Web 框架。与 Spring MVC 不同，它不需要 Servlet API，完全异步且无阻塞，并通过 <a href="http://www.reactive-streams.org/">Reactor 项目</a>实现<a href="http://www.reactive-streams.org/">响应式流（Reactive Streams）</a>规范。</p><p>Spring WebFlux 有两个版本：函数式和基于注解。基于注解的方式非常接近 Spring MVC 模型，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRestController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;user&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long user)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;user&#125;/customers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;Customer&gt; <span class="title function_">getUserCustomers</span><span class="params">(<span class="meta">@PathVariable</span> Long user)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;user&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long user)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>WebFlux.fn</strong> 为函数式调用方式，它将路由配置与请求处理分开，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoutingConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">monoRouterFunction</span><span class="params">(UserHandler userHandler)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> route(GET(<span class="string">&quot;/&#123;user&#125;&quot;</span>).and(accept(APPLICATION_JSON)), userHandler::getUser)</span><br><span class="line">.andRoute(GET(<span class="string">&quot;/&#123;user&#125;/customers&quot;</span>).and(accept(APPLICATION_JSON)), userHandler::getUserCustomers)</span><br><span class="line">.andRoute(DELETE(<span class="string">&quot;/&#123;user&#125;&quot;</span>).and(accept(APPLICATION_JSON)), userHandler::deleteUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">getUser</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">getUserCustomers</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">deleteUser</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebFlux 是 Spring Framework 的一部分，详细信息可查看其<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web-reactive.html#webflux-fn">参考文档</a>。</p><p><strong>提示</strong></p><blockquote><p>您可以根据需要定义尽可能多的 <code>RouterFunction</code> bean 来模块化路由定义。如果需要设定优先级，Bean 可以指定顺序。</p></blockquote><p>首先，将 <code>spring-boot-starter-webflux</code> 模块添加到您的应用程序中。</p><p><strong>注意</strong></p><blockquote><p>在应用程序中同时添加 <code>spring-boot-starter-web</code> 和 <code>spring-boot-starter-webflux</code> 模块会导致Spring Boot 自动配置 Spring MVC，而不是使用 WebFlux。这样做的原因是因为许多 Spring 开发人员将 <code>spring-boot-starter-webflux</code> 添加到他们的 Spring MVC 应用程序中只是为了使用响应式 <code>WebClient</code>。 您仍然可以通过设置 <code>SpringApplication.setWebApplicationType(WebApplicationType.REACTIVE)</code> 来强制执行您选择的应用程序类型。</p></blockquote><p><a id="boot-features-webflux-auto-configuration"></a></p><h4 id="28-2-1、Spring-WebFlux-自动配置">28.2.1、Spring WebFlux 自动配置</h4><p>Spring Boot 为 Spring WebFlux 提供自动配置，适用于大多数应用程序。</p><p>自动配置在 Spring 的默认基础上添加了以下功能：</p><ul><li>为 <code>HttpMessageReader</code> 和 <code>HttpMessageWriter</code> 实例配置编解码器（<a href="#boot-features-webflux-httpcodecs">稍后将介绍</a>）。</li><li>支持提供静态资源，包括对 WebJars 的支持（<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#boot-features-spring-mvc-static-content">后面将介绍</a>）。</li></ul><p>如果你要保留 Spring Boot WebFlux 功能并且想要添加其他 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web.html#web-reactive">WebFlux 配置</a>，可以添加自己的 <code>@Configuration</code> 类，类型为 <code>WebFluxConfigurer</code>，但不包含 <code>@EnableWebFlux</code>。</p><p>如果您想完全控制 Spring WebFlux，可以将 <code>@EnableWebFlux</code> 注解到自己的 @Configuration。</p><p><a id="boot-features-webflux-httpcodecs"></a></p><h4 id="28-2-2、使用-HttpMessageReader-和-HttpMessageWriter-作为-HTTP-编解码器">28.2.2、使用 HttpMessageReader 和 HttpMessageWriter 作为 HTTP 编解码器</h4><p>Spring WebFlux 使用 <code>HttpMessageReader</code> 和 <code>HttpMessageWriter</code> 接口来转换 HTTP 的请求和响应。它们通过检测 classpath 中可用的类库，配置了 <code>CodecConfigurer</code> 生成合适的默认值。</p><p>Spring Boot 通过使用 <code>CodecCustomizer</code> 实例加强定制。例如，<code>spring.jackson.*</code> 配置 key 应用于 Jackson 编解码器。</p><p>如果需要添加或自定义编解码器，您可以创建一个自定义的 <code>CodecCustomizer</code> 组件，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.codec.CodecCustomizer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CodecCustomizer <span class="title function_">myCodecCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> codecConfigurer -&gt; &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您还可以利用 <a href="#boot-features-json-components">Boot 的自定义 JSON 序列化器和反序列化器</a>。</p><p><a id="boot-features-webflux-static-content"></a></p><h4 id="28-2-3、静态内容">28.2.3、静态内容</h4><p>默认情况下，Spring Boot 将在 classpath 或者 <code>ServletContext</code> 根目录下从名为 <code>/static</code> （<code>/public</code>、<code>/resources</code> 或 <code>/META-INF/resources</code>）目录中服务静态内容。它使用了 Spring WebFlux 的 <code>ResourceWebHandler</code>，因此您可以通过添加自己的 <code>WebFluxConfigurer</code> 并重写 <code>addResourceHandlers</code> 方法来修改此行为。</p><p>默认情况下，资源被映射到 <code>/**</code>，但可以通过 <code>spring.webflux.static-path-pattern</code> 属性调整。比如，将所有资源重定位到 <code>/resources/**</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.webflux.<span class="keyword">static</span>-path-pattern=<span class="regexp">/resources/</span>**</span><br></pre></td></tr></table></figure><p>您还可以使用 <code>spring.resources.static-locations</code> 属性来自定义静态资源的位置（使用一个目录位置列表替换默认值），如果这样做，默认的欢迎页面检测会切换到您自定义的位置。因此，如果启动时有任何其中一个位置存在 <code>index.html</code>，那么它将是应用程序的主页。</p><p>除了上述提到的<strong>标准</strong>静态资源位置之外，还有一种特殊情况是用于 <a href="https://www.webjars.org/">Webjar 内容</a>。如果以 Webjar 格式打包，则所有符合 <code>/webjars/**</code> 的资源都将从 jar 文件中服务。</p><p><strong>提示</strong></p><blockquote><p>Spring WebFlux 应用程序并不严格依赖于 Servlet API，因此它们不能作为 war 文件部署，也不能使用 <code>src/main/webapp</code> 目录。</p></blockquote><p><a id="boot-features-webflux-template-engines"></a></p><h4 id="28-2-4、模板引擎">28.2.4、模板引擎</h4><p>除了 REST web 服务之外，您还可以使用 Spring WebFlux 来服务动态 HTML 内容。Spring WebFlux 支持多种模板技术，包括 Thymeleaf、FreeMarker 和 Mustache。</p><p>Spring Boot 包含了以下的模板引擎的自动配置支持：</p><ul><li><a href="https://freemarker.apache.org/docs/">FreeMarker</a></li><li><a href="http://www.thymeleaf.org/">Thymeleaf</a></li><li><a href="https://mustache.github.io/">Mustache</a></li></ul><p>当您使用这些模板引擎的其中一个并附带了默认配置时，您的模板将从 <code>src/main/resources/templates</code> 自动获取。</p><p><a id="boot-features-webflux-error-handling"></a></p><h4 id="28-2-5、错误处理">28.2.5、错误处理</h4><p>Spring Boot 提供了一个 <code>WebExceptionHandler</code>，它以合理的方式处理所有错误。它在处理顺序中的位置紧接在 WebFlux 提供的处理程序之前，这些处理器排序是最后的。对于机器客户端，它会生成一个 JSON 响应，其中包含错误详情、HTTP 状态和异常消息。对于浏览器客户端，有一个 <strong>whitelabel</strong> 错误处理程序，它以 HTML 格式呈现同样的数据。您还可以提供自己的 HTML 模板来显示错误（<a href="#boot-features-webflux-error-handling-custom-error-pages">请参阅下一节</a>）。</p><p>自定义此功能的第一步通常会沿用现有机制，但替换或扩充了错误内容。为此，您可以添加 <code>ErrorAttributes</code> 类型的 bean。</p><p>想要更改错误处理行为，可以实现 <code>ErrorWebExceptionHandler</code> 并注册该类型的 bean。因为 <code>WebExceptionHandler</code> 是一个非常底层的异常处理器，所以 Spring Boot 还提供了一个方便的 <code>AbstractErrorWebExceptionHandler</code> 来让你以 WebFlux 的方式处理错误，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomErrorWebExceptionHandler</span> <span class="keyword">extends</span> <span class="title class_">AbstractErrorWebExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define constructor here</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">getRoutingFunction</span><span class="params">(ErrorAttributes errorAttributes)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> RouterFunctions</span><br><span class="line">.route(aPredicate, aHandler)</span><br><span class="line">.andRoute(anotherPredicate, anotherHandler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要获得更完整的功能，您还可以直接继承 <code>DefaultErrorWebExceptionHandler</code> 并覆盖相关方法。</p><p><a id="boot-features-webflux-error-handling-custom-error-pages"></a></p><h5 id="28-2-5-1、自定义错误页面">28.2.5.1、自定义错误页面</h5><p>如果您想在自定义的 HTML 错误页面上显示给定的状态码，请将文件添加到 <code>/error</code> 文件夹中。错误页面可以是静态 HTML（添加在任意静态资源文件夹下) 或者使用模板构建。文件的名称应该是确切的状态码或者一个序列掩码。</p><p>例如，要将 <code>404</code> 映射到一个静态 HTML 文件，文件夹结构可以如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line"> +- main/</span><br><span class="line">     +- java/</span><br><span class="line">     |   + &lt;source code&gt;</span><br><span class="line">     +- resources/</span><br><span class="line">         +- <span class="keyword">public</span>/</span><br><span class="line">             +- <span class="keyword">error</span>/</span><br><span class="line">             |   +- <span class="number">404.</span>html</span><br><span class="line">             +- &lt;other <span class="keyword">public</span> assets&gt;</span><br></pre></td></tr></table></figure><p>使用 Mustache 模板来映射所有 <code>5xx</code> 错误，文件夹的结构如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line"> +- main/</span><br><span class="line">     +- java/</span><br><span class="line">     <span class="string">|   + &lt;source code&gt;</span></span><br><span class="line">     +- resources/</span><br><span class="line">         +- templates/</span><br><span class="line">             +- error/</span><br><span class="line">             <span class="string">|   +- 5xx.mustache</span></span><br><span class="line">             +- &lt;other templates&gt;</span><br></pre></td></tr></table></figure><p><a id="boot-features-webflux-web-filters"></a></p><h4 id="28-2-6、Web-过滤器">28.2.6、Web 过滤器</h4><p>Spring WebFlux 提供了一个 <code>WebFilter</code> 接口，可以通过实现该接口来过滤 HTTP 请求/响应消息交换。在应用程序上下文中找到的 WebFilter bean 将自动用于过滤每个消息交换。</p><p>如果过滤器的执行顺序很重要，则可以实现 <code>Ordered</code> 接口或使用 <code>@Order</code> 注解来指定顺序。Spring Boot 自动配置可能为您配置了几个 Web 过滤器。执行此操作时，将使用下表中的顺序：</p><table><thead><tr><th>Web 过滤器</th><th>顺序</th></tr></thead><tbody><tr><td><code>MetricsWebFilter</code></td><td><code>Ordered.HIGHEST_PRECEDENCE + 1</code></td></tr><tr><td><code>WebFilterChainProxy</code>（Spring Security）</td><td><code>-100</code></td></tr><tr><td><code>HttpTraceWebFilter</code></td><td><code>Ordered.LOWEST_PRECEDENCE - 10</code></td></tr></tbody></table><p><a id="boot-features-jersey"></a></p><h3 id="28-3、JAX-RS-与-Jersey">28.3、JAX-RS 与 Jersey</h3><p>如果您喜欢 JAX-RS 编程模型的 REST 端点，则可以使用一个实现来替代 Spring MVC。<a href="https://jersey.github.io/">Jersey</a> 和 <a href="https://cxf.apache.org/">Apache CXF</a> 都能开箱即用。CXF 要求在应用程序上下文中以 <code>@Bean</code> 的方式将它注册为一个 <code>Servlet</code> 或者 <code>Filter</code>。Jersey 有部分原生 Spring 支持，所以我们也在 starter 中提供了与 Spring Boot 整合的自动配置支持。</p><p>要使用 Jersey，只需要将 <code>spring-boot-starter-jersey</code> 作为依赖引入，然后您需要一个 <code>ResourceConfig</code> 类型的 <code>@Bean</code>，您可以在其中注册所有端点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JerseyConfig</span> <span class="keyword">extends</span> <span class="title class_">ResourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JerseyConfig</span><span class="params">()</span> &#123;</span><br><span class="line">register(Endpoint.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>警告</strong></p><blockquote><p>Jersey 对于扫描可执行归档文件的支持是相当有限的。例如，它无法扫描一个<a href="#deployment-install">完整的可执行 jar 文件</a>中的端点，同样，当运行一个可执行的 war 文件时，它也无法扫描包中 <code>WEB-INF/classes</code> 下的端点。为了避免该限制，您不应该使用 <code>packages</code> 方法，应该使用上述的 <code>register</code> 方法来单独注册每一个端点。</p></blockquote><p>您可以注册任意数量实现了 <code>ResourceConfigCustomizer</code> 的 bean，以实现更高级的定制化。</p><p>所有注册的端点都应注解了 <code>@Components</code> 并具有 HTTP 资源注解（ <code>@GET</code> 等），例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Path(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Endpoint</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GET</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 <code>Endpoint</code> 是一个 Spring <code>@Component</code>，它的生命周期由 Spring 管理，您可以使用 <code>@Autowired</code> 注入依赖并使用 <code>@Value</code> 注入外部配置。默认情况下，Jersey servlet 将被注册并映射到 <code>/*</code>。您可以通过将 <code>@ApplicationPath</code> 添加到 <code>ResourceConfig</code> 来改变此行为。</p><p>默认情况下，Jersey 在 <code>ServletRegistrationBean</code> 类型的 <code>@Bean</code> 中被设置为一个名为 <code>jerseyServletRegistration</code> 的 Servlet。默认情况下，该 servlet 将被延迟初始化，您可以使用 <code>spring.jersey.servlet.load-on-startup</code> 自定义。您可以禁用或通过创建一个自己的同名 bean 来覆盖该 bean。您还可以通过设置 <code>spring.jersey.type=filter</code> 使用过滤器替代 servlet（该情况下， 替代或覆盖 <code>@Bean</code> 的为<code>jerseyFilterRegistration</code>）。该过滤器有一个 <code>@Order</code>，您可以使用 <code>spring.jersey.filter.order</code> 设置。可以使用 <code>spring.jersey.init.*</code> 指定一个 map 类型的 property 以给定 servlet 和过滤器的初始化参数。</p><p>这里有一个 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-samples/spring-boot-sample-jersey">Jersey 示例</a>，您可以解如何设置。</p><p><a id="boot-features-embedded-container"></a></p><h3 id="28-4、内嵌-Servlet-容器支持">28.4、内嵌 Servlet 容器支持</h3><p>Spring Boot 包含了对内嵌 <a href="https://tomcat.apache.org/">Tomcat</a>、<a href="https://www.eclipse.org/jetty/">Jetty</a> 和 <a href="http://undertow.io/">Undertow</a> 服务器的支持。大部分开发人员只需简单地使用对应的 Starter 来获取完整的配置实例。默认情况下，内嵌服务器将监听 <code>8080</code> 上的 HTTP 请求。</p><p><strong>警告</strong></p><blockquote><p>如果您选择在 <a href="https://www.centos.org/">CentOS</a> 使用 Tomcat，请注意，默认情况下，临时目录用于储存编译后的 JSP、上传的文件等。当您的应用程序运行时发生了故障，该目录可能会被 <code>tmpwatch</code> 删除。为了避免出现该情况，您可能需要自定义 <code>tmpwatch</code> 配置，使 <code>tomcat.* </code>目录不被删除，或者配置 <code>server.tomcat.basedir</code> 让 Tomcat 使用其他位置。</p></blockquote><p><a id="boot-features-embedded-container-servlets-filters-listeners"></a></p><h4 id="28-4-1、Servlet、Filter-与-Listener">28.4.1、Servlet、Filter 与 Listener</h4><p>使用内嵌 servlet 容器时，您可以使用 Spring bean 或者扫描方式来注册 Servlet 规范中的 Servlet、Filter 和所有监听器（比如 <code>HttpSessionListener</code>）。</p><p><a id="boot-features-embedded-container-servlets-filters-listeners-beans"></a></p><h5 id="28-4-1-1、将-Servlet、Filter-和-Listener-注册为-Spring-Bean">28.4.1.1、将 Servlet、Filter 和 Listener 注册为 Spring Bean</h5><p>任何 <code>Servlet</code>、<code>Filter</code> 或 <code>*Listener</code> 的 Spring bean 实例都将被注册到内嵌容器中。如果您想引用 <code>application.properties</code> 中的某个值，这可能会特别方便。</p><p>默认情况下，如果上下文只包含单个 Servlet，它将映射到 <code>/</code>。在多个 Servlet bean 的情况下，bean 的名称将用作路径的前缀。Filter 将映射到 <code>/*</code>。</p><p>如果基于约定配置的映射不够灵活，您可以使用 <code>ServletRegistrationBean</code>、<code>FilterRegistrationBean</code> 和 <code>ServletListenerRegistrationBean</code> 类来完全控制。</p><p>Spring Boot 附带了许多可以定义 Filter bean 的自动配置。以下是部分过滤器及其执行顺序的（顺序值越低，优先级越高）：</p><table><thead><tr><th>Servlet Filter</th><th>顺序</th></tr></thead><tbody><tr><td><code>OrderedCharacterEncodingFilter</code></td><td><code>Ordered.HIGHEST_PRECEDENCE</code></td></tr><tr><td><code>WebMvcMetricsFilter</code></td><td><code>Ordered.HIGHEST_PRECEDENCE + 1</code></td></tr><tr><td><code>ErrorPageFilter</code></td><td><code>Ordered.HIGHEST_PRECEDENCE + 1</code></td></tr><tr><td><code>HttpTraceFilter</code></td><td><code>Ordered.LOWEST_PRECEDENCE - 10</code></td></tr></tbody></table><p>通常 Filter bean 无序放置也是安全的。</p><p>如果需要指定顺序，则应避免在 <code>Ordered.HIGHEST_PRECEDENCE</code> 顺序点配置读取请求体的过滤器，因为它的字符编码可能与应用程序的字符编码配置不一致。如果一个 Servlet 过滤器包装了请求，则应使用小于或等于 <code>OrderedFilter.REQUEST_WRAPPER_FILTER_MAX_ORDER </code>的顺序点对其进行配置。</p><p><a id="boot-features-embedded-container-context-initializer"></a></p><h4 id="28-4-2、Servlet-上下文初始化">28.4.2、Servlet 上下文初始化</h4><p>内嵌 servlet 容器不会直接执行 Servlet 3.0+ 的 <code>javax.servlet.ServletContainerInitializer</code> 接口或 Spring 的 <code>org.springframework.web.WebApplicationInitializer</code> 接口。这是一个有意的设计决策，旨在降低在 war 内运行时第三方类库产生的风险，防止破坏 Sring Boot 应用程序。</p><p>如果您需要在 Spring Boot 应用程序中执行 servlet 上下文初始化，则应注册一个实现了 <code>org.springframework.boot.context.embedded.ServletContextInitializer</code> 接口的 bean。<code>onStartup</code> 方法提供了针对 <code>ServletContext</code> 的访问入口，如果需要，它可以容易作为现有 <code>WebApplicationInitializer</code> 的适配器。</p><p><a id="boot-features-embedded-container-servlets-filters-listeners-scanning"></a></p><h5 id="28-4-2-1、扫描-Servlet、Filter-和-Listener">28.4.2.1、扫描 Servlet、Filter 和 Listener</h5><p>使用内嵌容器时，可以使用 <code>@ServletComponentScan</code> 启用带 <code>@WebServlet</code>、<code>@WebFilter</code> 和 <code>@WebListener</code> 注解的类自动注册。</p><p><strong>提示</strong></p><p><code>@ServletComponentScan</code> 在独立（standalone）容器中不起作用，因容器将使用内置发现机制来代替。</p><p><a id="boot-features-embedded-container-application-context"></a></p><h4 id="28-4-3、ServletWebServerApplicationContext">28.4.3、ServletWebServerApplicationContext</h4><p>Spring Boot 底层使用了一个不同的 <code>ApplicationContext</code> 类型来支持内嵌 servlet。<code>ServletWebServerApplicationContext</code> 是一个特殊 <code>WebApplicationContext</code> 类型，它通过搜索单个 <code>ServletWebServerFactory</code> bean 来引导自身。通常，<code>TomcatServletWebServerFactory</code>、 <code>JettyServletWebServerFactory</code> 或者 <code>UndertowServletWebServerFactory</code> 中的一个将被自动配置。</p><p><strong>注意</strong></p><blockquote><p>通常，你不需要知道这些实现类。大部分应用程序会自动配置，并为您创建合适的 <code>ApplicationContext</code> 和 <code>ServletWebServerFactory</code>。</p></blockquote><p><a id="boot-features-customizing-embedded-containers"></a></p><h5 id="28-4-4、自定义内嵌-Servlet-容器">28.4.4、自定义内嵌 Servlet 容器</h5><p>可以使用 Spring <code>Environment</code> 属性来配置通用的 servlet 容器设置。通常，您可以在 <code>application.properties</code> 文件中定义这些属性。</p><p>通用的服务器设置包括：</p><ul><li>网络设置：监听 HTTP 请求的端口（<code>server.port</code>），绑定接口地址到 <code>server.address</code> 等。</li><li>会话设置：是否持久会话（<code>server.session.persistence</code>）、session 超时（<code>server.session.timeout</code>）、会话数据存放位置（<code>server.session.store-dir</code>）和 session-cookie 配置（<code>server.session.cookie.*</code>）。</li><li>错误管理：错误页面位置（<code>server.error.path</code>）等。</li><li><a href="#howto-configure-ssl">SSL</a></li><li><a href="#how-to-enable-http-response-compression">HTTP 压缩</a></li></ul><p>Spring Boot 尽可能暴露通用的设置，但并不总是都可以。针对这些情况，专用的命名空间为特定的服务器提供了自定义功能（请参阅 <code>server.tomcat</code> 和 <code>server.undertow</code>）。例如，您可以使用内嵌 servlet 容器的特定功能来配置<a href="#howto-configure-accesslogs">访问日志</a>。</p><p><strong>提示</strong></p><blockquote><p>有关完整的内容列表，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java">ServerProperties</a> 类。</p></blockquote><p><a id="boot-features-programmatic-embedded-container-customization"></a></p><h6 id="28-4-4-1、以编程方式自定义">28.4.4.1、以编程方式自定义</h6><p>如果您需要以编程的方式配置内嵌 servlet 容器，可以注册一个是实现了 <code>WebServerFactoryCustomizer</code> 接口的 Spring bean。<code>WebServerFactoryCustomizer</code> 提供了对 <code>ConfigurableServletWebServerFactory</code> 的访问入口，其中包含了许多自定义 setter 方法。以下示例使用了编程方式来设置端口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomizationBean</span> <span class="keyword">implements</span> <span class="title class_">WebServerFactoryCustomizer</span>&lt;ConfigurableServletWebServerFactory&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConfigurableServletWebServerFactory server)</span> &#123;</span><br><span class="line">server.setPort(<span class="number">9000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p><code>TomcatServletWebServerFactory</code>、<code>JettyServletWebServerFactory</code> 和 <code>UndertowServletWebServerFactory</code> 是 ConfigurableServletWebServerFactory 的具体子类，它们分别为 Tomcat、Jetty 和 Undertow 提供了额外的自定义 setter 方法。</p></blockquote><p><a id="boot-features-customizing-configurableservletwebserverfactory-directly"></a></p><h6 id="28-4-4-2、直接自定义-ConfigurableServletWebServerFactory">28.4.4.2、直接自定义 ConfigurableServletWebServerFactory</h6><p>如果上述的自定义方式太局限，您可以自己注册 <code>TomcatServletWebServerFactory</code>、<code>JettyServletWebServerFactory</code> 或 <code>UndertowServletWebServerFactory</code> bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ConfigurableServletWebServerFactory <span class="title function_">webServerFactory</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">TomcatServletWebServerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>();</span><br><span class="line">factory.setPort(<span class="number">9000</span>);</span><br><span class="line">factory.setSessionTimeout(<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">factory.addErrorPages(<span class="keyword">new</span> <span class="title class_">ErrorPage</span>(HttpStatus.NOT_FOUND, <span class="string">&quot;/notfound.html&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Setter 方法提供了许多配置选项。还有几个 <strong>hook</strong> 保护方法供您深入定制。有关详细信息，请参阅<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/web/servlet/server/ConfigurableServletWebServerFactory.html">源码文档</a>。</p><p><a id="boot-features-jsp-limitations"></a></p><h4 id="28-4-5、JSP-局限">28.4.5、JSP 局限</h4><p>当运行使用了内嵌 servlet 容器的 Spring Boot 应用程序时（打包为可执行归档文件），JSP 支持将存在一些限制。</p><ul><li>如果您使用 war 打包，在 Jetty 和 Tomcat 中可以正常工作，使用 <code>java -jar</code> 启动时，可执行的 war 可正常使用，并且还可以部署到任何标准容器。使用可执行 jar 时不支持 JSP。</li><li>Undertow 不支持 JSP。</li><li>创建自定义的 error.jsp 页面不会覆盖默认<a href="#boot-features-error-handling">错误处理</a>视图，应该使用<a href="#boot-features-error-handling-custom-error-pages">自定义错误页面</a>来代替。</li></ul><p>这里有一个 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-samples/spring-boot-sample-web-jsp">JSP 示例</a>，您可以了解到如何配置。</p><p><a id="boot-features-reactive-server"></a></p><h3 id="28-5、内嵌响应式服务器支持">28.5、内嵌响应式服务器支持</h3><p>Spring Boot 包括对以下内嵌响应式 Web 服务器的支持：Reactor Netty、Tomcat、Jetty 和 Undertow。大多数开发人员使用对应的 <strong>Starter</strong> 来获取一个完全配置的实例。默认情况下，内嵌服务器在 8080 端口上监听 HTTP 请求。</p><p><a id="boot-features-reactive-server-resources"></a></p><h3 id="28-6、响应式服务器资源配置">28.6、响应式服务器资源配置</h3><p>在自动配置 Reactor Netty 或 Jetty 服务器时，Spring Boot 将创建特定的 bean 为服务器实例提供 HTTP 资源：<code>ReactorResourceFactory</code> 或 <code>JettyResourceFactory</code>。</p><p>默认情况下，这些资源也将与 Reactor Netty 和 Jetty 客户端共享以获得最佳性能，具体如下：</p><ul><li>用于服务器和客户端的的相同技术</li><li>客户端实例使用了 Spring Boot 自动配置的 <code>WebClient.Builder</code> bean 构建。</li></ul><p>开发人员可以通过提供自定义的 <code>ReactorResourceFactory</code> 或 <code>JettyResourceFactory</code> bean 来重写 Jetty 和 Reactor Netty 的资源配置 —— 将应用于客户端和服务器。</p><p>您可以在 <a href="#boot-features-webclient-runtime">WebClient Runtime</a> 章节中了解有关客户端资源配置的更多内容。</p><p><a id="boot-features-security"></a></p><h2 id="29、安全">29、安全</h2><p>默认情况下，如果 <a href="https://projects.spring.io/spring-security/">Spring Security</a> 在 classpath 上，则 Web 应用程序是受保护的。Spring Boot 依赖 Spring Security 的内容协商策略来确定是使用 <code>httpBasic</code> 还是 <code>formLogin</code>。要给 Web 应用程序添加方法级别的安全保护，可以使用 <code>@EnableGlobalMethodSecurity</code> 注解设置。有关更多其他信息，您可以在 <a href="https://docs.spring.io/spring-security/site/docs/5.1.2.RELEASE/reference/htmlsingle#jc-method">Spring Security 参考指南</a>中找到。</p><p>默认的 <code>UserDetailsS​​ervice</code> 只有一个用户。用户名为 <code>user</code>，密码是随机的，在应用程序启动时会以 INFO 级别打印出来，如下所示：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using generated security password: 78fa095d-3f4c-<span class="number">48b1</span>-ad50-e24c31d5cf35</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>如果您对日志配置进行微调，请确保将 <code>org.springframework.boot.autoconfigure.security</code> 的级别设置为 <code>INFO</code>。否则，默认密码不会打印出来。</p></blockquote><p>您可以通过提供 <code>spring.security.user.name</code> 和 <code>spring.security.user.password</code> 来更改用户名和密码。</p><p>您在 Web 应用程序中默认会获得以下基本功能：</p><ul><li>一个 <code>UserDetailsS​​ervice</code>（或 WebFlux 应用程序中的 <code>ReactiveUserDetailsS​​ervice</code>）bean，采用内存存储形式，有一个自动生成密码的用户（有关用户属性，请参阅 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/autoconfigure/security/SecurityProperties.User.html"><code>SecurityProperties.User</code></a>）。</li><li>用于整个应用程序（如果 actuator 在 classpath 上，则包括 actuator 端点）基于表单登录或 HTTP Basic 认证（取决于 Content-Type）。</li><li>一个用于发布身份验证事件的 <code>DefaultAuthenticationEventPublisher</code>。</li></ul><p>您可以通过为其添加一个 bean 来提供不同的 <code>AuthenticationEventPublisher</code>。</p><p><a id="boot-features-security-mvc"></a></p><h3 id="29-1、MVC-安全">29.1、MVC 安全</h3><p>默认的安全配置在 <code>SecurityAutoConfiguration</code> 和 <code>UserDetailsS​​erviceAutoConfiguration</code> 中实现。 <code>SecurityAutoConfiguration</code> 导入用于 Web 安全的 <code>SpringBootWebSecurityConfiguration</code>，<code>UserDetailsS​​erviceAutoConfiguration</code> 配置身份验证，这同样适用于非 Web 应用程序。要完全关闭默认的 Web 应用程序安全配置，可以添加 <code>WebSecurityConfigurerAdapter</code> 类型的 bean（这样做不会禁用 <code>UserDetailsS​​ervice</code> 配置或 Actuator 的安全保护）。</p><p>要同时关闭 <code>UserDetailsS​​ervice</code> 配置，您可以添加 <code>UserDetailsS​​ervice</code>、<code>AuthenticationProvider</code> 或 <code>AuthenticationManager</code> 类型的 bean。<a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-samples/">Spring Boot 示例</a>中有几个使用了安全保护的应用程序，他们或许可以帮助到您。</p><p>可以通过添加自定义 <code>WebSecurityConfigurerAdapter</code> 来重写访问规则。Spring Boot 提供了便捷方法，可用于重写 actuator 端点和静态资源的访问规则。<code>EndpointRequest</code> 可用于创建一个基于 <code>management.endpoints.web.base-path</code> 属性的 <code>RequestMatcher</code>。<code>PathRequest</code> 可用于为常用位置中的资源创建一个 <code>RequestMatcher</code>。</p><p><a id="boot-features-security-webflux"></a></p><h3 id="29-2、WebFlux-安全">29.2、WebFlux 安全</h3><p>与 Spring MVC 应用程序类似，您可以通过添加 <code>spring-boot-starter-security</code> 依赖来保护 WebFlux 应用程序。默认的安全配置在 <code>ReactiveSecurityAutoConfiguration</code> 和 <code>UserDetailsServiceAutoConfiguration</code> 中实现。<code>ReactiveSecurityAutoConfiguration</code> 导入用于 Web 安全的 <code>WebFluxSecurityConfiguration</code>，<code>UserDetailsServiceAutoConfiguration</code> 配置身份验证，这同样适用于非 Web 应用程序。要完全关闭默认的 Web 应用程序安全配置，可以添加 <code>WebFilterChainProxy</code> 类型的 bean（这样做不会禁用 <code>UserDetailsS​​ervice</code> 配置或 Actuator 的安全保护）。</p><p>要同时关闭 <code>UserDetailsS​​ervice</code> 配置，您可以添加 <code>ReactiveUserDetailsService</code> 或 <code>ReactiveAuthenticationManager</code> 类型的 bean。</p><p>可以通过添加自定义 <code>SecurityWebFilterChain</code> 来重写访问规则。Spring Boot 提供了便捷方法，可用于重写 actuator 端点和静态资源的访问规则。<code>EndpointRequest</code> 可用于创建一个基于 <code>management.endpoints.web.base-path</code> 属性的 <code>ServerWebExchangeMatcher</code>。</p><p><code>PathRequest</code> 可用于为常用位置中的资源创建一个 <code>ServerWebExchangeMatcher</code>。</p><p>例如，您可以通过添加以下内容来自定义安全配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityWebFilterChain <span class="title function_">springSecurityFilterChain</span><span class="params">(ServerHttpSecurity http)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> http</span><br><span class="line">.authorizeExchange()</span><br><span class="line">.matchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()</span><br><span class="line">.pathMatchers(<span class="string">&quot;/foo&quot;</span>, <span class="string">&quot;/bar&quot;</span>)</span><br><span class="line">.authenticated().and()</span><br><span class="line">.formLogin().and()</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-security-oauth2"></a></p><h3 id="29-3、OAuth2">29.3、OAuth2</h3><p><a href="https://oauth.net/2/">OAuth2</a> 是 Spring 支持的一种广泛使用的授权框架。</p><p><a id="boot-features-security-oauth2-client"></a></p><h4 id="29-3-1、客户端">29.3.1、客户端</h4><p>如果您的 classpath 上有 <code>spring-security-oauth2-client</code>，则可以利用一些自动配置来轻松设置 <code>OAuth2/Open ID Connect 客户端。该配置使用 </code>OAuth2ClientProperties` 的属性。相同的属性适用于 servlet 和响应式应用程序。</p><p>您可以在 <code>spring.security.oauth2.client</code> 前缀下注册多个 OAuth2 客户端和提供者（provider），如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-1.client-id</span>=abcd</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-1.client-secret</span>=password</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-1.client-name</span>=Client for user scope</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-1.provider</span>=my-oauth-provider</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-1.scope</span>=user</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-1.redirect-uri-template</span>=http://my-redirect-uri.com</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-1.client-authentication-method</span>=basic</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-1.authorization-grant-type</span>=authorization_code</span><br><span class="line"></span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-2.client-id</span>=abcd</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-2.client-secret</span>=password</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-2.client-name</span>=Client for email scope</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-2.provider</span>=my-oauth-provider</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-2.scope</span>=email</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-2.redirect-uri-template</span>=http://my-redirect-uri.com</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-2.client-authentication-method</span>=basic</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client-2.authorization-grant-type</span>=authorization_code</span><br><span class="line"></span><br><span class="line"><span class="attr">spring.security.oauth2.client.provider.my-oauth-provider.authorization-uri</span>=http://my-auth-server/oauth/authorize</span><br><span class="line"><span class="attr">spring.security.oauth2.client.provider.my-oauth-provider.token-uri</span>=http://my-auth-server/oauth/token</span><br><span class="line"><span class="attr">spring.security.oauth2.client.provider.my-oauth-provider.user-info-uri</span>=http://my-auth-server/userinfo</span><br><span class="line"><span class="attr">spring.security.oauth2.client.provider.my-oauth-provider.user-info-authentication-method</span>=header</span><br><span class="line"><span class="attr">spring.security.oauth2.client.provider.my-oauth-provider.jwk-set-uri</span>=http://my-auth-server/token_keys</span><br><span class="line"><span class="attr">spring.security.oauth2.client.provider.my-oauth-provider.user-name-attribute</span>=name</span><br></pre></td></tr></table></figure><p>对于支持 <a href="https://openid.net/specs/openid-connect-discovery-1_0.html">OpenID Connect 发现</a>的 OpenID Connect 提供者，可以进一步简化配置。需要使用 <code>issuer-uri</code> 配置提供者，<code>issuer-uri</code> 是其 Issuer Identifier 的 URI。例如，如果提供的 <code>issuer-uri</code> 是 “<a href="https://example.com">https://example.com</a>”，则将对 “<a href="https://example.com/.well-known/openid-configuration%E2%80%9D">https://example.com/.well-known/openid-configuration”</a> 发起一个 <code>OpenID Provider Configuration Request</code>。期望结果是一个 <code>OpenID Provider Configuration Response</code>。以下示例展示了如何使用 <code>issuer-uri</code> 配置一个 OpenID Connect Provider：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring<span class="selector-class">.security</span><span class="selector-class">.oauth2</span><span class="selector-class">.client</span><span class="selector-class">.provider</span><span class="selector-class">.oidc-provider</span>.issuer-uri=https:<span class="comment">//dev-123456.oktapreview.com/oauth2/default/</span></span><br></pre></td></tr></table></figure><p>默认情况下，Spring Security 的 <code>OAuth2LoginAuthenticationFilter</code> 仅处理与 <code>/login/oauth2/code/*</code> 相匹配的 URL。如果要自定义 <code>redirect-uri</code> 以使用其他匹配模式，则需要提供配置以处理该自定义模式。例如，对于 servlet 应用程序，您可以添加类似于以下 <code>WebSecurityConfigurerAdapter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2LoginSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">http</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.anyRequest().authenticated()</span><br><span class="line">.and()</span><br><span class="line">.oauth2Login()</span><br><span class="line">.redirectionEndpoint()</span><br><span class="line">.baseUri(<span class="string">&quot;/custom-callback&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-security-oauth2-common-providers"></a></p><p><strong>OAuth2 客户端注册常见的提供者</strong></p><p>对于常见的 OAuth2 和 OpenID 提供者（provider），包括 Google、Github、Facebook 和 Okta，我们提供了一组提供者默认设置（分别是 <code>google</code>、<code>github</code>、<code>facebook</code> 和 <code>okta</code>）。</p><p>如果您不需要自定义这些提供者，则可以将 <code>provider</code> 属性设置为您需要推断默认值的属性。此外，如果客户端注册的 key 与默认支持的提供者匹配，则 Spring Boot 也会推断出来。</p><p>换而言之，以下示例中的两个配置使用了 Google 提供者：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client.client-id</span>=abcd</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client.client-secret</span>=password</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.my-client.provider</span>=google</span><br><span class="line"></span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.google.client-id</span>=abcd</span><br><span class="line"><span class="attr">spring.security.oauth2.client.registration.google.client-secret</span>=password</span><br></pre></td></tr></table></figure><p><a id="boot-features-security-oauth2-server"></a></p><h4 id="29-3-2、资源服务器">29.3.2、资源服务器</h4><p>如果在 classpath 上有 <code>spring-security-oauth2-resource-server</code>，只要指定了 JWK Set URI 或 OIDC Issuer URI，Spring Boot 就可以设置 OAuth2 资源服务器，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.security.oauth2.resourceserver.jwt.jwk-set-uri</span>=https://example.com/oauth2/default/v1/keys</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.security.oauth2.resourceserver.jwt.issuer-uri</span>=https://dev-<span class="number">123456</span>.oktapreview.com/oauth2/default/</span><br></pre></td></tr></table></figure><p>相同的属性适用于 servlet 和响应式应用程序。</p><p>或者，您可以为 servlet 应用程序定义自己的 <code>JwtDecoder</code> bean，或为响应式应用程序定义 <code>ReactiveJwtDecoder</code>。</p><p><a id="_authorization_server"></a></p><h4 id="29-3-3、授权服务器">29.3.3、授权服务器</h4><p>目前，Spring Security 没有提供 OAuth 2.0 授权服务器实现。但此功能可从 <a href="https://projects.spring.io/spring-security-oauth/">Spring Security OAuth</a> 项目获得，该项目最终会被 Spring Security 所取代。在此之前，您可以使用 <code>spring-security-oauth2-autoconfigure</code> 模块轻松设置 OAuth 2.0 授权服务器，请参阅其<a href="https://docs.spring.io/spring-security-oauth2-boot">文档</a>以获取详细信息。</p><p><a id="boot-features-security-actuator"></a></p><h3 id="29-4、Actuator-安全">29.4、Actuator 安全</h3><p>出于安全考虑，默认情况下禁用除 <code>/health</code> 和 <code>/info</code> 之外的所有 actuator。可用 <code>management.endpoints.web.exposure.include</code> 属性启用 actuator。</p><p>如果 Spring Security 位于 classpath 上且没有其他 <code>WebSecurityConfigurerAdapter</code>，则除了 <code>/health</code> 和 <code>/info</code> 之外的所有 actuator 都由 Spring Boot 自动配置保护。如果您定义了自定义 <code>WebSecurityConfigurerAdapter</code>，则 Spring Boot 自动配置将不再生效，您可以完全控制 actuator 的访问规则。</p><p><strong>注意</strong></p><blockquote><p>在设置 <code>management.endpoints.web.exposure.include</code> 之前，请确保暴露的 actuator 没有包含敏感信息和 <code>/</code> 或被防火墙保护亦或受 Spring Security 之类的保护。</p></blockquote><p><a id="boot-features-security-csrf"></a></p><h4 id="29-4-1、跨站请求伪造保护">29.4.1、跨站请求伪造保护</h4><p>由于 Spring Boot 依赖 Spring Security 的默认值配置，因此默认情况下会启用 CSRF 保护。这意味着当使用默认安全配置时，需要 <code>POST</code>（shutdown 和 loggers 端点）、<code>PUT</code> 或 <code>DELETE</code> 的 actuator 端点将返回 403 禁止访问错误。</p><p><strong>注意</strong></p><blockquote><p>我们建议仅在创建非浏览器客户端使用的服务时才完全禁用 CSRF 保护。</p></blockquote><p>有关 CSRF 保护的其他信息，请参阅 <a href="https://docs.spring.io/spring-security/site/docs/5.1.2.RELEASE/reference/htmlsingle#csrf">Spring Security 参考指南</a>。</p><p><a id="boot-features-sql"></a></p><h2 id="30、使用-SQL-数据库">30、使用 SQL 数据库</h2><p><a href="https://projects.spring.io/spring-framework/">Spring Framework</a> 为 SQL 数据库提供了广泛的支持。从直接使用 <code>JdbcTemplate</code> 进行 JDBC 访问到完全的<strong>对象关系映射</strong>（object relational mapping）技术，比如 Hibernate。<a href="https://projects.spring.io/spring-data/">Spring Data</a> 提供了更多级别的功能，直接从接口创建的 <code>Repository</code> 实现，并使用了约定从方法名生成查询。</p><p><a id="boot-features-configure-datasource"></a></p><h3 id="30-1、配置数据源">30.1、配置数据源</h3><p>Java 的 <code>javax.sql.DataSource</code> 接口提供了一个使用数据库连接的标准方法。通常，数据源使用 <code>URL</code> 和一些凭据信息来建立数据库连接。</p><p><strong>提示</strong></p><blockquote><p>查看 <a href="#howto-configure-a-datasource">How-to</a> 部分获取更多高级示例，通常您可以完全控制数据库的配置。</p></blockquote><p><a id="boot-features-embedded-database-support"></a></p><h4 id="30-1-1、内嵌数据库支持">30.1.1、内嵌数据库支持</h4><p>使用内嵌内存数据库来开发应用程序非常方便的。显然，内存数据库不提供持久存储。在应用启动时，您需要填充数据库，并在应用程序结束时丢弃数据。</p><p><strong>提示</strong></p><blockquote><p><strong>How-to</strong> 部分包含了<a href="#howto-database-initialization">如何初始化数据库</a>方面的内容。</p></blockquote><p>Spring Boot 可以自动配置内嵌 <a href="http://www.h2database.com/">H2</a>、<a href="http://hsqldb.org/">HSQL</a> 和 <a href="https://db.apache.org/derby/">Derby</a> 数据库。您不需要提供任何连接 URL，只需为您想要使用的内嵌数据库引入特定的构建依赖。</p><p><strong>注意</strong></p><blockquote><p>如果您在测试中使用此功能，您可能会注意到，无论使用了多少应用程序上下文，整个测试套件都会重复使用相同的数据库。如果您想确保每个上下文都有一个单独的内嵌数据库，则应该将 <code>spring.datasource.generate-unique-name</code> 设置为 <code>true</code>。</p></blockquote><p>以下是 POM 依赖示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>要自动配置内嵌数据库，您需要一个 <code>spring-jdbc</code> 依赖。在这个例子中，它是通过 <code>spring-boot-starter-data-jpa</code> 引入。</p></blockquote><p><strong>提示</strong></p><blockquote><p>如果出于某些原因，您需要配置内嵌数据库的连接 URL，则应注意确保禁用数据库的自动关闭功能。如果您使用 H2，则应该使用 <code>DB_CLOSE_ON_EXIT=FALSE</code> 来设置。如果您使用 <code>HSQLDB</code>，则确保不使用 <code>shutdown=true</code>。禁用数据库的自动关闭功能允许 Spring Boot 控制数据库何时关闭，从而确保一旦不再需要访问数据库时就触发。</p></blockquote><p><a id="boot-features-connect-to-production-database"></a></p><h4 id="30-1-2、连接生产数据库">30.1.2、连接生产数据库</h4><p>生产数据库连接也可以使用使用 <code>DataSource</code> 自动配置。Spring Boot 使用以下算法来选择一个特定的实现：</p><ul><li>出于性能和并发性的考虑，我们更喜欢 <a href="https://github.com/brettwooldridge/HikariCP">HikariCP</a> 连接池。如果 HikariCP 可用，我们总是选择它。</li><li>否则，如果 Tomcat 池 <code>DataSource</code> 可用，我们将使用它。</li><li>如果 HikariCP 和 Tomcat 池数据源不可用，但 <a href="https://commons.apache.org/proper/commons-dbcp/">Commons DBCP</a> 可用，我们将使用它。</li></ul><p>如果您使用了 <code>spring-boot-starter-jdbc</code> 或者 <code>spring-boot-starter-data-jpa</code> starter，您将自动得到 <code>HikariCP</code> 依赖。</p><p><strong>注意</strong></p><blockquote><p>您完全可以绕过该算法，并通过 <code>spring.datasource.type</code> 属性指定要使用的连接池。如果您在 Tomcat 容器中运行应用程序，默认提供 <code>tomcat-jdbc</code>，这点尤其重要。</p></blockquote><p><strong>提示</strong></p><blockquote><p>可以手动配置其他连接池。如果您定义了自己的 <code>DataSource</code> bean，则自动配置将不会触发。</p></blockquote><p>数据源配置由 <code>spring.datasource.*</code> 中的外部属性所控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost/test</span><br><span class="line"><span class="attr">spring.datasource.username</span>=dbuser</span><br><span class="line"><span class="attr">spring.datasource.password</span>=dbpass</span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>您至少应该使用 <code>spring.datasource.url</code> 属性来指定 URL，否则 Spring Boot 将尝试自动配置内嵌数据库。</p></blockquote><p><strong>提示</strong></p><blockquote><p>通常您不需要指定 <code>driver-class-name</code>，因为 Spring boot 可以从 <code>url</code> 推导出大多数数据库。</p></blockquote><p><strong>注意</strong></p><blockquote><p>对于要创建的池 <code>DataSource</code>，我们需要能够验证有效的 <code>Driver</code> 类是否可用，因此我们在使用之前进行检查。例如，如果您设置了 <code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>，那么该类必须可加载。</p></blockquote><p>有关更多支持选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java">DataSourceProperties</a>。这些都是标准选项，与实际的实现无关。还可以使用各自的前缀（<code>spring.datasource.hikari.*</code>、<code>spring.datasource.tomcat.*</code> 和 <code>spring.datasource.dbcp2.*</code>）微调实现特定的设置。请参考您现在使用的连接池实现的文档来获取更多信息。</p><p>例如，如果你使用 <a href="https://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html#Common_Attributes">Tomcat 连接池</a>，则可以自定义许多其他设置，如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Number of ms to wait before throwing an exception if no connection is available.</span></span><br><span class="line"><span class="attr">spring.datasource.tomcat.max-wait</span>=<span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maximum number of active connections that can be allocated from this pool at the same time.</span></span><br><span class="line"><span class="attr">spring.datasource.tomcat.max-active</span>=<span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Validate the connection before borrowing it from the pool.</span></span><br><span class="line"><span class="attr">spring.datasource.tomcat.test-on-borrow</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><a id="boot-features-connecting-to-a-jndi-datasource"></a></p><h4 id="30-1-3、连接-JNDI-数据源">30.1.3、连接 JNDI 数据源</h4><p>如果要将 Spring Boot 应用程序部署到应用服务器（Application Server）上，您可能想使用应用服务器的内置功能和 JNDI 访问方式来配置和管理数据源。</p><p><code>spring.datasource.jndi-name</code> 属性可作为 <code>spring.datasource.url</code>、<code>spring.datasource.username</code> 和 <code>spring.datasource.password</code> 属性的替代方法，用于从特定的 JNDI 位置访问 <code>DataSource</code>。例如，<code>application.properties</code> 中的以下部分展示了如何访问 JBoss AS 定义的 <code>DataSource</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.jndi-name</span>=java:jboss/datasources/customers</span><br></pre></td></tr></table></figure><p><a id="boot-features-using-jdbc-template"></a></p><h3 id="30-2、使用-JdbcTemplate">30.2、使用 JdbcTemplate</h3><p>Spring 的 <code>JdbcTemplate</code> 和 <code>NamedParameterJdbcTemplate</code> 类是自动配置的，您可以使用 <code>@Autowire</code> 将它们直接注入您的 bean 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以使用 <code>spring.jdbc.template.*</code> 属性来自定义一些 template 的属性，如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jdbc.template.max-rows</span>=<span class="number">500</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p><code>NamedParameterJdbcTemplate</code> 在底层重用了相同的 <code>JdbcTemplate</code> 实例。如果定义了多个 <code>JdbcTemplate</code> 且没有声明 primary 主候选，则不会自动配置 <code>NamedParameterJdbcTemplate</code>。</p></blockquote><p><a id="boot-features-jpa-and-spring-data"></a></p><h3 id="30-3、JPA-与-Spring-Data-JPA">30.3、JPA 与 Spring Data JPA</h3><p>Java Persistence API（Java 持久化 API）是一项标准技术，可让您将对象<strong>映射</strong>到关系数据库。<code>spring-boot-starter-data-jpa</code> POM 提供了一个快速起步的方法。它提供了以下关键依赖：</p><ul><li><strong>Hibernate</strong>  ——  最受欢迎的 JPA 实现之一。</li><li><strong>Spring Data JPA</strong> ——  可以轻松地实现基于 JPA 的资源库。</li><li><strong>Spring ORM</strong>  ——  Spring Framework 的核心 ORM 支持</li></ul><p><strong>提示</strong></p><blockquote><p>我们不会在这里介绍太多关于 JPA 或者 <a href="https://projects.spring.io/spring-data/">Spring Data</a> 的相关内容。您可以在 <a href="https://spring.io/">spring.io</a> 上查看<a href="https://spring.io/guides/gs/accessing-data-jpa/">使用 JPA 访问数据</a>，获取阅读 <a href="https://projects.spring.io/spring-data-jpa/">Spring Data JPA</a> 和 <a href="https://hibernate.org/orm/documentation/">Hibernate</a> 的参考文档。</p></blockquote><p><a id="boot-features-jpa-and-spring-data"></a></p><h4 id="30-3-1、实体类">30.3.1、实体类</h4><p>通常，JPA <strong>Entity</strong>（实体）类是在 <code>persistence.xml</code> 文件中指定的。使用了 Spring Boot，该文件将不是必需的，可以使用 <strong>Entity Scanning</strong>（实体扫描）来代替。默认情况下，将搜索主配置类（使用了 <code>@EnableAutoConfiguration</code> 或 <code>@SpringBootApplication</code> 注解）下面的所有包。</p><p>任何用了 <code>@Entity</code>、<code>@Embeddable</code> 或者 <code>@MappedSuperclass</code> 注解的类将被考虑。一个典型的实体类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapp.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">City</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span></span><br><span class="line"><span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(nullable = false)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(nullable = false)</span></span><br><span class="line"><span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... additional members, often include @OneToMany mappings</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">City</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// no-args constructor required by JPA spec</span></span><br><span class="line"><span class="comment">// this one is protected since it shouldn&#x27;t be used directly</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">City</span><span class="params">(String name, String state)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... etc</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>您可以使用 <code>@EntityScan</code> 注解自定义实体类的扫描位置。请参见<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#howto-separate-entity-definitions-from-spring-configuration">84.4、从 Spring configuration 配置中分离 @Entity 定义</a>章节。</p></blockquote><p><a id="boot-features-spring-data-jpa-repositories"></a></p><h4 id="30-3-2、Spring-Data-JPA-资源库">30.3.2、Spring Data JPA 资源库</h4><p><a href="https://projects.spring.io/spring-data-jpa/">Spring Data JPA</a> 资源库（repository）是接口，您可以定义用于访问数据。JAP 查询是根据您的方法名自动创建。例如，<code>CityRepository</code> 接口可以声明 <code>findAllByState(String state)</code> 方法来查找指定状态下的所有城市。</p><p>对于更加复杂的查询，您可以使用 Spring Data 的 <a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/Query.html"><code>Query</code></a> 注解</p><p>Spring Data 资源库通常继承自 <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/Repository.html">Repository</a> 或者 <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html">CrudRepository</a> 接口。如果您使用了自动配置，则将从包含主配置类（使用了 <code>@EnableAutoConfiguration</code> 或 <code>@SpringBootApplication</code> 注解）的包中搜索资源库：</p><p>以下是一个典型的 Spring Data 资源库接口定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapp.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CityRepository</span> <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;City, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">Page&lt;City&gt; <span class="title function_">findAll</span><span class="params">(Pageable pageable)</span>;</span><br><span class="line"></span><br><span class="line">City <span class="title function_">findByNameAndStateAllIgnoringCase</span><span class="params">(String name, String state)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Data JPA 资源库支持三种不同的引导模式：default、deferred 和 lazy。要启用延迟或懒惰引导，请将 <code>spring.data.jpa.repositories.bootstrap-mode</code> 分别设置为 <code>deferred</code> 或 <code>lazy</code>。使用延迟或延迟引导时，自动配置的 <code>EntityManagerFactoryBuilder</code> 将使用上下文的异步任务执行器（如果有）作为引导程序执行器。</p><p><strong>提示</strong></p><blockquote><p>我们几乎没有接触到 Spring Data JPA 的表面内容。有关详细信息，请查阅 <a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/">Spring Data JPA 参考文档</a>。</p></blockquote><p><a id="boot-features-creating-and-dropping-jpa-databases"></a></p><h4 id="30-3-3、创建和删除-JPA-数据库">30.3.3、创建和删除 JPA 数据库</h4><p>默认情况下，<strong>仅</strong>当您使用了内嵌数据库（H2、HSQL 或 Derby）时才会自动创建 JPA 数据库。您可以使用 <code>spring.jpa.*</code> 属性显式配置 JPA 设置。例如，要创建和删除表，您可以将以下内容添加到 <code>application.properties</code> 中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=create-drop</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>关于上述功能，Hibernate 自己的内部属性名称（如果您记住更好）为 <code>hibernate.hbm2ddl.auto</code>。您可以使用 <code>spring.jpa.properties.*</code>（在添加到实体管理器之前，该前缀将被删除）来将 Hibernate 原生属性一同设置：</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jpa.properties.hibernate.globally_quoted_identifiers</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>上面示例中将 <code>true</code> 值设置给 <code>hibernate.globally_quoted_identifiers</code> 属性，该属性将传给 Hibernate 实体管理器。</p><p>默认情况下，DDL 执行（或验证）将延迟到 <code>ApplicationContext</code> 启动后。还有一个 <code>spring.jpa.generate-ddl</code> 标志，如果 Hibernate 自动配置是激活的，那么它将不会被使用，因为 <code>ddl-auto</code> 设置更细粒度。</p><p><a id="boot-features-jpa-in-web-environment"></a></p><h4 id="30-3-4、在视图中打开-EntityManager">30.3.4、在视图中打开 EntityManager</h4><p>如果您正在运行 web 应用程序，Spring Boot 将默认注册 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/orm/jpa/support/OpenEntityManagerInViewInterceptor.html"><code>OpenEntityManagerInViewInterceptor</code></a> 用于<strong>在视图中打开 EntityManager</strong> 模式，即运允许在 web 视图中延迟加载。如果您不想开启这个行为，则应在 <code>application.properties</code> 中将 <code>spring.jpa.open-in-view</code> 设置为 <code>false</code>。</p><p><a id="boot-features-data-jdbc"></a></p><h3 id="30-4、Spring-Data-JDBC">30.4、Spring Data JDBC</h3><p>Spring Data 包含了对 JDBC 资源库的支持，并将自动为 <code>CrudRepository</code> 上的方法生成 SQL。对于更高级的查询，它提供了 <code>@Query</code> 注解。</p><p>当 classpath 下存在必要的依赖时，Spring Boot 将自动配置 Spring Data 的 JDBC 资源库。可以通过添加单个 <code>spring-boot-starter-data-jdbc</code> 依赖引入到项目中。如有必要，可通过在应用程序中添加 <code>@EnableJdbcRepositories</code> 注解或 <code>JdbcConfiguration</code> 子类来控制 Spring Data JDBC 的配置。</p><p><strong>提示</strong></p><blockquote><p>有关 Spring Data JDBC 的完整详细信息，请参阅<a href="https://projects.spring.io/spring-data-jdbc/">参考文档</a>。</p></blockquote><p><a id="boot-features-sql-h2-console"></a></p><h3 id="30-5、使用-H2-的-Web-控制台">30.5、使用 H2 的 Web 控制台</h3><p><a href="http://www.h2database.com/">H2 数据库</a>提供了一个<a href="http://www.h2database.com/html/quickstart.html#h2_console">基于浏览器的控制台</a>，Spring Boot 可以为您自动配置。当满足以下条件时，控制台将自动配置：</p><ul><li>您开发的是一个基于 servlet 的 web 应用程序</li><li><code>com.h2database:h2</code> 在 classpath 上</li><li>您使用了 <a href="#using-boot-devtools">Spring Boot 的开发者工具</a></li></ul><p><strong>提示</strong></p><blockquote><p>如果您不使用 Spring Boot 的开发者工具，但仍希望使用 H2 的控制台，则可以通过将 <code>spring.h2.console.enabled</code> 属性设置为 <code>true</code> 来实现。</p></blockquote><p><strong>注意</strong></p><blockquote><p>H2 控制台仅用于开发期间，因此应注意确保 <code>spring.h2.console.enabled</code> 在生产环境中<strong>没有</strong>设置为 <code>true</code>。</p></blockquote><p><a id="boot-features-sql-h2-console-custom-path"></a></p><h4 id="30-5-1、更改-H2-控制台的路径">30.5.1、更改 H2 控制台的路径</h4><p>默认情况下，控制台的路径为 <code>/h2-console</code>。你可以使用 <code>spring.h2.console.path</code> 属性来自定义控制台的路径。</p><p><a id="boot-features-jooq"></a></p><h3 id="30-6、使用-jOOQ">30.6、使用 jOOQ</h3><p>Java 面向对象查询（<a href="http://www.jooq.org/">Java Object Oriented Querying，jOOQ</a>）是一款广受欢迎的产品，出自 <a href="http://www.datageekery.com/">Data Geekery</a>，它可以通过数据库生成 Java 代码，并允许您使用流式 API 来构建类型安全的 SQL 查询。商业版和开源版都可以与 Spring Boot 一起使用。</p><p><a id="_code_generation"></a></p><h4 id="30-6-1、代码生成">30.6.1、代码生成</h4><p>要使用 jOOQ 的类型安全查询，您需要从数据库模式生成 Java 类。您可以按照 <a href="https://www.jooq.org/doc/3.11.7/manual-single-page/#jooq-in-7-steps-step3">jOOQ 用户手册</a>中的说明进行操作。如果您使用了 <code>jooq-codegen-maven</code> 插件，并且还使用了 <code>spring-boot-starter-parent</code> 父 POM，则可以安全地省略掉插件的 <code>&lt;version&gt;</code> 标签。您还可以使用 Spring Boot 定义的版本变量（例如 <code>h2.version</code>）来声明插件的数据库依赖。以下是一个示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jooq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jooq-codegen-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;h2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbc</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">driver</span>&gt;</span>org.h2.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>jdbc:h2:~/yourdatabase<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbc</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a id="_using_dslcontext"></a></p><h4 id="30-6-2、使用-DSLContext">30.6.2、使用 DSLContext</h4><p>jOOQ 提供的流式 API 是通过 <code>org.jooq.DSLContext</code> 接口初始化的。Spring Boot 将自动配置一个 <code>DSLContext</code> 作为 Spring Bean，并且将其连接到应用程序的 <code>DataSource</code>。<code>要使用 DSLContext</code>，您只需要 <code>@Autowire</code> 它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JooqExample</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DSLContext create;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JooqExample</span><span class="params">(DSLContext dslContext)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.create = dslContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>jOOQ 手册建议使用名为 <code>create</code> 的变量来保存 <code>DSLContext</code>。</p></blockquote><p>您可以使用 <code>DSLContext</code> 构建查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;GregorianCalendar&gt; <span class="title function_">authorsBornAfter1980</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.create.selectFrom(AUTHOR)</span><br><span class="line">.where(AUTHOR.DATE_OF_BIRTH.greaterThan(<span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>(<span class="number">1980</span>, <span class="number">0</span>, <span class="number">1</span>)))</span><br><span class="line">.fetch(AUTHOR.DATE_OF_BIRTH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="_jooq_sql_dialect"></a></p><h4 id="30-6-3、jOOQ-SQL-方言">30.6.3、jOOQ SQL 方言</h4><p>除非配置了 <code>spring.jooq.sql-dialect</code> 属性，否则 Spring Boot 会自动判定用于数据源的 SQL 方言。如果 Spring Boot 无法检测到方言，则使用 <code>DEFAULT</code>。</p><p><strong>注意</strong></p><blockquote><p>Spring Boot 只能自动配置 jOOQ 开源版本支持的方言。</p></blockquote><p><a id="_customizing_jooq"></a></p><h4 id="30-6-4、自定义-jOOQ">30.6.4、自定义 jOOQ</h4><p>可通过定义自己的 <code>@Bean</code> 来实现更高级的功能，这些自定义将在创建 jOOQ <code>Configuration</code> 时使用。您可以为以下 jOOQ 类型定义 bean：</p><ul><li><code>ConnectionProvider</code></li><li><code>ExecutorProvider</code></li><li><code>TransactionProvider</code></li><li><code>RecordMapperProvider</code></li><li><code>RecordUnmapperProvider</code></li><li><code>RecordListenerProvider</code></li><li><code>ExecuteListenerProvider</code></li><li><code>VisitListenerProvider</code></li><li><code>TransactionListenerProvider</code></li></ul><p>如果要完全控制 jOOQ 配置，您可以创建自己的 <code>org.jooq.Configuration</code> <code>@Bean</code>。</p><p><a id="boot-features-nosql"></a></p><h2 id="31、使用-NoSQL-技术">31、使用 NoSQL 技术</h2><p>Spring Data 提供了其他项目，可以帮助您访问各种 NoSQL 技术，包括 <a href="https://projects.spring.io/spring-data-mongodb/">MongoDB</a>、<a href="https://projects.spring.io/spring-data-neo4j/">Neo4J</a>、<a href="https://github.com/spring-projects/spring-data-elasticsearch/">Elasticsearch</a>、<a href="https://projects.spring.io/spring-data-solr/">Solr</a>、<a href="https://projects.spring.io/spring-data-redis/">Redis</a>、<a href="https://projects.spring.io/spring-data-gemfire/">Gemfire</a>、<a href="https://projects.spring.io/spring-data-cassandra/">Cassandra</a>、<a href="https://projects.spring.io/spring-data-couchbase/">Couchbase</a> 和 <a href="https://projects.spring.io/spring-data-ldap/">LDAP</a>。Spring Boot 为 Redis、MongoDB、Neo4j、Elasticsearch、Solr、Cassandra、Couchbase 和 LDAP 提供了自动配置。您也可以使用其他项目，但您需要自行配置他们。请参阅 <a href="https://projects.spring.io/spring-data">projects.spring.io/spring-data</a> 中相应的参考文档。</p><p><a id="boot-features-redis"></a></p><h3 id="31-1、Redis">31.1、Redis</h3><p><a href="http://redis.io/">Redis</a> 是一个集缓存、消息代理和键值存储等丰富功能的数据库。Spring Boot 为 <a href="https://github.com/lettuce-io/lettuce-core/">Lettuce</a> 和 <a href="https://github.com/xetorthio/jedis/">Jedis 客户端类库</a>提供了基本自动配置，<a href="https://github.com/spring-projects/spring-data-redis">Spring Data Redis</a> 为他们提供了上层抽象。</p><p>使用 <code>spring-boot-starter-data-redis</code> starter 可方便地引入相关依赖。默认情况下，它使用 <a href="https://github.com/lettuce-io/lettuce-core/">Lettuce</a>。该 starter 可处理传统应用程序和响应式应用程序。</p><p><strong>提示</strong></p><blockquote><p>我们还提供了一个 <code>spring-boot-starter-data-redis-reactive</code> starter，以便与其他带有响应式支持的存储保持一致。</p></blockquote><p><a id="boot-features-connecting-to-redis"></a></p><h4 id="31-1-1、连接-Redis">31.1.1、连接 Redis</h4><p>您可以像所有 Spring Bean 一样注入自动配置的 <code>RedisConnectionFactory</code>、<code>StringRedisTemplate</code> 或普通的 <code>RedisTemplate</code> 实例。默认情况下，实例将尝试在 <code>localhost:6379</code> 上连接 Redis 服务器，以下是 bean 示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(StringRedisTemplate template)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.template = template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>您还可以注册任意数量个实现了 <code>LettuceClientConfigurationBuilderCustomizer</code> 的 bean，以进行更高级的自定义。如果你使用 Jedis，则可以使用 <code>JedisClientConfigurationBuilderCustomizer</code>。</p></blockquote><p>如果您添加了自己的任何一个自动配置类型的 <code>@Bean</code>，它将替换默认设置（除了 <code>RedisTemplate</code>，由于排除是基于 bean 名称，而 <code>redisTemplate</code> 不是它的类型）。默认情况下，如果 <code>commons-pool2</code> 在 classpath 上，您将获得一个连接池工厂。</p><p><a id="boot-features-mongodb"></a></p><h3 id="31-2、MongoDB">31.2、MongoDB</h3><p><a href="https://www.mongodb.com/">MongoDB</a> 是一个开源的 NoSQL 文档数据库，其使用了类似 JSON 的模式（schema）来替代传统基于表的关系数据。Spring Boot 为 MongoDB 提供了几种便利的使用方式，包括 <code>spring-boot-starter-data-mongodb</code> 和 <code>spring-boot-starter-data-mongodb-reactive</code> starter。</p><p><a id="boot-features-connecting-to-mongodb"></a></p><h4 id="31-2-1、连接-MongoDB-数据库">31.2.1、连接 MongoDB 数据库</h4><p>您可以注入一个自动配置的 <code>org.springframework.data.mongodb.MongoDbFactory</code> 来访问 Mongo 数据库。默认情况下，该实例将尝试在 <code>mongodb://localhost/test</code> 上连接 MongoDB 服务器，以下示例展示了如何连接到 MongoDB 数据库：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.MongoDbFactory;</span><br><span class="line"><span class="keyword">import</span> com.mongodb.DB;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MongoDbFactory mongo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(MongoDbFactory mongo)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.mongo = mongo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">example</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">DB</span> <span class="variable">db</span> <span class="operator">=</span> mongo.getDb();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以通过设置 <code>spring.data.mongodb.uri</code> 属性来更改 URL 和配置其他设置，如<strong>副本集</strong>（replica set）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.data.mongodb.uri</span>=mongodb://user:secret@mongo1.example.com:<span class="number">12345</span>,mongo2.example.com:<span class="number">23456</span>/test</span><br></pre></td></tr></table></figure><p>另外，只要您使用了 Mongo 2.x，请指定 <code>host</code>/<code>port</code>。比如，您可能要在 <code>application.properties</code> 中声明以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.data.mongodb.host</span>=mongoserver</span><br><span class="line"><span class="attr">spring.data.mongodb.port</span>=<span class="number">27017</span></span><br></pre></td></tr></table></figure><p>如果您已经定义了自己的 <code>MongoClient</code>，它将被用于自动配置合适的 <code>MongoDbFactory</code>。支持 <code>com.mongodb.MongoClient</code> 和 <code>com.mongodb.client.MongoClient</code>。</p><p><strong>注意</strong></p><blockquote><p>如果您使用 Mongo 3.0 Java 驱动，则不支持 <code>spring.data.mongodb.host</code> 和 <code>spring.data.mongodb.port</code>。这种情况下，应该使用 <code>spring.data.mongodb.uri</code> 来提供所有配置。</p></blockquote><p><strong>提示</strong></p><blockquote><p>如果未指定 <code>spring.data.mongodb.port</code>，则使用默认值 <code>27017</code>。您可以将上述示例中的改行配置删除掉。</p></blockquote><p><strong>提示</strong></p><blockquote><p>如果您不使用 Spring Data Mongo，则可以注入 <code>com.mongodb.MongoClient</code> bean 来代替 <code>MongoDbFactory</code>。如果要完全控制建立 MongoDB 连接，您还可以声明自己的 <code>MongoDbFactory</code> 或者 <code>MongoClient</code> bean。</p></blockquote><p><strong>注意</strong></p><blockquote><p>如果您使用的是响应式驱动，则 SSL 需要 Netty。 如果 Netty 可用且 factory 尚未自定义，则自动配置会自动配置此 factory。</p></blockquote><p><a id="boot-features-mongo-template"></a></p><h4 id="31-2-2、MongoTemplate">31.2.2、MongoTemplate</h4><p><a href="https://projects.spring.io/spring-data-mongodb/">Spring Data Mongo</a> 提供了一个 <a href="https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoTemplate.html"><code>MongoTemplate</code></a> 类，它的设计与 Spring 的 <code>JdbcTemplate</code> 非常相似。与 <code>JdbcTemplate</code> 一样，Spring Boot 会自动配置一个 bean，以便您能注入模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mongodb.core.MongoTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(MongoTemplate mongoTemplate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.mongoTemplate = mongoTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多详细信息，参照 <a href="https://docs.spring.io/spring-data/mongodb/docs/current/api/org/springframework/data/mongodb/core/MongoOperations.html"><code>MongoOperations</code></a> Javadoc。</p><p><a id="boot-features-spring-data-mongo-repositories"></a></p><h4 id="31-2-3、Spring-Data-MongoDB-资源库">31.2.3、Spring Data MongoDB 资源库</h4><p>Spring Data 包含了对 MongoDB 资源库（repository）的支持。与之前讨论的 JPA 资源库一样，基本原理是根据方法名称自动构建查询。</p><p>事实上，Spring Data JPA 和 Spring Data MongoDB 共享通用的底层代码，因此你可以拿之前提到的 JPA 示例作为基础，假设 <code>City</code> 现在是一个 Mongo 数据类，而不是一个 JPA <code>@Entity</code>，他们方式工作相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapp.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CityRepository</span> <span class="keyword">extends</span> <span class="title class_">Repository</span>&lt;City, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">Page&lt;City&gt; <span class="title function_">findAll</span><span class="params">(Pageable pageable)</span>;</span><br><span class="line"></span><br><span class="line">City <span class="title function_">findByNameAndStateAllIgnoringCase</span><span class="params">(String name, String state)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>您可以使用 <code>@EntityScan</code> 注解来自定义文档扫描位置。</p></blockquote><p><strong>提示</strong></p><blockquote><p>有关 Spring Data MongoDB 的完整详细内容，包括其丰富的对象关系映射技术，请参考其<a href="https://projects.spring.io/spring-data-mongodb/">参考文档</a>。</p></blockquote><p><a id="boot-features-mongo-embedded"></a></p><h4 id="31-2-4、内嵌-Mongo">31.2.4、内嵌 Mongo</h4><p>Spring Boot 提供了<a href="https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo">内嵌 Mongo</a> 的自动配置。要在 Spring Boot 应用程序中使用它，请添加依赖 <code>de.flapdoodle.embed:de.flapdoodle.embed.mongo</code>。</p><p>可以使用 <code>spring.data.mongodb.port</code> 属性来配置 Mongo 的监听端口。如果想随机分配空闲端口，请把值设置为 0。<code>MongoAutoConfiguration</code> 创建的 <code>MongoClient</code> 将自动配置随机分配的端口。</p><p><strong>注意</strong></p><blockquote><p>如果您不配置一个自定义端口，内嵌支持将默认使用一个随机端口（而不是 27017）。</p></blockquote><p>如果您的 classpath 上有 SLF4J，Mongo 产生的输出将自动路由到名为 <code>org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongo</code> 的 logger。</p><p>您可以声明自己的 <code>IMongodConfig</code> 和 <code>IRuntimeConfig</code> bean 来控制 Mongo 实例的配置和日志路由。</p><p><a id="boot-features-neo4j"></a></p><h3 id="31-3、Neo4j">31.3、Neo4j</h3><p><a href="http://neo4j.com/">Neo4j</a> 是一个开源的 NoSQL 图形数据库，它使用了一个节点由关系连接的富数据模型，比传统 RDBMS 的方式更适合连接大数据。Spring Boot 为 Neo4j 提供了便捷引入方式，包括 <code>spring-boot-starter-data-neo4j</code> starter。</p><p><a id="boot-features-connecting-to-neo4j"></a></p><h4 id="31-3-1、连接-Neo4j-数据库">31.3.1、连接 Neo4j 数据库</h4><p>您可以像任何 Spring Bean 一样注入一个自动配置的 <code>org.neo4j.ogm.session.Session</code>。默认情况下， 该实例将尝试使用在 <code>localhost:7687</code> 上使用 Bolt 协议连接到 Neo4j 服务器，以下示例展示了如何注入 一个 Neo4j <code>Session</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Session session;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(Session session)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.session = session;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以通过配置 <code>spring.data.neo4j.*</code> 属性来设置 uri 和凭据：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.data.neo4j.uri</span>=bolt://my-server:<span class="number">7687</span></span><br><span class="line"><span class="attr">spring.data.neo4j.username</span>=neo4j</span><br><span class="line"><span class="attr">spring.data.neo4j.password</span>=secret</span><br></pre></td></tr></table></figure><p>您可以通过添加自己的 <code>org.neo4j.ogm.config.Configuration</code> @Bean 来完全控制 session 创建。此外，添加 <code>SessionFactory</code> 类型的 @Bean 会禁用自动配置，因此您可以掌控所有。</p><p><a id="boot-features-connecting-to-neo4j-embedded"></a></p><h4 id="31-3-2、使用内嵌模式">31.3.2、使用内嵌模式</h4><p>如果您将 <code>org.neo4j:neo4j-ogm-embedded-driver</code> 添加到应用程序的依赖中，Spring Boot 将自动配置一个进程内内嵌的 Neo4j 实例，当您的应用程序关闭时，该实例将不会保留任何数据。</p><p><strong>注意</strong></p><blockquote><p>内嵌 Neo4j OGM 驱动本身不提供 Neo4j 您必须自己声明 <code>org.neo4j:neo4j</code> 依赖，请参考 <a href="https://neo4j.com/docs/ogm-manual/current/reference/#reference:getting-started">Neo4j OGM 文档</a> 获取兼容版本列表。</p></blockquote><p>当 classpath 上有多个驱动时，内嵌驱动优先于其他驱动。您可以通过设置 <code>spring.data.neo4j.embedded.enabled=false</code> 来显式禁用内嵌模式。</p><p>如果内嵌驱动和 Neo4j 内核如上所述位于 classpath 上，则 <a href="#boot-features-testing-spring-boot-applications-testing-autoconfigured-neo4j-test">Data Neo4j 测试</a> 会自动使用内嵌 Neo4j 实例。</p><p><strong>注意</strong></p><blockquote><p>您可以通过在配置中提供数据库文件路径来为内嵌模式启用持久化，例如：<code>spring.data.neo4j.uri=file://var/tmp/graph.db</code>。</p></blockquote><p><a id="boot-features-neo4j-ogm-session"></a></p><h4 id="31-3-3、Neo4jSession">31.3.3、Neo4jSession</h4><p>默认情况下，如果您正在运行 Web 应用程序，会话（session）将被绑定到当前请求的整个处理线程（即 <strong>Open Session in View</strong> 模式）。如果不希望此行为，您可以在 <code>application.properties</code> 中添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.data.neo4j.open-in-view</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><a id="boot-features-spring-data-neo4j-repositories"></a></p><h4 id="31-3-4、Spring-Data-Neo4j-资源库">31.3.4、Spring Data Neo4j 资源库</h4><p>Spring Data 包括了对 Neo4j 资源库的支持。</p><p>Spring Data Neo4j 与 Spring Data JPA 共享相同的通用底层代码，因此您可以直接把之前的 JPA 示例作为基础，假设 <code>City</code> 现在是一个 Neo4j OGM <code>@NodeEntity</code>，而不是一个 JPA <code>@Entity</code>，并且资源库抽象以相同的方式工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapp.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.neo4j.repository.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CityRepository</span> <span class="keyword">extends</span> <span class="title class_">Neo4jRepository</span>&lt;City, Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">Optional&lt;City&gt; <span class="title function_">findOneByNameAndState</span><span class="params">(String name, String state)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>spring-boot-starter-data-neo4j</code> starter 支持资源库和事务管理。您可以在 <code>@Configuration</code> bean 上分别使用 <code>@EnableNeo4jRepositories</code> 和 <code>@EntityScan</code> 来自定义位置以查找资源库和实体。</p><p><strong>提示</strong></p><p>有关 Spring Data Neo4j 的完整详细信息，包括其对象映射技术，请参阅<a href="https://projects.spring.io/spring-data-neo4j/">参考文档</a>。</p><p><a id="boot-features-gemfire"></a></p><h3 id="31-4、Gemfire">31.4、Gemfire</h3><p><a href="https://github.com/spring-projects/spring-data-gemfire">Spring Data Gemfire</a> 提供了便捷的 Spring 整合工具，用于访问 <a href="https://pivotal.io/big-data/pivotal-gemfire#details">Pivotal Gemfire</a> 数据管理平台。<code>spring-boot-starter-data-gemfire</code> starter 包含了相关依赖。目前没有针对 Gemfire 的自动配置支持，但您可以使用一个<a href="https://github.com/spring-projects/spring-data-gemfire/blob/master/src/main/java/org/springframework/data/gemfire/repository/config/EnableGemfireRepositories.java">单独的注解（@EnableGemfireRepositories）</a>来启用 Spring Data 资源库。</p><p><a id="boot-features-solr"></a></p><h3 id="31-5、Solr">31.5、Solr</h3><p><a href="https://lucene.apache.org/solr/">Apache Solr</a> 是一个搜素引擎。Spring Boot 为 Solr 5 客户端类库提供了基本的自动配置，并且 <a href="https://github.com/spring-projects/spring-data-solr">Spring Data Solr</a> 为其提供给了顶层抽象。相关的依赖包含在了 <code>spring-boot-starter-data-solr</code> starter 中。</p><p><a id="boot-features-solr"></a></p><h4 id="31-5-1、连接-Solr">31.5.1、连接 Solr</h4><p>您可以像其他 Spring Bean 一样注入一个自动配置的 <code>SolrClient</code> 实例。默认情况下，该实例将尝试通过 <a href="http://localhost:8983/solr"><code>localhost:8983/solr</code></a> 连接到服务器，以下示例展示了如何注入一个 Solr bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SolrClient solr;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(SolrClient solr)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.solr = solr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您添加了自己的 <code>SolrClient</code> 类型的 <code>@Bean</code>，它将替换掉默认配置。</p><p><a id="boot-features-spring-data-solr-repositories"></a></p><h4 id="31-5-2、Spring-Data-Solr-资源库">31.5.2、Spring Data Solr 资源库</h4><p>Spring Data 包含了对 Apache Solr 资源库的支持。与之前讨论的 JPA 资源库一样，基本原理是根据方法名称自动构造查询。</p><p>事实上，Spring Data JPA 和 Spring Data Solr 共享了相同的通用底层代码，因此您可以使用之前的 JPA 示例作为基础，假设 <code>City</code> 现在是一个 <code>@SolrDocument</code> 类，而不是一个 JPA <code>@Entity</code>，它的工作方式相同。</p><p><strong>提示</strong></p><blockquote><p>有关 Spring Data Solr 的完整详细内容，请参考其<a href="https://projects.spring.io/spring-data-solr/">参考文档</a>。</p></blockquote><p><a id="boot-features-elasticsearch"></a></p><h3 id="31-6、Elasticsearch">31.6、Elasticsearch</h3><p><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch</a> 是一个开源、分布式、RESTful 的实时搜索分析引擎。Spring Boot 为 Elasticsearch 提供了基本的自动配置。</p><p>Spring Boot 支持以下 HTTP 客户端：</p><ul><li>官方 Java <strong>Low Level（低级）</strong> 和 <strong>High Level（高级）</strong> REST 客户端</li><li><a href="https://github.com/searchbox-io/Jest">Jest</a></li></ul><p><a href="https://github.com/spring-projects/spring-data-elasticsearch">Spring Data Elasticsearch</a> 依旧使用传输客户端，您可以使用 <code>spring-boot-starter-data-elasticsearch</code> starter 引入使用它。</p><p><a id="boot-features-connecting-to-elasticsearch-rest"></a></p><h4 id="31-6-1、使用-REST-客户端连接-Elasticsearch">31.6.1、使用 REST 客户端连接 Elasticsearch</h4><p>Elasticsearch 提供了两个可用于查询集群的 <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/index.html">REST 客户端</a>：<strong>Low Level（低级）</strong> 和 <strong>High Level（高级）</strong>。</p><p>如果您的 classpath 上存在 <code>org.elasticsearch.client:elasticsearch-rest-client</code> 依赖，则 Spring Boot 将自动配置并注册默认目标为 <a href="http://localhost:9200/"><code>localhost:9200</code></a> 的 <code>RestClient</code> bean。您可以进一步调整 <code>RestClient</code> 的配置，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.elasticsearch.rest.uris</span>=http://search.example.com:<span class="number">9200</span></span><br><span class="line"><span class="attr">spring.elasticsearch.rest.username</span>=user</span><br><span class="line"><span class="attr">spring.elasticsearch.rest.password</span>=secret</span><br></pre></td></tr></table></figure><p>您还可以注册实现任意数量的 <code>RestClientBuilderCustomizer</code> bean，以进行更高级的自定义。要完全控制注册流程，请定义 <code>RestClient</code> bean。</p><p>如果你 classpath 上有 <code>org.elasticsearch.client:elasticsearch-rest-high-level-client</code> 依赖，Spring Boot 将自动配置一个 <code>RestHighLevelClient</code>，它包装了所有现有的 <code>RestClient</code> bean，重用其 HTTP 配置。</p><p><a id="boot-features-connecting-to-elasticsearch-jest"></a></p><h4 id="31-6-2、使用-Jest-连接-Elasticsearch">31.6.2、使用 Jest 连接 Elasticsearch</h4><p>如果您的 classpath 上存在 <code>Jest</code>，则可以注入一个默认目标为 <a href="http://localhost:9200/"><code>localhost:9200</code></a> 的自动配置 <code>JestClient</code>。您还可以进一步调整客户端配置：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.elasticsearch.jest.uris</span>=http://search.example.com:<span class="number">9200</span></span><br><span class="line"><span class="attr">spring.elasticsearch.jest.read-timeout</span>=<span class="number">10000</span></span><br><span class="line"><span class="attr">spring.elasticsearch.jest.username</span>=user</span><br><span class="line"><span class="attr">spring.elasticsearch.jest.password</span>=secret</span><br></pre></td></tr></table></figure><p>您还可以注册任何数量实现了 <code>HttpClientConfigBuilderCustomizer</code> 的 bean，以进行更加高级的自定义。以下示例调整了其他 HTTP 设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HttpSettingsCustomizer</span> <span class="keyword">implements</span> <span class="title class_">HttpClientConfigBuilderCustomizer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(HttpClientConfig.Builder builder)</span> &#123;</span><br><span class="line">        builder.maxTotalConnection(<span class="number">100</span>).defaultMaxTotalConnectionPerRoute(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要完全控制注册流程，请定义一个 <code>JestClient</code> bean。</p><p><a id="boot-features-connecting-to-elasticsearch-spring-data"></a></p><h4 id="31-6-3、使用-Spring-Data-连接-Elasticsearch">31.6.3、使用 Spring Data 连接 Elasticsearch</h4><p>要连接 Elasticsearch，您必须提供一个或多个群集节点的地址。可以通过将 <code>spring.data.elasticsearch.cluster-nodes</code> 属性设置为以逗号分隔的 <code>host:port</code> 列表来指定地址。使用此配置，可以像其他 Spring bean 一样注入 <code>ElasticsearchTemplate</code> 或 <code>TransportClient</code>，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ElasticsearchTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(ElasticsearchTemplate template)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.template = template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您添加了自己的 <code>ElasticsearchTemplate</code> 或者 <code>TransportClient</code> <code>@Bean</code>，则其将替代默认配置。</p><p><a id="boot-features-spring-data-elasticsearch-repositories"></a></p><h4 id="31-6-4、Spring-Data-Elasticsearch-资源库">31.6.4、Spring Data Elasticsearch 资源库</h4><p>Spring Data 包含了对 Elasticsearch 资源库的支持，与之前讨论的 JPA 资源库一样，其原理是根据方法名称自动构造查询。</p><p>事实上，Spring Data JPA 与 Spring Data Elasticsearch 共享了相同的通用底层代码，因此您可以使用之前的 JPA 示例作为基础，假设 <code>City</code> 此时是一个 Elasticsearch <code>@Document</code> 类，而不是一个 JPA <code>@Entity</code>，它以相同的方式工作。</p><p><strong>提示</strong></p><blockquote><p>有关 Spring Data Elasticsearch 的完整详细内容，请参阅其<a href="https://docs.spring.io/spring-data/elasticsearch/docs/">参考文档</a>。</p></blockquote><p><a id="boot-features-cassandra"></a></p><h3 id="31-7、Cassandra">31.7、Cassandra</h3><p><a href="https://cassandra.apache.org/">Cassandra</a> 是一个开源的分布式数据库管理系统，旨在处理商用服务器上的大量数据。Spring Boot 为 Cassandra 提供了自动配置，且 <a href="https://github.com/spring-projects/spring-data-cassandra">Spring Data Cassandra</a> 为其提供了顶层抽象。相关依赖包含在 <code>spring-boot-starter-data-cassandra</code> starter 中。</p><p><a id="boot-features-connecting-to-cassandra"></a></p><h4 id="31-7-1、连接-Cassandra">31.7.1、连接 Cassandra</h4><p>您可以像其他 Spring Bean 一样注入一个自动配置的 <code>CassandraTemplate</code> 或 Cassandra <code>Session</code> 实例。<code>spring.data.cassandra.*</code> 属性可用于自定义连接。通常，您会提供 <code>keyspace-name</code> 和 <code>contact-points </code>属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.data.cassandra.keyspace-name</span>=mykeyspace</span><br><span class="line"><span class="attr">spring.data.cassandra.contact-points</span>=cassandrahost1,cassandrahost2</span><br></pre></td></tr></table></figure><p>您还可以注册任意数量实现了 ClusterBuilderCustomizer 的 bean，以进行更高级的自定义。</p><p>以下代码展示了如何注入一个 Cassandra bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> CassandraTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(CassandraTemplate template)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.template = template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果您添加了自己的类的为 <code>@CassandraTemplate</code> 的 <code>@Bean</code>，则其将替代默认值。</p><p><a id="boot-features-spring-data-cassandra-repositories"></a></p><h4 id="31-7-2、Spring-Data-Cassandra-资源库">31.7.2、Spring Data Cassandra 资源库</h4><p>Spring Data 包含了基本的 Cassandra 资源库支持。目前，其限制要比之前讨论的 JPA 资源库要多，并且需要在 finder 方法上使用 <code>@Query</code> 注解。</p><p><strong>提示</strong></p><blockquote><p>有关 Spring Data Cassandra 的完整详细内容，请参阅其<a href="https://docs.spring.io/spring-data/cassandra/docs/">参考文档</a>。</p></blockquote><p><a id="boot-features-couchbase"></a></p><h3 id="31-8、Couchbase">31.8、Couchbase</h3><p><a href="https://www.couchbase.com/">Couchbase</a> 是一个开源、分布式多模型的 NoSQL 面向文档数据库，其针对交互式应用程序做了优化。Spring Boot 为 Couchbase 提供了自动配置，且 <a href="https://github.com/spring-projects/spring-data-couchbase">Spring Data Couchbase</a> 为其提供了顶层抽象。相关的依赖包含在了 <code>spring-boot-starter-data-couchbase</code> starter 中。</p><p><a id="boot-features-connecting-to-couchbase"></a></p><h4 id="31-8-1、连接-Couchbase">31.8.1、连接 Couchbase</h4><p>您可以通过添加 Couchbase SDK 和一些配置来轻松获取 <code>Bucket</code> 和 <code>Cluster</code>。<code>spring.couchbase.*</code> 属性可用于自定义连接。通常您会配置 bootstrap host、bucket name 和 password：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.couchbase.bootstrap-hosts</span>=my-host-<span class="number">1</span>,<span class="number">192.168</span>.<span class="number">1.123</span></span><br><span class="line"><span class="attr">spring.couchbase.bucket.name</span>=my-bucket</span><br><span class="line"><span class="attr">spring.couchbase.bucket.password</span>=secret</span><br></pre></td></tr></table></figure><blockquote><p>您<strong>至少</strong>需要提供 bootstrap host，这种情况下，bucket name 为 <code>default</code> 且 password 为空字符串。或者，您可以定义自己的 <code>org.springframework.data.couchbase.config.CouchbaseConfigurer</code> @Bean 来控制整个配置。</p></blockquote><p>也可以自定义一些 <code>CouchbaseEnvironment</code> 设置。例如，以下配置修改了打开一个新 <code>Bucket</code> 的超时时间和开启了 SSL 支持：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.couchbase.env.timeouts.connect</span>=<span class="number">3000</span></span><br><span class="line"><span class="attr">spring.couchbase.env.ssl.key-store</span>=/location/of/keystore.jks</span><br><span class="line"><span class="attr">spring.couchbase.env.ssl.key-store-password</span>=secret</span><br></pre></td></tr></table></figure><p>查看 <code>spring.couchbase.env.*</code> 获取更多详细内容。</p><p><a id="boot-features-spring-data-couchbase-repositories"></a></p><h4 id="31-8-2、Spring-Data-Couchbase-资源库">31.8.2、Spring Data Couchbase 资源库</h4><p>Spring Data 包含了 Couchbase 资源库支持。有关 Spring Data Couchbase 的完整详细信息，请参阅其<a href="https://docs.spring.io/spring-data/couchbase/docs/current/reference/html/">参考文档</a>。</p><p>您可以像使用其他 Spring Bean 一样注入自动配置的 <code>CouchbaseTemplate</code> 实例，前提是有一个默认的<code>CouchbaseConfigurer</code>（当您启用 Couchbase 支持时会发生这种情况，如之前所述）。</p><p>以下示例展示了如何注入一个 Couchbase bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> CouchbaseTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(CouchbaseTemplate template)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.template = template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以在自己的配置中定义以下几个 bean，以覆盖自动配置提供的配置：</p><ul><li>一个名为 <code>couchbaseTemplate</code> 的 <code>CouchbaseTemplate</code> @Bean</li><li>一个名为 <code>couchbaseIndexManager</code> 的 <code>IndexManager</code> @Bean</li><li>一个名为 <code>couchbaseCustomConversions</code> 的 <code>CustomConversions</code> @Bean</li></ul><p>为了避免在自己的配置中硬编码这些名称，您可以重用 Spring Data Couchbase 提供的 <code>BeanNames</code>，例如，您可以自定义转换器，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(BeanNames.COUCHBASE_CUSTOM_CONVERSIONS)</span></span><br><span class="line"><span class="keyword">public</span> CustomConversions <span class="title function_">myCustomConversions</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomConversions</span>(...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><p>如果您想要安全绕开 Spring Data Couchbase 的自动配置，请提供自己的 <code>org.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration</code> 实现。</p><p><a id="boot-features-ldap"></a></p><h3 id="31-9、LDAP">31.9、LDAP</h3><p><a href="https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol">LDAP</a>（Lightweight Directory Access Protocol，轻量级目录访问协议）是一个开放、厂商中立的行业标准应用协议，其通过 IP 网络访问和维护分布式目录信息服务。Spring Boot 为兼容 LDAP 服务器提供了自动配置，以及支持从 <a href="https://www.ldap.com/unboundid-ldap-sdk-for-java">UnboundID</a> 内嵌内存式 LDAP 服务器。</p><p><a href="https://github.com/spring-projects/spring-data-ldap">Spring Data LDAP</a> 提供了 LDAP 抽象。相关依赖包含在了 <code>spring-boot-starter-data-ldap</code> starter 中。</p><p><a id="boot-features-ldap-connecting"></a></p><h4 id="31-9-1、连接-LDAP-服务器">31.9.1、连接 LDAP 服务器</h4><p>要连接 LDAP 服务器，请确保您已经声明了 <code>spring-boot-starter-data-ldap</code> starter 或者 <code>spring-ldap-core</code> 依赖，然后在 <code>application.properties</code> 声明服务器的 URL：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.ldap.urls</span>=ldap://myserver:<span class="number">1235</span></span><br><span class="line"><span class="attr">spring.ldap.username</span>=admin</span><br><span class="line"><span class="attr">spring.ldap.password</span>=secret</span><br></pre></td></tr></table></figure><p>如果需要自定义连接设置，您可以使用 <code>spring.ldap.base</code> 和 <code>spring.ldap.base-environment</code> 属性。</p><p><code>LdapContextSource</code> 将根据这些设置自动配置。如果您需要自定义它，例如使用一个 <code>PooledContextSource</code>，则仍然可以注入自动配置的 <code>LdapContextSource</code>。确保将自定义的 <code>ContextSource</code> 标记为 <code>@Primary</code>，以便自动配置的 <code>LdapTemplate</code> 能使用它。</p><p><a id="boot-features-ldap-spring-data-repositories"></a></p><h4 id="31-9-2、Spring-Data-LDAP-资源库">31.9.2、Spring Data LDAP 资源库</h4><p>Spring Data 包含了 LDAP 资源库支持。有关 Spring Data LDAP 的完整详细信息，请参阅其<a href="https://docs.spring.io/spring-data/ldap/docs/1.0.x/reference/html/">参考文档</a>。</p><p>您还可以像其他 Spring Bean 一样注入一个自动配置的 <code>LdapTemplate</code> 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> LdapTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(LdapTemplate template)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.template = template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-ldap-embedded"></a></p><h4 id="31-9-3、内嵌内存式-LDAP-服务器">31.9.3、内嵌内存式 LDAP 服务器</h4><p>为了测试目的，Spring Boot 支持从 <a href="https://www.ldap.com/unboundid-ldap-sdk-for-java">UnboundID</a> 自动配置一个内存式 LDAP 服务器。要配置服务器，请添加 <code>com.unboundid:unboundid-ldapsdk</code> 依赖并声明一个 <code>base-dn</code> 属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.ldap.embedded.base-dn</span>=dc=spring,dc=io</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>可以定义多个 <code>base-dn</code> 值，但是，由于名称包含逗号，存在歧义，因此必须使用正确的符号来定义它们。</p><p>在 yaml 文件中，您可以使用 yaml 列表表示法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.ldap.embedded.base-dn:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dc=spring,dc=io</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dc=pivotal,dc=io</span></span><br></pre></td></tr></table></figure><p>在属性文件中，必须使用索引方式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.ldap.embedded.base-dn<span class="section">[0]</span>=<span class="attr">dc</span>=spring,dc=io</span><br><span class="line">spring.ldap.embedded.base-dn<span class="section">[1]</span>=<span class="attr">dc</span>=pivotal,dc=io</span><br></pre></td></tr></table></figure></blockquote><p>默认情况下，服务器将在一个随机端口上启动，并触发常规的 LDAP 支持（不需要指定 <code>spring.ldap.urls</code> 属性）。</p><p>如果您的 classpath 上存在一个 <code>schema.ldif</code> 文件，其将用于初始化服务器。如果您想从不同的资源中加载脚本，可以使用 <code>spring.ldap.embedded.ldif</code> 属性。</p><p>默认情况下，将使用一个标准模式（schema）来校验 <code>LDIF</code> 文件。您可以使用 <code>spring.ldap.embedded.validation.enabled</code> 属性来关闭所有校验。如果您有自定义的属性，则可以使用 <code>spring.ldap.embedded.validation.schema</code> 来定义自定义属性类型或者对象类。</p><p><a id="boot-features-influxdb"></a></p><h3 id="31-10、InfluxDB">31.10、InfluxDB</h3><p><a href="https://www.influxdata.com/">InfluxDB</a> 是一个开源时列数据库，其针对运营监控、应用程序指标、物联网传感器数据和实时分析等领域中的时间序列数据在速度、高可用存储和检索方面进行了优化。</p><p><a id="boot-features-connecting-to-influxdb"></a></p><h4 id="31-10-1、连接-InfluxDB">31.10.1、连接 InfluxDB</h4><p>Spring Boot 自动配置 <code>InfluxDB</code> 实例，前提是 <code>Influxdb-java</code> 客户端在 classpath 上并且设置了数据库的 URL，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.influx.url</span>=HTTP://<span class="number">172.0</span>.<span class="number">0.1</span>:<span class="number">8086</span></span><br></pre></td></tr></table></figure><p>如果与 InfluxDB 的连接需要用户和密码，则可以相应地设置 <code>spring.influx.user</code> 和 <code>spring.influx.password</code> 属性。</p><p>InfluxDB 依赖于 OkHttp。如果你需要调整 <code>InfluxDB</code> 在底层使用的 http 客户端，则可以注册一个 <code>InfluxDbOkHttpClientBuilderProvider</code> bean。</p><p><a id="boot-features-caching"></a></p><h2 id="32、缓存">32、缓存</h2><p>Spring Framework 支持以透明的方式向应用程序添加缓存。从本质上讲，将缓存应用于方法上，根据缓存数据减少方法的执行次数。缓存逻辑是透明的，不会对调用者造成任何干扰。通过 <code>@EnableCaching</code> 注解启用缓存支持，Spring Boot 就会自动配置缓存设置。</p><p><strong>注意</strong></p><blockquote><p>有关更多详细信息，请查看 Spring Framework 参考文档的<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#cache">相关部分</a>。</p></blockquote><p>简而言之，为服务添加缓存的操作就像在其方法中添加注解一样简单，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(&quot;piDecimals&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">computePiDecimal</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此示例展示了如何在代价可能高昂的操作上使用缓存。在调用 <code>computePiDecimal</code> 之前，缓存支持会在 <code>piDecimals</code> 缓存中查找与 <code>i</code> 参数匹配的项。如果找到，则缓存中的内容会立即返回给调用者，并不会调用该方法。否则，将调用该方法，并在返回值之前更新缓存。</p><p><strong>注意</strong></p><blockquote><p>您还可以使用标准 JSR-107（JCache）注解（例如 <code>@CacheResult</code>）。但是，我们强烈建议您<strong>不要</strong>将 Spring Cache 和 JCache 注解混合使用。</p></blockquote><p>如果您不添加任何指定的缓存库，Spring Boot 会自动配置一个使用并发 map 的 <a href="#boot-features-caching-provider-simple">simple provider</a>。当需要缓存时（例如前面示例中的 <code>piDecimals</code>），该 simple provider 会为您创建缓存。不推荐将 simple provider 用于生产环境，但它非常适合入门并帮助您了解这些功能。当您决定使用缓存提供者时，请务必阅读其文档以了解如何配置应用程序。几乎所有提供者都要求您显式配置应用程序中使用的每个缓存。有些提供了自定义 <code>spring.cache.cache-names</code> 属性以定义默认缓存。</p><p><strong>提示</strong></p><blockquote><p>还可以透明地<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#cache-annotations-put">更新</a>或<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#cache-annotations-evict">回收</a>缓存中的数据。</p></blockquote><p><a id="boot-features-caching-provider"></a></p><h3 id="32-1、支持的缓存提供者">32.1、支持的缓存提供者</h3><p>缓存抽象不提供存储实现，其依赖于 <code>org.springframework.cache.Cache</code> 和 <code>org.springframework.cache.CacheManager</code> 接口实现的抽象。</p><p>如果您未定义 <code>CacheManager</code> 类型的 bean 或名为 <code>cacheResolver</code> 的 <code>CacheResolver</code>（请参阅 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/cache/annotation/CachingConfigurer.html"><code>CachingConfigurer</code></a>），则 Spring Boot 会尝试检测以下提供者（按序号顺序）：</p><ol><li><a href="#boot-features-caching-provider-generic">Generic</a></li><li><a href="#boot-features-caching-provider-jcache">JCache (JSR-107)</a>(EhCache 3、Hazelcast、Infinispan 或其他)</li><li><a href="#boot-features-caching-provider-ehcache2">EhCache 2.x</a></li><li><a href="#boot-features-caching-provider-hazelcast">Hazelcast</a></li><li><a href="#boot-features-caching-provider-infinispan">Infinispan</a></li><li><a href="#boot-features-caching-provider-couchbase">Couchbase</a></li><li><a href="#boot-features-caching-provider-redis">Redis</a><br>8 <a href="#boot-features-caching-provider-caffeine">Caffeine</a></li><li><a href="#boot-features-caching-provider-simple">Simple</a></li></ol><p><strong>提示</strong></p><blockquote><p>也可以通过设置 <code>spring.cache.type</code> 属性来强制指定缓存提供者。如果您需要在某些环境（比如测试）中<a href="#boot-features-caching-provider-none">完全禁用缓存</a>，请使用此属性。</p></blockquote><p><strong>提示</strong></p><blockquote><p>使用 <code>spring-boot-starter-cache</code> starter 快速添加基本的缓存依赖。starter 引入了 <code>spring-context-support</code>。如果手动添加依赖，则必须包含 <code>spring-context-support</code> 才能使用 JCache、EhCache 2.x 或 Guava 支持。</p></blockquote><p>如果通过 Spring Boot 自动配置 <code>CacheManager</code>，则可以通过暴露一个实现了 <code>CacheManagerCustomizer</code> 接口的 bean，在完全初始化之前进一步调整其配置。以下示例设置了一个 flag，表示应将 null 值传递给底层 map：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CacheManagerCustomizer&lt;ConcurrentMapCacheManager&gt; <span class="title function_">cacheManagerCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheManagerCustomizer</span>&lt;ConcurrentMapCacheManager&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConcurrentMapCacheManager cacheManager)</span> &#123;</span><br><span class="line">cacheManager.setAllowNullValues(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>在前面示例中，需要一个自动配置的 <code>ConcurrentMapCacheManager</code>。如果不是这种情况（您提供了自己的配置或自动配置了不同的缓存提供者），则根本不会调用 customizer。您可以拥有多个 customizer，也可以使用 <code>@Order</code> 或 <code>Ordered</code> 来排序它们。</p></blockquote><p><a id="boot-features-caching-provider-generic"></a></p><h4 id="32-1-1、Generic">32.1.1、Generic</h4><p>如果上下文定义了<strong>至少</strong>一个 <code>org.springframework.cache.Cache</code> bean，则使用 Generic 缓存。将创建一个包装所有该类型 bean 的 <code>CacheManager</code>。</p><p><a id="boot-features-caching-provider-jcache"></a></p><h4 id="32-1-2、JCache-JSR-107">32.1.2、JCache (JSR-107)</h4><p><a href="https://jcp.org/en/jsr/detail?id=107">JCache</a> 通过 classpath 上的 <code>javax.cache.spi.CachingProvider</code>（即 classpath 上存在符合 JSR-107 的缓存库）来引导，<code>jCacheCacheManager</code> 由 <code>spring-boot-starter-cache</code> starter 提供。您可以使用各种兼容库，Spring Boot 为 Ehcache 3、Hazelcast 和 Infinispan 提供依赖管理。您还可以添加任何其他兼容库。</p><p>可能存在多个提供者，在这种情况下必须明确指定提供者。即使 JSR-107 标准没有强制规定一个定义配置文件位置的标准化方法，Spring Boot 也会尽其所能设置一个包含实现细节的缓存，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存在多个 provider 才需要这样做</span></span><br><span class="line"><span class="attr">spring.cache.jcache.provider</span>=com.acme.MyCachingProvider</span><br><span class="line"><span class="attr">spring.cache.jcache.config</span>=classpath:acme.xml</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>当缓存库同时提供原生实现和 JSR-107 支持时，Spring Boot 更倾向 JSR-107 支持，因此当您切换到不同的 JSR-107 实现时，还可以使用相同的功能。</p></blockquote><p><strong>提示</strong></p><blockquote><p>Spring Boot 对 <a href="#boot-features-hazelcast">Hazelcast</a> 的支持一般。如果有一个 <code>HazelcastInstance</code> 可用，它也会自动为 <code>CacheManager</code> 复用，除非指定了 <code>spring.cache.jcache.config</code> 属性。</p></blockquote><p>有两种方法可以自定义底层的 <code>javax.cache.cacheManager</code>：</p><ul><li>可以通过设置 <code>spring.cache.cache-names</code> 属性在启动时创建缓存。如果定义了自定义 <code>javax.cache.configuration.Configuration</code> bean，则会使用它来自定义。</li><li>使用 <code>CacheManager</code> 的引用调用 <code>org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer</code> bean 以进行完全自定义。</li></ul><p><strong>提示</strong></p><blockquote><p>如果定义了一个标准的 <code>javax.cache.CacheManager</code> bean，它将自动包装进一个抽象所需的 <code>org.springframework.cache.CacheManager</code> 实现中，而不会应用自定义配置。</p></blockquote><p><a id="boot-features-caching-provider-ehcache2"></a></p><h4 id="32-1-3、EhCache-2-x">32.1.3、EhCache 2.x</h4><p>如果可以在 classpath 的根目录中找到名为 <code>ehcache.xml</code> 的文件，则使用 EhCache 2.x。如果找到 EhCache 2.x，则使用 <code>spring-boot-starter-cache</code> starter 提供的 <code>EhCacheCacheManager</code> 来启动缓存管理器。还可以提供其他配置文件，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.ehcache.config</span>=classpath:config/another-config.xml</span><br></pre></td></tr></table></figure><p><a id="boot-features-caching-provider-hazelcast"></a></p><h4 id="32-1-4、Hazelcast">32.1.4、Hazelcast</h4><p>Spring Boot 对 <a href="#boot-features-hazelcast">Hazelcast</a> 的支持一般。如果自动配置了一个 <code>HazelcastInstance</code>，它将自动包装进 <code>CacheManager</code> 中。</p><p><a id="boot-features-caching-provider-infinispan"></a></p><h4 id="32-1-5、Infinispan">32.1.5、Infinispan</h4><p><a href="http://infinispan.org/">Infinispan</a> 没有默认的配置文件位置，因此必须明确指定。否则将使用默认配置引导。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.infinispan.config</span>=infinispan.xml</span><br></pre></td></tr></table></figure><p>可以通过设置 <code>spring.cache.cache-names</code> 属性在启动时创建缓存。如果定义了自定义 <code>ConfigurationBuilder</code> bean，则它将用于自定义缓存。</p><p><strong>注意</strong></p><blockquote><p>Infinispan 在 Spring Boot 中的支持仅限于内嵌模式，非常简单。如果你想要更多选项，你应该使用官方的 Infinispan Spring Boot starter。有关更多详细信息，请参阅 <a href="https://github.com/infinispan/infinispan-spring-boot">Infinispan 文档</a>。</p></blockquote><p><a id="boot-features-caching-provider-couchbase"></a></p><h4 id="32-1-6、Couchbase">32.1.6、Couchbase</h4><p>如果 <a href="https://www.couchbase.com/">Couchbase</a> Java 客户端和 <code>couchbase-spring-cache</code> 实现可用且已经<a href="#boot-features-couchbase">配置</a>了 Couchbase，则应用程序会自动配置一个 <code> CouchbaseCacheManager</code>。也可以通过设置 <code>spring.cache.cache-names</code> 属性在启动时创建其他缓存。这些缓存在自动配置的 Bucket 上操作。您<strong>还</strong>可以使用 customizer 在其他 <code>Bucket</code> 上创建缓存。假设您需要在 <strong>main</strong> <code>Bucket</code> 上有两个缓存（<code>cache1</code> 和 <code>cache2</code>），并且 <strong>another</strong> <code>Bucket</code> 有一个过期时间为 2 秒的缓存（<code>cache3</code>）。您可以通过配置创建这两个缓存，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.cache-names</span>=cache1,cache2</span><br></pre></td></tr></table></figure><p>然后，您可以定义一个 <code>@Configuration</code> 类来配置其他 <code>Bucket</code> 和 <code>cache3</code> 缓存，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouchbaseCacheConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Cluster cluster;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CouchbaseCacheConfiguration</span><span class="params">(Cluster cluster)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.cluster = cluster;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Bucket <span class="title function_">anotherBucket</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.cluster.openBucket(<span class="string">&quot;another&quot;</span>, <span class="string">&quot;secret&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CacheManagerCustomizer&lt;CouchbaseCacheManager&gt; <span class="title function_">cacheManagerCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c -&gt; &#123;</span><br><span class="line">c.prepareCache(<span class="string">&quot;cache3&quot;</span>, CacheBuilder.newInstance(anotherBucket())</span><br><span class="line">.withExpiration(<span class="number">2</span>));</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此示例配置复用了通过自动配置创建的 <code>Cluster</code>。</p><p><a id="boot-features-caching-provider-redis"></a></p><h4 id="32-1-7、Redis">32.1.7、Redis</h4><p>如果 <a href="http://redis.io/">Redis</a> 可用并已经配置，则应用程序会自动配置一个 <code>RedisCacheManager</code>。通过设置 <code>spring.cache.cache-names</code> 属性可以在启动时创建其他缓存，并且可以使用 <code>spring.cache.redis.*</code> 属性配置缓存默认值。例如，以下配置创建 <code>cache1</code> 和 <code>cache2</code> 缓存，他们的<strong>有效时间</strong>为 10 分钟：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.cache-names</span>=cache1,cache2</span><br><span class="line"><span class="attr">spring.cache.redis.time-to-live</span>=<span class="number">600000</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>默认情况下，会添加一个 key 前缀，这样做是因为如果两个单独的缓存使用了相同的键，Redis 不支持重叠 key，而缓存也不能返回无效值。如果您创建自己的 <code>RedisCacheManager</code>，我们强烈建议您启用此设置。</p></blockquote><p><strong>提示</strong></p><blockquote><p>您可以通过添加自己的 <code>RedisCacheConfiguration</code> <code>@Bean</code> 来完全控制配置。如果您想自定义序列化策略，这种方式可能很有用。</p></blockquote><p><a id="boot-features-caching-provider-caffeine"></a></p><h4 id="32-1-8、Caffeine">32.1.8、Caffeine</h4><p><a href="https://github.com/ben-manes/caffeine">Caffeine</a> 是一个使用了 Java 8 重写 Guava 缓存，用于取代 Guava 支持的缓存库。如果 Caffeine 存在，则应用程序会自动配置一个 <code>CaffeineCacheManager</code>（由 <code>spring-boot-starter-cache</code> starter 提供）。可以通过设置 <code>spring.cache.cache-names</code> 属性在启动时创建缓存，并且可以通过以下方式之一（按序号顺序）自定义缓存：</p><ol><li>一个由 <code>spring.cache.caffeine.spec</code> 定义的缓存规范</li><li>一个已定义的 <code>com.github.benmanes.caffeine.cache.CaffeineSpec</code> bean</li><li>一个已定义的 <code>com.github.benmanes.caffeine.cache.Caffeine</code> bean</li></ol><p>例如，以下配置创建 <code>cache1</code> 和 <code>cache2</code> 缓存，最大大小为 500，<strong>有效时间</strong> 为 10 分钟：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.cache-names</span>=cache1,cache2</span><br><span class="line"><span class="attr">spring.cache.caffeine.spec</span>=maximumSize=<span class="number">500</span>,expireAfterAccess=<span class="number">600</span>s</span><br></pre></td></tr></table></figure><p>如果定义了 <code>com.github.benmanes.caffeine.cache.CacheLoader</code> bean，它将自动与 <code>CaffeineCacheManager</code> 关联。由于 <code>CacheLoader</code> 将与缓存管理器管理的<strong>所有</strong>缓存相关联，因此必须将其定义为 <code>CacheLoader&lt;Object, Object&gt;</code>。自动配置会忽略所有其他泛型类型。</p><p><a id="boot-features-caching-provider-simple"></a></p><h4 id="32-1-9、Simple">32.1.9、Simple</h4><p>如果找不到其他提供者，则配置使用一个 <code>ConcurrentHashMap</code> 作为缓存存储的简单实现。如果您的应用程序中没有缓存库，则该项为默认值。默认情况下，会根据需要创建缓存，但您可以通过设置 <code>cache-names</code> 属性来限制可用缓存的列表。例如，如果只需要 <code>cache1</code> 和 <code>cache2</code> 缓存，请按如下设置 <code>cache-names</code> 属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.cache-names</span>=cache1,cache2</span><br></pre></td></tr></table></figure><p>如果这样做了，并且您的应用程序使用了未列出的缓存，则运行时在它需要缓存时会触发失败，但在启动时则不会。这类似于<strong>真实</strong>缓存提供者在使用未声明的缓存时触发的行为方式。</p><p><a id="boot-features-caching-provider-none"></a></p><h4 id="32-1-10、None">32.1.10、None</h4><p>当配置中存在 <code>@EnableCaching</code> 时，也需要合适的缓存配置。如果需要在某些环境中完全禁用缓存，请将缓存类型强制设置为 <code>none</code> 以使用 no-op 实现，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.cache.type</span>=none</span><br></pre></td></tr></table></figure><p><a id="boot-features-messaging"></a></p><h2 id="33、消息传递">33、消息传递</h2><p>Spring Framework 为消息传递系统集成提供了广泛的支持，从使用 <code>JmsTemplate</code> 简化 JMS API 的使用到异步接收消息的完整基础设施。Spring AMQP 为高级消息队列协议（Advanced Message Queuing Protocol，AMQP）提供了类似的功能集合。Spring Boot 还为 <code>RabbitTemplate</code> 和 RabbitMQ 提供自动配置选项。Spring WebSocket 本身包含了对 STOMP 消息传递的支持，Spring Boot 通过 starter 和少量自动配置即可支持它。Spring Boot 同样支持 Apache Kafka。</p><p><a id="boot-features-jms"></a></p><h3 id="33-1、JMS">33.1、JMS</h3><p><code>javax.jms.ConnectionFactory</code> 接口提供了一种创建 <code>javax.jms.Connection</code> 的标准方法，可与 JMS broker（代理）进行交互。虽然 Spring 需要一个 <code>ConnectionFactory</code> 来与 JMS 一同工作，但是您通常不需要自己直接使用它，而是可以依赖更高级别的消息传递抽象。（有关详细信息，请参阅 Spring Framework 参考文档的<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#jms">相关部分</a>。）Spring Boot 还会自动配置发送和接收消息所需的基础设施。</p><p><a id="boot-features-activemq"></a></p><h4 id="33-1-1、ActiveMQ-支持">33.1.1、ActiveMQ 支持</h4><p>当 <a href="http://activemq.apache.org/">ActiveMQ</a> 在 classpath 上可用时，Spring Boot 也可以配置一个 <code>ConnectionFactory</code>。如果 broker 存在，则会自动启动并配置一个内嵌式 broker（前提是未通过配置指定 broder URL）。</p><p><strong>注意</strong></p><blockquote><p>如果使用 <code>spring-boot-starter-activemq</code>，则提供了连接到 ActiveMQ 实例必须依赖或内嵌一个 ActiveMQ 实例，以及与 JMS 集成的 Spring 基础设施。</p></blockquote><p>ActiveMQ 配置由 <code>spring.activemq.*</code> 中的外部配置属性控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.activemq.broker-url</span>=tcp://<span class="number">192.168</span>.<span class="number">1.210</span>:<span class="number">9876</span></span><br><span class="line"><span class="attr">spring.activemq.user</span>=admin</span><br><span class="line"><span class="attr">spring.activemq.password</span>=secret</span><br></pre></td></tr></table></figure><p>默认情况下，<code>CachingConnectionFactory</code> 将原生的 <code>ConnectionFactory</code> 使用可由 <code>spring.jms.*</code> 中的外部配置属性控制的合理设置包装起来：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jms.cache.session-cache-size</span>=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果您更愿意使用原生池，则可以通过向 <code>org.messaginghub:pooled-jms</code> 添加一个依赖并相应地配置 <code>JmsPoolConnectionFactory</code> 来实现，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.activemq.pool.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.activemq.pool.max-connections</span>=<span class="number">50</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>有关更多支持的选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.java"><code>ActiveMQProperties</code></a>。您还可以注册多个实现了 <code>ActiveMQConnectionFactoryCustomizer</code> 的的 bean，以进行更高级的自定义。</p></blockquote><p>默认情况下，ActiveMQ 会创建一个 destination（目标）（如果它尚不存在），以便根据提供的名称解析 destination。</p><p><a id="boot-features-artemis"></a></p><h4 id="33-1-2、Artemis-支持">33.1.2、Artemis 支持</h4><p>Spring Boot 可以在检测到 <a href="http://activemq.apache.org/artemis/">Artemis</a> 在 classpath 上可用时自动配置一个 <code>ConnectionFactory</code>。如果存在 broker，则会自动启动并配置一个内嵌 broker（除非已明确设置 mode 属性）。支持的 mode 为 <code>embedded</code>（明确表示需要一个内嵌 broker，如果 broker 在 classpath 上不可用则发生错误）和 <code>native</code>（使用 netty 传输协议连接到 broker）。配置后者后，Spring Boot 会使用默认设置配置一个 <code>ConnectionFactory</code>，该 <code>ConnectionFactory</code> 连接到在本地计算机上运行的 broker。</p><p><strong>注意</strong></p><blockquote><p>如果使用了 <code>spring-boot-starter-artemis</code>，则会提供连接到现有的 Artemis 实例的必须依赖，以及与 JMS 集成的Spring 基础设施。将 <code>org.apache.activemq:artemis-jms-server</code> 添加到您的应用程序可让您使用内嵌模式。</p></blockquote><p>Artemis 配置由 <code>spring.artemis.*</code> 中的外部配置属性控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.artemis.mode</span>=native</span><br><span class="line"><span class="attr">spring.artemis.host</span>=<span class="number">192.168</span>.<span class="number">1.210</span></span><br><span class="line"><span class="attr">spring.artemis.port</span>=<span class="number">9876</span></span><br><span class="line"><span class="attr">spring.artemis.user</span>=admin</span><br><span class="line"><span class="attr">spring.artemis.password</span>=secret</span><br></pre></td></tr></table></figure><p>内嵌 broker 时，您可以选择是否要启用持久化并列出应该可用的 destination。可以将这些指定为以逗号分隔的列表，以使用默认选项创建它们，也可以定义类型为 <code>org.apache.activemq.artemis.jms.server.config.JMSQueueConfiguration</code> 或 <code>org.apache.activemq.artemis.jms.server.config.TopicConfiguration</code> 的 bean，分别用于高级队列和 topic（主题）配置。</p><p>默认情况下，<code>CachingConnectionFactory</code> 将原生的 <code>ConnectionFactory</code> 使用可由 <code>spring.jms.*</code> 中的外部配置属性控制的合理设置包装起来：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jms.cache.session-cache-size</span>=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果您更愿意使用原生池，则可以通过向 <code>org.messaginghub:pooled-jms</code> 添加一个依赖并相应地配置 <code>JmsPoolConnectionFactory</code> 来实现，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.artemis.pool.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.artemis.pool.max-connections</span>=<span class="number">50</span></span><br></pre></td></tr></table></figure><p>有关更多支持的选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisProperties.java"><code>ArtemisProperties</code></a>。</p><p>不涉及 JNDI 查找，使用 Artemis 配置中的 <code>name</code> 属性或通过配置提供的名称来解析目标（destination）名称。</p><p><a id="boot-features-jms-jndi"></a></p><h4 id="33-1-3、使用-JNDI-ConnectionFactory">33.1.3、使用 JNDI ConnectionFactory</h4><p>如果您在应用程序服务器中运行应用程序，Spring Boot 会尝试使用 JNDI 找到 JMS <code>ConnectionFactory</code>。默认情况下，将检查 <code>java:/JmsXA</code> 和 <code>java:/XAConnectionFactory</code> 这两个位置。如果需要指定其他位置，可以使用 <code>spring.jms.jndi-name</code> 属性，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.jms.jndi-name</span>=java:/MyConnectionFactory</span><br></pre></td></tr></table></figure><p><a id="boot-features-using-jms-sending"></a></p><h4 id="33-1-4、发送消息">33.1.4、发送消息</h4><p>Spring 的 <code>JmsTemplate</code> 是自动配置的，你可以直接将它注入到你自己的 bean 中，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(JmsTemplate jmsTemplate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.jmsTemplate = jmsTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p><code>JmsMessagingTemplate</code> 可以以类似的方式注入。如果定义了 <code>DestinationResolver</code> 或 <code>MessageConverter</code> bean，它将自动关联到自动配置的 <code>JmsTemplate</code>。</p></blockquote><p><a id="boot-features-using-jms-receiving"></a></p><h4 id="33-1-5、接收消息">33.1.5、接收消息</h4><p>当存在 JMS 基础设施时，可以使用 <code>@JmsListener</code> 对任何 bean 进行注解以创建监听器（listener）端点。如果未定义 <code>JmsListenerContainerFactory</code>，则会自动配置一个默认的（factory）。如果定义了 <code>DestinationResolver</code> 或 <code>MessageConverter</code> bean，它将自动关联到默认的 factory。</p><p>默认情况下，默认 factory 是具有事务特性的。如果您在存在有 <code>JtaTransactionManager</code> 的基础设施中运行，则默认情况下它与监听器容器相关联。如果不是，则 <code>sessionTransacted</code> flag 将为启用（enabled）。在后一种情况下，您可以通过在监听器方法（或其委托）上添加 <code>@Transactional</code>，将本地数据存储事务与传入消息的处理相关联。这确保了在本地事务完成后传入消息能被告知。这还包括了发送已在同一 JMS 会话上执行的响应消息。</p><p>以下组件在 <code>someQueue</code> destination 上创建一个监听器端点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JmsListener(destination = &quot;someQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String content)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>有关更多详细信息，请参阅 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/jms/annotation/EnableJms.html"><code>@EnableJms</code> 的 Javadoc</a>。</p></blockquote><p>如果需要创建更多 <code>JmsListenerContainerFactory</code> 实例或覆盖缺省值，Spring Boot 会提供一个 <code>DefaultJmsListenerContainerFactoryConfigurer</code>，您可以使用它来初始化 <code>DefaultJmsListenerContainerFactory</code>，其设置与自动配置的 factory 设置相同。</p><p>例如，以下示例暴露了另一个使用特定 <code>MessageConverter</code> 的 factory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">JmsConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultJmsListenerContainerFactory <span class="title function_">myFactory</span><span class="params">(</span></span><br><span class="line"><span class="params">DefaultJmsListenerContainerFactoryConfigurer configurer)</span> &#123;</span><br><span class="line"><span class="type">DefaultJmsListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">DefaultJmsListenerContainerFactory</span>();</span><br><span class="line">configurer.configure(factory, connectionFactory());</span><br><span class="line">factory.setMessageConverter(myMessageConverter());</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，您可以在任何 <code>@JmsListener</code> 注解的方法中使用该 factory，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JmsListener(destination = &quot;someQueue&quot;, containerFactory=&quot;myFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String content)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-amqp"></a></p><h3 id="33-2、AMQP">33.2、AMQP</h3><p>高级消息队列协议（Advanced Message Queuing Protocol，AMQP）是一个平台无关，面向消息中间件的连接级协议。Spring AMQP 项目将核心 Spring 概念应用于基于 AMQP 消息传递解决方案的开发。Spring Boot 为通过 RabbitMQ 使用 AMQP 提供了一些快捷方法，包括 <code>spring-boot-starter-amqp</code> starter。</p><p><a id="boot-features-rabbitmq"></a></p><h4 id="33-2-1、RabbitMQ-支持">33.2.1、RabbitMQ 支持</h4><p><a href="https://www.rabbitmq.com/">RabbitMQ</a> 是一个基于 AMQP 协议的轻量级、可靠、可扩展且可移植的消息代理。Spring 使用 RabbitMQ 通过 AMQP 协议进行通信。</p><p>RabbitMQ 配置由 <code>spring.rabbitmq.*</code> 中的外部配置属性控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.host</span>=localhost</span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="number">5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=admin</span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=secret</span><br></pre></td></tr></table></figure><p>如果上下文中存在 <code>ConnectionNameStrategy</code> bean，它将自动用于命名由自动配置的 <code>ConnectionFactory</code> 所创建的连接。有关更多支持的选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java">RabbitProperties</a>。</p><p><strong>提示</strong></p><blockquote><p>有关详细信息，请参阅<a href="https://spring.io/blog/2010/06/14/understanding-amqp-the-protocol-used-by-rabbitmq/">理解 AMQP、RabbitMQ 使用的协议</a>。</p></blockquote><p><a id="boot-features-using-amqp-sending"></a></p><h4 id="33-2-2、发送消息">33.2.2、发送消息</h4><p>Spring 的 <code>AmqpTemplate</code> 和 <code>AmqpAdmin</code> 是自动配置的，您可以将它们直接注入自己的 bean 中，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpAdmin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AmqpAdmin amqpAdmin;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(AmqpAdmin amqpAdmin, AmqpTemplate amqpTemplate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.amqpAdmin = amqpAdmin;</span><br><span class="line"><span class="built_in">this</span>.amqpTemplate = amqpTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>RabbitMessagingTemplate 可以以类似的方式注入。如果定义了 <code>MessageConverter</code> bean，它将自动关联到自动配置的 <code>AmqpTemplate</code>。</p></blockquote><p>如有必要，所有定义为 bean 的 <code>org.springframework.amqp.core.Queue</code> 都会自动在 RabbitMQ 实例上声明相应的队列。</p><p>要重试操作，可以在 <code>AmqpTemplate</code> 上启用重试（例如，在 broker 连接丢失的情况下）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.rabbitmq.template.retry.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.rabbitmq.template.retry.initial-interval</span>=<span class="number">2</span>s</span><br></pre></td></tr></table></figure><p>默认情况下禁用重试。您还可以通过声明 <code>RabbitRetryTemplateCustomizer</code> bean 以编程方式自定义 <code>RetryTemplate</code>。</p><p><a id="boot-features-using-amqp-receiving"></a></p><h4 id="33-2-3、接收消息">33.2.3、接收消息</h4><p>当 Rabbit 基础设施存在时，可以使用 <code>@RabbitListener</code> 注解任何 bean 以创建监听器端点。如果未定义 <code>RabbitListenerContainerFactory</code>，则会自动配置一个默认的 <code>SimpleRabbitListenerContainerFactory</code>，您可以使用 <code>spring.rabbitmq.listener.type</code> 属性切换到一个直接容器。如果定义了 <code>MessageConverter</code> 或 <code>MessageRecoverer</code> bean，它将自动与默认 factory 关联。</p><p>以下示例组件在 <code>someQueue</code> 队列上创建一个侦听监听器端点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;someQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String content)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>有关更多详细信息，请参阅 <a href="https://docs.spring.io/spring-amqp/docs/current/api/org/springframework/amqp/rabbit/annotation/EnableRabbit.html"><code>@EnableRabbit</code> 的 Javadoc</a>。</p></blockquote><p>如果需要创建更多 <code>RabbitListenerContainerFactory</code> 实例或覆盖缺省值，Spring Boot 提供了一个 <code>SimpleRabbitListenerContainerFactoryConfigurer</code> 和一个 <code>DirectRabbitListenerContainerFactoryConfigurer</code>，您可以使用它来初始化 <code>SimpleRabbitListenerContainerFactory</code> 和 <code>DirectRabbitListenerContainerFactory</code>，其设置与使用自动配置的 factory 相同。</p><p><strong>提示</strong></p><blockquote><p>这两个 bean 与您选择的容器类型没有关系，它们通过自动配置暴露。</p></blockquote><p>例如，以下配置类暴露了另一个使用特定 <code>MessageConverter</code> 的 factory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RabbitConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title function_">myFactory</span><span class="params">(</span></span><br><span class="line"><span class="params">SimpleRabbitListenerContainerFactoryConfigurer configurer)</span> &#123;</span><br><span class="line"><span class="type">SimpleRabbitListenerContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SimpleRabbitListenerContainerFactory</span>();</span><br><span class="line">configurer.configure(factory, connectionFactory);</span><br><span class="line">factory.setMessageConverter(myMessageConverter());</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，您可以在任何 <code>@RabbitListener</code> 注解的方法中使用该 factory，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;someQueue&quot;, containerFactory=&quot;myFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String content)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以启用重试机制来处理监听器的异常抛出情况。默认情况下使用 <code>RejectAndDontRequeueRecoverer</code>，但您可以定义自己的 <code>MessageRecoverer</code>。如果 broker 配置了重试机制，当重试次数耗尽时，则拒绝消息并将其丢弃或路由到死信（dead-letter）exchange 中。默认情况下重试机制为禁用。您还可以通过声明 <code>RabbitRetryTemplateCustomizer</code> bean 以编程方式自定义 <code>RetryTemplate</code>。</p><p><strong>重要</strong></p><blockquote><p>默认情况下，如果禁用重试并且监听器异常抛出，则会无限期地重试传递。您可以通过两种方式修改此行为：将 <code>defaultRequeueRejected</code> 属性设置为 <code>false</code>，以便尝试零重传或抛出 <code>AmqpRejectAndDontRequeueException</code> 以指示拒绝该消息。后者是启用重试并且达到最大传递尝试次数时使用的机制。</p></blockquote><p><a id="boot-features-kafka"></a></p><h3 id="33-3、Apache-Kafka-支持">33.3、Apache Kafka 支持</h3><p>通过提供 <code>spring-kafka</code> 项目的自动配置来支持 <a href="https://kafka.apache.org/">Apache Kafka</a>。</p><p>Kafka 配置由 <code>spring.kafka.*</code> 中的外部配置属性控制。例如，您可以在 <code>application.properties</code> 中声明以下部分：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.kafka.bootstrap-servers</span>=localhost:<span class="number">9092</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.group-id</span>=myGroup</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>要在启动时创建主题（topic），请添加 <code>NewTopic</code> 类型的 Bean。如果主题已存在，则忽略该 bean。</p></blockquote><p>有关更多支持的选项，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java"><code>KafkaProperties</code></a>。</p><p><a id="boot-features-kafka-sending-a-message"></a></p><h4 id="33-3-1、发送消息">33.3.1、发送消息</h4><p>Spring 的 <code>KafkaTemplate</code> 是自动配置的，您可以直接在自己的 bean 中装配它，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> KafkaTemplate kafkaTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyBean</span><span class="params">(KafkaTemplate kafkaTemplate)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.kafkaTemplate = kafkaTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>如果定义了属性 <code>spring.kafka.producer.transaction-id-prefix</code>，则会自动配置一个 <code>KafkaTransactionManager</code>。此外，如果定义了 <code>RecordMessageConverter</code> bean，它将自动关联到自动配置的 <code>KafkaTemplate</code>。</p></blockquote><p><a id="boot-features-kafka-receiving-a-message"></a></p><h4 id="33-3-2、接收消息">33.3.2、接收消息</h4><p>当存在 Apache Kafka 基础设施时，可以使用 <code>@KafkaListener</code> 注解任何 bean 以创监听器端点。如果未定义 <code>KafkaListenerContainerFactory</code>，则会使用 <code>spring.kafka.listener.*</code> 中定义的 key 自动配置一个默认的 factory。</p><p>以下组件在 <code>someTopic</code> topic 上创建一个监听器端点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@KafkaListener(topics = &quot;someTopic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processMessage</span><span class="params">(String content)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果定义了 <code>KafkaTransactionManager</code> bean，它将自动关联到容器 factory。同样，如果定义了 <code>RecordMessageConverter</code>、<code>ErrorHandler</code> 或 <code>AfterRollbackProcessor</code> bean，它将自动关联到默认的 factory。</p><p><strong>提示</strong></p><blockquote><p>自定义 <code>ChainedKafkaTransactionManager</code> 必须标记为 <code>@Primary</code>，因为它通常引用自动配置的 <code>KafkaTransactionManager</code> bean。</p></blockquote><p><a id="boot-features-kafka-streams"></a></p><h3 id="33-3-3、Kafka-Stream">33.3.3、Kafka Stream</h3><p>Spring for Apache Kafka 提供了一个工厂 bean 来创建 <code>StreamsBuilder</code> 对象并管理其 stream（流）的生命周期。只要 <code>kafka-streams</code> 在 classpath 上并且通过 <code>@EnableKafkaStreams</code> 注解启用了 Kafka Stream，Spring Boot 就会自动配置所需的 <code>KafkaStreamsConfiguration</code> bean。</p><p>启用 Kafka Stream 意味着必须设置应用程序 id 和引导服务器（bootstrap server）。可以使用 <code>spring.kafka.streams.application-id</code> 配置前者，如果未设置则默认为 <code>spring.application.name</code>。后者可以全局设置或专门为 stream 而重写。</p><p>使用专用 properties 可以设置多个其他属性，可以使用 <code>spring.kafka.streams.properties</code> 命名空间设置其他任意 Kafka 属性。有关更多信息，另请参见<a href="#boot-features-kafka-extra-props">第 33.3.4 节：其他 Kafka 属性</a>。</p><p>要使用 factory bean，只需将 <code>StreamsBuilder</code> 装配到您的 <code>@Bean</code> 中，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafkaStreams</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">KafkaStreamsExampleConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> KStream&lt;Integer, String&gt; <span class="title function_">kStream</span><span class="params">(StreamsBuilder streamsBuilder)</span> &#123;</span><br><span class="line">KStream&lt;Integer, String&gt; stream = streamsBuilder.stream(<span class="string">&quot;ks1In&quot;</span>);</span><br><span class="line">stream.map((k, v) -&gt; <span class="keyword">new</span> <span class="title class_">KeyValue</span>&lt;&gt;(k, v.toUpperCase())).to(<span class="string">&quot;ks1Out&quot;</span>,</span><br><span class="line">Produced.with(Serdes.Integer(), <span class="keyword">new</span> <span class="title class_">JsonSerde</span>&lt;&gt;()));</span><br><span class="line"><span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，由其创建的 <code>StreamBuilder</code> 对象管理的流会自动启动。您可以使用 <code>spring.kafka.streams.auto-startup</code> 属性自定义此行为。</p><p><a id="boot-features-kafka-extra-props"></a></p><h3 id="33-3-4、其他-Kafka-属性">33.3.4、其他 Kafka 属性</h3><p>自动配置支持的属性可在<a href="#common-application-properties">附录 A、常见应用程序属性</a>中找到。请注意，在大多数情况下，这些属性（连接符或驼峰命名）直接映射到 Apache Kafka 点连形式属性。有关详细信息，请参阅 Apache Kafka 文档。</p><p>这些属性中的前几个适用于所有组件（生产者【producer】、使用者【consumer】、管理者【admin】和流【stream】），但如果您希望使用不同的值，则可以在组件级别指定。Apache Kafka 重要性（优先级）属性设定为 HIGH、MEDIUM 或 LOW。Spring Boot 自动配置支持所有 HIGH 重要性属性，一些选择的 MEDIUM 和 LOW 属性，以及所有没有默认值的属性。</p><p>只有 Kafka 支持的属性的子集可以直接通过 <code>KafkaProperties</code> 类获得。如果您希望使用不受支持的其他属性配置生产者或消费者，请使用以下属性：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.kafka.properties.prop.one</span>=first</span><br><span class="line"><span class="attr">spring.kafka.admin.properties.prop.two</span>=second</span><br><span class="line"><span class="attr">spring.kafka.consumer.properties.prop.three</span>=third</span><br><span class="line"><span class="attr">spring.kafka.producer.properties.prop.four</span>=fourth</span><br><span class="line"><span class="attr">spring.kafka.streams.properties.prop.five</span>=fifth</span><br></pre></td></tr></table></figure><p>这将常见的 <code>prop.one</code> Kafka 属性设置为 <code>first</code>（适用于生产者、消费者和管理者），<code>prop.two</code> 管理者属性为 <code>second</code>，<code>prop.three</code> 消费者属性为 <code>third</code>，<code>prop.four</code> 生产者属性为 <code>fourth</code>，<code>prop.five</code> 流属性为 <code>fifth</code>。</p><p>您还可以按如下方式配置 Spring Kafka <code>JsonDeserializer</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.kafka.consumer.value-deserializer</span>=org.springframework.kafka.support.serializer.JsonDeserializer</span><br><span class="line"><span class="attr">spring.kafka.consumer.properties.spring.json.value.default.type</span>=com.example.Invoice</span><br><span class="line"><span class="attr">spring.kafka.consumer.properties.spring.json.trusted.packages</span>=com.example,org.acme</span><br></pre></td></tr></table></figure><p>同样，您可以禁用 <code>JsonSerializer</code> 在 header 中发送类型信息的默认行为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.kafka.producer.value-serializer</span>=org.springframework.kafka.support.serializer.JsonSerializer</span><br><span class="line"><span class="attr">spring.kafka.producer.properties.spring.json.add.type.headers</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>重要</strong></p><blockquote><p>以这种方式设置的属性将覆盖 Spring Boot 明确支持的任何配置项。</p></blockquote><p><a id="boot-features-resttemplate"></a></p><h2 id="34、使用-RestTemplate-调用-REST-服务">34、使用 <code>RestTemplate</code> 调用 REST 服务</h2><p>如果您的应用程序需要调用远程 REST 服务，这可以使用 Spring Framework 的 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html"><code>RestTemplate</code></a> 类。由于 <code>RestTemplate</code> 实例在使用之前通常需要进行自定义，因此 Spring Boot 不提供任何自动配置的 <code>RestTemplate</code> bean。但是，它会自动配置 <code>RestTemplateBuilder</code>，可在需要时创建 <code>RestTemplate</code> 实例。自动配置的 <code>RestTemplateBuilder</code> 确保将合适的 <code>HttpMessageConverters</code> 应用于 <code>RestTemplate</code> 实例。</p><p>以下代码展示了一个典型示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(RestTemplateBuilder restTemplateBuilder)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.restTemplate = restTemplateBuilder.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Details <span class="title function_">someRestCall</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.restTemplate.getForObject(<span class="string">&quot;/&#123;name&#125;/details&quot;</span>, Details.class, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p><code>RestTemplateBuilder</code> 包含许多可用于快速配置 ·RestTemplate· 的方法。例如，要添加 BASIC auth 支持，可以使用 <code>builder.basicAuthentication(&quot;user&quot;, &quot;password&quot;).build()</code>。</p></blockquote><p><a id="boot-features-resttemplate-customization"></a></p><h3 id="34-1、自定义-RestTemplate">34.1、自定义 RestTemplate</h3><p><code>RestTemplate</code> 自定义有三种主要方法，具体取决于您希望自定义的程度。</p><p>要想自定义的范围尽可能地窄，请注入自动配置的 <code>RestTemplateBuilder</code>，然后根据需要调用其方法。每个方法调用都返回一个新的 <code>RestTemplateBuilder</code> 实例，因此自定义只会影响当前构建器。</p><p>要在应用程序范围内添加自定义配置，请使用 <code>RestTemplateCustomizer</code> bean。所有这些 bean 都会自动注册到自动配置的 <code>RestTemplateBuilder</code>，并应用于使用它构建的所有模板。</p><p>以下示例展示了一个 customizer，它为除 <code>192.168.0.5</code> 之外的所有主机配置代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ProxyCustomizer</span> <span class="keyword">implements</span> <span class="title class_">RestTemplateCustomizer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(RestTemplate restTemplate)</span> &#123;</span><br><span class="line"><span class="type">HttpHost</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;proxy.example.com&quot;</span>);</span><br><span class="line"><span class="type">HttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create()</span><br><span class="line">.setRoutePlanner(<span class="keyword">new</span> <span class="title class_">DefaultProxyRoutePlanner</span>(proxy) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> HttpHost <span class="title function_">determineProxy</span><span class="params">(HttpHost target,</span></span><br><span class="line"><span class="params">HttpRequest request, HttpContext context)</span></span><br><span class="line"><span class="keyword">throws</span> HttpException &#123;</span><br><span class="line"><span class="keyword">if</span> (target.getHostName().equals(<span class="string">&quot;192.168.0.5&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">super</span>.determineProxy(target, request, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;).build();</span><br><span class="line">restTemplate.setRequestFactory(</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HttpComponentsClientHttpRequestFactory</span>(httpClient));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，最极端（也很少使用）的选择是创建自己的 <code>RestTemplateBuilder</code> bean。这样做会关闭 <code>RestTemplateBuilder</code> 的自动配置，并阻止使用任何 <code>RestTemplateCustomizer</code> bean。</p><p><a id="boot-features-webclient"></a></p><h2 id="35、使用-WebClient-调用-REST-服务">35、使用 <code>WebClient</code> 调用 REST 服务</h2><p>如果在 classpath 上存在 Spring WebFlux，则还可以选择使用 <code>WebClient</code> 来调用远程 REST 服务。与 <code>RestTemplate</code> 相比，该客户端更具函数式风格并且完全响应式。您可以在 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web-reactive.html#webflux-client">Spring Framework 文档的相关部分</a>中了解有关 <code>WebClient</code> 的更多信息。</p><p>Spring Boot 为您创建并预配置了一个 <code>WebClient.Builder</code>。强烈建议将其注入您的组件中并使用它来创建 <code>WebClient</code> 实例。Spring Boot 配置该构建器以共享 HTTP 资源，以与服务器相同的方式反射编解码器设置（请参阅 <a href="#boot-features-webflux-httpcodecs">WebFlux HTTP 编解码器自动配置</a>）等。</p><p>以下代码是一个典型示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebClient webClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(WebClient.Builder webClientBuilder)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.webClient = webClientBuilder.baseUrl(<span class="string">&quot;http://example.org&quot;</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Mono&lt;Details&gt; <span class="title function_">someRestCall</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.webClient.get().uri(<span class="string">&quot;/&#123;name&#125;/details&quot;</span>, name)</span><br><span class="line">.retrieve().bodyToMono(Details.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-webclient-runtime"></a></p><h3 id="35-1、WebClient-运行时">35.1、WebClient 运行时</h3><p>Spring Boot 将自动检测用于驱动 <code>WebClient</code> 的 <code>ClientHttpConnector</code>，具体取决于应用程序 classpath 上可用的类库。目前支持 Reactor Netty 和 Jetty RS 客户端。</p><p>默认情况下 <code>spring-boot-starter-webflux</code> starter 依赖于 <code>io.projectreactor.netty:reactor-netty</code>，它包含了服务器和客户端的实现。如果您选择将 <code>Jetty</code> 用作响应式服务器，则应添加 Jetty Reactive HTTP 客户端库依赖项 <code>org.eclipse.jetty:jetty-reactive-httpclient</code>。服务器和客户端使用相同的技术具有一定优势，因为它会自动在客户端和服务器之间共享 HTTP 资源。</p><p>开发人员可以通过提供自定义的 <code>ReactorResourceFactory</code> 或 <code>JettyResourceFactory</code> bean 来覆盖 Jetty 和 Reactor Netty 的资源配置 —— 这将同时应用于客户端和服务器。</p><p>如果您只希望覆盖客户端选项，则可以定义自己的 <code>ClientHttpConnector</code> bean 并完全控制客户端配置。</p><p>您可以在 <a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/web-reactive.html#webflux-client-builder">Spring Framework 参考文档中了解有关 <code>WebClient</code> 配置选项的更多信息</a>。</p><p><a id="boot-features-webclient-customization"></a></p><h3 id="35-2、自定义-WebClient">35.2、自定义 WebClient</h3><p><code>WebClient</code> 自定义有三种主要方法，具体取决于您希望自定义的程度。</p><p>要想自定义的范围尽可能地窄，请注入自动配置的 <code>WebClient.Builder</code>，然后根据需要调用其方法。<code>WebClient.Builder</code> 实例是有状态的：构建器上的任何更改都会影响到之后所有使用它创建的客户端。如果要使用相同的构建器创建多个客户端，可以考虑使用 <code>WebClient.Builder other = builder.clone();</code> 的方式克隆构建器。</p><p>要在应用程序范围内对所有 <code>WebClient.Builder</code> 实例添加自定义，可以声明 <code>WebClientCustomizer</code> bean 并在注入点局部更改 <code>WebClient.Builder</code>。</p><p>最后，您可以回退到原始 API 并使用 <code>WebClient.create()</code>。在这种情况下，不会应用自动配置或 <code>WebClientCustomizer</code>。</p><p><a id="boot-features-validation"></a></p><h2 id="36、验证">36、验证</h2><p>只要 classpath 上存在 JSR-303 实现（例如 Hibernate 验证器），就会自动启用 Bean Validation 1.1 支持的方法验证功能。这允许 bean 方法在其参数和/或返回值上使用 <code>javax.validation</code> 约束进行注解。带有此类注解方法的目标类需要在类级别上使用 <code>@Validated</code> 进行注解，以便搜索其内联约束注解的方法。</p><p>例如，以下服务触发第一个参数的验证，确保其大小在 8 到 10 之间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Archive <span class="title function_">findByCodeAndAuthor</span><span class="params">(<span class="meta">@Size(min = 8, max = 10)</span> String code,</span></span><br><span class="line"><span class="params">Author author)</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-email"></a></p><h2 id="37、发送邮件">37、发送邮件</h2><p>Spring Framework 提供了一个使用 <code>JavaMailSender</code> 接口发送电子邮件的简单抽象，Spring Boot 为其提供了自动配置以及一个 starter 模块。</p><p><strong>提示</strong></p><blockquote><p>有关如何使用 <code>JavaMailSender</code> 的详细说明，请参阅<a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/integration.html#mail">参考文档</a>。</p></blockquote><p>如果 <code>spring.mail.host</code> 和相关库（由 <code>spring-boot-starter-mail</code> 定义）可用，则创建默认的 <code>JavaMailSender</code>（如果不存在）。可以通过 <code>spring.mail</code> 命名空间中的配置项进一步自定义发件人。有关更多详细信息，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java"><code>MailProperties</code></a>。</p><p>特别是，某些默认超时时间的值是无限的，您可能想更改它以避免线程被无响应的邮件服务器阻塞，如下示例所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mail.properties.mail.smtp.connectiontimeout</span>=<span class="number">5000</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.timeout</span>=<span class="number">3000</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.writetimeout</span>=<span class="number">5000</span></span><br></pre></td></tr></table></figure><p>也可以使用 JNDI 中的现有 <code>Session</code> 配置一个 <code>JavaMailSender</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.mail.jndi-name</span>=mail/Session</span><br></pre></td></tr></table></figure><p>设置 <code>jndi-name</code> 时，它优先于所有其他与 <code>Session</code> 相关的设置。</p><p><a id="boot-features-jta"></a></p><h2 id="38、JTA-分布式事务">38、JTA 分布式事务</h2><p>Spring Boot 通过使用 <a href="http://www.atomikos.com/">Atomikos</a> 或 <a href="https://github.com/bitronix/btm">Bitronix</a> 嵌入式事务管理器来支持跨多个 XA 资源的分布式 JTA 事务。部署在某些 Java EE 应用服务器（Application Server）上也支持 JTA 事务。</p><p>当检测到 JTA 环境时，Spring 的 <code>JtaTransactionManager</code> 将用于管理事务。自动配置的 JMS、DataSource 和 JPA bean 已升级为支持 XA 事务。您可以使用标准的 Spring 方式（例如 <code>@Transactional</code>）来使用分布式事务。如果您处于 JTA 环境中并且仍想使用本地事务，则可以将 <code>spring.jta.enabled</code> 属性设置为 <code>false</code> 以禁用 JTA 自动配置。</p><p><a id="boot-features-jta-atomikos"></a></p><h3 id="38-1、使用-Atomikos-事务管理器">38.1、使用 Atomikos 事务管理器</h3><p><a href="https://www.atomikos.com/">Atomikos</a> 是一个流行的开源事务管理器，可以嵌入到 Spring Boot 应用程序中。您可以使用 <code>spring-boot-starter-jta-atomikos</code> starter 来获取相应的 Atomikos 库。Spring Boot 自动配置 Atomikos 并确保将合适的依赖设置应用于 Spring bean，以确保启动和关闭顺序正确。</p><p>默认情况下，Atomikos 事务日志将写入应用程序主目录（应用程序 jar 文件所在的目录）中的 <code>transaction-logs</code> 目录。您可以通过在 <code>application.properties</code> 文件中设置 <code>spring.jta.log-dir</code> 属性来自定义此目录的位置。也可用 <code>spring.jta.atomikos.properties</code> 开头的属性来自定义 Atomikos <code>UserTransactionServiceImp</code>。有关完整的详细信息，请参阅 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/api/org/springframework/boot/jta/atomikos/AtomikosProperties.html">AtomikosProperties Javadoc</a>。</p><p><strong>注意</strong></p><blockquote><p>为确保多个事务管理器可以安全地协调相同的资源管理器，必须为每个 Atomikos 实例配置唯一 ID。默认情况下，此 ID 是运行 Atomikos 的计算机的 IP 地址。在生产环境中要确保唯一性，应为应用程序的每个实例配置 <code>spring.jta.transaction-manager-id</code> 属性，并使用不同的值。</p></blockquote><p><a id="boot-features-jta-bitronix"></a></p><h3 id="38-2、使用-Bitronix-事务管理器">38.2、使用 Bitronix 事务管理器</h3><p><a href="https://github.com/bitronix/btm">Bitronix</a> 是一个流行的开源 JTA 事务管理器实现。您可以使用 <code>spring-boot-starter-jta-bitronix</code> starter 为您的项目添加合适的 Bitronix 依赖。与 Atomikos 一样，Spring Boot 会自动配置 Bitronix 并对 bean 进行后处理（post-processes），以确保启动和关闭顺序正确。</p><p>默认情况下，Bitronix 事务日志文件（<code>part1.btm</code> 和 <code>part2.btm</code>）将写入应用程序主目录中的 <code>transaction-logs</code> 目录。您可以通过设置 <code>spring.jta.log-dir</code> 属性来自定义此目录的位置。以 <code>spring.jta.bitronix.properties</code> 开头的属性绑定到了 <code>bitronix.tm.Configuration</code> bean，允许完全自定义。有关详细信息，请参阅 <a href="https://github.com/bitronix/btm/wiki/Transaction-manager-configuration">Bitronix 文档</a>。</p><p><strong>注意</strong></p><blockquote><p>为确保多个事务管理器能够安全地协调相同的资源管理器，必须为每个 Bitronix 实例配置唯一的 ID。默认情况下，此 ID 是运行 Bitronix 的计算机的 IP 地址。生产环境要确保唯一性，应为应用程序的每个实例配置 <code>spring.jta.transaction-manager-id</code> 属性，并使用不同的值。</p></blockquote><p><a id="boot-features-jta-javaee"></a></p><h3 id="38-3、使用-Java-EE-管理的事务管理器">38.3、使用 Java EE 管理的事务管理器</h3><p>如果将 Spring Boot 应用程序打包为 <code>war</code> 或 <code>ear</code> 文件并将其部署到 Java EE 应用程序服务器，则可以使用应用程序服务器的内置事务管理器。Spring Boot 尝试通过查找常见的 JNDI 位置（<code>java:comp/UserTransaction</code>、<code>java:comp/TransactionManager</code> 等）来自动配置事务管理器。如果使用应用程序服务器提供的事务服务，通常还需要确保所有资源都由服务器管理并通过 JNDI 暴露。Spring Boot 尝试通过在 JNDI 路径（<code>java:/JmsXA</code> 或 <code>java:/JmsXA</code>）中查找 <code>ConnectionFactory</code> 来自动配置 JMS，并且可以使用 <a href="#boot-features-connecting-to-a-jndi-datasource"><code>spring.datasource.jndi-name</code> 属性</a>来配置 <code>DataSource</code>。</p><p><a id="boot-features-jta-mixed-jms"></a></p><h3 id="38-4、混合使用-XA-与非-XA-JMS-连接">38.4、混合使用 XA 与非 XA JMS 连接</h3><p>使用 JTA 时，主 JMS <code>ConnectionFactory</code> bean 可识别 XA 并参与分布式事务。在某些情况下，您可能希望使用非 XA <code>ConnectionFactory</code> 处理某些 JMS 消息。例如，您的 JMS 处理逻辑可能需要比 XA 超时时间更长的时间。</p><p>如果要使用非 XA <code>ConnectionFactory</code>，可以注入 <code>nonXaJmsConnectionFactory</code> bean 而不是 <code>@Primary</code> <code>jmsConnectionFactory</code> bean。为了保持一致性，提供的 <code>jmsConnectionFactory</code> bean 还需要使用 <code>xaJmsConnectionFactory</code> 别名。</p><p>以下示例展示了如何注入 <code>ConnectionFactory</code> 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Inject the primary (XA aware) ConnectionFactory</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConnectionFactory defaultConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inject the XA aware ConnectionFactory (uses the alias and injects the same as above)</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;xaJmsConnectionFactory&quot;)</span></span><br><span class="line"><span class="keyword">private</span> ConnectionFactory xaConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inject the non-XA aware ConnectionFactory</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(&quot;nonXaJmsConnectionFactory&quot;)</span></span><br><span class="line"><span class="keyword">private</span> ConnectionFactory nonXaConnectionFactory;</span><br></pre></td></tr></table></figure><p><a id="boot-features-jta-supporting-alternative-embedded"></a></p><h3 id="38-5、支持嵌入式事务管理器">38.5、支持嵌入式事务管理器</h3><p><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jms/XAConnectionFactoryWrapper.java"><code>XAConnectionFactoryWrapper</code></a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/XADataSourceWrapper.java"><code>XADataSourceWrapper</code></a> 接口可用于支持其他嵌入式事务管理器。接口负责包装 <code>XAConnectionFactory</code> 和 <code>XADataSource</code> bean，并将它们公开为普通的 <code>ConnectionFactory</code> 和 <code>DataSource</code> bean，它们透明地加入分布式事务。<code>DataSource</code> 和 JMS 自动配置使用 JTA 变体，前提是您需要有一个 <code>JtaTransactionManager</code> bean 和在 <code>ApplicationContext</code> 中注册有的相应 XA 包装器（wrapper） bean。</p><p><a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/BitronixXAConnectionFactoryWrapper.java">BitronixXAConnectionFactoryWrapper</a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/BitronixXADataSourceWrapper.java">BitronixXADataSourceWrapper</a> 为如何编写 XA 包装器提供了很好示例。</p><p><a id="boot-features-hazelcast"></a></p><h2 id="39、Hazelcast">39、Hazelcast</h2><p>如果 <a href="https://hazelcast.com/">Hazelcast</a> 在 classpath 上并有合适的配置，则 Spring Boot 会自动配置一个可以在应用程序中注入的 <code>HazelcastInstance</code>。</p><p>如果定义了 <code>com.hazelcast.config.Config</code> bean，则 Spring Boot 会使用它。如果您的配置定义了实例名称，Spring Boot 会尝试查找现有的实例，而不是创建新实例。</p><p>您还可以通过配置指定要使用的 <code>hazelcast.xml</code> 配置文件，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.hazelcast.config</span>=classpath:config/my-hazelcast.xml</span><br></pre></td></tr></table></figure><p>否则，Spring Boot 会尝试从默认位置查找 Hazelcast 配置：工作目录或 classpath 根目录中的 <code>hazelcast.xml</code> 。我们还检查是否设置了 <code>hazelcast.config</code> 系统属性。有关更多详细信息，请参阅 <a href="http://docs.hazelcast.org/docs/latest/manual/html-single/">Hazelcast 文档</a>。</p><p>如果 classpath 中存在 <code>hazelcast-client</code>，则 Spring Boot 会首先尝试通过检查以下配置项来创建客户端：</p><ul><li>存在 <code>com.hazelcast.client.config.ClientConfig</code> bean。</li><li><code>spring.hazelcast.config</code> 属性定义的配置文件。</li><li>存在 <code>hazelcast.client.config</code> 系统属性。</li><li>工作目录中或 classpath 根目录下的 <code>hazelcast-client.xml</code>。</li></ul><p><strong>注意</strong></p><blockquote><p>Spring Boot 还为 Hazelcast 提供了<a href="#boot-features-caching-provider-hazelcast">缓存支持</a>。如果启用了缓存，<code>HazelcastInstance</code> 将自动包装在 <code>CacheManager</code> 实现中。</p></blockquote><p><a id="boot-features-quartz"></a></p><h2 id="40、Quartz-调度器">40、Quartz 调度器</h2><p>Spring Boot 提供了几种使用 <a href="http://www.quartz-scheduler.org/">Quartz 调度器</a>的便捷方式，它们来自 <code>spring-boot-starter-quartz</code> starter。如果 Quartz 可用，则 Spring Boot 将自动配置 <code>Scheduler</code>（通过 <code>SchedulerFactoryBean</code> 抽象）。</p><p>自动选取以下类型的 Bean 并将其与 <code>Scheduler</code> 关联起来：</p><ul><li><code>JobDetail</code>：定义一个特定的 job。可以使用 <code>JobBuilder</code> API 构建 <code>JobDetail</code> 实例。</li><li><code>Calendar</code>。</li><li><code>Trigger</code>：定义何时触发 job。</li></ul><p>默认使用内存存储方式的 <code>JobStore</code>。 但如果应用程序中有 <code>DataSource</code> bean，并且配置了 <code>spring.quartz.job-store-type</code> 属性，则可以配置基于 JDBC 的存储，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.quartz.job-store-type</span>=jdbc</span><br></pre></td></tr></table></figure><p>使用 JDBC 存储时，可以在启动时初始化 schema（表结构），如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.quartz.jdbc.initialize-schema</span>=always</span><br></pre></td></tr></table></figure><p><strong>警告</strong></p><blockquote><p>默认将使用 Quartz 库提供的标准脚本检测并初始化数据库。这些脚本会删除现有表，在每次重启时删除所有触发器。可以通过设置 <code>spring.quartz.jdbc.schema</code> 属性来提供自定义脚本。</p></blockquote><p>要让 Quartz 使用除应用程序主 <code>DataSource</code> 之外的 <code>DataSource</code>，请声明一个 <code>DataSource</code> bean，使用 <code>@QuartzDataSource</code> 注解其 <code>@Bean</code> 方法。这样做可确保 <code>SchedulerFactoryBean</code> 和 schema 初始化都使用 Quartz 指定的 <code>DataSource</code>。</p><p>默认情况下，配置创建的 job 不会覆盖已从持久 job 存储读取的已注册的 job。要启用覆盖现有的 job 定义，请设置 <code>spring.quartz.overwrite-existing-jobs</code> 属性。</p><p>Quartz 调取器配置可以使用 <code>spring.quartz</code> 属性和 <code>SchedulerFactoryBeanCustomizer</code> bean 进行自定义，它们允许以编程方式的 SchedulerFactoryBean 自定义。可以使用 <code>spring.quartz.properties.*</code> 自定义高级 Quartz 配置属性。</p><p><strong>注意</strong></p><blockquote><p>需要强调的是，<code>Executor</code> bean 与调度程序没有关联，因为 Quartz 提供了通过 <code>spring.quartz.properties</code> 配置调度器的方法。如果需要自定义执行器，请考虑实现 <code>SchedulerFactoryBeanCustomizer</code>。</p></blockquote><p>job 可以定义 <code>setter</code> 以注入数据映射属性。也可以以类似的方式注入常规的 bean，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SampleJob</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inject &quot;MyService&quot; bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyService</span><span class="params">(MyService myService)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inject the &quot;name&quot; job data property</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span></span><br><span class="line"><span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-task-execution-scheduling"></a></p><h2 id="41、任务执行与调度">41、任务执行与调度</h2><p>在上下文中没有 <code>Executor</code> bean 的情况下，Spring Boot 会自动配置一个有合理默认值的 <code>ThreadPoolTask​​Executor</code>，它可以自动与异步任务执行（<code>@EnableAsync</code>）和 Spring MVC 异步请求处理相关联。</p><p><strong>提示</strong></p><blockquote><p>如果您在上下文中定义了自定义 <code>Executor</code>，则常规任务执行（即 <code>@EnableAsync</code>）将透明地使用它，但不会配置 Spring MVC 支持，因为它需要 <code>AsyncTaskExecutor</code> 实现（名为 <code>applicationTaskExecutor</code>）。根据您的目标安排，您可以将 <code>Executor</code> 更改为 <code>ThreadPoolTask​​Executor</code>，或者定义 <code>Executor的ThreadPoolTask​​Executor</code> 和 <code>AsyncConfigurer</code> 来包装自定义的 <code>Executor</code>。</p><p>您可以使用自动配置的 <code>TaskExecutorBuilder</code> 来轻松创建实例，以复制默认的自动配置。</p></blockquote><p>线程池使用 8 个核心线程，可根据负载情况增加和减少。可以使用 <code>spring.task.execution</code> 命名空间对这些默认设置进行微调，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.task.execution.pool.max-threads</span>=<span class="number">16</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.queue-capacity</span>=<span class="number">100</span></span><br><span class="line"><span class="attr">spring.task.execution.pool.keep-alive</span>=<span class="number">10</span>s</span><br></pre></td></tr></table></figure><p>这会将线程池更改为使用有界队列，在队列满（100 个任务）时，线程池将增加到最多 16 个线程。当线程在闲置10 秒（而不是默认的 60 秒）时回收线程，池的收缩更为明显。</p><p>如果需要与调度任务执行（<code>@EnableScheduling</code>）相关联，可以自动配置一个 <code>ThreadPoolTaskScheduler</code>。默认情况下，线程池使用一个线程，可以使用 <code>spring.task.scheduling</code> 命名空间对这些设置进行微调。</p><p>如果需要创建自定义执行器或调度器，则在上下文中可以使用 <code>TaskExecutorBuilder</code> bean 和 <code>TaskSchedulerBuilder</code> bean。</p><p><a id="boot-features-integration"></a></p><h2 id="42、Spring-Integration">42、Spring Integration</h2><p>Spring Boot 为 <a href="https://projects.spring.io/spring-integration/">Spring Integration</a> 提供了一些便捷的使用方式，它们包含在 <code>spring-boot-starter-integration</code> starter 中。Spring Integration 为消息传递以及其他传输（如 HTTP、TCP 等）提供了抽象。如果 classpath 上存在 Spring Integration，则 Spring Boot 会通过 <code>@EnableIntegration</code> 注解对其进行初始化。</p><p>Spring Boot 还配置了一些由其他 Spring Integration 模块触发的功能。如果 <code>spring-integration-jmx</code> 也在 classpath 上，则消息处理统计信息将通过 JMX 发布。如果 <code>spring-integration-jdbc</code> 可用，则可以在启动时创建默认数据库模式，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.integration.jdbc.initialize-schema</span>=always</span><br></pre></td></tr></table></figure><p>有关更多详细信息，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java">IntegrationAutoConfiguration</a> 和 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationProperties.java">IntegrationProperties</a> 类。</p><p>默认情况下，如果存在 Micrometer <code>meterRegistry</code> bean，则 Micrometer 将管理 Spring Integration 的指标。如果您希望使用旧版 Spring Integration 度量，请将 <code>DefaultMetricsFactory</code> bean 添加到应用程序上下文中。</p><p><a id="boot-features-session"></a></p><h2 id="43、Spring-Session">43、Spring Session</h2><p>Spring Boot 为各种数据存储提供 <a href="https://projects.spring.io/spring-session/">Spring Session</a> 自动配置。在构建 Servlet Web 应用程序时，可以自动配置以下存储：</p><ul><li>JDBC</li><li>Redis</li><li>Hazelcast</li><li>MongoDB</li></ul><p>构建响应式 Web 应用程序时，可以自动配置以下存储：</p><ul><li>Redis</li><li>MongoDB</li></ul><p>如果 classpath 上存在单个 Spring Session 模块，则 Spring Boot 会自动使用该存储实现。如果您有多个实现，则必须选择要用于存储会话的 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/StoreType.java"><code>StoreType</code></a>。 例如，要使用 JDBC 作为后端存储，您可以按如下方式配置应用程序：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.session.store-type</span>=jdbc</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>可以将 <code>store-type</code> 设置为 <code>none</code> 来禁用 Spring Session。</p></blockquote><p>每个 store 都有自己的额外设置。例如，可以为 JDBC 存储定制表的名称，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.session.jdbc.table-name</span>=SESSIONS</span><br></pre></td></tr></table></figure><p>可以使用 <code>spring.session.timeout</code> 属性来设置会话的超时时间。如果未设置该属性，则自动配置将使用 <code>server.servlet.session.timeout</code> 的值。</p><p><a id="boot-features-jmx"></a></p><h2 id="44、通过-JMX-监控和管理">44、通过 JMX 监控和管理</h2><p>Java Management Extensions（JMX，Java 管理扩展）提供了一种监视和管理应用程序的标准机制。默认情况下，Spring Boot 会创建一个 ID 为 <code>mbeanServer</code> 的 <code>MBeanServer</code> bean，并暴露使用 Spring JMX 注解（<code>@ManagedResource</code>、<code>@ManagedAttribute</code> 或 <code>@ManagedOperation</code>）的 bean。</p><p>有关更多详细信息，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.2.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java"><code>JmxAutoConfiguration</code></a> 类。</p><p><a id="boot-features-testing"></a></p><h2 id="45、测试">45、测试</h2><p><a id="boot-features-websockets"></a></p><h2 id="46、WebSocket">46、WebSocket</h2><p>Spring Boot 为内嵌式 Tomcat、Jetty 和 Undertow 提供了 WebSocket 自动配置。如果将 war 文件部署到独立容器，则 Spring Boot 假定容器负责配置其 WebSocket 支持。</p><p>Spring Framework 为 MVC Web 应用程序提供了<a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/web.html#websocket">丰富的 WebSocket 支持</a>，可以通过 <code>spring-boot-starter-websocket</code> 模块轻松访问。</p><p>WebSocket 支持也可用于<a href="https://docs.spring.io/spring/docs/5.1.4.RELEASE/spring-framework-reference/web-reactive.html#webflux-websocket">响应式 Web 应用程序</a>，并且引入 WebSocket API 以及 <code>spring-boot-starter-webflux</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.websocket<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.websocket-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a id="boot-features-webservices"></a></p><h2 id="47、Web-Service">47、Web Service</h2><p>Spring Boot 提供 Web Service 自动配置，因此您要做的就是定义 <code>Endpoints</code>。</p><p>可以使用 <code>spring-boot-starter-webservices</code> 模块轻松访问 <a href="https://docs.spring.io/spring-ws/docs/3.0.6.RELEASE/reference/">Spring Web Service 功能</a>。</p><p>可以分别为 WSDL 和 XSD 自动创建 <code>SimpleWsdl11Definition</code> 和 <code>SimpleXsdSchema</code> bean。为此，请配置其位置，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.webservices.wsdl-locations</span>=classpath:/wsdl</span><br></pre></td></tr></table></figure><p><a id="boot-features-webservices-template"></a></p><h3 id="47-1、使用-WebServiceTemplate-调用-Web-Service">47.1、使用 <code>WebServiceTemplate</code> 调用 Web Service</h3><p>如果您需要从应用程序调用远程 Web 服务，则可以使用 <code>WebServiceTemplate</code> 类。由于 <code>WebServiceTemplate</code> 实例在使用之前通常需要进行自定义，因此 Spring Boot 不提供任何自动配置的 <code>WebServiceTemplate</code> bean。但是，它会自动配置 <code>WebServiceTemplateBuilder</code>，可在需要创建 <code>WebServiceTemplate</code> 实例时使用。</p><p>以下代码为一个典型示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> WebServiceTemplate webServiceTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">(WebServiceTemplateBuilder webServiceTemplateBuilder)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.webServiceTemplate = webServiceTemplateBuilder.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> DetailsResp <span class="title function_">someWsCall</span><span class="params">(DetailsReq detailsReq)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> (DetailsResp) <span class="built_in">this</span>.webServiceTemplate.marshalSendAndReceive(detailsReq, <span class="keyword">new</span> <span class="title class_">SoapActionCallback</span>(ACTION));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，<code>WebServiceTemplateBuilder</code> 使用 classpath 上的可用 HTTP 客户端库检测合适的基于 HTTP 的 <code>WebServiceMessageSender</code>。您还可以按如下方式自定义读取和连接的超时时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> WebServiceTemplate <span class="title function_">webServiceTemplate</span><span class="params">(WebServiceTemplateBuilder builder)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> builder.messageSenders(<span class="keyword">new</span> <span class="title class_">HttpWebServiceMessageSenderBuilder</span>()</span><br><span class="line">.setConnectTimeout(<span class="number">5000</span>).setReadTimeout(<span class="number">2000</span>).build()).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-developing-auto-configuration"></a></p><h2 id="49、创建自己的自动配置">49、创建自己的自动配置</h2><p>如果您在公司负责开发公共类库，或者如果您在开发一个开源或商业库，您可能希望开发自己的自动配置。自动配置类可以捆绑在外部 jar 中，他仍然可以被 Spring Boot 获取。</p><p>自动配置可以与提供自动配置代码的 starter 以及您将使用的类库库相关联。我们首先介绍构建自己的自动配置需要了解的内容，然后我们将继续介绍<a href="#boot-features-custom-starter">创建自定义 starter 所需的步骤</a>。</p><p><strong>提示</strong></p><blockquote><p>这里有一个<a href="https://github.com/snicoll-demos/spring-boot-master-auto-configuration">演示项目</a>展示了如何逐步创建 starter。</p></blockquote><p><a id="boot-features-understanding-auto-configured-beans"></a></p><h3 id="49-1、理解自定配置-Bean">49.1、理解自定配置 Bean</h3><p>在内部，自动配置使用了标准的 <code>@Configuration</code> 类来实现。<code>@Conditional</code> 注解用于约束何时应用自动配置。通常，自动配置类使用 <code>@ConditionalOnClass</code> 和 <code>@ConditionalOnMissingBean</code> 注解。这可确保仅在找到相关类时以及未声明您自己的 <code>@Configuration</code> 时才应用自动配置。</p><p>您可以浏览 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure"><code>spring-boot-autoconfigure</code></a> 的源代码，以查看 Spring 提供的 <code>@Configuration</code> 类（请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring.factories"><code>META-INF/spring.factories</code></a> 文件）。</p><p><a id="boot-features-locating-auto-configuration-candidates"></a></p><h3 id="49-2、找到候选的自动配置">49.2、找到候选的自动配置</h3><p>Spring Boot 会检查已发布 jar 中是否存在 <code>META-INF/spring.factories</code> 文件。该文件应列出 <code>EnableAutoConfiguration</code> key 下的配置类，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=\</span><br><span class="line">com.mycorp.libx.autoconfigure.LibXAutoConfiguration,\</span><br><span class="line">com.mycorp.libx.autoconfigure.LibXWebAutoConfiguration</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p><strong>必须</strong>以这种方式加载自动配置。确保它们在特定的包空间中定义，并且它们不能是组件扫描的目标。此外，自动配置类不应启用组件扫描以查找其他组件。应该使用特定的<code>@Imports</code> 来代替。</p></blockquote><p>如果需要按特定顺序应用配置，则可以使用 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureAfter.java"><code>@AutoConfigureAfter</code></a> 或 <a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigureBefore.java"><code>@AutoConfigureBefore</code></a> 注解。例如，如果您提供特定于 Web 的配置，则可能需要在<code>WebMvcAutoConfiguration</code> 之后应用您的类。</p><p>如果您想排序某些不应该彼此直接了解的自动配置，您也可以使用 <code>@AutoConfigureOrder</code>。该注解与常规 <code>@Order</code> 注解有相同的语义，但它为自动配置类提供了专用顺序。</p><p><a id="boot-features-condition-annotations"></a></p><h3 id="49-3、条件注解">49.3、条件注解</h3><p>您几乎总希望在自动配置类中包含一个或多个 <code>@Conditional</code> 注解。<code>@ConditionalOnMissingBean</code> 是一个常用的注解，其允许开发人员在对您的默认值不满意用于覆盖自动配置。</p><p>Spring Boot 包含许多 <code>@Conditional</code> 注解，您可以通过注解 <code>@Configuration</code> 类或单独的 <code>@Bean</code> 方法在您自己的代码中复用它们。这些注解包括：</p><ul><li><a href="#boot-features-class-conditions">第 49.3.1 节，类条件</a></li><li><a href="#boot-features-bean-conditions">第 49.3.2 节，Bean 条件</a></li><li><a href="#boot-features-property-conditions">第 49.3.3 节，属性条件</a></li><li><a href="#boot-features-resource-conditions">第 49.3.4 节，资源条件</a></li><li><a href="#boot-features-web-application-conditions">第 49.3.5 节，Web 应用程序条件</a></li><li><a href="#boot-features-spel-conditions">第 49.3.6 节，SpEL 表达式条件</a></li></ul><p><a id="boot-features-class-conditions"></a></p><h4 id="49-3-1、类条件">49.3.1、类条件</h4><p><code>@ConditionalOnClass</code> 和 <code>@ConditionalOnMissingClass</code> 注解允许根据特定类的是否存在来包含 <code>@Configuration</code> 类。由于使用 <a href="http://asm.ow2.org/">ASM</a> 解析注解元数据，您可以使用 <code>value</code> 属性来引用真实类，即使该类实际上可能不会出现在正在运行的应用程序的 classpath 中。如果您希望使用 <code>String</code> 值来指定类名，也可以使用 <code>name</code> 属性。</p><p>此机制不会以相同的方式应用于返回类型是条件的目标的 <code>@Bean</code> 方法：在方法上的条件应用之前，JVM 将加载类和可能处理的方法引用，如果找不到类，将发生失败。</p><p>要处理这种情况，可以使用单独的 <code>@Configuration</code> 类来隔离条件，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// Some conditions</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Auto-configured beans</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(EmbeddedAcmeService.class)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EmbeddedConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> EmbeddedAcmeService <span class="title function_">embeddedAcmeService</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>如果使用 <code>@ConditionalOnClass</code> 或 <code>@ConditionalOnMissingClass</code> 作为元注解的一部分来组成自己的组合注解，则必须使用 <code>name</code> 来引用类，在这种情况将不作处理。</p></blockquote><p><a id="boot-features-bean-conditions"></a></p><h4 id="49-3-2、Bean-条件">49.3.2、Bean 条件</h4><p><code>@ConditionalOnBean</code> 和 <code>@ConditionalOnMissingBean</code> 注解允许根据特定 bean 是否存在来包含 bean。您可以使用 <code>value</code> 属性按类型或使用 <code>name</code> 来指定 bean。<code>search</code> 属性允许您限制在搜索 bean 时应考虑的 <code>ApplicationContext</code> 层次结构。</p><p>放置在 <code>@Bean</code> 方法上时，目标类型默认为方法的返回类型，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAutoConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> MyService <span class="title function_">myService</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在前面的示例中，如果 <code>ApplicationContext</code> 中不包含 <code>MyService</code> 类型的 bean，则将创建 <code>myService</code> bean。</p><p><strong>提示</strong></p><blockquote><p>您需要非常小心地添加 bean 定义的顺序，因为这些条件是根据到目前为止已处理的内容进行计算的。因此，我们建议在自动配置类上仅使用 <code>@ConditionalOnBean</code> 和 <code>@ConditionalOnMissingBean</code> 注解（因为这些注解保证在添加所有用户定义的 bean 定义后加载）。</p></blockquote><p><strong>注意</strong></p><blockquote><p><code>@ConditionalOnBean</code> 和 <code>@ConditionalOnMissingBean</code> 不会阻止创建 <code>@Configuration</code> 类。在类级别使用这些条件并使用注解标记每个包含 <code>@Bean</code> 方法的唯一区别是，如果条件不匹配，前者会阻止将 <code>@Configuration</code> 类注册为 bean。</p></blockquote><p><a id="boot-features-property-conditions"></a></p><h4 id="49-3-3、属性条件">49.3.3、属性条件</h4><p><code>@ConditionalOnProperty</code> 注解允许基于 Spring Environment 属性包含配置。使用 <code>prefix</code> 和 <code>name</code> 属性指定需要检查的属性。默认情况下，匹配存在且不等于 <code>false</code> 的所有属性。您还可以使用 <code>havingValue</code> 和 <code>matchIfMissing</code> 属性创建更高级的检查。</p><p><a id="boot-features-resource-conditions"></a></p><h4 id="49-3-4、资源条件">49.3.4、资源条件</h4><p><code>@ConditionalOnResource</code> 注解仅允许在存在特定资源时包含配置。可以使用常用的 Spring 约定来指定资源，如下所示：<code>file:/home/user/test.dat</code>。</p><p><a id="boot-features-web-application-conditions"></a></p><h4 id="49-3-5、Web-应用程序条件">49.3.5、Web 应用程序条件</h4><p><code>@ConditionalOnWebApplication</code> 和 <code>@ConditionalOnNotWebApplication</code> 注解在应用程序为 <strong>Web 应用程序</strong>的情况下是否包含配置。Web 应用程序是使用 Spring <code>WebApplicationContext</code>，定义一个 <code>session</code> 范围或具有 <code>StandardServletEnvironment</code> 的任何应用程序。</p><p><a id="boot-features-spel-conditions"></a></p><h4 id="49-3-6、SpEL-表达式条件">49.3.6、SpEL 表达式条件</h4><p><code>@ConditionalOnExpression</code> 注解允许根据 <a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/core.html#expressions">SpEL 表达式</a>的结果包含配置。</p><p><a id="boot-features-test-autoconfig"></a></p><h4 id="49-4、测试自动配置">49.4、测试自动配置</h4><p>自动配置可能受许多因素的影响：用户配置（<code>@Bean</code> 定义和 <code>Environment</code> 自定义）、条件评估（存在特定的类库）等。具体而言，每个测试都应该创建一个定义良好的 <code>ApplicationContext</code>，它表示这些自定义的组合。<code>ApplicationContextRunner</code> 提供了一个好的实现方法。</p><p><code>ApplicationContextRunner</code> 通常被定义为测试类的一个字段，用于收集基本的通用配置。以下示例确保始终调用 <code>UserServiceAutoConfiguration</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ApplicationContextRunner</span> <span class="variable">contextRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextRunner</span>()</span><br><span class="line">.withConfiguration(AutoConfigurations.of(UserServiceAutoConfiguration.class));</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>如果必须定义多个自动配置，则无需按照与运行应用程序时完全相同的顺序调用它们的声明。</p></blockquote><p>每个测试都可以使用 runner 来表示特定的用例。例如，下面的示例调用用户配置（<code>UserConfiguration</code>）并检查自动配置是否正确退回。调用 <code>run</code> 提供了一个可以与 <code>Assert4J</code> 一起使用的回调上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">defaultServiceBacksOff</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.contextRunner.withUserConfiguration(UserConfiguration.class)</span><br><span class="line">.run((context) -&gt; &#123;</span><br><span class="line">assertThat(context).hasSingleBean(UserService.class);</span><br><span class="line">assertThat(context.getBean(UserService.class)).isSameAs(</span><br><span class="line">context.getBean(UserConfiguration.class).myUserService());</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserService <span class="title function_">myUserService</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserService</span>(<span class="string">&quot;mine&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以轻松自定义 <code>Environment</code>，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serviceNameCanBeConfigured</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.contextRunner.withPropertyValues(<span class="string">&quot;user.name=test123&quot;</span>).run((context) -&gt; &#123;</span><br><span class="line">assertThat(context).hasSingleBean(UserService.class);</span><br><span class="line">assertThat(context.getBean(UserService.class).getName()).isEqualTo(<span class="string">&quot;test123&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runner 还可用于展示 <code>ConditionEvaluationReport</code>。报告可以在 <code>INFO</code> 或 <code>DEBUG</code> 级别下打印。以下示例展示如何使用 <code>ConditionEvaluationReportLoggingListener</code> 在自动配置测试中打印报表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> autoConfigTest &#123;</span><br><span class="line"><span class="type">ConditionEvaluationReportLoggingListener</span> <span class="variable">initializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConditionEvaluationReportLoggingListener</span>(</span><br><span class="line">LogLevel.INFO);</span><br><span class="line"><span class="type">ApplicationContextRunner</span> <span class="variable">contextRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextRunner</span>()</span><br><span class="line">.withInitializer(initializer).run((context) -&gt; &#123;</span><br><span class="line"><span class="comment">// Do something...</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="_simulating_a_web_context"></a></p><h4 id="49-4-1、模拟一个-Web-上下文">49.4.1、模拟一个 Web 上下文</h4><p>如果需要测试一个仅在 Servlet 或响应式 Web 应用程序上下文中运行的自动配置，请分别使用 <code>WebApplicationContextRunner</code> 或 <code>ReactiveWebApplicationContextRunner</code>。</p><p><a id="_overriding_the_classpath"></a></p><h4 id="49-4-2、覆盖-Classpath">49.4.2、覆盖 Classpath</h4><p>还可以测试在运行时不存在特定类和/或包时发生的情况。 Spring Boot附带了一个可以由跑步者轻松使用的FilteredClassLoader。 在以下示例中，我们声明如果UserService不存在，则会正确禁用自动配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serviceIsIgnoredIfLibraryIsNotPresent</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.contextRunner.withClassLoader(<span class="keyword">new</span> <span class="title class_">FilteredClassLoader</span>(UserService.class))</span><br><span class="line">.run((context) -&gt; assertThat(context).doesNotHaveBean(<span class="string">&quot;userService&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-custom-starter"></a></p><h3 id="49-5、创建自己的-Starter">49.5、创建自己的 Starter</h3><p>一个完整的 Spring Boot starter 类库可能包含以下组件：</p><ul><li><code>autoconfigure</code> 模块，包含自动配置代码。</li><li><code>starter</code> 模块，它提供对 <code>autoconfigure</code> 模块依赖关系以及类库和常用的其他依赖关系。简而言之，添加 starter 应该提供该库开始使用所需的一切。</li></ul><p><strong>提示</strong></p><blockquote><p>如果您不想将这两个模块分开，则可以将自动配置代码和依赖关系管理组合在一个模块中。</p></blockquote><p><a id="boot-features-custom-starter-naming"></a></p><h4 id="49-5-1、命名">49.5.1、命名</h4><p>您应该确保为您的 starter 提供一个合适的命名空间。即使您使用其他 Maven <code>groupId</code>，也不要使用 <code>spring-boot</code> 作为模块名称的开头。我们可能会为您以后自动配置的内容提供官方支持。</p><p>根据经验，您应该在 starter 后命名一个组合模块。例如，假设您正在为 <strong>acme</strong> 创建一个 starter，并且您将自动配置模块命名为 <code>acme-spring-boot-autoconfigure</code>，将 starter 命名为 <code>acme-spring-boot-starter</code>。如果您只有一个组合这两者的模块，请将其命名为 <code>acme-spring-boot-starter</code>。</p><p>此外，如果您的 starter 提供配置 key，请为它们使用唯一的命名空间。尤其是，不要将您的 key 包含在 Spring Boot 使用的命名空间中（例如 <code>server</code>、<code>management</code>、<code>spring</code> 等）。如果您使用了相同的命名空间，我们将来可能会以破坏您的模块的方式来修改这些命名空间。</p><p>确<a href="#configuration-metadata-annotation-processor">保触发元数据生成</a>，以便为您的 key 提供 IDE 帮助。您可能想查看生成的元数据（<code>META-INF/spring-configuration-metadata.json</code>）以确保您的 key 记录是否正确。</p><p><a id="boot-features-custom-starter-module-autoconfigure"></a></p><h4 id="49-5-2、autoconfigure-模块">49.5.2、<code>autoconfigure</code> 模块</h4><p><code>autoconfigure</code> 模块包含类库开始使用所需的所有内容。它还可以包含配置 key 定义（例如 <code>@ConfigurationProperties</code>）和任何可用于进一步自定义组件初始化方式的回调接口。</p><p><strong>提示</strong></p><blockquote><p>您应该将类库的依赖项标记为可选，以便您可以更轻松地在项目中包含 <code>autoconfigure</code> 模块。如果以这种方式执行，则不提供类库，默认情况下，Spring Boot 将会退出。</p></blockquote><p>Spring Boot 使用注解处理器来收集元数据文件（<code>META-INF/spring-autoconfigure-metadata.properties</code>）中自动配置的条件。如果该文件存在，则用于快速过滤不匹配的自动配置，缩短启动时间。建议在包含自动配置的模块中添加以下依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 Gradle 4.5 及更早版本时，应在 <code>compileOnly</code> 配置中声明依赖项，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compileOnly <span class="string">&quot;org.springframework.boot:spring-boot-autoconfigure-processor&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Gradle 4.6 及更高版本时，应在 <code>annotationProcessor</code> 配置中声明依赖项，如下所示：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">annotationProcessor <span class="string">&quot;org.springframework.boot:spring-boot-autoconfigure-processor&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-custom-starter-module-starter"></a></p><h4 id="49-5-3、Starter-模块">49.5.3、Starter 模块</h4><p>starter 真的是一个空 jar。它的唯一目的是为使用类库提供必要的依赖项。您可以将其视为使用类库的一切基础。</p><p>不要对添加 starter 的项目抱有假设想法。如果您自动配置的库经常需要其他 starter，请一并声明它们。如果可选依赖项的数量很多，则提供一组适当的默认依赖项可能很难，因为您本应该避免包含对常用库的使用不必要的依赖项。换而言之，您不应该包含可选的依赖项。</p><p><strong>注意</strong></p><blockquote><p>无论哪种方式，您的 starter 必须直接或间接引用核心 Spring Boot starter（<code>spring-boot-starter</code>）（如果您的 starter 依赖于另一个 starter ，则无需添加它）。如果只使用自定义 starter 创建项目，则 Spring Boot 的核心功能将通过存在的核心 starter 来实现。</p></blockquote><p><a id="boot-features-kotlin"></a></p><h2 id="50、Kotlin-支持">50、Kotlin 支持</h2><p><a href="https://kotlinlang.org/">Kotlin</a> 是一种针对 JVM（和其他平台）的静态类型语言，它可编写出简洁而优雅的代码，同时提供与使用 Java 编写的现有库的<a href="https://kotlinlang.org/docs/reference/java-interop.html">互操作性</a>。</p><p>Spring Boot 通过利用其他 Spring 项目（如 Spring Framework、Spring Data 和 Reactor）的支持来提供 Kotlin 支持。有关更多信息，请参阅 <a href="https://docs.spring.io/spring/docs/5.1.5.RELEASE/spring-framework-reference/languages.html#kotlin">Spring Framework Kotlin 支持文档</a>。</p><p>开始学习 Spring Boot 和 Kotlin 最简单方法是遵循这个<a href="https://spring.io/guides/tutorials/spring-boot-kotlin/">全面教程</a>。您可以通过 <a href="https://start.spring.io/#!language=kotlin">start.spring.io</a> 创建新的 Kotlin 项目。如果您需要支持，请免费加入 <a href="http://slack.kotlinlang.org/">Kotlin Slack</a> 的 #spring 频道或使用 <a href="https://stackoverflow.com/questions/tagged/spring+kotlin">Stack Overflow</a> 上的 <code>spring</code> 和 <code>kotlin</code> 标签提问。</p><p><a id="boot-features-kotlin-requirements"></a></p><h3 id="50-1、要求">50.1、要求</h3><p>Spring Boot 支持 Kotlin 1.2.x。要使用 Kotlin，classpath 下必须存在 <code>org.jetbrains.kotlin:kotlin-stdlib</code> 和 <code>org.jetbrains.kotlin:kotlin-reflect</code>。也可以使用 <code>kotlin-stdlib</code> 的变体 <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code>。</p><p>由于 <a href="https://discuss.kotlinlang.org/t/classes-final-by-default/166">Kotlin 类默认为 final</a>，因此您可能需要配置 <a href="https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support">kotlin-spring</a> 插件以自动打开 <code>Spring-annotated</code> 类，以便可以代理它们。</p><p>在 Kotlin 中序列化/反序列化 JSON 数据需要使用 <a href="https://github.com/FasterXML/jackson-module-kotlin">Jackson 的 Kotlin 模块</a>。在 classpath 中找到它时会自动注册。如果 Jackson 和 Kotlin 存在但 Jackson Kotlin 模块不存在，则会记录警告消息。</p><p><strong>提示</strong></p><blockquote><p>如果在 <a href="https://start.spring.io/#!language=kotlin">start.spring.io</a> 上创建 Kotlin 项目，则默认提供这些依赖项和插件。</p></blockquote><p><a id="boot-features-kotlin-null-safety"></a></p><h3 id="50-2、Null-安全">50.2、Null 安全</h3><p>Kotlin 的一个关键特性是 <a href="https://kotlinlang.org/docs/reference/null-safety.html">null 安全</a>。它在编译时处理空值，而不是将问题推迟到运行时并遇到 <code>NullPointerException</code>。这有助于消除常见的错误来源，而无需支付像 <code>Optional</code> 这样的包装器的成本。Kotlin 还允许使用有可空值的，如 <a href="http://www.baeldung.com/kotlin-null-safety">Kotlin null 安全综合指南</a>中所述。</p><p>虽然 Java 不允许在其类型系统中表示 null 安全，但 Spring Framework、Spring Data 和 Reactor 现在通过易于使用的工具的注解提供其 API 的安全性。默认情况下，Kotlin 中使用的 Java API 类型被识别为放宽空检查的<a href="https://kotlinlang.org/docs/reference/java-interop.html#null-safety-and-platform-types">平台类型</a>。<a href="https://kotlinlang.org/docs/reference/java-interop.html#jsr-305-support">Kotlin 对 JSR 305 注解的支持</a>与可空注解相结合，为 Kotlin 中 Spring API 相关的代码提供了空安全。</p><p>可以通过使用以下选项添加 <code>-Xjsr305</code> 编译器标志来配置 JSR 305 检查：<code>-Xjsr305=&#123;strict|warn|ignore&#125;</code>。默认行为与 <code>-Xjsr305=warn</code> 相同。在从 Spring API 推断出的 Kotlin 类型中需要考虑 null 安全的 <code>strict</code> 值，但是应该使用 Spring API 可空声明甚至可以在次要版本之间发展并且将来可能添加更多检查的方案。</p><p><strong>警告</strong></p><blockquote><p>尚不支持泛型类型参数、<code>varargs</code> 和数组元素可空性。有关最新信息，请参见 <a href="https://jira.spring.io/browse/SPR-15942">SPR-15942</a>。另请注意，Spring Boot 自己的 API <a href="https://github.com/spring-projects/spring-boot/issues/10712">尚未注解</a>。</p></blockquote><p><a id="boot-features-kotlin-api"></a></p><h3 id="50-3、Kotlin-API">50.3、Kotlin API</h3><p><a id="boot-features-kotlin-api-runapplication"></a></p><h4 id="50-3-1、runApplication">50.3.1、runApplication</h4><p>Spring Boot 提供了使用 <code>runApplication&lt;MyApplication&gt;(*args)</code> 运行应用程序的惯用方法，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.runApplication</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyApplication</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">runApplication&lt;MyApplication&gt;(*args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是 <code>SpringApplication.run(MyApplication::class.java, *args)</code> 的替代方式。它还允许自定义应用程序，如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runApplication&lt;MyApplication&gt;(*args) &#123;</span><br><span class="line">setBannerMode(OFF)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="boot-features-kotlin-api-extensions"></a></p><h4 id="50-3-2、扩展">50.3.2、扩展</h4><p>Kotlin <a href="https://kotlinlang.org/docs/reference/extensions.html">扩展</a>提供了使用附加功能扩展现有类的能力。Spring Boot Kotlin API 利用这些扩展为现有 API 添加新的 Kotlin 特定便利。</p><p>提供的 <code>TestRestTemplate</code> 扩展类似于 Spring Framework 为 <code>RestOperations</code> 提供的。除此之外，扩展使得利用 Kotlin reified 类型参数变为可能。</p><p><a id="boot-features-kotlin-dependency-management"></a></p><h3 id="50-4、依赖管理">50.4、依赖管理</h3><p>为了避免在 classpath 上混合不同版本的 Kotlin 依赖项，提供了以下 Kotlin 依赖项的依赖项管理：</p><ul><li><code>kotlin-reflect</code></li><li><code>kotlin-runtime</code></li><li><code>kotlin-stdlib</code></li><li><code>kotlin-stdlib-jdk7</code></li><li><code>kotlin-stdlib-jdk8</code></li><li><code>kotlin-stdlib-jre7</code></li><li><code>kotlin-stdlib-jre8</code></li></ul><p>使用 Maven，可以通过 <code>kotlin.version</code> 属性自定义 Kotlin 版本，并为 <code>kotlin-maven-plugin</code> 提供插件管理。使用 Gradle，Spring Boot 插件会自动将 <code>kotlin.version</code> 与 Kotlin 插件的版本保一致。</p><p><a id="boot-features-kotlin-configuration-properties"></a></p><h3 id="50-5、-ConfigurationProperties">50.5、<code>@ConfigurationProperties</code></h3><p><code>@ConfigurationProperties</code> 目前仅适用于 <code>lateinit</code> 或可空的 <code>var</code> 属性（建议使用前者），因为<a href="https://github.com/spring-projects/spring-boot/issues/8762">尚不支持</a>由构造函数初始化的不可变类。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(<span class="string">&quot;example.kotlin&quot;</span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KotlinExampleProperties</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> name: String</span><br><span class="line"></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> description: String</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> myService = MyService()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> apiToken: String</span><br><span class="line"></span><br><span class="line"><span class="keyword">lateinit</span> <span class="keyword">var</span> uri: URI</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>要使用注解处理器生成<a href="#configuration-metadata-annotation-processor">您自己的元数据</a>，应使用 <code>spring-boot-configuration-processor</code> 依赖<a href="https://kotlinlang.org/docs/reference/kapt.html">配置 <code>kapt</code></a>。</p></blockquote><p><a id="boot-features-kotlin-testing"></a></p><h3 id="50-6、测试">50.6、测试</h3><p>虽然可以使用 JUnit 4（<code>spring-boot-starter-test</code> 提供的默认配置）来测试 Kotlin 代码，但建议使用 JUnit 5。JUnit 5 允许测试类实例化一次，并在所有类的测试中复用。这使得可以在非静态方法上使用 <code>@BeforeAll</code> 和 <code>@AfterAll</code> 注解，这非常适合 Kotlin。</p><p>要使用 JUnit 5，请从 <code>spring-boot-starter-test</code> 中排除 <code>junit:junit</code> 依赖项，然后添加 JUnit 5 依赖项，并相应地配置 Maven 或 Gradle 插件。有关更多详细信息，请参阅 <a href="https://junit.org/junit5/docs/current/user-guide/#dependency-metadata-junit-jupiter-samples">JUnit 5 文档</a>。您还需要<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle-changing-default">将测试实例生命周期切换为 <strong>per-class</strong></a>。</p><p>为了模拟 Kotlin 类，建议使用 <a href="https://mockk.io/">Mockk</a>。如果需要 Mockk 等效的 Mockito 特定的 <a href="boot-features-testing-spring-boot-applications-mocking-beans"><code>@MockBean</code> 和 <code>@SpyBean</code> 注解</a>，则可以使用 <a href="https://github.com/Ninja-Squad/springmockk">SpringMockK</a>，它提供类似的 <code>@MockkBean</code> 和 <code>@SpykBean</code> 注解。</p><p><a id="boot-features-kotlin-resources"></a></p><h3 id="50-7、资源">50.7、资源</h3><p><a id="boot-features-kotlin-resources-further-reading"></a></p><h4 id="50-7-1、进阶阅读">50.7.1、进阶阅读</h4><ul><li><a href="https://kotlinlang.org/docs/reference/">Kotlin 语言参考</a></li><li><a href="http://slack.kotlinlang.org/">Kotlin Slack</a>（有专用的 #spring 频道）</li><li><a href="https://stackoverflow.com/questions/tagged/spring+kotlin">Stackoverflow 上 <code>spring</code> 和 <code>kotlin</code> 标签</a></li><li><a href="https://try.kotlinlang.org/">在浏览器中尝试 Kotlin</a></li><li><a href="https://blog.jetbrains.com/kotlin/">Kotlin 博客</a></li><li><a href="https://kotlin.link/">Awesome Kotlin</a></li><li><a href="https://spring.io/guides/tutorials/spring-boot-kotlin/">教程：使用 Spring Boot 和 Kotlin 构建 Web 应用程序</a></li><li><a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin">使用 Kotlin 开发 Spring Boot 应用程序</a></li><li><a href="https://spring.io/blog/2016/03/20/a-geospatial-messenger-with-kotlin-spring-boot-and-postgresql">使用 Kotlin、Spring Boot 和 PostgreSQL 开发地理信使</a></li><li><a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0">在 Spring Framework 5.0 中引入 Kotlin 支持</a></li><li><a href="https://spring.io/blog/2017/08/01/spring-framework-5-kotlin-apis-the-functional-way">Spring Framework 5 Kotlin API 实现函数式</a></li></ul><p><a id="boot-features-kotlin-resources-examples"></a></p><h4 id="50-7-2、示例">50.7.2、示例</h4><ul><li><a href="https://github.com/sdeleuze/spring-boot-kotlin-demo">spring-boot-kotlin-demo</a>：常规的 Spring Boot + Spring Data JPA 项目</li><li><a href="https://github.com/mixitconf/mixit">mixit</a>：Spring Boot 2 + WebFlux + Reactive Spring Data MongoDB</li><li><a href="https://github.com/sdeleuze/spring-kotlin-fullstack">spring-kotlin-fullstack</a>：WebFlux Kotlin 全栈示例，在前端使用 Kotlin2js 代替 JavaScript 和 TypeScript</li><li><a href="https://github.com/spring-petclinic/spring-petclinic-kotlin">spring-petclinic-kotlin</a>：Spring PetClinic 示例应用的 Kotlin 版本</li><li><a href="https://github.com/sdeleuze/spring-kotlin-deepdive">spring-kotlin-deepdive</a>：将Boot 1.0 + Java 逐步迁移到 Boot 2.0 + Kotlin</li></ul><p><a id="boot-features-whats-next"></a></p><h2 id="51、下一步">51、下一步</h2><p>如果您想了解本节中讨论的任何类目的更多信息，可以查看 <a href="https://docs.spring.io/spring-boot/docs/2.1.3.RELEASE/api">Spring Boot API 文档</a>，也可以直接浏览<a href="https://github.com/spring-projects/spring-boot/tree/v2.1.3.RELEASE">源代码</a>。如果您有具体问题，请查看 <a href="howto.md">how-to</a> 部分。</p><p>如果您对 Spring Boot 的核心功能感到满意，可以继续阅读有关生产就绪功能的内容。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03Spring Boot的正式使用</title>
      <link href="/posts/5cfa102f.html"/>
      <url>/posts/5cfa102f.html</url>
      
        <content type="html"><![CDATA[<p><a id="using-boot"></a></p><h1>三、使用 Spring Boot</h1><p>本章节将详细介绍如何使用 Spring Boot。它覆盖了诸如构建系统、自动配置和如何运行应用等主题。我们还介绍一些 Spring Boot 最佳实践。虽然 Spring Boot 并没有什么特别（它只是另一个您可以使用的类库），但仍然有一些建议可以让您的开发工作变得更加容易。</p><p>如果您是刚开始使用 Spring Boot，那么在深入本部分之前，您应该先阅读<a href="#getting-started">入门部分</a>。</p><p><a id="using-boot-build-systems"></a></p><h2 id="13、构建系统">13、构建系统</h2><p>强烈推荐您选择一个支持<a href="#using-boot-dependency-management">依赖管理</a>的构建系统, 您可以使用它将 artifact 发布到 Maven Central 仓库。我们建议您选择 Maven 或者 Gradle。虽然可以让 Spring Boot 与其它构建系统（如 Ant）配合工作，但它们不会得到特别好的支持。</p><p><a id="using-boot-dependency-management"></a></p><h3 id="13-1、依赖管理">13.1、依赖管理</h3><p>每一次 Spring Boot 发行都提供了一个它所支持的依赖清单。实际上，您不需要为构建配置提供任何依赖的版本，因为 Spring Boot 已经帮您管理这些了。当您升级 Spring Boot 时，这些依赖也将以一致的方式进行升级。</p><p><strong>注意</strong></p><blockquote><p>如果您觉得有必要，您仍然可以指定一个版本并覆盖 Spring Boot 所推荐的。</p></blockquote><p>该清单包含了全部可以与 Spring Boot 一起使用的 spring 模块以及第三方类库，可作为标准<a href="#using-boot-maven-without-a-parent">材料清单（<code>spring-boot-dependencies</code>）</a>，并且可以与 <a href="#using-boot-maven-parent-pom">Maven</a> 和 <a href="#using-boot-gradle">Gradle</a> 一起使用。</p><p><strong>警告</strong></p><blockquote><p>Spring Boot 的每一次发行都会基于一个 Spring Framework 版本，因此我们<strong>强烈</strong>建议您不要指定指定它的版本。</p></blockquote><p><a id="using-boot-maven"></a></p><h3 id="13-2、Maven">13.2、Maven</h3><p>Maven 用户可以继承 <code>spring-boot-starter-parent</code> 项目以获取合适的默认值，父项目提供了以下功能：</p><ul><li>Java 1.8 作为默认编译器级别。</li><li>源代码使用 UTF-8 编码。</li><li><a href="#using-boot-dependency-management">依赖管理部分</a>继承自 <code>spring-boot-dependencies</code> 的 POM，允许您省略常见依赖的 <code>&lt;version&gt;</code> 标签。</li><li>合理的<a href="https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html">资源过滤</a>。</li><li>合适的插件配置（<a href="http://www.mojohaus.org/exec-maven-plugin/">exec plugin</a>、<a href="https://github.com/ktoso/maven-git-commit-id-plugin">Git commit ID</a>、<a href="https://maven.apache.org/plugins/maven-shade-plugin/">shade</a>）。</li><li>针对 <code>application.properties</code> 和 <code>application.yml</code> 资源的合理过滤，包括特定 profile 的文件（例如 <code>application-foo.properties</code> 和 <code>application-foo.yml</code>）</li></ul><p>注意：由于 <code>application.properties</code> 和 <code>application.yml</code> 文件接受 Spring 风格的占位符（<code>$&#123;​...&#125;</code>），因此 Maven 过滤改为使用 <code>@..@</code> 占位符（您可以使用 Maven 的 <code>resource.delimiter</code> 属性重写它）</p><p><a id="using-boot-maven-parent-pom"></a></p><h4 id="13-2-1、继承-Starter-Parent">13.2.1、继承 Starter Parent</h4><p>要将项目配置继承 <code>spring-boot-starter-parent</code>，只需要按以下方式设置 <code>parent</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 从 Spring Boot 继承默认配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>您只需要在此依赖上指定 Spring Boot 的版本号。如果您要导入其它 starter，则可以放心地省略版本号。</p></blockquote><p>通过该设置，您还可以重写自己项目中的配置属性来覆盖个别依赖。例如，要升级到另一个 Spring Data 发行版本，您需要将以下内容添加到 <code>pom.xml</code> 文件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-data-releasetrain.version</span>&gt;</span>Fowler-SR2<span class="tag">&lt;/<span class="name">spring-data-releasetrain.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>查看 <a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-dependencies/pom.xml"><code>spring-boot-dependencies</code> pom</a> 以获取受支持的属性清单。</p></blockquote><p><a id="using-boot-maven-without-a-parent"></a></p><h4 id="13-2-2、不使用父-POM">13.2.2、不使用父 POM</h4><p>不是每个人都喜欢从 <code>spring-boot-starter-parent</code> 继承 POM。您可能需要使用自己公司标准的父 POM，或者您可能只是希望明确地声明所有 Maven 配置。</p><p>如果您不想使用 <code>spring-boot-starter-parent</code>，则仍然可以通过使用 <code>scope=import</code> 依赖来获得依赖管理（但不是插件管理）的好处：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从 Spring Boot 导入依赖管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上所述，上述示例设置不会让您使用属性来覆盖个别依赖。要达到相同的目的，需要在 <code>spring-boot-dependencies</code> 项<strong>之前</strong>在项目的 <code>dependencyManagement</code> 中添加一项。例如，要升级到另一个 Spring Data 发行版，您可以将以下元素添加到 <code>pom.xml</code>中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 覆盖 Spring Boot 提供的 Spring Data --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-releasetrain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Fowler-SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>以上示例中，我们指定了一个 <strong>BOM</strong>，但是任何的依赖类型都可以用这个方法来重写。</p></blockquote><p><a id="using-boot-maven-plugin"></a></p><h4 id="13-2-3、使用-Spring-Boot-Maven-插件">13.2.3、使用 Spring Boot Maven 插件</h4><p>Spring Boot 包括了一个 <a href="#build-tool-plugins-maven-plugin">Maven 插件</a>，它可以将项目打包成一个可执行 jar。如果要使用它，请将插件添加到您的 <code>&lt;plugins&gt;</code> 中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>如果您使用了 Spring Boot starter 的父 pom，则只需要添加插件。除非您要修改父级中定义的设置，否则不需要进行配置。</p></blockquote><p><a id="using-boot-gradle"></a></p><h3 id="13-3、Gradle">13.3、Gradle</h3><p>要了解如何使用 Spring Boot 和 Gradle，请参阅 Spring Boot 的 Gradle 插件文档：</p><ul><li>参考文档（<a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/gradle-plugin/reference/html">HTML</a> 与 <a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/gradle-plugin/reference/pdf/spring-boot-gradle-plugin-reference.pdf">PDF</a>）</li><li><a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/gradle-plugin/api">API</a></li></ul><p><a id="using-boot-ant"></a></p><h3 id="13-4、Ant">13.4、Ant</h3><p>可以使用 Apache Ant+Ivy 构建 Spring Boot 项目。<code>spring-boot-antlib</code> AntLib 模块也可以帮助 Ant 创建可执行 jar 文件。</p><p>要声明依赖，可参考以下一个典型的 <code>ivy.xml</code> 文件内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ivy-module</span> <span class="attr">version</span>=<span class="string">&quot;2.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">info</span> <span class="attr">organisation</span>=<span class="string">&quot;org.springframework.boot&quot;</span> <span class="attr">module</span>=<span class="string">&quot;spring-boot-sample-ant&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configurations</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conf</span> <span class="attr">name</span>=<span class="string">&quot;compile&quot;</span> <span class="attr">description</span>=<span class="string">&quot;everything needed to compile this module&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conf</span> <span class="attr">name</span>=<span class="string">&quot;runtime&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;compile&quot;</span> <span class="attr">description</span>=<span class="string">&quot;everything needed to run this module&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configurations</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span> <span class="attr">org</span>=<span class="string">&quot;org.springframework.boot&quot;</span> <span class="attr">name</span>=<span class="string">&quot;spring-boot-starter&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">rev</span>=<span class="string">&quot;$&#123;spring-boot.version&#125;&quot;</span> <span class="attr">conf</span>=<span class="string">&quot;compile&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ivy-module</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个典型的 <code>build.xml</code> 大概是这样：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:ivy</span>=<span class="string">&quot;antlib:org.apache.ivy.ant&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:spring-boot</span>=<span class="string">&quot;antlib:org.springframework.boot.ant&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;myapp&quot;</span> <span class="attr">default</span>=<span class="string">&quot;build&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spring-boot.version&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2.0.0.RELEASE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;resolve&quot;</span> <span class="attr">description</span>=<span class="string">&quot;--&gt; retrieve dependencies with ivy&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ivy:retrieve</span> <span class="attr">pattern</span>=<span class="string">&quot;lib/[conf]/[artifact]-[type]-[revision].[ext]&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;classpaths&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;resolve&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;compile.classpath&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;lib/compile&quot;</span> <span class="attr">includes</span>=<span class="string">&quot;*.jar&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;init&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;classpaths&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;build/classes&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;compile&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;init&quot;</span> <span class="attr">description</span>=<span class="string">&quot;compile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javac</span> <span class="attr">srcdir</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">destdir</span>=<span class="string">&quot;build/classes&quot;</span> <span class="attr">classpathref</span>=<span class="string">&quot;compile.classpath&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;build&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;compile&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-boot:exejar</span> <span class="attr">destfile</span>=<span class="string">&quot;build/myapp.jar&quot;</span> <span class="attr">classes</span>=<span class="string">&quot;build/classes&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">spring-boot:lib</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">&quot;lib/runtime&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">spring-boot:lib</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">spring-boot:exejar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>如果您不想使用 <code>spring-boot-antlib</code> 模块，请参阅第 84.10 节：<a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#howto-build-an-executable-archive-with-ant"><strong>使用 Ant 构建可执行归档文件</strong></a>，无需使用 <code>spring-boot-antlib</code>。</p></blockquote><p><a id="using-boot-starter"></a></p><h3 id="13-5、Starter">13.5、Starter</h3><p>Starter 是一组惯例依赖描述资源，可以包含在应用中。从 starter 中，您可以获得所需的所有 Spring 和相关技术的一站式支持，无须通过示例代码和复制粘贴来获取依赖。比如，如果您要使用 Spring 和 JPA 进行数据库访问，那么只需要在项目中包含 <code>spring-boot-starter-data-jpa</code> 依赖项即可。</p><p>starter 包含了许多您需要用于使项目快速启动和运行，并且需要一组受支持的可传递依赖关系的依赖。</p><hr><p><strong>命名含义</strong></p><p>官方的所有 starter 都遵循类似的命名规则：<code>spring-boot-starter-*</code>，其中 <code>*</code> 是特定类型的应用。这个命名结构旨在帮助您找到 starter。许多 IDE 中 Maven 集成允许您按名称搜索依赖。例如，安装了 Eclipse 或者 STS 插件后，您可以简单地在 POM 编辑器中按下 <code>ctrl-space</code> 并输入 <strong>spring-boot-starter</strong> 来获取完整的列表。</p><p>正如<a href="#boot-features-custom-starter"><strong>创建自己的 starter</strong></a> 章节所述，第三方的 starter 命名不应该以 <code>spring-boot</code> 开头，因为它是官方 Spring Boot 构件所保留的规则。例如，有一个第三方 starter 项目叫做 <code>thirdpartyproject</code>，它通常会命名为 <code>thirdpartyproject-spring-boot-starter</code>。</p><hr><p>Spring Boot 在 <code>org.springframework.boot</code> group 下提供了以下应用 starter：</p><p><strong>表 13.1、Spring Boot 应用类 Starter</strong></p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th><th style="text-align:center">POM</th></tr></thead><tbody><tr><td style="text-align:left"><code>spring-boot-starter</code></td><td style="text-align:left">核心 starter，包含自动配置支持、日志和 YAML</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-activemq</code></td><td style="text-align:left">提供 JMS 消息支持，使用 Apache ActiveMQ</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-activemq/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-amqp</code></td><td style="text-align:left">提供 Spring AMQP 与 Rabbit MQ 支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-amqp/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-aop</code></td><td style="text-align:left">提供 Spring AOP 与 AspectJ 面向切面编程支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-aop/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-artemis</code></td><td style="text-align:left">提供 JMS 消息服务支持，使用 Apache Artemis</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-artemis/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-batch</code></td><td style="text-align:left">提供 Spring Batch 支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-batch/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-cache</code></td><td style="text-align:left">提供 Spring Framework 缓存支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-cache/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-cloud-connectors</code></td><td style="text-align:left">使用 Spring Cloud Connectors 简单连接到类似 Cloud Foundry 和 Heroku 等云平台</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-cloud-connectors/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-cassandra</code></td><td style="text-align:left">提供对 Cassandra 分布式数据库和 Spring Data Cassandra 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-cassandra/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-cassandra-reactive</code></td><td style="text-align:left">提供对 Cassandra 分布式数据库和 Spring Data Cassandra Reactive 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-cassandra-reactive/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-couchbase</code></td><td style="text-align:left">提供对 Couchbase 面向文档数据库和 Spring Data Couchbase 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-couchbase/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-couchbase-reactive</code></td><td style="text-align:left">提供对 Couchbase 面向文档数据库和 Spring Data Couchbase Reactive 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-couchbase-reactive/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-elasticsearch</code></td><td style="text-align:left">提供对 Elasticseach 搜索与分析引擎和 Spring Data Elasticsearch 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-elasticsearch/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-jpa</code></td><td style="text-align:left">提供 Spring Data JPA 与 Hibernate 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-jpa/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-ldap</code></td><td style="text-align:left">提供对 Spring Data LDAP 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-ldap/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-mongodb</code></td><td style="text-align:left">提供对 MongoDB 面向文档数据库和 Spring Data MongoDB 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-mongodb/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-mongodb-reactive</code></td><td style="text-align:left">提供对 MongoDB 面向文档数据库和 Spring Data MongoDB Reactive 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-mongodb-reactive/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-neo4j</code></td><td style="text-align:left">提供对 Neo4j 图数据库与 SPring Data Neo4j 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-neo4j/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-redis</code></td><td style="text-align:left">提供对 Redis 键值数据存储、Spring Data Redis 和 Lettuce 客户端的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-redis/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-redis-reactive</code></td><td style="text-align:left">提供对 Redis 键值数据存储、Spring Data Redis Reactive 和 Lettuce 客户端的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-redis-reactive/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-rest</code></td><td style="text-align:left">提供使用 Spring Data REST 通过 REST 暴露 Spring Data 资源库的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-rest/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-solr</code></td><td style="text-align:left">提供对 Apache Solr 搜索平台与 Spring Data Solr 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-data-solr/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-freemarker</code></td><td style="text-align:left">提供使用 Freemakrer 视图构建 MVC web 应用的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-freemarker/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-groovy-templates</code></td><td style="text-align:left">提供使用 Groovy 模板视图构建 MVC web 应用的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-groovy-templates/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-hateoas</code></td><td style="text-align:left">提供使用 Spring MVC 与Spring HATEOAS 构建基于超媒体的 RESTful web 应用的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-hateoas/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-integration</code></td><td style="text-align:left">提供对 Spring Integration 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-integration/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jdbc</code></td><td style="text-align:left">提供 JDBC 与 Tomcat JDBC 连接池的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jdbc/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jersey</code></td><td style="text-align:left">提供对使用 JAX-RS 与 Jersey 构建 RESTful web 应用的支持。<a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#spring-boot-starter-web"><code>spring-boot-starter-web</code></a> 的替代方案</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jersey/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jooq</code></td><td style="text-align:left">提供对使用 JOOQ 访问 SQL 数据库的支持。<a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#spring-boot-starter-data-jpa"><code>spring-boot-starter-data-jpa</code></a> 或 <a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#spring-boot-starter-jdbc"><code>spring-boot-starter-jdbc</code></a> 的替代方案</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jooq/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-json</code></td><td style="text-align:left">提供了读写 json 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-json/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jta-atomikos</code></td><td style="text-align:left">提供 Atomikos JTA 事务支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jta-atomikos/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jta-bitronix</code></td><td style="text-align:left">提供 Bitronix JTA 事务支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jta-bitronix/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jta-narayana</code></td><td style="text-align:left">提供 Narayana JTA 支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jta-narayana/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-mail</code></td><td style="text-align:left">提供使用　Java Mail 与 Spring Framework 的邮件发送支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-mail/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-mustache</code></td><td style="text-align:left">提供使用 Mustache 视图构建 web 应用的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-mustache/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-quartz</code></td><td style="text-align:left">Quartz 支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-quartz/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-security</code></td><td style="text-align:left">Spring Security 支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-security/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-test</code></td><td style="text-align:left">提供包含了 JUnit、Hamcrest 与 Mockito 类库的 Spring Boot 单元测试支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-test/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-thymeleaf</code></td><td style="text-align:left">提供使用 Thymeleaf 视图构建 MVC web 应用的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-thymeleaf/pom.xml">pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-validation</code></td><td style="text-align:left">提供 Hibernate Validator 与 Java Bean Validation 的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-validation/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-web</code></td><td style="text-align:left">提供使用 Spring MVC 构建 web（包含 RESTful）应用的支持，使用 Tomcat 作为默认嵌入式容器</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-web/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-web-services</code></td><td style="text-align:left">Spring Web Services 支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-web-services/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-webflux</code></td><td style="text-align:left">提供使用 Spring Framework 的 Reactive Web 支持构建 WebFlux 应用的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-webflux/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-websocket</code></td><td style="text-align:left">提供使用 Spring Framework 的 WebSocket 支持构建 WebSocket 应用的支持</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-websocket/pom.xml">Pom</a></td></tr></tbody></table><p>除了应用 starter，以下 starter 可用于添加<a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#production-ready">生产就绪</a>特性：</p><p><strong>表 13.2、Spring Boot 生产类 starter</strong></p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th><th style="text-align:center">POM</th></tr></thead><tbody><tr><td style="text-align:left"><code>spring-boot-starter-actuator</code></td><td style="text-align:left">Spring Boot 的 Actuator 支持，其提供了生产就绪功能，帮助您监控和管理应用</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-actuator/pom.xml">Pom</a></td></tr></tbody></table><p>最后，Spring Boot 还包含以下 starter，如果您想要排除或切换特定技术，可以使用以下 starter：</p><p><strong>表 13.3、Spring Boot 技术类 starter</strong></p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th><th style="text-align:center">POM</th></tr></thead><tbody><tr><td style="text-align:left"><code>spring-boot-starter-jetty</code></td><td style="text-align:left">使用 Jetty 作为嵌入式 servlet 容器。可代替 <a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#spring-boot-starter-tomcat"><code>spring-boot-starter-tomcat</code></a></td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-jetty/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-log4j2</code></td><td style="text-align:left">使用 Log4j2 作为日志组件。可代替 <a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#spring-boot-starter-logging"><code>spring-boot-starter-logging</code></a></td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-log4j2/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-logging</code></td><td style="text-align:left">使用 Logback 作为日志组件，此 starter 为默认的日志 starter</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-logging/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-reactor-netty</code></td><td style="text-align:left">使用 Reactor Netty 作为内嵌响应式 HTTP 服务器</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-reactor-netty/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-tomcat</code></td><td style="text-align:left">使用 Tomcat 作为嵌入式 servlet 容器，此为 <a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#spring-boot-starter-web"><code>spring-boot-starter-web</code></a> 默认的 servlet 容器 starter</td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-tomcat/pom.xml">Pom</a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-undertow</code></td><td style="text-align:left">使用 Undertow 作为嵌入式 servlet 容器，可代替 <a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#spring-boot-starter-tomcat"><code>spring-boot-starter-tomcat</code></a></td><td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-project/spring-boot-starters/spring-boot-starter-undertow/pom.xml">Pom</a></td></tr></tbody></table><p><strong>提示</strong></p><blockquote><p>有关其它社区贡献的 starter 列表，请参阅 GitHub 上的 <code>spring-boot-starters</code> 模块中的 <a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot-starters/README.adoc">README 文件</a>。</p></blockquote><p><a id="using-boot-structuring-your-code"></a></p><h2 id="14、组织代码">14、组织代码</h2><p>Spring Boot 不需要任何特定的代码布局，但是有一些最佳实践是很有用的。</p><p><a id="using-boot-using-the-default-package"></a></p><h3 id="14-1、使用-default-包">14.1、使用 default 包</h3><p>当一个类没有 <code>package</code> 声明时，它就被认为是在 <strong>default</strong> 包中。通常不鼓励使用 <strong>default 包</strong>，应该避免使用。对于使用 <code>@ComponentScan</code>、<code>@EntityScan</code> 或者 <code>@SpringBootApplication</code> 注解的 Spring Boot 应用，这样可能会导致特殊问题发生，因为每一个 jar 中的每一个类将会被读取到。</p><p><strong>提示</strong></p><blockquote><p>我们建议您使用 Java 推荐的包命名约定，并使用域名的反向形式命名（例如  <code>com.example.project</code>）。</p></blockquote><p><a id="using-boot-locating-the-main-class"></a></p><h3 id="14-2、定位主应用类">14.2、定位主应用类</h3><p>我们通常建议您将主应用类放在其它类之上的根包中， <code>@EnableAutoConfiguration</code> 注解通常放在主类上，它隐式定义了某些项目的 <strong>包搜索</strong>的基准起点。例如，如果您在编写一个 JPA 应用程序，则被 <code>@EnableAutoConfiguration</code> 注解的类所属的包将被用于搜索标记有 <code>@Entity</code> 注解的类。</p><p>使用根包还可以允许使用没有指定 <code>basePackage</code> 属性的 <code>@ComponentScan</code> 注解。如果您的主类在根包中，也可以使用 <code>@SpringBootApplication</code> 注解。</p><p>以下是一个经典的包结构：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">com</span><br><span class="line"> +- example</span><br><span class="line">     +- myapplication</span><br><span class="line">         +- Application.java</span><br><span class="line">         <span class="string">|</span></span><br><span class="line">         +- customer</span><br><span class="line">         <span class="string">|   +- Customer.java</span></span><br><span class="line">         <span class="string">|   +- CustomerController.java</span></span><br><span class="line">         <span class="string">|   +- CustomerService.java</span></span><br><span class="line">         <span class="string">|   +- CustomerRepository.java</span></span><br><span class="line">         <span class="string">|</span></span><br><span class="line">         +- order</span><br><span class="line">             +- Order.java</span><br><span class="line">             +- OrderController.java</span><br><span class="line">             +- OrderService.java</span><br><span class="line">             +- OrderRepository.java</span><br></pre></td></tr></table></figure><p><code>Application.java</code> 文件声明了 <code>main</code> 方法，附带了 <code>@Configuration</code> 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.EnableAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="using-boot-configuration-classes"></a></p><h2 id="15、配置类">15、配置类</h2><p>Spring Boot 支持基于 Java 的配置。虽然可以在 <code>SpringApplication</code> 中使用 XML 配置源，但我们通常建议主配置源为 <code>@Configuration</code> 类。通常，一个很好的选择是将定义了 <code>main</code> 方法的类作为 <code>@Configuration</code>。</p><p><strong>提示</strong></p><blockquote><p>许多 Spring 的 XML 配置示例已经在 Internet 上发布了。如果可能的话，您无论如何都应该尝试着使用等效的基于 Java 的配置方式，搜索 <code>Enable*</code> 注解可以帮到您不少忙。</p></blockquote><p><a id="using-boot-importing-configuration"></a></p><h3 id="15-1、导入额外的配置类">15.1、导入额外的配置类</h3><p>你不需要把所有的 <code>@Configuration</code> 放在一个类中。<code>@Import</code> 注解可用于导入其他配置类。或者，您可以使用 <code>@ComponentScan</code> 自动扫描所有 Spring 组件，包括 <code>@Configuration</code> 类。</p><p><a id="using-boot-importing-xml-configuration"></a></p><h3 id="15-2、导入-XML-配置">15.2、导入 XML 配置</h3><p>如果您一定要使用基于 XML 的配置，我们建议您仍然使用 <code>@Configuration</code> 类。您可以使用 <code>@ImportResource</code> 注解来加载 XML 配置文件。</p><p><a id="using-boot-auto-configuration"></a></p><h2 id="16、自动配置">16、自动配置</h2><p>Spring Boot 自动配置尝试根据您添加的 jar 依赖自动配置 Spring 应用。例如，如果 classpath 下存在 HSQLDB，并且您没有手动配置任何数据库连接 bean，那么 Spring Boot 将自动配置一个内存数据库。</p><p>您需要通过将 <code>@EnableAutoConfiguration</code> 或者 <code>@SpringBootApplication</code> 注解添加到其中一个 <code>@Configuration</code> 类之上以启用自动配置。</p><p><strong>提示</strong></p><blockquote><p>您应该仅添加一个 <code>@EnableAutoConfiguration</code> 注解。我们通常建议您将其添加到主 <code>@Configuration</code> 类中。</p></blockquote><p><a id="using-boot-replacing-auto-configuration"></a></p><h3 id="16-1、平滑替换自动配置">16.1、平滑替换自动配置</h3><p>自动配置是非入侵的，您可以随时定义自己的配置来代替自动配置的特定部分。例如，如果您添加了自己的 <code>DataSource</code> bean，默认的嵌入式数据库支持将不会自动配置。</p><p>如果您需要了解当前正在应用的自动配置，以及为什么使用，请使用 <code>--debug</code> 开关启动应用。这样做可以为核心 logger 启用调试日志，并记录到控制台。</p><p><a id="using-boot-disabling-specific-auto-configuration"></a></p><h3 id="16-2、禁用指定的自动配置类">16.2、禁用指定的自动配置类</h3><p>如果您发现在正在使用不需要的自动配置类，可以通过使用 <code>@EnableAutoConfiguration</code> 的 <code>exclude</code> 属性来禁用它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果类不在 classpath 下，您可以使用注解的 <code>excludeName</code> 属性并指定完全类名。最后，您还可以通过 <code>spring.autoconfigure.exclude</code> property 控制要排除的自动配置类列表。</p><p><strong>提示</strong></p><blockquote><p>您可以同时使用注解和 property 定义排除项</p></blockquote><p><a id="using-boot-spring-beans-and-dependency-injection"></a></p><h2 id="17、Spring-Bean-与依赖注入">17、Spring Bean 与依赖注入</h2><p>您可以自由使用任何标准的 Spring Framework 技术来定义您的 bean 以及它们注入的依赖。我们发现使用 <code>@ComponentScan</code> 来寻找 bean 和结合 <code>@Autowired</code> 构造器注入可以很好地工作。</p><p>如果您按照上述的建议（将应用类放在根包中）来组织代码，则可以添加无参的 <code>@ComponentScan</code>。所有应用组件（<code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code> 等）将自动注册为 Spring Bean。</p><p>以下是一个 <code>@Service</code> Bean，其使用构造注入方式获取一个必需的 <code>RiskAssessor</code> bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseAccountService</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatabaseAccountService</span><span class="params">(RiskAssessor riskAssessor)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 bean 中只有一个构造方法，您可以忽略掉 <code>@Autowired</code> 注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseAccountService</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RiskAssessor riskAssessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DatabaseAccountService</span><span class="params">(RiskAssessor riskAssessor)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.riskAssessor = riskAssessor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>请注意，构造注入允许 <code>riskAssessor</code> 字段被修饰为 <code>final</code>，这表示以后它不能被更改。</p></blockquote><p><a id="using-boot-using-springbootapplication-annotation"></a></p><h2 id="18、使用-SpringBootApplication-注解">18、使用 @SpringBootApplication 注解</h2><p>很多 Spring Boot 开发者总是使用 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 注解标记在主类上。由于 这些注解经常一起使用（特别是如果您遵循上述的<a href="#using-boot-structuring-your-code">最佳实践</a>）。Spring Boot 提供了一个更方便的 <code>@SpringBootApplication</code> 注解可用来替代这个组合。</p><p><code>@SpringBootApplication</code> 注解相当于使用 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 及他们的默认属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span> <span class="comment">// 相当于使用 @Configuration @EnableAutoConfiguration @ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p><code>@SpringBootApplication</code> 还提供了别名来自定义 <code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 的属性。</p></blockquote><p><a id="using-boot-running-your-application"></a></p><h2 id="19、运行您的应用">19、运行您的应用</h2><p>将应用程序打包成 <code>jar</code> 可执行文件并使用嵌入式 HTTP 服务器的最大有点之一就是可以按照您想使用的其它方式来运行应用。调试 Spring Boot 也是很简单，您不需要任何特殊的 IDE 插件或者扩展。</p><p><strong>注意</strong></p><blockquote><p>本章节仅涵盖基于　jar　的打包方式，如果您选择将应用打包为　war　文件，则应该参考您的服务器和　IDE　文档。</p></blockquote><p><a id="using-boot-running-your-application"></a></p><h3 id="19-1、使用-IDE-运行">19.1、使用 IDE 运行</h3><p>您可以使用 IDE 运行 Spring Boot应用，就像运行一个简单的 Java 应用程序一样，但是首先您需要导入项目，导入步骤取决于您的 IDE 和构建系统。大多数 IDE 可以直接导入 Maven 项目，例如 Eclipse 用户可以从 <code>File</code> 菜单中选择 <code>Import</code> ​ → <code>Existing Maven Projects</code>。</p><p>如果您无法将项目直接导入到 IDE 中，则可以使用构建插件生成 IDE 元数据（metadata）。Maven 包含了 <a href="https://maven.apache.org/plugins/maven-eclipse-plugin/">Eclipse</a> 和 <a href="https://maven.apache.org/plugins/maven-idea-plugin/">IDEA</a> 的插件,Gradle 也为<a href="https://docs.gradle.org/4.2.1/userguide/userguide.html">各种 IDE</a> 提供了插件。</p><p><strong>提示</strong></p><blockquote><p>如果您不小心运行了两次 web 应用，您将看到一个 <strong>Port already in use</strong> （端口已经被使用）错误。STS 用户可以使用 <code>Relaunch</code> 按钮运行以确保现有的任何实例都已关闭，而不是使用 Run 按钮。</p></blockquote><p><a id="using-boot-running-as-a-packaged-application"></a></p><h3 id="19-2、作为打包应用运行">19.2、作为打包应用运行</h3><p>如果您使用 Spring Boot Maven 或者 Gradle 插件创建可执行 jar，可以使用 <code>java -jar</code> 命令运行应用。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar target/myapplication-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>也可以在运行打包应用程序时开启远程调试支持。该功能允许您将调试器附加到打包的应用中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,<span class="built_in">suspend</span>=n \</span><br><span class="line">       -jar target/myapplication-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p><a id="using-boot-running-with-the-maven-plugin"></a></p><h3 id="19-3、使用-Maven-插件">19.3、使用 Maven 插件</h3><p>Spring Boot Maven 插件包含一个可用于快速编译和运行应用程序的 <code>run</code> goal。应用程序以快速形式运行，就像在 IDE 中一样。以下示例展示了运行 Spring Boot 应用程序的典型 Maven 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn spring-boot:run</span><br></pre></td></tr></table></figure><p>您可能还想使用 <code>MAVEN_OPTS</code> 操作系统环境变量，如下例所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> MAVEN_OPTS=-Xmx1024m</span><br></pre></td></tr></table></figure><p><a id="using-boot-running-with-the-gradle-plugin"></a></p><h3 id="19-4、使用-Gradle-插件">19.4、使用 Gradle 插件</h3><p>Spring Boot Gradle 插件包含一个 <code>bootRun</code> 任务，可用于以快速形式运行应用程序。每当应用 <code>org.springframework.boot</code> 和 java 插件时都会添加 <code>bootRun</code> 任务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gradle bootRun</span><br></pre></td></tr></table></figure><p>您可能还想使用 <code>JAVA_OPTS</code> 操作系统环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> JAVA_OPTS=-Xmx1024m</span><br></pre></td></tr></table></figure><p><a id="using-boot-hot-swapping"></a></p><h3 id="19-5、热交换">19.5、热交换</h3><p>由于 Spring Boot 应用程序只是普通的 Java 应用程序，因此 JVM 热插拔是可以开箱即用。JVM 热插拔在可替换字节码方面有所限制。想要更完整的解决方案，可以使用 <a href="https://zeroturnaround.com/software/jrebel/">JRebel</a>。</p><p><code>spring-boot-devtools</code> 模块包含了对快速重新启动应用程序的支持。有关详细信息，请参阅本章后面的<a href="#using-boot-devtools">第 20 章：开发人员工具</a>部分以及<a href="#howto-hotswapping">热插拔的 How-to 部分</a>。</p><p><a id="using-boot-devtools"></a></p><h2 id="20、开发者工具">20、开发者工具</h2><p>Spring Boot 包含了一套工具，可以使应用开发体验更加愉快。<code>spring-boot-devtools</code> 模块可包含在任何项目中，以提供额外的开发时（development-time）功能。要启用 devtools 支持，只需要将模块依赖添加到您的构建配置中即可：</p><p><strong>Maven</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Gradle</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">compile(&quot;org.springframework.boot:spring-boot-devtools&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>当运行完全打包的应用时，开发者工具将会自动禁用。如果您的应用使用了 <code>java -jar</code> 方式或者特殊的类加载器启动，那么它会被认为是一个<strong>生产级别应用</strong>。将 Maven 的依赖标记为可选或者在 Gradle 中使用 <code>compileOnly</code> 是防止您的项目被其他模块使用时 devtools 被应用到其它模块的最佳方法。</p></blockquote><p><strong>提示</strong></p><blockquote><p>重新打包的归档默认情况下不包含 devtools。如果要使用<a href="#using-boot-devtools-remote">某些远程 devtools 功能</a>, 你需要禁用 <code>excludeDevtools</code> 构建属性以把 devtools 包含进来。该属性支持 Maven 和 Gradle 插件。</p></blockquote><p><a id="using-boot-devtools-property-defaults"></a></p><h3 id="20-1、Property-默认值">20.1、Property 默认值</h3><p>Spring Boot 所支持的一些库使用了缓存来提高性能。例如，<a href="#boot-features-spring-mvc-template-engines">模板引擎</a>将缓存编译后的模板，以避免重复解析模板文件。此外，Spring MVC 可以在服务静态资源时添加 HTTP 缓存头。</p><p>虽然缓存在生产中非常有用，但它在开发过程可能会产生相反的效果，让您不能及时看到刚才在应用中作出的更改。因此，<code>spring-boot-devtools</code> 将默认禁用这些缓存选项。</p><p>一般是在 <code>application.properties</code> 文件中设置缓存选项。例如，Thymeleaf 提供了 <code>spring.thymeleaf.cache</code> 属性。您不需要手动设置这些属性，<code>spring-boot-devtools</code> 会自动应用合适的开发时（development-time）配置。</p><p><strong>提示</strong></p><blockquote><p>有关应用属性的完整列表，请参阅 <a href="https://github.com/spring-projects/spring-boot/tree/v2.0.1.RELEASE/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java">DevToolsPropertyDefaultsPostProcessor</a>。</p></blockquote><p><a id="using-boot-devtools-restart"></a></p><h3 id="20-2、自动重启">20.2、自动重启</h3><p>使用 <code>spring-boot-devtools</code> 的应用在 classpath 下的文件发生更改时会自动重启。这对于使用 IDE 工作而言可能是一个非常棒的功能，因为它为代码变更提供了非常块的反馈环。默认情况下，将监视 classpath 指向的所有文件夹。请注意，某些资源（如静态资源和视图模板）<a href="using-boot-devtools-restart-exclude">不需要重启应用</a>。</p><hr><p><strong>触发重启</strong></p><p>当 DevTools 监视 classpath 资源时，触发重启的唯一方式是更新 classpath。使 classpath 更新的方式取决于您使用的 IDE。在 Eclipse 中，保存修改的文件将更新 classpath，从而触发重启。在 IntelliJ IDEA 中，构建项目（<code>Build -&gt; Make Project</code>) 将产生相同的效果。</p><hr><p><strong>注意</strong></p><blockquote><p>只要 forking 被开启，您可以使用受支持的构建工具（如 Maven 或 Gradle）来启用应用，因为 DevTools 需要隔离应用类加载器才能正常运行。默认情况下，当在 classpath 下检测到 DevTools 时，Gradle 和 Maven 会这么做。</p></blockquote><p><strong>提示</strong></p><blockquote><p>自动重启功能与 LiveReload（实时重载）一起使用效果更棒。<a href="#using-boot-devtools-livereload">阅读 LiveReload 章节</a>以获取更多信息。如果您使用 JRebel，自动重启将会被禁用，以支持动态类重载，但其他 devtools 功能（如 LiveReload 和 property 覆盖）仍然可以使用。</p></blockquote><p><strong>注意</strong></p><blockquote><p>DevTools 依赖于应用上下文的关闭钩子，以在重启期间关闭自己。如果禁用了关闭钩子（<code>SpringApplication.setRegisterShutdownHook(false)</code>），它将不能正常工作。</p></blockquote><p><strong>注意</strong></p><blockquote><p>当 classpath 下的内容发生更改，决定是否触发重启时，DevTools 会自动忽略名为 <code>spring-boot</code>、<code>spring-boot-devtools</code>、<code>spring-boot-autoconfigure</code>、<code>spring-boot-actuator</code> 和 <code>spring-boot-starter</code> 的项目。</p></blockquote><p><strong>注意</strong></p><blockquote><p>DevTools 需要自定义 <code>ApplicationContext</code> 使用到的 <code>ResourceLoader</code>。如果您的应用已经提供了一个，它将被包装起来，因为不支持在 <code>ApplicationContext</code> 上直接覆盖 <code>getResource</code> 方法。</p></blockquote><hr><p><strong>重启（Restart）与重载（Reload）</strong></p><p>Spring Boot 通过使用两个类加载器来提供了重启技术。不改变的类（例如，第三方 jar）被加载到 <strong>base</strong> 类加载器中。经常处于开发状态的类被加载到 <strong>restart</strong> 类加载器中。当应用重启时，<strong>restart</strong> 类加载器将被丢弃，并重新创建一个新的。这种方式意味着应用重启比<strong>冷启动</strong>要快得多，因为省去 <strong>base</strong> 类加载器的处理步骤，并且可以直接使用。</p><p>如果您觉得重启还不够快，或者遇到类加载问题，您可以考虑如 ZeroTurnaround 的 <a href="https://zeroturnaround.com/software/jrebel/">JRebel</a> 等工具。他们是通过在加载类时重写类来加快重新加载。</p><hr><p><a id="using-boot-devtools-restart-logging-condition-delta"></a></p><h4 id="20-2-1、条件评估变更日志">20.2.1、条件评估变更日志</h4><p>默认情况下，每次应用重启时，都会记录显示条件评估增量的报告。该报告展示了在您进行更改（如添加或删除 bean 以及设置配置属性）时对应用自动配置所作出的更改。</p><p>要禁用报告的日志记录，请设置以下属性：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.devtools.restart.log-condition-evaluation-delta</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p><a id="using-boot-devtools-restart-exclude"></a></p><h4 id="20-2-2、排除资源">20.2.2、排除资源</h4><p>某些资源在更改时不一定需要触发重启。例如，Thymeleaf 模板可以实时编辑。默认情况下，更改 <code>/META-INF/maven</code>、<code>/META-INF/resources</code>、<code>/resources</code>、<code>/static</code>、<code>/public</code> 或者 <code>/templates</code> 不会触发重启，但会触发 <a href="#using-boot-devtools-livereload">LiveReload</a>。如果您想自定义排除项，可以使用 <code>spring.devtools.restart.exclude</code> 属性。例如，仅排除 <code>/static</code> 和 <code>/public</code>，您可以设置以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.devtools.restart.exclude</span>=<span class="string">static/**,public/**</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>如果要保留这些默认值并<strong>添加</strong>其他排除项 ，请改用 <code>spring.devtools.restart.additional-exclude</code> 属性。</p></blockquote><p><a id="using-boot-devtools-restart-additional-paths"></a></p><h4 id="20-2-3、监视附加路径">20.2.3、监视附加路径</h4><p>如果您想在对不在 classpath 下的文件进行修改时重启或重载应用，请使用 <code>spring.devtools.restart.additional-paths</code> 属性来配置监视其他路径的更改情况。您可以使用<a href="#using-boot-devtools-restart-exclude">上述</a>的 <code>spring.devtools.restart.exclude</code> 属性来控制附加路径下的文件被修改时是否触发重启或只是 <a href="#using-boot-devtools-livereload">LiveReload</a>。</p><p><a id="using-boot-devtools-restart-disable"></a></p><h4 id="20-2-4、禁用重启">20.2.4、禁用重启</h4><p>您如果不想使用重启功能，可以使用 <code>spring.devtools.restart.enabled</code> 属性来禁用它。一般情况下，您可以在 <code>application.properties</code> 中设置此属性（重启类加载器仍将被初始化，但不会监视文件更改）。</p><p>如果您需要<strong>完全</strong>禁用重启支持（例如，可能它不适用于某些类库），您需要在调用 <code>SpringApplication.run(​...)</code> 之前将 System 属性 <code>spring.devtools.restart.enabled System</code> 设置为 <code>false</code>。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.setProperty(<span class="string">&quot;spring.devtools.restart.enabled&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">SpringApplication.run(MyApp.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="using-boot-devtools-restart-triggerfile"></a></p><h4 id="20-2-5、使用触发文件">20.2.5、使用触发文件</h4><p>如果您使用 IDE 进行开发，并且时时刻刻在编译更改的文件，或许您只是希望在特定的时间内触发重启。为此，您可以使用<strong>触发文件</strong>，这是一个特殊文件，您想要触发重启检查时，必须修改它。更改文件只会触发检查，只有在 Devtools 检查到它需要做某些操作时才会触发重启，可以手动更新触发文件，也可以通过 IDE 插件更新。</p><p>要使用触发文件，请设置 <code>spring.devtools.restart.trigger-file</code> 属性指向触发文件的路径。</p><p><strong>提示</strong></p><blockquote><p>您也许想将 <code>spring.devtools.restart.trigger-file</code> 设置成一个<a href="#using-boot-devtools-globalsettings">全局配置</a>，以使得所有的项目都能应用此方式。</p></blockquote><p><a id="using-boot-devtools-customizing-classload"></a></p><h4 id="20-2-6、自定义重启类加载器">20.2.6、自定义重启类加载器</h4><p>正如之前的<a href="#using-spring-boot-restart-vs-reload">重启和重载</a>部分所述，重启功能是通过使用两个类加载器来实现的。对于大多数应用而言，这种方式很好，然而，有时可能会导致类加载出现问题。</p><p>默认情况下，IDE 中任何打开的项目将使用 <strong>restart</strong> 类加载器加载，任何常规的 <code>.jar</code> 文件将使用 <strong>base</strong> 类加载器加载。您如果开发的是多模块项目，而不是每一个模块都导入到 IDE 中，则可能需要自定义。为此，您可以创建一个 <code>META-INF/spring-devtools.properties</code> 文件。</p><p><code>spring-devtools.properties</code> 文件可以包含以 <code>restart.exclude.</code> 和 <code>restart.include.</code> 为前缀的属性。<code>include</code> 元素是加载到 <strong>restart</strong> 类加载器的项，<code>exclude</code> 元素是加载到 <strong>base</strong> 类加载器的项。属性值是一个应用到 classpath 的正则表达式。例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart.exclude.companycommonlibs</span>=<span class="string">/mycorp-common-[\\w-]+\.jar</span></span><br><span class="line"><span class="attr">restart.include.projectcommon</span>=<span class="string">/mycorp-myproj-[\\w-]+\.jar</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>所有属性键名必须是唯一的。只要有一个属性以 <code>restart.include.</code> 或 <code>restart.exclude.</code> 开头，它将会被考虑。</p></blockquote><p><strong>提示</strong></p><blockquote><p>classpath 下的所有 <code>META-INF/spring-devtools.properties</code> 文件将被加载，您可以将它们打包进工程或者类库中为项目所用。</p></blockquote><p><a id="using-boot-devtools-known-restart-limitations"></a></p><h4 id="20-2-7、已知限制">20.2.7、已知限制</h4><p>重新启动功能对使用标准 <code>ObjectInputStream</code> 反序列化的对象无效。您如果需要反序列化数据，可能需要使用 Spring 的 <code>ConfigurableObjectInputStream</code> 配合 <code>Thread.currentThread().getContextClassLoader()</code>。</p><p>遗憾的是，一些第三方类库在没有考虑上下文类加载器的情况下使用了反序列化。您如果遇到此问题，需要向原作者提交修复请求。</p><p><a id="using-boot-devtools-livereload"></a></p><h3 id="20-3、LiveReload">20.3、LiveReload</h3><p><code>spring-boot-devtools</code> 模块包括了一个内嵌 LiveReload 服务器，它可在资源发生更改时触发浏览器刷新。您可以从 <a href="http://livereload.com/extensions/">livereload.com</a> 上免费获取 Chrome、Firefox 和 Safari 平台下对应的 LiveReload 浏览器扩展程序。</p><p>如果您不想在应用运行时启动 LiveReload 服务器，可以将 <code>spring.devtools.livereload.enabled</code> 属性设置为 <code>false</code>。</p><p><strong>注意</strong></p><blockquote><p>您一次只能运行一个 LiveReload 服务器。在启动应用之前，请确保没有其他 LiveReload 服务器正在运行。如果在 IDE 中启动了多个应用，那么只有第一个应用的 LiveReload 生效。</p></blockquote><p><a id="using-boot-devtools-globalsettings"></a></p><h3 id="20-4、全局设置">20.4、全局设置</h3><p>您可以通过在 <code>$HOME</code> 目录中添加名为 <code>.spring-boot-devtools.properties</code> 的文件来配置全局 devtools 设置（请注意，文件名以“.”开头）。在此文件中添加的任何属性将应用到您的计算机上<strong>所有</strong>使用了 devtools 的 Spring Boot 应用。例如，始终使用<a href="#using-boot-devtools-restart-triggerfile">触发文件</a>来配置重启功能，您可以添加以下内容：</p><p><strong>~/.spring-boot-devtools.properties.</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.devtools.reload.trigger-file</span>=.reloadtrigger</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>在 <code>.spring-boot-devtools.properties</code> 中激活的 profile 将不会影响指定 profile 的配置文件的加载。</p></blockquote><p><a id="using-boot-devtools-remote"></a></p><h3 id="20-5、远程应用">20.5、远程应用</h3><p>Spring Boot 开发者工具不局限于本地开发。在远程运行应用时也可以使用许多功能。远程支持功能是可选的，如果要启用，您需要确保在重新打包归档文件时包含 <code>devtools</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">excludeDevtools</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeDevtools</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之后您需要设置一个 <code>spring.devtools.remote.secret</code> 属性，如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.devtools.remote.secret</span>=mysecret</span><br></pre></td></tr></table></figure><p><strong>警告</strong></p><blockquote><p>在远程应用上启用 <code>spring-boot-devtools</code> 是存在安全隐患的。您不应该在生产部署时启用它。</p></blockquote><p>远程 devtools 支持分为两部分：接受请求连接的服务器端端点和在 IDE 中运行的客户端应用。当设置了 <code>spring.devtools.remote.secret</code> 属性时，服务器组件将自动启用。客户端组件必须手启用。</p><p><a id="_running_the_remote_client_application"></a></p><h4 id="20-5-1、运行远程客户端应用">20.5.1、运行远程客户端应用</h4><p>假设远程客户端应用运行在 IDE 中。您需要在与要连接的远程项目相同的 classpath 下运行 <code>org.springframework.boot.devtools.RemoteSpringApplication</code>。把要连接的远程 URL 作为必须参数传入。</p><p>例如，如果您使用的是 Eclipse 或 STS，并且有一个名为 <code>my-app</code> 的项目已部署到了 Cloud Foundry，则可以执行以下操作：</p><ul><li>在 <code>Run</code> 菜单中选择选择 <code>Run Configurations...</code>​。</li><li>创建一个新的 <code>Java Application</code> launch configuration。</li><li>浏览 <code>my-app</code> 项目。</li><li>使用 <code>org.springframework.boot.devtools.RemoteSpringApplication</code> 作为主类。</li><li>将 <code>https://myapp.cfapps.io</code> 作为 <code>程序参数</code> （或者任何远程 URL）传入。</li></ul><p>运行的远程客户端将如下所示：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _                                              __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _          ___               _      \ \ \ \</span><br><span class="line">( ( )\___ |<span class="string"> &#x27;_ </span>|<span class="string"> &#x27;_</span>|<span class="string"> </span>|<span class="string"> &#x27;_ \/ _` </span>|<span class="string">        </span>|<span class="string"> _ \___ _ __  ___</span>|<span class="string"> </span>|<span class="string">_ ___ \ \ \ \</span></span><br><span class="line"><span class="string"> \\/  ___)</span>|<span class="string"> </span>|<span class="string">_)</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>||<span class="string"> (_</span>|<span class="string"> []::::::[]   / -_) &#x27;  \/ _ \  _/ -_) ) ) ) )</span></span><br><span class="line"><span class="string">  &#x27;  </span>|<span class="string">____</span>|<span class="string"> .__</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_\__, </span>|<span class="string">        </span>|<span class="string">_</span>|<span class="string">_\___</span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string">_\___/\__\___</span>|<span class="string">/ / / /</span></span><br><span class="line"><span class="string"> =========</span>|<span class="string">_</span>|<span class="string">==============</span>|<span class="string">___/===================================/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot Remote :: 2.1.1.RELEASE</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2015-06-10 18:25:06.632  INFO 14938 --- [           main] o.s.b.devtools.RemoteSpringApplication   : Starting RemoteSpringApplication on pwmbp with PID 14938 (/Users/pwebb/projects/spring-boot/code/spring-boot-devtools/target/classes started by pwebb in /Users/pwebb/projects/spring-boot/code/spring-boot-samples/spring-boot-sample-devtools)</span></span><br><span class="line"><span class="string">2015-06-10 18:25:06.671  INFO 14938 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@2a17b7b6: startup date [Wed Jun 10 18:25:06 PDT 2015]; root of context hierarchy</span></span><br><span class="line"><span class="string">2015-06-10 18:25:07.043  WARN 14938 --- [           main] o.s.b.d.r.c.RemoteClientConfiguration    : The connection to http://localhost:8080 is insecure. You should use a URL starting with &#x27;https://&#x27;.</span></span><br><span class="line"><span class="string">2015-06-10 18:25:07.074  INFO 14938 --- [           main] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729</span></span><br><span class="line"><span class="string">2015-06-10 18:25:07.130  INFO 14938 --- [           main] o.s.b.devtools.RemoteSpringApplication   : Started RemoteSpringApplication in 0.74 seconds (JVM running for 1.105)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>由于远程客户端与实际应用使用的是同一个 classpath，因此可以直接读取应用的 properties。这也是 <code>spring.devtools.remote.secret</code> 属性为什么能被读取和传递给服务器进行身份验证的原因。</p></blockquote><p><strong>提示</strong></p><blockquote><p>建议使用 <code>https://</code> 作为连接协议，以便加密传输并防止密码被拦截。</p></blockquote><p><strong>提示</strong></p><blockquote><p>如果您需要通过代理来访问远程应用，请配置 <code>spring.devtools.remote.proxy.host</code> 和 <code>spring.devtools.remote.proxy.port</code> 属性。</p></blockquote><p><a id="using-boot-devtools-remote-update"></a></p><h4 id="20-5-2、远程更新">20.5.2、远程更新</h4><p>远程客户端使用了与<a href="#using-boot-devtools-restart">本地重启</a>相同的方式来监控应用 classpath 下发生的更改。任何更新的资源将被推送到远程应用和触发重启（<strong>如果要求</strong>）。如果您正在迭代一个使用了本地没有的云服务的功能，这可能会非常有用。通常远程更新和重启比完全重新构建和部署的周期要快得多。</p><p><strong>注意</strong></p><blockquote><p>文件只有在远程客户端运行时才被监控。如果您在启动远程客户端之前更改了文件，文件将不会被推送到远程服务器。</p></blockquote><p><a id="using-boot-packaging-for-production"></a></p><h2 id="21、打包生产应用">21、打包生产应用</h2><p>可执行 jar 可用于生产部署，它们是独立（self-contained，独立、自包含）的，同样也适合云部署。</p><p>针对其他<strong>生产就绪</strong>功能，比如健康、审计和 REST 或者 JMX 端点度量，可以添加 <code>spring-boot-actuator</code>。有关这方面的详细信息，请参见 <a href="#production-ready">第五部分：“Spring Boot Actuator：生产就绪功能”</a>。</p><p><a id="using-boot-whats-next"></a></p><h2 id="22、下一步">22、下一步</h2><p>您现在应该知道如何使用 Spring Boot 以及应该遵循哪些最佳实践。接下来您可以深入地了解 <a href="#boot-features">Spring Boot 功能</a>，或者您也可以跳过下一部分直接阅读<a href="h#production-ready">“生产就绪功能”</a>方面的内容。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01Spring Boot简介</title>
      <link href="/posts/5fd014d5.html"/>
      <url>/posts/5fd014d5.html</url>
      
        <content type="html"><![CDATA[<p><strong>作者</strong></p><ul><li>Phillip Webb</li><li>Dave Syer</li><li>Josh Long</li><li>Stéphane Nicoll</li><li>Rob Winch</li><li>Andy Wilkinson</li><li>Marcel Overdijk</li><li>Christian Dupuis</li><li>Sébastien Deleuze</li><li>Michael Simons</li><li>Vedran Pavić</li><li>Jay Bryant</li><li>Madhura Bhave</li></ul><p><strong>译者</strong></p><ul><li><a href="https://github.com/oopsguy">Oopsguy</a></li></ul><hr><p><strong>2.1.5.RELEASE</strong>（前半部分为 1.5.9.RELEASE 的内容，之后会更新）</p><p>Copyright © 2012-2018</p><hr><p>在不对副本收取任何费用且每个副本都包含版权声明的情况下，您可以将本文档的副本分发给他人，无论是印刷形式还是电子发行形式。</p><p><a id="boot-documentation"></a></p><h1>I、Spring Boot 文档</h1><p>本节将简要介绍 Spring Boot 参考文档，可以看作是本文档内容的概述。您可以以线性方式阅读此参考指南，如果您不感兴趣，可以跳过该部分。</p><p><a id="boot-documentation-about"></a></p><h2 id="1、关于文档">1、关于文档</h2><p>Spring Boot 参考指南提供了 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/html">html</a>、<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/pdf/spring-boot-reference.pdf">pdf</a> 和 <a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/epub/spring-boot-reference.epub">epub</a> 格式的文档。最新的副本可在<a href="https://docs.spring.io/spring-boot/docs/current/reference">docs.spring.io/spring-boot/docs/current/reference</a> 获取。</p><p>在不对副本收取任何费用且每个副本都包含版权声明的情况下，您可以将本文档的副本分发给他人，无论是印刷形式还是电子发行形式。</p><p><a id="boot-documentation-getting-help"></a></p><h2 id="2、获取帮助">2、获取帮助</h2><p>如果您在使用 Spring Boot 时遇到了麻烦，可参考以下指南。</p><ul><li>尝试 <a href="howto.md">How-to</a>  —— 最常见问题的解决方案都在这里。</li><li>学习 Spring 基础  ——  Spring Boot 是建立在多个 Spring 项目之上, 请查看 <a href="https://spring.io/">spring.io</a> 网站以获取更多参考文档。如果您是刚刚开始使用 Spring, 请尝试其中一个<a href="https://spring.io/guides">指南</a>。</li><li>提问问题 —— 我们时刻关注着 <a href="https://stackoverflow.com/">stackoverflow.com</a> 上有关 <code>spring-boot</code> 标签相关的问题。</li><li>在 <a href="https://github.com/spring-projects/spring-boot/issues">github.com/spring-projects/spring-boot/issues</a> 报告 Spring Boot 的 bug。</li></ul><blockquote><p>Spring Boot 是全部开源的，包括文档！如果您发现文档中存在错误了，或者您想改进它们，请<a href="https://github.com/spring-projects/spring-boot/tree/v2.1.1.RELEASE">参与我们</a>。</p></blockquote><p><a id="boot-documentation-first-steps"></a></p><h2 id="3、起步">3、起步</h2><p>如果您是刚开始使用 Spring Boot，或者对 Spring 大体有个印象, <a href="page/getting-started.md">您可以从这里开始学习</a>!</p><ul><li><strong>从零开始</strong>： <a href="getting-started.md#getting-started-introducing-spring-boot">概述</a> | <a href="getting-started.md#getting-started-system-requirements">要求</a> | <a href="getting-started.md#getting-started-installing-spring-boot">安装</a></li><li><strong>教程</strong>： <a href="getting-started.md">第 1 部分</a> | <a href="getting-started.md#getting-started-first-application-code">第 2 部分</a></li><li><strong>运行您的例子</strong>： 第 1 部分 | 第 2 部分</li></ul><p><a id="_working_with_spring_boot"></a></p><h2 id="4、使用-Spring-Boot">4、使用 Spring Boot</h2><p>准备开始使用 Spring Boot 了? <a href="using-spring-boot.md">立即上手</a>。</p><ul><li><strong>构建系统</strong>：Maven | Gradle | Ant | Starter</li><li><strong>最佳实践</strong>：代码结构 | @Configuration | @EnableAutoConfiguration | Bean 与依赖注入</li><li><strong>运行代码</strong>：IDE | 打包 | Maven | Gradle</li><li><strong>打包应用</strong>：生产环境下的 jar</li><li><strong>Spring Boot CLI</strong>：使用 CLI</li></ul><p><a id="_learning_about_spring_boot_features"></a></p><h2 id="5、了解-Spring-Boot-新特性">5、了解 Spring Boot 新特性</h2><p>需要更多关于 Spring Boot 核心特性？<a href="boot-features.md">Spring 特性</a>!</p><ul><li><strong>核心特性</strong>：SpringApplication | 外部配置 | Profile | 日志</li><li><strong>Web 应用程序</strong>：MVC | 嵌入式容器</li><li><strong>使用数据</strong>：SQL | NO-SQL</li><li><strong>消息传递</strong>：概述 | JMS</li><li><strong>测试</strong>：概述 | Boot Applications | 实用工具</li><li><strong>延伸</strong>：Auto-configuration | @Conditions</li></ul><p><a id="_moving_to_production"></a></p><h2 id="6、生产环境">6、生产环境</h2><p>您如果准备将 Spring Boot 应用推送至生产环境，或许会对以下内容感兴趣。</p><ul><li><strong>管理端点</strong>：概述 | 自定义</li><li><strong>连接方式</strong>：HTTP | JMX | SSH</li><li><strong>监控</strong>：度量 | 审计 | 追踪 | 流程</li></ul><p><a id="_advanced_topics"></a></p><h2 id="7、高级内容">7、高级内容</h2><p>最后，我们为高级用户提供了几个主题。</p><ul><li><strong>部署 Spring Boot 应用</strong>：云部署 | OS 服务</li><li><strong>构建工具插件</strong>：Maven | Gradle</li><li><strong>附录</strong>：Application Properties | Auto-configuration 类 | 可执行 Jar</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02Spring Boot的相关入门</title>
      <link href="/posts/6995c9a0.html"/>
      <url>/posts/6995c9a0.html</url>
      
        <content type="html"><![CDATA[<p><a id="getting-started"></a></p><h1>二、入门</h1><p>如果您是刚开始使用 Spring Boot，或者对 Spring 有点印象，那么这部分内容是为您准备的！在这里我们将给出基本的“是什么？”、“怎么做？”、“为什么？”这类问题的答案。这是一份友好的 Spring Boot 简介和安装说明。当我们在讨论一些核心原理之后，我们将构建第一个 Spring Boot 应用。</p><p><a id="getting-started-introducing-spring-boot"></a></p><h2 id="8、Spring-Boot-简介">8、Spring Boot 简介</h2><p>使用 Spring Boot 可以很容易地创建出能直接运行的独立的、生产级别的基于 Spring 的应用。我们对 Spring 平台和第三方类库有自己的考虑，因此您可以从最基本的开始。大多数 Spring Boot 应用只需要很少的 Spring 配置。</p><p>您可以使用 Spring Boot 来创建一个可以使用 <code>java -jar</code> 命令来运行或者基于传统的 war 包部署的应用程序。我们还提供了一个用于运行 spring scripts 的命令行工具。</p><p>我们的主要目标是：</p><ul><li>为所有 Spring Boot 开发提供一个更快、更全面的入门体验。</li><li>坚持自我虽好，但当需求出现偏离，您需要能迅速摆脱出来。</li><li>提供大量非功能性特性相关项目（例如：内嵌服务器、安全、指标、健康检查、外部配置)。</li><li>绝对没有代码生成，也不要求 XML 配置。</li></ul><p><a id="getting-started-system-requirements"></a></p><h2 id="9、系统要求">9、系统要求</h2><p>默认情况下，Spring Boot 1.5.4.RELEASE 需要 <a href="https://www.java.com/">Java 7</a> 和 Spring Framework 4.3.9.RELEASE 或者更高版本。您可以通过其他配置使 Java 6 配合 Spring Boot。更多详细信息，请参见<a href="howto.md#howto-use-java-6">第 84.11节，“如何使用 Java 6”</a>。Spring Boot 为 Maven（3.2+），和 Gradle 2（2.9 或者更高版本）和 Gradle 3 提供了显式构建支持。</p><p><strong>提示</strong></p><blockquote><p>虽然您可以在 Java 6 或者 Java 7 上使用 Spring Boot，但我们还是强烈推荐您使用 Java 8。</p></blockquote><p><a id="_servlet_containers"></a></p><h3 id="9-1、Servlet-容器">9.1、Servlet 容器</h3><p>支持以下嵌入式容器开箱即用：</p><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">Servlet 版本</th><th style="text-align:left">Java 版本</th></tr></thead><tbody><tr><td style="text-align:left">Tomcat 8</td><td style="text-align:left">3.1</td><td style="text-align:left">Java 7+</td></tr><tr><td style="text-align:left">Tomcat 7</td><td style="text-align:left">3.0</td><td style="text-align:left">Java 6+</td></tr><tr><td style="text-align:left">Jetty 9.3</td><td style="text-align:left">3.1</td><td style="text-align:left">Java 8+</td></tr><tr><td style="text-align:left">Jetty 9.2</td><td style="text-align:left">3.1</td><td style="text-align:left">Java 7+</td></tr><tr><td style="text-align:left">Jetty 8</td><td style="text-align:left">3.0</td><td style="text-align:left">Java 6+</td></tr><tr><td style="text-align:left">Undertow 1.3</td><td style="text-align:left">3.1</td><td style="text-align:left">Java 7+</td></tr></tbody></table><p>您可以将 Spring Boot 应用部署到任何一个 Servlet 3.0+ 兼容容器中。</p><p><a id="getting-started-installing-spring-boot"></a></p><h2 id="10、安装-Spring-Boot">10、安装 Spring Boot</h2><p>Spring Boot 可以与<strong>经典</strong>的 Java 开发工具一起使用或者作为命令行工具安装。无论如何，您将需要 <a href="https://www.java.com/">Java SDK 1.6</a> 或者更高版本。在开始之前您应该检查 Java 的安装情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br></pre></td></tr></table></figure><p>如果您是 Java 开发新手，或者您只想尝试使用 Spring Boot，您可能需要首先尝试使用 <a href="#getting-started-installing-the-cli">Spring Boot CLI</a>，否则请阅读经典的安装说明。</p><p><strong>提示</strong></p><blockquote><p>虽然 Spring Boot 支持 Java 1.6，但是如果可以，您应该考虑使用最新的 Java 版本。</p></blockquote><p><a id="getting-started-installation-instructions-for-java"></a></p><h3 id="10-1、针对-Java-开发人员的安装说明">10.1、针对 Java 开发人员的安装说明</h3><p>您可以跟使用任何标准 Java 库的方式一样使用 Spring Boot。只需要在 classpath 下包含相应的 <code>spring-boot-*.jar</code> 文件即可。Spring Boot 不需要任何专用的工具来集成，因此您可以使用任何 IDE 或者文本编辑器，并且 Spring Boot 应用也没什么特殊之处，因此可以像任何其它 Java 程序一样运行和调试。</p><p>虽然您可以复制 Spring Boot 的 jar 文件，但我们通常建议您使用支持依赖管理的构建工具（比如 Maven 或者 Gradle）。</p><p><a id="getting-started-maven-installation"></a></p><h3 id="10-1-1、使用-Maven-安装">10.1.1、使用 Maven 安装</h3><p>Spring Boot 兼容 Apache Maven 3.2 或更高版本。如果您还没有安装 Maven，可以到 <a href="https://maven.apache.org/">maven.apache.org</a> 上按照说明进行操作。</p><p><strong>提示</strong></p><blockquote><p>在许多操作系统上，可以通过软件包管理器来安装 Maven。如果您是 OSX Homebrew 用户，请尝试使用 <code>brew install maven</code>。Ubuntu 用户可以运行 <code>sudo apt-get install maven</code>。</p></blockquote><p>Spring Boot 依赖使用到了 <code>org.springframework.boot</code> <code>groupId</code>。通常，您的 Maven POM 文件将从 <code>spring-boot-starter-parent</code> 项目继承，并声明一个或多个 <a href="using-boot-starter.md">Starter</a> 依赖。Spring Boot 还提供了一个可选的 <a href="#build-tool-plugins-maven-plugin">Maven 插件</a>来创建可执行 jar。</p><p>这是一个典型的 <code>pom.xml</code> 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Add typical dependencies for a web application --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Package as an executable jar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p><code>spring-boot-starter-parent</code> 是一个使用 Spring Boot 的好方式，但它并不是任何时候都适用。有时您可能需要继承不同的父 POM，或者您不喜欢我们的默认配置。请参见<a href="#using-boot-maven-without-a-parent">第 13.2.2 节, “使用不带父 POM 的 Spring Boot”</a> 作为的替代方案，其使用了 <code>import</code> Scope。</p></blockquote><p><a id="getting-started-gradle-installation"></a></p><h3 id="10-1-2、使用-Gradle-安装">10.1.2、使用 Gradle 安装</h3><p>Spring Boot 兼容 Gradle 2 (2.9 或者更高版本)和 Gradle 3。如果您还没有安装 Gradle，您可以按照 <a href="http://www.gradle.org/">www.gradle.org/</a> 上的说明进行操作。</p><p>Spring Boot 依赖 <code>org.springframework.boot</code> <code>group</code>。通常，您的项目将声明一个或者多个 <a href="using-boot-starter.md">Starter</a> 的依赖。Spring Boot 提供了一个有用的 <a href="#build-tool-plugins-gradle-plugin">Gradle 插件</a>，可用于简化依赖声明和创建可执行 jar 文件。</p><p><strong>Gradle Wrapper</strong></p><blockquote><p>当您许需要构建项目时，Gradle Wrapper 提供了一个用于获取 Gradle 的好方法。它是由小脚本和库组成，您在提交的同时，您的代码将引导构建流程。更多详细信息，请参阅 <a href="https://docs.gradle.org/2.14.1/userguide/gradle_wrapper.html">docs.gradle.org/2.14.1/userguide/gradle_wrapper.html</a>。</p></blockquote><p>这是一个典型的 <code>build.gradle</code> 文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;1.5.4.RELEASE&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jar &#123;</span><br><span class="line">    baseName = <span class="string">&#x27;myproject&#x27;</span></span><br><span class="line">    version =  <span class="string">&#x27;0.0.1-SNAPSHOT&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class="line">    testCompile(<span class="string">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a id="getting-started-installing-the-cli"></a></p><h3 id="10-2、安装-Spring-Boot-CLI">10.2、安装 Spring Boot CLI</h3><p>Spring Boot CLI 是一个命令行工具，如果您想使用 Spring 快速搭建原型，可以选择它。它允许您运行 <a href="http://groovy.codehaus.org/">Groovy</a> 脚本，这意味着您有可以有类 Java 语法且没有太多样板的代码。</p><p>您不需要使用 CLI 来配合 Spring Boot，但它确实是一个入门 Spring 应用的最快方式。</p><p><a id="getting-started-manual-cli-installation"></a></p><h4 id="10-2-1、手动安装">10.2.1、手动安装</h4><p>您可以从 Spring 软件仓库中下载 Spring CLI 发行版：</p><ul><li><a href="https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/1.5.9.RELEASE/spring-boot-cli-1.5.9.RELEASE-bin.zip">spring-boot-cli-1.5.9.RELEASE-bin.zip</a></li><li><a href="https://repo.spring.io/release/org/springframework/boot/spring-boot-cli/1.5.9.RELEASE/spring-boot-cli-1.5.9.RELEASE-bin.tar.gz">spring-boot-cli-1.5.9.RELEASE-bin.tar.gz</a></li></ul><p><a href="https://repo.spring.io/snapshot/org/springframework/boot/spring-boot-cli/">最新的快照发行版</a>也是可用的。</p><p>下载之后，请按照解压缩归档文件中的 <a href="https://raw.github.com/spring-projects/spring-boot/v1.5.9.RELEASE/spring-boot-cli/src/main/content/INSTALL.txt">INSTALL.txt</a> 说明进行操作。总之：在 <code>.zip</code> 文件的 <code>bin/</code> 目录中有一个 spring 脚本（在 Windows 下为 <code>spring.bat</code>），或者也可以使用 <code>java -jar</code> 配合 <code>.jar</code> 文件（该脚本可以帮助您确保 classpath 设置正确）。</p><p><a id="getting-started-sdkman-cli-installation"></a></p><h4 id="10-2-2、使用-SDKMAN-安装">10.2.2、使用 SDKMAN! 安装</h4><p>SDKMAN!（软件开发包管理器）用于管理二进制 SDK 的多个版本，包括 Groovy 和 Spring Boot CLI。从 <a href="http://sdkman.io/">sdkman.io</a> 获取 SDKMAN! 并安装 Spring Boot：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sdk install springboot</span><br><span class="line">$ spring --version</span><br><span class="line">Spring Boot v1.5.9.RELEASE</span><br></pre></td></tr></table></figure><p>如果您正在为 CLI 开发功能，并希望够能轻松地访问刚创建的版本，请参照以下指令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sdk install springboot dev /path/to/spring-boot/spring-boot-cli/target/spring-boot-cli-1.5.9.RELEASE-bin/spring-1.5.9.RELEASE/</span><br><span class="line">$ sdk default springboot dev</span><br><span class="line">$ spring --version</span><br><span class="line">Spring CLI v1.5.9.RELEASE</span><br></pre></td></tr></table></figure><p>以上操作将会安装一个名为 <code>dev</code> 的 <code>spring</code> 的本地实例。它指向您的目标构建位置，因此每次重新构建 Spring Boot 时，spring 都是最新的。</p><p>您可以这样做来相关信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sdk <span class="built_in">ls</span> springboot</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line">Available Springboot Versions</span><br><span class="line">================================================================================</span><br><span class="line">&gt; + dev</span><br><span class="line">* 1.5.9.RELEASE</span><br><span class="line"></span><br><span class="line">================================================================================</span><br><span class="line">+ - <span class="built_in">local</span> version</span><br><span class="line">* - installed</span><br><span class="line">&gt; - currently <span class="keyword">in</span> use</span><br><span class="line">================================================================================</span><br></pre></td></tr></table></figure><p><a id="getting-started-homebrew-cli-installation"></a></p><h4 id="10-2-3、使用-OSX-Homebrew-安装">10.2.3、使用 OSX Homebrew 安装</h4><p>如果您是在 Mac 上工作并且使用了 <a href="http://brew.sh/">Homebrew</a>，您安装 Spring Boot CLI 需要做的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew tap pivotal/tap</span><br><span class="line">$ brew install springboot</span><br></pre></td></tr></table></figure><p>Homebrew 将会把 spring 安装在 <code>/usr/local/bin</code>。</p><p><strong>注意</strong></p><blockquote><p>如果您没有看到执行流程, 您安装的 brew 可能已经过期了。执行 <code>brew update</code> 并重新尝试。</p></blockquote><p><a id="getting-started-macports-cli-installation"></a></p><h4 id="10-2-4、使用-MacPorts-安装">10.2.4、使用 MacPorts 安装</h4><p>如果您是在 Mac 上工作并且使用了 <a href="https://www.macports.org/">MacPorts</a>，您安装 Spring Boot CLI 所需要做的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo port install spring-boot-cli</span><br></pre></td></tr></table></figure><p><a id="getting-started-cli-command-line-completion"></a></p><h4 id="10-2-5、命令行完成">10.2.5、命令行完成</h4><p>Spring Boot CLI 为 <a href="https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29">BASH</a> 和 <a href="https://en.wikipedia.org/wiki/Zsh">zsh</a> 提供了命令完成脚本。您可以在任何 shell 中执行此脚本 (也称为 <code>spring</code>），或将其放在您个人或系统范围的 bash 中完成初始化。在 Debian 系统上，系统范围的脚本位于 <code>/shell-completion/bash</code> 中，当新的 shell 启动时，该目录中的所有脚本将被执行。要手动运行脚本, 例如：您已经使用 SDKMAN! 安装了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ . ~/.sdkman/candidates/springboot/current/shell-completion/bash/spring</span><br><span class="line">$ spring &lt;HIT TAB HERE&gt;</span><br><span class="line">  grab  <span class="built_in">help</span>  jar  run  <span class="built_in">test</span>  version</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>如果您使用 Homebrew 或者 MacPorts 安装了 Spring Boot CLI，则命令行完成脚本将自动注册到您的 shell 中。</p></blockquote><p><a id="getting-started-cli-example"></a></p><h3 id="10-2-6、快速入门-Spring-CLI-示例">10.2.6、快速入门 Spring CLI 示例</h3><p>这是一个非常简单的 web 应用程序，可以用于测试您的安装情况。创建一个名为 <code>app.groovy</code> 的文件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThisWillActuallyRun</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    String home() &#123;</span><br><span class="line">        <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在 shell 中运行它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ spring run app.groovy</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>第一次运行应用的时候需要一些时间，因为需要下载依赖。后续运行将会更快。</p></blockquote><p>在您喜欢的浏览器中打开 localhost:8080，您应该会看到以下输出：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p><a id="getting-started-upgrading-from-an-earlier-version"></a></p><h2 id="10-3、升级旧版-Spring-Boot">10.3、升级旧版 Spring Boot</h2><p>如果您想从旧版的 Spring Boot 升级到此版本，请查看<a href="https://github.com/spring-projects/spring-boot/wiki">项目 wiki</a> 上托管的 <strong>release notes（发行说明）</strong>。您将会找到升级说明以及每个版本的<strong>新特性和注意事项</strong>列表。</p><p>要升级现有的 CLI，请使用相应的包管理器命令（例如 <code>brew upgrade</code>） 或者, 如果您手动安装了 CLI，请按照<a href="#getting-started-manual-cli-installation">标准说明</a>，记得更新您的 <code>PATH</code> 环境变量以删除任何旧的引用。</p><p><a id="getting-started-first-application"></a></p><h2 id="11、开发第一个-Spring-Boot-应用">11、开发第一个 Spring Boot 应用</h2><p>让我们使用 Java 开发一个简单的 <strong>Hello World!</strong> web 应用程序，以便体现 Spring Boot 的一些关键特性。我们将使用 Maven 构建该项目，因为大多数 IDE 都支持它。</p><p><strong>提示</strong></p><blockquote><p><a href="https://spring.io/">spring.io</a> 网站上有许多使用 Spring Boot 的<strong>入门指南</strong>，如果您正在寻找具体问题的解决方案，可先从上面寻找。您可以到 <a href="https://start.spring.io/">start.spring.io</a> 使用依赖搜索功能选择 <code>web</code> starter 来快速完成以下步骤。它将自动生成一个新的项目结构，以便您可以<a href="#getting-started-first-application-code">立即开始编码</a>。<a href="https://github.com/spring-io/initializr">查看文档了解更多信息</a>。</p></blockquote><p>在开始之前，打开终端检查您是否安装了符合要求的 Java 版本和 Maven 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version <span class="string">&quot;1.7.0_51&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_51-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.51-b03, mixed mode)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mvn -v</span><br><span class="line">Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T13:58:10-07:00)</span><br><span class="line">Maven home: /Users/user/tools/apache-maven-3.1.1</span><br><span class="line">Java version: 1.7.0_51, vendor: Oracle Corporation</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><blockquote><p>此示例需要在您自己的文件夹中创建，后续的步骤说明假设您已经创建了这个文件夹，它是您的<strong>当前目录</strong>。</p></blockquote><p><a id="getting-started-first-application-pom"></a></p><h3 id="11-1-创建-POM">11.1 创建 POM</h3><p>我们先要创建一个 Maven <code>pom.xml</code> 文件。<code>pom.xml</code> 是用于构建项目的<strong>配方</strong>。打开您最喜欢的编辑器并添加一下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Additional lines to be added here... --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这应该会给您生成一个工作版本，您可以通过运行 <code>mvn package</code> 来测试它（此时您可以忽略 <strong>jar will be empty - no content was marked for inclusion!</strong> 警告信息)。</p><p><strong>注意</strong></p><blockquote><p>此时，您可以将项目导入 IDE（大部分的现代 Java IDE 都内置 Maven 支持）。为了简单起见，我们将继续在这个例子中使用纯文本编辑器。</p></blockquote><p><a id="getting-started-first-application-dependencies"></a></p><h3 id="11-2、添加-Classpath-依赖">11.2、添加 Classpath 依赖</h3><p>Spring Boot 提供了多个 “Starter”，可以让您方便地将 jar 添加到 classpath 下。我们的示例应用已经在 POM 的 <code>parent</code> 部分使用了 <code>spring-boot-starter-parent</code>。<code>spring-boot-starter-parent</code> 是一个特殊 Starter，它提供了有用的 Maven 默认配置。此外它还提供了<a href="#using-boot-dependency-management">依赖管理</a>功能，您可以忽略这些依赖的版本（<code>version</code>）标签。</p><p>其他 Starter 只提供在开发特定应用时可能需要到的依赖。由于我们正在开发一个 web 应用，因此我们将添加一个 <code>spring-boot-starter-web</code> 依赖 ， 但在此之前，让我们来看看目前拥有的。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn</span> dependency:tree</span><br><span class="line"></span><br><span class="line">[<span class="meta">INFO</span>] com.example:myproject:jar:<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT</span><br></pre></td></tr></table></figure><p><code>mvn dependency:tree</code> 命令以树的形式打印项目的依赖。您可以看到 <code>spring-boot-starter-parent</code> 本身不提供依赖。我们可以在 <code>parent</code> 下方立即编辑 <code>pom.xml</code> 并添加 <code>spring-boot-starter-web</code> 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果您再次运行 <code>mvn dependency:tree</code>，将会看到现在有许多附加的依赖，包括了 Tomcat web 服务器和 Spring Boot 本身。</p><p><a id="getting-started-first-application-code"></a></p><h3 id="11-3、编码">11.3、编码</h3><p>要完成我们的应用，我们需要创建一个 Java 文件。默认情况下，Maven 将从 <code>src/main/java</code> 目录下编译源代码，因此您需要创建该文件夹结构，之后添加一个名为 <code>src/main/java/Example.java</code> 的文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">String <span class="title function_">home</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">SpringApplication.run(Example.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然没有多少代码，但它仍然做了很多事情。让我们看看里面重要的部分。</p><p><a id="getting-started-first-application-annotations"></a></p><h4 id="11-3-1、-RestController-与-RequestMapping-注解">11.3.1、@RestController 与 @RequestMapping 注解</h4><p><code>Example</code> 类中的第一个注解是 <code>@RestController</code>，该注解被称作 stereotype 注解。它能为代码阅读者提供一些提示，对于 Spring 而言，这个类具有特殊作用。在本示例中，我们的类是一个 web <code>@Controller</code>，因此 Spring 在处理传入的 web 请求时会考虑它。</p><p><code>@RequestMapping</code> 注解提供了 <strong>routing</strong>（路由）信息。它告诉 Spring，任何具有路径为 <code>/</code> 的 HTTP 请求都应映射到 <code>home</code> 方法。<code>@RestController</code> 注解告知 Spring 渲染结果字符串直接返回给调用者。</p><p><strong>提示</strong></p><blockquote><p><code>@RestController</code> 和 <code>@RequestMapping</code> 是 Spring MVC 注解（它们不是 Spring Boot 特有的）。有关更多详细信息，请参阅 Spring 参考文档中的 <a href="https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web.html#mvc">MVC 章节</a></p></blockquote><p><a id="getting-started-first-application-auto-configuration"></a></p><h4 id="11-3-2、-EnableAutoConfiguration-注解">11.3.2、@EnableAutoConfiguration 注解</h4><p>第二个类级别注解是 <code>@EnableAutoConfiguration</code>。此注解告知 Spring Boot 根据您添加的 jar 依赖来“猜测”您想如何配置 Spring 并进行自动配置，由于 <code>spring-boot-starter-web</code> 添加了 Tomcat 和 Spring MVC，auto-configuration（自动配置）将假定您要开发 web 应用并相应设置了 Spring。</p><blockquote><p><strong>Starter 与自动配置</strong> <br/> Auto-configuration 被设计与 Starter 配合使用，但这两个概念并不是直接相关的。您可以自由选择 starter 之外的 jar 依赖，Spring Boot 仍然会自动配置您的应用程序。</p></blockquote><p><a id="getting-started-first-application-main-method"></a></p><h4 id="11-3-3、main-方法">11.3.3、main 方法</h4><p>应用的最后一部分是 <code>main</code> 方法。这只是一个标准方法，其遵循 Java 规范中定义的应用程序入口点。我们的 main 方法通过调用 <code>run</code> 来委托 Spring Boot 的 <code>SpringApplication</code> 类，<code>SpringApplication</code> 类将引导我们的应用，启动 Spring，然后启动自动配置的 Tomcat web 服务器。我们需要将 <code>Example.class</code>  作为一个参数传递给 <code>run</code> 方法来告知 <code>SpringApplication</code>，它是 Spring 主组件。同时还传递 <code>args</code> 数组以暴露所有命令行参数。</p><p><a id="getting-started-first-application-run"></a></p><h3 id="11-4、运行示例">11.4、运行示例</h3><p>此时，我们的应用应该是可以工作了。由于您使用了 <code>spring-boot-starter-parent</code> POM，因此您可以使用 <code>run</code> 来启动应用程序。在根目录下输入 <code>mvn spring-boot:run</code> 以启动应用：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mvn spring-boot:run</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ |<span class="string"> &#x27;_ </span>|<span class="string"> &#x27;_</span>|<span class="string"> </span>|<span class="string"> &#x27;_ \/ _` </span>|<span class="string"> \ \ \ \</span></span><br><span class="line"><span class="string"> \\/  ___)</span>|<span class="string"> </span>|<span class="string">_)</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>||<span class="string"> (_</span>|<span class="string"> </span>|<span class="string">  ) ) ) )</span></span><br><span class="line"><span class="string">  &#x27;  </span>|<span class="string">____</span>|<span class="string"> .__</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_\__, </span>|<span class="string"> / / / /</span></span><br><span class="line"><span class="string"> =========</span>|<span class="string">_</span>|<span class="string">==============</span>|<span class="string">___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::  (v2.0.0.RELEASE)</span></span><br><span class="line"><span class="string">....... . . .</span></span><br><span class="line"><span class="string">....... . . . (log output here)</span></span><br><span class="line"><span class="string">....... . . .</span></span><br><span class="line"><span class="string">........ Started Example in 2.222 seconds (JVM running for 6.514)</span></span><br></pre></td></tr></table></figure><p>如果您用浏览器打开了 <a href="http://localhost:8080/"><code>localhost:8080</code></a>，您应该会看到以下输出：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>要平滑退出程序，请按 <code>ctrl+c</code>。</p><p><a id="getting-started-first-application-executable-jar"></a></p><h3 id="11-5、创建可执行-jar">11.5、创建可执行 jar</h3><p>我们通过创建一个完全自包含（self-contained）的可执行 jar 文件完成了示例。该 jar 文件可以在生产环境中运行。可执行 jar（有时又称为 <code>fat jars</code>）是包含了编译后的类以及代码运行时所需要相关的 jar 依赖的归档文件。</p><hr><p><strong>可执行 jar 与 Java</strong></p><p>Java 不提供任何标准方式来加载嵌套的 jar 文件（比如本身包含在 jar 中的 jar 文件）。如果您想分发自包含的应用，这可能是个问题。</p><p>为了解决此问题，许多开发人员使用了 <strong>uber</strong> jar，uber jar 从所有应用的依赖中打包所有的类到一个归档中。这种方法的问题在于，您很难看出应用程序实际上使用到了哪些库。如果在多个 jar 中使用了相同的文件名（但内容不同），这也可能产生问题。</p><p>Spring Boot 采用了<a href="#executable-jar">不同方方式</a>，可以直接对 jar 进行嵌套。</p><hr><p>要创建可执行 jar，我们需要将 <code>spring-boot-maven-plugin</code> 添加到 <code>pom.xml</code> 文件中。在 <code>dependencies</code> 下方插入以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p><code>spring-boot-starter-parent</code> POM 包含了 <code>&lt;executions&gt;</code> 配置，用于绑定 <code>repackage</code> 。如果您没有使用父 POM，您需要自己声明此配置。有关详细的信息，请参阅<a href="https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/maven-plugin/usage.html">插件文档</a>。</p></blockquote><p>保存 <code>pom.xml</code> 并在命令行中运行 <code>mvn package</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mvn package</span><br><span class="line"></span><br><span class="line">[<span class="built_in">INFO</span>] Scanning <span class="keyword">for</span> projects<span class="built_in">..</span>.</span><br><span class="line">[<span class="built_in">INFO</span>]</span><br><span class="line">[<span class="built_in">INFO</span>] ------------------------------------------------------------------------</span><br><span class="line">[<span class="built_in">INFO</span>] Building myproject 0.0.1-SNAPSHOT</span><br><span class="line">[<span class="built_in">INFO</span>] ------------------------------------------------------------------------</span><br><span class="line">[<span class="built_in">INFO</span>] <span class="built_in">..</span><span class="built_in">..</span> <span class="built_in">..</span></span><br><span class="line">[<span class="built_in">INFO</span>] --- maven-jar-plugin:2.4:jar (default-jar) @ myproject ---</span><br><span class="line">[<span class="built_in">INFO</span>] Building jar: /Users/developer/example/spring-boot-example/target/myproject-0.0.1-SNAPSHOT.jar</span><br><span class="line">[<span class="built_in">INFO</span>]</span><br><span class="line">[<span class="built_in">INFO</span>] --- spring-boot-maven-plugin:2.0.0.RELEASE:repackage (default) @ myproject ---</span><br><span class="line">[<span class="built_in">INFO</span>] ------------------------------------------------------------------------</span><br><span class="line">[<span class="built_in">INFO</span>] BUILD SUCCESS</span><br><span class="line">[<span class="built_in">INFO</span>] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>如果您浏览 <code>target</code> 目录，您应该会看到 <code>myproject-0.0.1-SNAPSHOT.jar</code>。该文件的大小大约为 10 MB。如果您想要查看里面的内容，可以使用 <code>jar tvf</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ jar tvf target/myproject-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>您应该还会在 <code>target</code> 目录中看到一个名为 <code>myproject-0.0.1-SNAPSHOT.jar.original</code> 的较小文件。这是在 Spring Boot 重新打包之前由 Maven 所创建的原始 jar 文件。</p><p>使用 <code>java -jar</code> 命令运行该应用：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ java -jar target/myproject-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ |<span class="string"> &#x27;_ </span>|<span class="string"> &#x27;_</span>|<span class="string"> </span>|<span class="string"> &#x27;_ \/ _` </span>|<span class="string"> \ \ \ \</span></span><br><span class="line"><span class="string"> \\/  ___)</span>|<span class="string"> </span>|<span class="string">_)</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>||<span class="string"> (_</span>|<span class="string"> </span>|<span class="string">  ) ) ) )</span></span><br><span class="line"><span class="string">  &#x27;  </span>|<span class="string">____</span>|<span class="string"> .__</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">_\__, </span>|<span class="string"> / / / /</span></span><br><span class="line"><span class="string"> =========</span>|<span class="string">_</span>|<span class="string">==============</span>|<span class="string">___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::  (v2.0.0.RELEASE)</span></span><br><span class="line"><span class="string">....... . . .</span></span><br><span class="line"><span class="string">....... . . . (log output here)</span></span><br><span class="line"><span class="string">....... . . .</span></span><br><span class="line"><span class="string">........ Started Example in 2.536 seconds (JVM running for 2.864)</span></span><br></pre></td></tr></table></figure><p>跟之前一样, 要平滑退出应用，请按 <code>ctrl-c</code>。</p><p><a id="getting-started-whats-next"></a></p><h2 id="12、下一步">12、下一步</h2><p>希望您在本章节学到了一些 Spring Boot 的基础知识，并且开始编写自己的应用。如果您是一名面向任务（task-oriented）的开发人员，您可能想跳过 <a href="https://spring.io/">spring.io</a> 而直接阅读一些能解决<strong>如何使用 Spring 来解决？</strong> 这类问题的<a href="https://spring.io/guides/">入门指南</a>，此外我们还有 Spring Boot 专门的 <a href="#howto">How-to</a> 参考文档。</p><p><a href="https://github.com/spring-projects/spring-boot">Spring Boot 仓库</a>还有很多您可以运行的<a href="https://github.com/spring-projects/spring-boot/tree/v2.0.0.RELEASE/spring-boot-samples">示例</a>。示例与其余部分的代码是独立的（也就是说，您不需要构建其他的代码来运行或使用示例）。</p><p>接下来阅读的是第三步：<a href="#using-boot">使用 Spring Boot</a>。如果您真的感到厌倦了，可以跳过该部分直接阅读 <a href="#boot-features">Spring Boot 特性</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/posts/a378bd8e.html"/>
      <url>/posts/a378bd8e.html</url>
      
        <content type="html"><![CDATA[<h1>Python</h1><h2 id="安装Python">安装Python</h2><p>python3官网下载：<a href="https://www.python.org/">https://www.python.org/</a></p><p>在Windows上配置Python的环境变量cmd窗口：</p><p><code>path=%path%;C:\Python </code></p><p>按下&quot;Enter&quot;。</p><p><strong>注意:</strong> C:\Python 是Python的安装目录。</p><p>也可以通过以下方式设置：</p><ul><li>右键点击&quot;计算机&quot;，然后点击&quot;属性&quot;</li><li>然后点击&quot;高级系统设置&quot;</li><li>选择&quot;系统变量&quot;窗口下面的&quot;Path&quot;,双击即可！</li><li></li><li>然后在&quot;Path&quot;行，添加python安装路径即可(我的D:\Python32)，所以在后面，添加该路径即可。 <strong>ps：记住，路径直接用分号&quot;；&quot;隔开！</strong></li><li>最后设置成功以后，在cmd命令行，输入命令&quot;python&quot;，就可以有相关显示。</li></ul><p>Python的环境变量：</p><table><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td>PYTHONPATH</td><td>PYTHONPATH是Python搜索路径，默认我们import的模块都会从PYTHONPATH里面寻找。</td></tr><tr><td>PYTHONSTARTUP</td><td>Python启动后，先寻找PYTHONSTARTUP环境变量，然后执行此变量指定的文件中的代码。</td></tr><tr><td>PYTHONCASEOK</td><td>加入PYTHONCASEOK的环境变量, 就会使python导入模块的时候不区分大小写.</td></tr><tr><td>PYTHONHOME</td><td>另一种模块搜索路径。它通常内嵌于的PYTHONSTARTUP或PYTHONPATH目录中，使得两个模块库更容易切换。</td></tr></tbody></table><p>运行py代码</p><h3 id="第一种，交互式解释器：">第一种，交互式解释器：</h3><p>你可以通过命令行窗口进入 Python 并开始在交互式解释器中开始编写 Python 代码。</p><p>你可以在 Unix、DOS 或任何其他提供了命令行或者 shell 的系统进行 Python 编码工作。</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python             <span class="meta"># Unix/Linux</span></span><br><span class="line"></span><br><span class="line">或者  </span><br><span class="line"></span><br><span class="line"><span class="symbol">C:</span>&gt;python           <span class="meta"># Windows/DOS</span></span><br></pre></td></tr></table></figure><p>以下为 Python 命令行参数：</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-d</td><td>在解析时显示调试信息</td></tr><tr><td>-O</td><td>生成优化代码 ( .pyo 文件 )</td></tr><tr><td>-S</td><td>启动时不引入查找Python路径的位置</td></tr><tr><td>-V</td><td>输出Python版本号</td></tr><tr><td>-X</td><td>从 1.6版本之后基于内建的异常（仅仅用于字符串）已过时。</td></tr><tr><td>-c cmd</td><td>执行 Python 脚本，并将运行结果作为 cmd 字符串。</td></tr><tr><td>file</td><td>在给定的python文件执行python脚本。</td></tr></tbody></table><h3 id="命令行脚本">命令行脚本</h3><p>在你的应用程序中通过引入解释器可以在命令行中执行Python脚本，如下所示：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python  <span class="keyword">script</span>.py          <span class="comment"># Unix/Linux</span></span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">C:&gt;python <span class="keyword">script</span>.py         <span class="comment"># Windows/DOS</span></span><br></pre></td></tr></table></figure><p>**注意：**在执行脚本时，请检查脚本是否有可执行权限。</p><h3 id="集成开发环境（IDE：Integrated-Development-Environment）-PyCharm">集成开发环境（IDE：Integrated Development Environment）: PyCharm</h3><p>PyCharm 是由 JetBrains 打造的一款 Python IDE，支持 macOS、 Windows、 Linux 系统。</p><p>PyCharm 功能 : 调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制……</p><p>PyCharm 下载地址 : <a href="https://www.jetbrains.com/pycharm/download/">https://www.jetbrains.com/pycharm/download/</a></p><p>PyCharm 安装地址：<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html">http://www.runoob.com/w3cnote/pycharm-windows-install.html</a></p><p>Professional（专业版，收费）：完整的功能，可试用 30 天。</p><p>Community（社区版，免费）：阉割版的专业版。</p><h2 id="Python3基础语法：">Python3基础语法：</h2><p>与其他语言一样，Python的编码集个数为UTF-8，且其他字符串都是unicode字符串。</p><h3 id="标识符">标识符</h3><ul><li>第一个字符必须是<strong>字母表中字母或下划线 _</strong> 。</li><li>标识符的其他的部分由<strong>字母、数字和下划线</strong>组成。</li><li>标识符对<strong>大小写敏感</strong>。</li></ul><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p><h3 id="python保留字">python保留字</h3><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="注释">注释</h3><p>Python中单行注释以 <strong>#</strong> 开头，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3  </span></span><br><span class="line"><span class="comment"># 第一个注释 print (&quot;Hello, Python!&quot;)</span></span><br><span class="line"><span class="comment"># 第二个注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释方式</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行注释 一</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多行注释 二</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="行与缩进">行与缩进</h3><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br></pre></td></tr></table></figure><p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Answer&quot;</span>)</span><br><span class="line">  <span class="comment">#print (&quot;False&quot;)    # 缩进不一致，会导致运行错误</span></span><br></pre></td></tr></table></figure><h3 id="多行语句">多行语句</h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \ 来实现多行语句，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total = item_one + \</span><br><span class="line">        item_two + \</span><br><span class="line">        item_three</span><br></pre></td></tr></table></figure><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 \，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="数字-Number-类型">数字(Number)类型</h3><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li><strong>bool</strong> (布尔), 如 True。</li><li><strong>float</strong> (浮点数), 如 1.23、3E-2</li><li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><h3 id="字符串-String">字符串(String)</h3><ul><li>Python 中单引号 ’ 和双引号 &quot; 使用完全相同。</li><li>使用三引号(‘’’ 或 “”&quot;)可以指定一个多行字符串。</li><li>转义符 \。</li><li>反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 <strong>r&quot;this is a line with \n&quot;</strong> 则 \n 会显示，并不是换行。</li><li>按字面意义级联字符串，如 <strong>&quot;this &quot; &quot;is &quot; “string”</strong> 会被自动转换为 <strong>this is string</strong>。</li><li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li><li>Python 中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：变量[头下标:尾下标:步长]</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">word</span> = <span class="string">&#x27;字符串&#x27;</span></span><br><span class="line"><span class="attr">sentence</span> = <span class="string">&quot;这是一个句子。&quot;</span></span><br><span class="line"><span class="attr">paragraph</span> = <span class="string">&quot;&quot;&quot;这是一个段落，</span></span><br><span class="line"><span class="string">可以由多行组成&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第六个的字符（不包含）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])          <span class="comment"># 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&#x27;你好&#x27;</span>)         <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nrunoob&#x27;</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure><p>这里的 r 指 raw，即 raw string，会自动将反斜杠转义，例如：</p><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)       <span class="comment"># 输出空行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\n&#x27;</span>)      <span class="comment"># 输出 \n </span></span><br></pre></td></tr></table></figure></blockquote><p>上述实例输出的结果：</p><blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">123456789</span><br><span class="line">12345678</span><br><span class="line">1</span><br><span class="line">345</span><br><span class="line">3456789</span><br><span class="line">24</span><br><span class="line">123456789123456789</span><br><span class="line"><span class="section">123456789你好</span></span><br><span class="line"><span class="section">------------------------------</span></span><br><span class="line">hello</span><br><span class="line">runoob</span><br><span class="line">hello\nrunoob</span><br></pre></td></tr></table></figure></blockquote><h3 id="空行">空行</h3><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><p>**记住：**空行也是程序代码的一部分。</p><h3 id="等待用户输入">等待用户输入</h3><p>执行下面的程序在按回车键后就会等待用户输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">input</span>(<span class="string">&quot;\n\n按下 enter 键后退出。&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上代码中 ，\n\n 在结果输出前会输出两个新的空行。一旦用户按下 <strong>enter</strong> 键时，程序将退出。</p><h3 id="同一行显示多条语句">同一行显示多条语句</h3><p>Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割，以下是一个简单的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>使用脚本执行以上代码，输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runoob</span><br></pre></td></tr></table></figure><p>使用交互式命令行执行，输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys; x = <span class="string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">runoob</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure><p>此处的 7 表示字符数，<strong>runoob</strong> 有 6 个字符，<strong>\n</strong> 表示一个字符，加起来 <strong>7</strong> 个字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.stdout.write(<span class="string">&quot; hi &quot;</span>)    <span class="comment"># hi 前后各有 1 个空格</span></span><br><span class="line">hi <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="多个语句构成代码组">多个语句构成代码组</h3><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><p>如下实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression : </span><br><span class="line">   suite</span><br><span class="line"><span class="keyword">elif</span> expression : </span><br><span class="line">   suite </span><br><span class="line"><span class="keyword">else</span> : </span><br><span class="line">   suite</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">16</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x &gt; 16&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> x &lt; <span class="number">25</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x &lt; 25&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x &lt; 10&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="print-输出">print 输出</h3><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=“”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="import-与-from…import">import 与 from…import</h3><p>在 python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</p><p>将整个模块(somemodule)导入，格式为： <code>import somemodule</code></p><p>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></p><p>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></p><p>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;================Python import mode==========================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;命令行参数为:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n python 路径为&#x27;</span>,sys.path)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv,path  <span class="comment">#  导入特定的成员</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;================python from import===================================&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;path:&#x27;</span>,path) <span class="comment"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span></span><br></pre></td></tr></table></figure><h3 id="命令行参数">命令行参数</h3><p>很多程序可以执行一些操作来查看一些基本信息，Python可以使用-h参数查看各参数帮助信息：</p><blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> -h</span><br><span class="line">usage: <span class="keyword">python</span> [option] ... [-<span class="keyword">c</span> cmd | -<span class="keyword">m</span> <span class="keyword">mod</span> | <span class="keyword">file</span> | -] [arg] ...</span><br><span class="line">Options <span class="built_in">and</span> arguments (<span class="built_in">and</span> corresponding environment variables):</span><br><span class="line">-<span class="keyword">c</span> cmd : program passed in <span class="keyword">as</span> <span class="built_in">string</span> (terminates option <span class="keyword">list</span>)</span><br><span class="line">-d     : <span class="keyword">debug</span> output from parser (also PYTHONDEBUG=<span class="keyword">x</span>)</span><br><span class="line">-E     : ignore environment variables (such <span class="keyword">as</span> PYTHONPATH)</span><br><span class="line">-h     : <span class="keyword">print</span> this <span class="keyword">help</span> message <span class="built_in">and</span> <span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line">[ etc. ]</span><br></pre></td></tr></table></figure></blockquote><p>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 <a href="https://www.runoob.com/python3/python3-command-line-arguments.html">Python 3 命令行参数</a>。</p><h2 id="基本数据类型">基本数据类型</h2><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的&quot;类型&quot;是变量所指的内存中对象的类型。</p><p>等号（=）用来给变量赋值。</p><p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</p>]]></content>
      
      
      <categories>
          
          <category> 其他编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣刷题</title>
      <link href="/posts/f7912a82.html"/>
      <url>/posts/f7912a82.html</url>
      
        <content type="html"><![CDATA[<h1>力扣刷题</h1><h3 id="第一题，寻找数组的中心索引">第一题，寻找数组的中心索引</h3><p>给你一个整数数组 nums ，请计算数组的 中心下标 。</p><p>数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果中心下标位于数组最左端，那么左侧数之和视为 0 ，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p><p>如果数组有多个中心下标，应该返回 最靠近左边 的那一个。如果数组不存在中心下标，返回 -1 。</p><blockquote><p>示例 1：</p><p>输入：nums = [1, 7, 3, 6, 5, 6]<br>输出：3<br>解释：<br>中心下标是 3 。<br>左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，<br>右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。</p><p>示例 2：</p><p>输入：nums = [1, 2, 3]<br>输出：-1<br>解释：<br>数组中不存在满足此条件的中心下标。</p><p>示例 3：</p><p>输入：nums = [2, 1, -1]<br>输出：0<br>解释：<br>中心下标是 0 。<br>左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），<br>右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span> [] nums)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; length ; i ++)&#123;</span><br><span class="line">            sum = sum + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">left_sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; nums.length ; i ++)&#123;</span><br><span class="line">            sum = sum - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(sum == left_sum)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            left_sum = left_sum + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二题：搜索数组插入的位置">第二题：搜索数组插入的位置</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置，请必须使用时间复杂度为 O(log n) 的算法。</p><p>示例 1:</p><p>输入: nums = [1,3,5,6], target = 5<br>输出: 2</p><p>示例 2:</p><p>输入: nums = [1,3,5,6], target = 2<br>输出: 1</p><p>示例 3:</p><p>输入: nums = [1,3,5,6], target = 7<br>输出: 4</p><blockquote><ul><li>1 &lt;= nums.length &lt;= 10^4</li><li>-10^4 &lt;= nums[i] &lt;= 10^4</li><li>nums 为 无重复元素 的 升序 排列数组</li><li>-10^4 &lt;= target &lt;= 10^4</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span> [] nums, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; nums.length ; i++ )&#123;</span><br><span class="line">            <span class="comment">//只要他的值小于或者等于nums[i]直接返回索引，否则返回数组长度</span></span><br><span class="line">            <span class="keyword">if</span>(target &lt;= nums[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要提到排序的数组，我们首先要考虑的就是能不能使用二分法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertSearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target )</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span> ; </span><br><span class="line">        <span class="type">int</span> <span class="variable">hi</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(lo &lt;= hi)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取中间的值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">midValue</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">            <span class="keyword">if</span>(midValue &gt; target)&#123;</span><br><span class="line">                hi = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(midValue &lt; target)&#123;</span><br><span class="line">                lo = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果找到就返回</span></span><br><span class="line">                <span class="keyword">return</span> mid; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没找到就返回应该插入的位置</span></span><br><span class="line">            <span class="keyword">return</span> lo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三题：-合并区间">第三题： 合并区间</h3><p>以数组 intervals 表示若干个区间的集合，其中单个区间为 intervals[i] = [starti, endi] 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p><blockquote><p>示例 1：</p><p>输入：intervals = [[1,3],[2,6],[8,10],[15,18]]<br>输出：[[1,6],[8,10],[15,18]]<br>解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p><p>示例 2：</p><p>输入：intervals = [[1,4],[4,5]]<br>输出：[[1,5]]<br>解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</p><p>提示：</p><pre><code>1 &lt;= intervals.length &lt;= 10^4intervals[i].length == 20 &lt;= starti &lt;= endi &lt;= 10^4</code></pre></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> [][] merge(<span class="type">int</span> [][] intervals)&#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals.length == <span class="number">0</span>) <span class="keyword">return</span> intervals;</span><br><span class="line">        <span class="comment">//1.对二维数组按照第一列进行升序排序</span></span><br><span class="line">        Arrays.sort(intervals,(a,b)-&gt;a[<span class="number">0</span>]-b[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">//进行合并数组</span></span><br><span class="line">        List&lt;<span class="type">int</span> []&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//临时空间，判断是否需要合并集合，是否放入结果条</span></span><br><span class="line">        <span class="type">int</span> term[] = intervals[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; intervals.length ; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(term[<span class="number">1</span>] &gt;= intervals[i][<span class="number">0</span>])&#123;</span><br><span class="line">                term[<span class="number">1</span>] = Math.max(term[<span class="number">1</span>],intervals[i][<span class="number">1</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                list.add(term);</span><br><span class="line">                term = intervals[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(term);</span><br><span class="line">        <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">int</span> [list.size()][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四题：两数之和">第四题：两数之和</h3><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><blockquote><p>示例 1：</p><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p><p>示例 2：</p><p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]</p><p>示例 3：</p><p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p></blockquote><ul><li>2 &lt;= nums.length &lt;= 10^4</li><li>-10^9 &lt;= nums[i] &lt;= 10^9</li><li>-10^9 &lt;= target &lt;= 10^9</li><li>只会存在一个有效答案</li></ul><p>解法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span> [] nums , <span class="type">int</span> target)&#123;</span><br><span class="line">        <span class="comment">//声明一个数组用来存储数组下标</span></span><br><span class="line">        <span class="type">int</span> [] res = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length ; i ++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j ++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num[i] + num[j] = target)&#123;</span><br><span class="line">                    res[<span class="number">0</span>] = i;</span><br><span class="line">                    res[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span> [] nums , <span class="type">int</span> target)&#123;</span><br><span class="line">        <span class="type">int</span> [] res = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">2</span>];</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer,Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; nums.length ; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containKey(nums[i]))&#123;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(nums[i]);</span><br><span class="line">                res[<span class="number">1</span>] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(target - nums[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五题：-回文数">第五题： 回文数</h3><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><pre><code>例如，121 是回文，而 123 不是。</code></pre><blockquote><p>示例 1：</p><p>输入：x = 121<br>输出：true</p><p>示例 2：</p><p>输入：x = -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p><p>示例 3：</p><p>输入：x = 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。</p></blockquote><p><code>-2^31 &lt;= x &lt;= 2^31 - 1</code></p><p>解法一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x % <span class="number">10</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">reversed</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; reversed)&#123;</span><br><span class="line">            reversed = reversed * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x == reversed || x == reversed / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//将数字添加到字符串中</span></span><br><span class="line">        sb.append(x);</span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="keyword">return</span> sb.toString().equals(<span class="string">&quot;&quot;</span>+ x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第六题：罗马数字转整型">第六题：罗马数字转整型</h3><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><blockquote><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p></blockquote><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><blockquote><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</p></blockquote><p>给定一个罗马数字，将其转换成整数。</p><blockquote><p>示例 1:</p><p>输入: s = “III”<br>输出: 3</p></blockquote><blockquote><p>示例 2:</p><p>输入: s = “IV”<br>输出: 4</p></blockquote><blockquote><p>示例 3:</p><p>输入: s = “IX”<br>输出: 9</p></blockquote><blockquote><p>示例 4:</p><p>输入: s = “LVIII”<br>输出: 58<br>解释: L = 50, V= 5, III = 3.</p></blockquote><blockquote><p>示例 5:</p><p>输入: s = “MCMXCIV”<br>输出: 1994<br>解释: M = 1000, CM = 900, XC = 90, IV = 4.</p></blockquote><ul><li>1 &lt;= s.length &lt;= 15</li><li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li><li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 罗马数字 - Mathematics 。</li></ul><p>这道题就开发性蛮高了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题纪录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git实现文件上传到github或者gitee</title>
      <link href="/posts/8d32597a.html"/>
      <url>/posts/8d32597a.html</url>
      
        <content type="html"><![CDATA[<ol><li>在本地项目目录创建本地仓库</li></ol><p>​      <code>git init  </code></p><p>​        输入完命令后项目目录会有一个隐藏的.git文件夹</p><ol start="2"><li>上传所有代码到本地仓库</li></ol><p>​       <code> git add .</code> (注:后面点不能少)</p><ol start="3"><li>代码上传到本地仓库后执行提交命令</li></ol><p>​      <code>  git commit -m &quot;项目名称&quot;</code></p><ol start="4"><li><p>在GitHub上新建一个repository （步骤1）</p></li><li><p>关联本地仓库并上传代码</p></li></ol><p>​      <code>  git remote add origin [https://github.com/xxx.git(新建repository后会有一个地址)]</code></p><ol start="6"><li>最后执行上传推送命令</li></ol><p>​     <code>   git push origin master</code></p><p>完成代码的上传</p><p>二，更新修改代码</p><p>1，先进入到项目根目录下:cd xx:\ 查看是否有冲突：<br>　　　<code>git status</code></p><p>2、将当前工作目录中更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中<br>　　　<code>git add .</code><br>3、添加注释（必填）：<br>　　　<code>git commit -m “注释内容”</code><br>4、提交本次修改到远程仓库</p><p><code>git push https://github.com/vofill/test.git</code></p><p>三、从GitHub上通过命令down代码</p><p>1、打开git，进入要存放项目代码的git目录</p><p>2、使用命令</p><p><code>git clone git://github.com/xxx.git</code></p><p>或者<code>git clone https://github.com/xxx.git</code></p><p>四、从GitHub上通过命令update代码</p><p>1、打开git，进入要存放项目代码的git目录</p><p>2、使用命令<code>git pull</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端</span><br><span class="line">hexo clean; hexo generate; hexo deploy  // VSCODE终端</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二十三种设计模式</title>
      <link href="/posts/ece28c36.html"/>
      <url>/posts/ece28c36.html</url>
      
        <content type="html"><![CDATA[<h1>设计模式</h1><h2 id="6大设计模式原则">6大设计模式原则</h2><p>讲设计模式之前，我们需要软件开发的6大准则：</p><p>我先背一下：</p><blockquote><ol><li>迪米特原则</li><li>开闭原则</li><li>里氏替换原则</li><li>单一职责</li><li>依赖倒置原则</li><li>接口隔离原则</li></ol></blockquote><h3 id="迪米特原则（Law-of-Demeter，LoD）">迪米特原则（Law of Demeter，LoD）</h3><p>一个对象应该对其他对象有最少的了解。也就是说，一个对象应该对自己需要的对象和方法尽可能少的了解，只与直接的朋友通信。直接的朋友是指出现在成员变量、方法输入、输出参数中的类。这样可以降低对象之间的耦合度。</p><h3 id="开放封闭原则（Open-Closed-Principle，OCP）">开放封闭原则（Open-Closed Principle，OCP）</h3><p>开放封闭原则（Open-Closed Principle，OCP）：一个软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。在不修改原有代码的情况下，可以通过扩展来增加新的功能。</p><h3 id="里氏替换原则（Liskov-Substitution-Principle，LSP）">里氏替换原则（Liskov Substitution Principle，LSP）</h3><p>里氏替换原则（Liskov Substitution Principle，LSP）：子类必须能够替换掉它们的父类，而不影响程序的正确性。也就是说，继承关系中父类能出现的地方子类都可以出现。</p><h3 id="单一职责原则（Single-Responsibility-Principle，SRP）">单一职责原则（Single Responsibility Principle，SRP）</h3><p>单一职责原则（Single Responsibility Principle，SRP）：一个类只负责一个功能领域中的一种职责，即一个类只有一个引起它变化的原因。这样可以使类更加内聚，降低代码的耦合度。</p><h3 id="依赖倒置原则（Dependency-Inversion-Principle，DIP）">依赖倒置原则（Dependency Inversion Principle，DIP）</h3><p>依赖倒置原则（Dependency Inversion Principle，DIP）：高层模块不应该依赖于底层模块，两者都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。</p><h3 id="接口隔离原则（Interface-Segregation-Principle，ISP）">接口隔离原则（Interface Segregation Principle，ISP）</h3><p>接口隔离原则（Interface Segregation Principle，ISP）：一个类对另一个类的依赖应该建立在最小的接口上。应该尽量避免一个类依赖于它不需要的接口。</p><h1>设计模式分类</h1><p>有了上述的几大原则，我们正式开始进入设计模式章节：</p><p><strong>创建型模式</strong>共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式，原型模式。（工单建原）</p><p><strong>结构性模式</strong>共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。（适装外代享组桥）</p><p><strong>行为型模式</strong>共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。（策模观迭责命备，状访中解）</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis框架学习</title>
      <link href="/posts/afe2faba.html"/>
      <url>/posts/afe2faba.html</url>
      
        <content type="html"><![CDATA[<h1>MyBatis</h1><p>比传统的方式更加方便，但是技术没有高低之分;</p><p>mybatis是一个版Orm的框架，他内部封装了JDBC；</p><p>开发时候只需要关注sql语句本身,不需要花费精力去加载驱动，创建链接，创建statement等繁琐过程。</p><p><strong>优点</strong>：</p><ol><li>基于sql编程，灵活，不会对应用程序或者数据库的现有设计造成任何影响，SQL写在xml中。解除了代码和sql语句的耦合度，便于统一管理，提供xml标签，支持编写动态sql语句，可以重用高。</li><li>与jdbc比，减少了50%的代码量，消除了大量的JDBC大量沉余的代码，不需要手动开关链接。</li><li>与数据库具有很好的兼容性</li><li>能和spring很好的集成</li><li>提供映射标签，支持与数据库的orm字段关系映射；提供对象关系映射标签，支持对象关系组件维护。</li></ol><p>缺点：</p><ol><li>注重于sql本身，当子段多，关联表多时，对开发人员编写sql语句有一定功底。</li><li>sql语句依赖于数据库，导致数据库移植性差，不能随意更改数据库。</li></ol><p>mybatis框架适合场景：</p><ol><li><p>适合于dao层</p><p>​如果安装标准来的话 那么</p><p>​bin  --&gt; binImpl</p><pre><code> dao --&gt; daoImpl  mybatis中将dao  改成**mapper.java</code></pre></li><li><p>对性能要求比较高的话，或者需求比较多且改动较多的情况之下适用mybatis</p></li></ol><h2 id="简单介绍完了，开始重头戏">简单介绍完了，开始重头戏</h2><h3 id="第一步，先拿到数据库，这里提供一个实例数据库：">第一步，先拿到数据库，这里提供一个实例数据库：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> MyBatis_stu <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_bin; </span><br><span class="line"></span><br><span class="line">use MyBatis_stu ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> classinfo(</span><br><span class="line">  cid <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">  cname <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;班级编号&#x27;</span> </span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB auto_increment<span class="operator">=</span><span class="number">101</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8 <span class="keyword">collate</span><span class="operator">=</span>utf8_bin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> stuinfo (</span><br><span class="line">   sid <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">   sname <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">   cid <span class="type">int</span> comment <span class="string">&#x27;所在班级编号&#x27;</span>,</span><br><span class="line">   tel <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">unique</span> comment <span class="string">&#x27;联系方式&#x27;</span>,</span><br><span class="line">   addr <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">   <span class="keyword">constraint</span> FK_stuinfo_cid <span class="keyword">foreign</span> key(cid) <span class="keyword">references</span> classinfo(cid)</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB auto_increment<span class="operator">=</span><span class="number">101</span> <span class="keyword">default</span> charset<span class="operator">=</span>utf8 <span class="keyword">collate</span><span class="operator">=</span>utf8_bin;</span><br></pre></td></tr></table></figure><p>这一步，我觉得不要多说了，毕竟你学java到现在，这一步还是没看懂的话，我觉得你可以准备考虑考虑其他路了。</p><p>==第二步前台条件，你要创建好一个maven项目，并导入相关依赖，别告诉我你忘记了maven工程如何创建了？==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.xh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!--导入maven链接，让maven去下载</span></span><br><span class="line"><span class="comment">   https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-slf4j-impl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.17.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二步，根据我们的数据库创建Bean类，什么？你告诉我你不知道什么事Bean类？额，你该恶补一下java了。">第二步，根据我们的数据库创建Bean类，什么？你告诉我你不知道什么事Bean类？额，你该恶补一下java了。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassInfo</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer cid;</span><br><span class="line"><span class="keyword">private</span> String cname;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getCid</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCid</span><span class="params">(Integer cid)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.cid = cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCname</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCname</span><span class="params">(String cname)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.cname = cname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + ((cid == <span class="literal">null</span>) ? <span class="number">0</span> : cid.hashCode());</span><br><span class="line">result = prime * result + ((cname == <span class="literal">null</span>) ? <span class="number">0</span> : cname.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">ClassInfo</span> <span class="variable">other</span> <span class="operator">=</span> (ClassInfo) obj;</span><br><span class="line"><span class="keyword">if</span> (cid == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.cid != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cid.equals(other.cid))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (cname == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.cname != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cname.equals(other.cname))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;ClassInfo [cid=&quot;</span> + cid + <span class="string">&quot;, cname=&quot;</span> + cname + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//记得这里我的需要创建的构造方法，你可以选择跟我也可以选择不跟</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ClassInfo</span><span class="params">( String cname)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.cname = cname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ClassInfo</span><span class="params">(Integer cid, String cname)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.cid = cid;</span><br><span class="line"><span class="built_in">this</span>.cname = cname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ClassInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意，这个类，我实际上在本篇没用上，我会在下篇才用到，你可以自行选择创建或者不创建==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentInfo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer sid;<span class="comment">//学生id</span></span><br><span class="line"><span class="keyword">private</span> String sname;<span class="comment">//学生姓名</span></span><br><span class="line"><span class="keyword">private</span> Integer cid; <span class="comment">//外键管理，类id</span></span><br><span class="line"><span class="keyword">private</span> String tel; <span class="comment">//电话号码</span></span><br><span class="line"><span class="keyword">private</span> String addr;<span class="comment">//地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getSid</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSid</span><span class="params">(Integer sid)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSname</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSname</span><span class="params">(String sname)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getCid</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCid</span><span class="params">(Integer cid)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.cid = cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> tel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.tel = tel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddr</span><span class="params">(String addr)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + ((addr == <span class="literal">null</span>) ? <span class="number">0</span> : addr.hashCode());</span><br><span class="line">result = prime * result + ((cid == <span class="literal">null</span>) ? <span class="number">0</span> : cid.hashCode());</span><br><span class="line">result = prime * result + ((sid == <span class="literal">null</span>) ? <span class="number">0</span> : sid.hashCode());</span><br><span class="line">result = prime * result + ((sname == <span class="literal">null</span>) ? <span class="number">0</span> : sname.hashCode());</span><br><span class="line">result = prime * result + ((tel == <span class="literal">null</span>) ? <span class="number">0</span> : tel.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">StudentInfo</span> <span class="variable">other</span> <span class="operator">=</span> (StudentInfo) obj;</span><br><span class="line"><span class="keyword">if</span> (addr == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.addr != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!addr.equals(other.addr))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (cid == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.cid != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cid.equals(other.cid))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (sid == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.sid != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sid.equals(other.sid))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (sname == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.sname != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sname.equals(other.sname))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (tel == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.tel != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!tel.equals(other.tel))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;StudentInfo [sid=&quot;</span> + sid + <span class="string">&quot;, sname=&quot;</span> + sname + <span class="string">&quot;, cid=&quot;</span> + cid + <span class="string">&quot;, tel=&quot;</span> + tel + <span class="string">&quot;, addr=&quot;</span> + addr</span><br><span class="line">+ <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentInfo</span><span class="params">(Integer sid, String sname, Integer cid, String tel, String addr)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.sid = sid;</span><br><span class="line"><span class="built_in">this</span>.sname = sname;</span><br><span class="line"><span class="built_in">this</span>.cid = cid;</span><br><span class="line"><span class="built_in">this</span>.tel = tel;</span><br><span class="line"><span class="built_in">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三步，我们要准备数据库配置文件">第三步，我们要准备数据库配置文件</h3><p>这个自行确定，账号密码请你更改为自己安装数据库的账号密码，我给出我的实例==db.properties==</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/mybatis_stu?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useOldAliasMetadataBehavior=true</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h3 id="第四步，创建mybatis配置文件">第四步，创建mybatis配置文件</h3><p>有了上边三步的基础之后，我们需要配置<code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> </span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入配置文件 请好好的看我  我是db.properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置环境变量 development :开发环境 work :工作环境 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据库连接信息 POOLED UNPOOLED --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载mapper指向位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/ClassInfoMapper.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/StudentInfoMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，第四步就完成。</p><h3 id="第五步-配置映射">第五步,配置映射</h3><p>我想说的这上面的每一步都很重要，但是这一步也很重要，我们将相关SQL语句全部写在这里，这一步，我们其实可以说是直接对数据库进行操作,我的理解是这样的，但是不同的人有不同的理解，我也不能去把我的思想强加给别人，对吧？</p><p>==对了，如果你是初学者，我推荐你了解一下我在本项目的注释==<br>==ClassInfoMapper.xml==</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace :命名空间 ，就是用来避免命名冲突的，同一个命名空间下面都不能出现相同的id</span></span><br><span class="line"><span class="comment">时间上这个就是指向 &quot;ClassInfo.findAll&quot; 测试类的这个属性的ClassInfo代表命名空间，findAll代表id</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;ClassInfo&quot;</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 写insert delete update select 语句 每一个语句都有一个id,到时候通过命名空间.id 来获取对应的sql语句执行 </span></span><br><span class="line"><span class="comment">通过paramenterType 属性来指定这个sql执行语句的参数 通过resultType属性指定这个sql语句后返回值的类型，是每条结果对应的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xh.mybatis.bean.ClassInfo&quot;</span>&gt;</span></span><br><span class="line">select cid,cname from classinfo;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 假设我们要查询某单一的字段，我们需要的操作是如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;find&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xh.mybatis.bean.ClassInfo&quot;</span>&gt;</span></span><br><span class="line">select cid,cname from classinfo</span><br><span class="line">where cname=#&#123;cname&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.xh.mybatis.bean.ClassInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#&#123;&#125; 采用预编译的方式 $&#123;&#125; 采用字符串拼接的方法 --&gt;</span></span><br><span class="line">insert into classinfo values(0,#&#123;cname&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模糊查询 vague &#x27;%$&#123;parameters&#125;%&#x27; %#&#123;parameters&#125;%此时这个语句是有问题的，不能这么写 应该是 &#x27;%#&#123;parameters&#125;%&#x27; </span></span><br><span class="line"><span class="comment">_$&#123;parameters&#125;这种模糊查询也是可以的，但是没有%那么灵活，不过你觉得你使用哪个舒服就使用哪个 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByVague&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;com.xh.mybatis.bean.ClassInfo&quot;</span>&gt;</span></span><br><span class="line">select cid,cname from classinfo where cname like</span><br><span class="line">&#x27;_$&#123;parameters&#125;&#x27;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--更新表中的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">parameterType</span>=<span class="string">&quot;com.xh.mybatis.bean.ClassInfo&quot;</span>&gt;</span></span><br><span class="line">update classinfo set cname = #&#123;cname&#125; where cid =</span><br><span class="line">#&#123;cid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 删除表中的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">parameterType</span>=<span class="string">&quot;com.xh.mybatis.bean.ClassInfo&quot;</span>&gt;</span></span><br><span class="line">delete from classinfo where cid = #&#123;cid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>另一个文件StudentInfoMapper.xml我不会在本篇使用，故而我不在本篇展示，如果你感兴趣的话，请查看下篇。</p><h3 id="第六步，测试类的编写">第六步，测试类的编写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xh.mybatis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xh.mybatis.bean.ClassInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * classinfo中的所有的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>)</span><br><span class="line">)&#123;</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line">System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line"><span class="comment">//从sqlsession工厂中获取一个sql会话</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过这个回话执行与sql语句 </span></span><br><span class="line"><span class="comment">//将从表中查询的多条数据以作为对象的方式添加到list中</span></span><br><span class="line">List&lt;ClassInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;ClassInfo.findAll&quot;</span>);</span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在classinfo表中添加值 ，非动态添加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))&#123;</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过这个回话执行与sql语句，      </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里的new ClassInfo对象是由于我们创建的表是主键存在主键自增，故而在构造方法中不需要添加cid</span></span><br><span class="line"><span class="comment"> * 我们可以选择几种方式，这边我们对构造方法可以进行多种构造，让构造方法去选择添加，也可以直接用全部构造</span></span><br><span class="line"><span class="comment"> * 不够就是我们需要对构造方法进行置空处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;ClassInfo.add&quot;</span>,<span class="keyword">new</span> <span class="title class_">ClassInfo</span>(<span class="string">&quot;相关&quot;</span>));</span><br><span class="line">System.out.println(result);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ClassInfo表中</span></span><br><span class="line"><span class="comment"> * mybatis查询某数据库中某个值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建SqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们可以查看到当前查到的对象可以被查出来</span></span><br><span class="line"><span class="comment">//ClassInfo obj = sqlSession.selectOne(&quot;ClassInfo.find&quot;,new ClassInfo(&quot;四班&quot;));</span></span><br><span class="line"><span class="comment">//ClassInfo.find表示调用Mybatis中的com.xh.bean.ClassInfo下的id=find的sql语句</span></span><br><span class="line"><span class="comment">//如果我们使用的是MVC架构进行开发，这个语句应该是属于serviceImpl层调用dao接口的时候</span></span><br><span class="line"><span class="type">ClassInfo</span> <span class="variable">obj</span> <span class="operator">=</span> sqlSession.selectOne(<span class="string">&quot;ClassInfo.find&quot;</span>,<span class="string">&quot;四班&quot;</span>);</span><br><span class="line"><span class="comment">//查找单个</span></span><br><span class="line"><span class="comment">//int result = sqlSession.selectOne(&quot;Classinfo.find&quot;,&quot;四班&quot;);</span></span><br><span class="line">System.out.println(obj);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用模糊查询classInfo中的数据</span></span><br><span class="line"><span class="comment"> * 没做动态查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line">System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line"><span class="comment">//从sqlsession工厂中获取一个sql会话</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过这个回话执行与sql语句 </span></span><br><span class="line"><span class="comment">//将从表中查询的多条数据以作为对象的方式添加到list中</span></span><br><span class="line">List&lt;ClassInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;ClassInfo.findByVague&quot;</span>,<span class="string">&quot;班&quot;</span>);</span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新表中数据，先从简单的开始，ClassInfo表中的数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line">System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line"><span class="comment">//从sqlsession工厂中获取一个sql会话</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过这个回话执行与sql语句 </span></span><br><span class="line"><span class="comment">//将从表中查询的多条数据以作为对象的方式添加到list中</span></span><br><span class="line"><span class="type">ClassInfo</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassInfo</span>();</span><br><span class="line"></span><br><span class="line">obj.setCid(<span class="number">1</span>);</span><br><span class="line">obj.setCname(<span class="string">&quot;一班&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sqlSession.update(<span class="string">&quot;ClassInfo.update&quot;</span>,obj);</span><br><span class="line"><span class="keyword">if</span>(result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;ClassInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;ClassInfo.findAll&quot;</span>);</span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意在开启事务的情况下，你不提交数据库是查不到值的</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test6</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从sqlsession工厂中获取一个sql会话</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">List&lt;ClassInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;ClassInfo.findAll&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;删除之前的数据&quot;</span>);</span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ClassInfo obj = new ClassInfo(); obj.setCid(7);</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sqlSession.delete(<span class="string">&quot;ClassInfo.delete&quot;</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">if</span>(result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意在开启事务的情况下，你不提交数据库是查不到值的</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;删除之后的数据&quot;</span>);</span><br><span class="line">List&lt;ClassInfo&gt; cls1 = sqlSession.selectList(<span class="string">&quot;ClassInfo.findAll&quot;</span>);</span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">cls1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//至此，上边对mybatis的简单操作到此结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mybatis-注意事项：">mybatis 注意事项：</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### #&#123;&#125; 和 $&#123;&#125; 的区别</span><br></pre></td></tr></table></figure><p>注意：#{}是预编译处理，${}是字符替换</p><p>注意：#{}会在mybatis运行的过程中替换为？，调用PreparedStatement的set方法来赋值。</p><p>mybatis 在处理$()会将他替换为变量的值。</p><p>多使用#{}可以防止sql注入，提高系统安全性。</p><p>mybatis 推荐还是使用分页插件</p><p>一般mybatis是使用RowBounds对象进行分页，他是针对ResultSet结果集执行的内存分页，而非物理分页，可以在sql内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。</p><p>分页插件的原理是，在mybatis提供的接口，实现自定义插件，在将插件的拦截方法内拦截执行的sql，然后重写sql，根据dialect方言，添加对应的物理分页语句和物理分页查询。</p><p>如果使用mysql的limit的话会可能会出现数据丢失，索引失效等错误。</p><h2 id="动态查询和动态添加以及动态修改">动态查询和动态添加以及动态修改</h2><p>接上一节，注意本博客所有的代码都是建立在上一讲之上的，如果你没有上一讲的配置，这一讲代码我推荐你还是看看，直接搭建环境需要你有上一讲配置完毕，否则会出现许多错误，另外本篇并没有完成Mybatis动态SQL拼接的全部，只是举例一部分进行说明，我们在工作上或者实际生活中使用Mybatis，也是给我自己记录笔记，将来可以进行重构，然后慢慢完善。</p><p>废话不多说，我们开始：</p><p>第一步，完善上一篇没完善的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentInfo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer sid;<span class="comment">//学生id</span></span><br><span class="line"><span class="keyword">private</span> String sname;<span class="comment">//学生姓名</span></span><br><span class="line"><span class="keyword">private</span> Integer cid; <span class="comment">//外键管理，类id</span></span><br><span class="line"><span class="keyword">private</span> String tel; <span class="comment">//电话号码</span></span><br><span class="line"><span class="keyword">private</span> String addr;<span class="comment">//地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加一个多值传入的方法 在实体类中创建一个List用于存放要删除的sid</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; sidList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getSidList</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sidList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSidList</span><span class="params">(List&lt;Integer&gt; sidList)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sidList = sidList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentInfo</span><span class="params">(List&lt;Integer&gt; sidList)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.sidList = sidList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getSid</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSid</span><span class="params">(Integer sid)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sid = sid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getSname</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSname</span><span class="params">(String sname)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.sname = sname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getCid</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCid</span><span class="params">(Integer cid)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.cid = cid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> tel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.tel = tel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAddr</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddr</span><span class="params">(String addr)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">prime</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">result = prime * result + ((addr == <span class="literal">null</span>) ? <span class="number">0</span> : addr.hashCode());</span><br><span class="line">result = prime * result + ((cid == <span class="literal">null</span>) ? <span class="number">0</span> : cid.hashCode());</span><br><span class="line">result = prime * result + ((sid == <span class="literal">null</span>) ? <span class="number">0</span> : sid.hashCode());</span><br><span class="line">result = prime * result + ((sname == <span class="literal">null</span>) ? <span class="number">0</span> : sname.hashCode());</span><br><span class="line">result = prime * result + ((tel == <span class="literal">null</span>) ? <span class="number">0</span> : tel.hashCode());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == obj)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">StudentInfo</span> <span class="variable">other</span> <span class="operator">=</span> (StudentInfo) obj;</span><br><span class="line"><span class="keyword">if</span> (addr == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.addr != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!addr.equals(other.addr))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (cid == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.cid != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!cid.equals(other.cid))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (sid == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.sid != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sid.equals(other.sid))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (sname == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.sname != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!sname.equals(other.sname))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (tel == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (other.tel != <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!tel.equals(other.tel))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;StudentInfo [sid=&quot;</span> + sid + <span class="string">&quot;, sname=&quot;</span> + sname + <span class="string">&quot;, cid=&quot;</span> + cid + <span class="string">&quot;, tel=&quot;</span> + tel + <span class="string">&quot;, addr=&quot;</span> + addr</span><br><span class="line">+ <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentInfo</span><span class="params">(Integer sid, String sname, Integer cid, String tel, String addr)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.sid = sid;</span><br><span class="line"><span class="built_in">this</span>.sname = sname;</span><br><span class="line"><span class="built_in">this</span>.cid = cid;</span><br><span class="line"><span class="built_in">this</span>.tel = tel;</span><br><span class="line"><span class="built_in">this</span>.addr = addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体bean类，作为我们mybatis的映射文件，==注意，本篇和上篇都是简单的进行Mybatis的理解，在正式生产环境会有所差别==，本文档并没有十分规范的按照MVC模式进行，故而请各位体谅。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"> <span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- namespace :命名空间 ，就是用来避免命名冲突的，同一个命名空间下面都不能出现相同的id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;StudentInfo&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- mybatis-config.xml 中 &lt;typeAlias type=&quot;com.someapp.model.User&quot; alias=&quot;User&quot;/&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 写insert delete update select 语句 每一个语句都有一个id,到时候通过命名空间.id 来获取对应的sql语句执行 </span></span><br><span class="line"><span class="comment">通过paramenterType 属性来指定这个sql执行语句的参数 通过resultType属性指定这个sql语句后返回值的类型，是每条结果对应的类型 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;com.xh.mybatis.bean.StudentInfo&quot;</span>&gt;</span></span><br><span class="line">select sid,sname,cname,tel,addr from classinfo c, stuinfo s</span><br><span class="line">where c.cid = s.cid order by sid asc;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 让我们对具体多个值进行查找 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByValue&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;com.xh.mybatis.bean.StudentInfo&quot;</span>&gt;</span></span><br><span class="line">select sid,sname,tel,addr from stuinfo</span><br><span class="line"><span class="comment">&lt;!-- 动态SQL之前，我们先把最艰简单的sql语句添加上来 注意，在条件语句上，我们必须来一个一定成立的条件，方便我们对数据进行读取和判断，或者你确定了用户一定会输入值，否则不要轻易在这里留坑 --&gt;</span></span><br><span class="line"></span><br><span class="line">where sid != 0</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span></span><br><span class="line">and sname = #&#123;sname&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意，我这边缺一点东西，就是判断的时候，我们会有一个判断是否存在,的语句，如果存在多余的我还要将其分离出来 注意正确的sql语句书写 </span></span><br><span class="line"><span class="comment">and tel = #&#123;tel&#125; , addr = #&#123;addr&#125;是错误的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tel != null and addr != null&quot;</span>&gt;</span></span><br><span class="line">and tel = #&#123;tel&#125; and addr = #&#123;addr&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">order by sid asc;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 我觉得动态添加其实没必要，虽然我寻思也有，但是我还是觉得，动态添加真的没必要，毕竟这特么有点反人类，我寻思，让你添加数据，你特么 老老实实给我把数据填写完毕不就行了吗？ </span></span><br><span class="line"><span class="comment">还有就是，我们可以在业务层直接处理，在前端传数据过来，我们就可以判断然后将没传的值置空处理 如果你非要做，我给你这个参考一下 数据库支持多行插入 </span></span><br><span class="line"><span class="comment">&lt;insert id=&quot;insertTable&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot; parameterType </span></span><br><span class="line"><span class="comment">= &quot;com.***&quot;&gt; </span></span><br><span class="line"><span class="comment">insert into table (username, password, email, bio) values </span></span><br><span class="line"><span class="comment">&lt;foreach item=&quot;item&quot; collection=&quot;list&quot; separator=&quot;,&quot;&gt;</span></span><br><span class="line"><span class="comment"> (#&#123;item.username&#125;, #&#123;item.password&#125;, </span></span><br><span class="line"><span class="comment">#&#123;item.email&#125;, #&#123;item.bio&#125;) </span></span><br><span class="line"><span class="comment">&lt;/foreach&gt; </span></span><br><span class="line"><span class="comment">&lt;/insert&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.xh.mybatis.bean.StudentInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--#&#123;&#125; 采用预编译的方式 $&#123;&#125; 采用字符串拼接的方法 --&gt;</span></span><br><span class="line">insert into stuinfo values(0,#&#123;sname&#125;,#&#123;cid&#125;,#&#123;tel&#125;,#&#123;addr&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--接下来就是我们的删除操作了，这个就很简单了，动态删除？ 得了吧，我这边给个思路，但是我不做，也就是一次传多个值，然后删除多个值，</span></span><br><span class="line"><span class="comment">1 delete from table where sid in( $&#123;sid&#125; ) 这也是一种方式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> &lt;select id=&quot;deleteByIds&quot; parameterType=&quot;Integer&quot;&gt; </span></span><br><span class="line"><span class="comment">delete from accounts where id in </span></span><br><span class="line"><span class="comment">&lt;foreach collection=&quot;ids&quot; open=&quot;(&quot; close=&quot;)&quot; </span></span><br><span class="line"><span class="comment">separator=&quot;,&quot; item=&quot;id&quot;&gt; #&#123;id&#125; </span></span><br><span class="line"><span class="comment">&lt;/foreach&gt; </span></span><br><span class="line"><span class="comment">&lt;/select&gt; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;delete id=&quot;deleteValue&quot; </span></span><br><span class="line"><span class="comment">parameterType=&quot;com.xh.mybatis.bean.StudentInfo&quot;&gt; delete from stuinfo where </span></span><br><span class="line"><span class="comment">sid != 0 and sid = #&#123;sid&#125;; </span></span><br><span class="line"><span class="comment">&lt;/delete&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteValue&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">parameterType</span>=<span class="string">&quot;com.xh.mybatis.bean.StudentInfo&quot;</span>&gt;</span></span><br><span class="line">delete from stuinfo where cid != 0 and sid = #&#123;sid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 重头戏来了，我们有些时候会涉及到改操作，但是改操作只对用户的某一个数据进行更改 也可能对多个数据进行更改，故而我们需要判断用户传过来的数据，这个时候就很重要了 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">parameterType</span>=<span class="string">&quot;com.xh.mybatis.bean.StudentInfo&quot;</span>&gt;</span></span><br><span class="line">update stuinfo set</span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sname != null&quot;</span>&gt;</span></span><br><span class="line">sname = #&#123;sname&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;cid != null&quot;</span>&gt;</span></span><br><span class="line">, cid = #&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tel != null&quot;</span>&gt;</span></span><br><span class="line">, tel = #&#123;tel&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;addr != null&quot;</span>&gt;</span></span><br><span class="line">, addr = #&#123;addr&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">where sid = #&#123;sid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>这里我们主要使用if语句来判断用户是否传值，如果传值，我们采用mybatis判断进行动态拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StuTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询表中所有数据，studentInfo，先从一个简单的表开始吧，然后逐层加难</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//加载mybatis-config.xml配置文件</span></span><br><span class="line">   <span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">List&lt;StudentInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;StudentInfo.findAll&quot;</span>);</span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多值查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//加载mybatis-config.xml配置文件</span></span><br><span class="line">   <span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//多值查询，为了避免我使用new StudentInfo(****)</span></span><br><span class="line"><span class="type">StudentInfo</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentInfo</span>();</span><br><span class="line"><span class="comment">//注意，这里我就开始使用动态sql进行判断了</span></span><br><span class="line">stu.setSname(<span class="string">&quot;王老五&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//stu.setTel(&quot;15973121101&quot;);</span></span><br><span class="line"><span class="comment">//stu.setAddr(&quot;湖南衡阳&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//我们查询的时候可以是一个值，也可以是多个值，故而我们通常将查到的值存到集合中，至于是哪种集合，你选择</span></span><br><span class="line">List&lt;StudentInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;StudentInfo.findByValue&quot;</span>, stu);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多值添加</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//加载mybatis-config.xml配置文件</span></span><br><span class="line">   <span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//先查询所有数据</span></span><br><span class="line">List&lt;StudentInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;StudentInfo.findAll&quot;</span>);</span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="type">StudentInfo</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentInfo</span>();</span><br><span class="line"></span><br><span class="line">stu.setSname(<span class="string">&quot;王老五&quot;</span>);</span><br><span class="line">stu.setCid(<span class="number">1</span>);</span><br><span class="line">stu.setTel(<span class="string">&quot;16682187574&quot;</span>);</span><br><span class="line">stu.setAddr(<span class="string">&quot;湖南长沙&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sqlSession.insert(<span class="string">&quot;StudentInfo.add&quot;</span>,stu);</span><br><span class="line"><span class="keyword">if</span>(result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入后提交成功之后再次查询</span></span><br><span class="line">List&lt;StudentInfo&gt; cls1 = sqlSession.selectList(<span class="string">&quot;StudentInfo.findAll&quot;</span>);</span><br><span class="line">cls1.forEach(System.out::println);</span><br><span class="line">sqlSession.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//加载mybatis-config.xml配置文件</span></span><br><span class="line">   <span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//在删除之前，我们先查询表中数据</span></span><br><span class="line">List&lt;StudentInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;StudentInfo.findAll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="type">StudentInfo</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentInfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//System.out.println(sidList);</span></span><br><span class="line"><span class="comment">//System.out.println(stu.getSidList());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//你要删除的id号</span></span><br><span class="line">stu.setSid(<span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sqlSession.delete(<span class="string">&quot;StudentInfo.deleteValue&quot;</span>,stu);</span><br><span class="line"><span class="keyword">if</span>(result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqlSession.commit();</span><br><span class="line"></span><br><span class="line">List&lt;StudentInfo&gt; cls1 = sqlSession.selectList(<span class="string">&quot;StudentInfo.findAll&quot;</span>);</span><br><span class="line"><span class="comment">//遍历list中的所有的值</span></span><br><span class="line">cls1.forEach(System.out::println);</span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//加载mybatis-config.xml配置文件</span></span><br><span class="line">   <span class="type">InputStream</span> <span class="variable">reader</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建sqlSession工厂</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//多值查询，为了避免我使用new StudentInfo(****)</span></span><br><span class="line"><span class="type">StudentInfo</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentInfo</span>();</span><br><span class="line"><span class="comment">//注意，这里我就开始使用动态sql进行判断了</span></span><br><span class="line"><span class="comment">//cid为空只是因为我没查，不要误会。</span></span><br><span class="line">stu.setSname(<span class="string">&quot;王老六&quot;</span>);  <span class="comment">//StudentInfo [sid=9, sname=王老六, cid=null, tel=16682187574, addr=湖南长沙]</span></span><br><span class="line">stu.setCid(<span class="number">2</span>);  <span class="comment">//更改班级编号，前台条件班级必须存在</span></span><br><span class="line">stu.setSid(<span class="number">9</span>);  <span class="comment">//更新语句的条件</span></span><br><span class="line"></span><br><span class="line">stu.setTel(<span class="string">&quot;15973121103&quot;</span>);</span><br><span class="line">stu.setAddr(<span class="string">&quot;湖南衡阳&quot;</span>);</span><br><span class="line"><span class="comment">// 更新后的数据 StudentInfo [sid=9, sname=王老六, cid=null, tel=15973121103, addr=湖南衡阳]</span></span><br><span class="line"><span class="comment">//我们查询的时候可以是一个值，也可以是多个值，故而我们通常将查到的值存到集合中，至于是哪种集合，你选择</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sqlSession.update(<span class="string">&quot;StudentInfo.update&quot;</span>,stu);</span><br><span class="line"><span class="keyword">if</span>(result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;StudentInfo&gt; cls = sqlSession.selectList(<span class="string">&quot;StudentInfo.findByValue&quot;</span>, stu);</span><br><span class="line"></span><br><span class="line">cls.forEach(System.out::println);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mybatis-Spring框架">mybatis + Spring框架</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个简单的数据库</span></span><br><span class="line"><span class="keyword">create</span> database mybatis if <span class="keyword">not</span> <span class="keyword">exists</span> ;</span><br><span class="line">use mybatis;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">id <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key ,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="keyword">null</span>,</span><br><span class="line">    pwd <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="keyword">null</span></span><br><span class="line">)engine<span class="operator">=</span>innoDB <span class="keyword">default</span> charset<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装mybatis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>快速上手</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    factoryBean.setDataSource(dataSource());</span><br><span class="line">    <span class="keyword">return</span> factoryBean.getObject();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>SqlSessionFactory</code> 需要一个 <code>DataSource</code>（数据源）。这可以是任意的 <code>DataSource</code>，只需要和配置其它 Spring 数据库连接一样配置它就可以了。</p><p>假设你定义了一个如下的 mapper 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">  <span class="meta">@Select(&quot;SELECT * FROM users WHERE id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">  User <span class="title function_">getUser</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> String userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么可以通过 <code>MapperFactoryBean</code> 将接口加入到 Spring 中:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperInterface&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.mybatis.spring.sample.mapper.UserMapper&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是：所指定的映射器类<strong>必须</strong>是一个接口，而不是具体的实现类。在这个示例中，通过注解来指定 SQL 语句，但是也可以使用 MyBatis 映射器的 XML 配置文件。</p><p>配置好之后，你就可以像 Spring 中普通的 bean 注入方法那样，将映射器注入到你的业务或服务对象中。<code>MapperFactoryBean</code> 将会负责 <code>SqlSession</code> 的创建和关闭。 如果使用了 Spring 的事务功能，那么当事务完成时，session 将会被提交或回滚。最终任何异常都会被转换成 Spring 的 <code>DataAccessException</code> 异常。</p><p>使用 Java 代码来配置的方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> UserMapper <span class="title function_">userMapper</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">SqlSessionTemplate</span> <span class="variable">sqlSessionTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory());</span><br><span class="line">    <span class="keyword">return</span> sqlSessionTemplate.getMapper(UserMapper.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要调用 MyBatis 的数据方法，只需一行代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FooServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">FooService</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">FooServiceImpl</span><span class="params">(UserMapper userMapper)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userMapper = userMapper;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> User <span class="title function_">doSomeBusinessStuff</span><span class="params">(String userId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.userMapper.getUser(userId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mybatis-Spring">Mybatis-Spring</h3><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 <code>SqlSession</code> 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 <code>DataAccessException</code>。 最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。</p><table><thead><tr><th>MyBatis-Spring</th><th>MyBatis</th><th>Spring Framework</th><th>Spring Batch</th><th>Java</th></tr></thead><tbody><tr><td><strong>2.0</strong></td><td>3.5+</td><td>5.0+</td><td>4.0+</td><td>Java 8+</td></tr><tr><td><strong>1.3</strong></td><td>3.4+</td><td>3.2.2+</td><td>2.1+</td><td>Java 6+</td></tr></tbody></table><p>初始配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>枚举类型配置案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">    <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.apache.ibatis.submitted.rounding.Mapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.submitted.rounding.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usermap&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;funkyNumber&quot;</span> <span class="attr">property</span>=<span class="string">&quot;funkyNumber&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;roundingMode&quot;</span> <span class="attr">property</span>=<span class="string">&quot;roundingMode&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;usermap&quot;</span>&gt;</span></span><br><span class="line">select * from users</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">    insert into users (id, name, funkyNumber, roundingMode) values (</span><br><span class="line">    #&#123;id&#125;, #&#123;name&#125;, #&#123;funkyNumber&#125;, #&#123;roundingMode&#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;org.apache.ibatis.submitted.rounding.User&quot;</span> <span class="attr">id</span>=<span class="string">&quot;usermap2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;funkyNumber&quot;</span> <span class="attr">property</span>=<span class="string">&quot;funkyNumber&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;roundingMode&quot;</span> <span class="attr">property</span>=<span class="string">&quot;roundingMode&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;usermap2&quot;</span>&gt;</span></span><br><span class="line">select * from users2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert2&quot;</span>&gt;</span></span><br><span class="line">    insert into users2 (id, name, funkyNumber, roundingMode) values (</span><br><span class="line">    #&#123;id&#125;, #&#123;name&#125;, #&#123;funkyNumber&#125;, #&#123;roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis链接数据库的xml书写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--这是一种写法可以将驱动写在类里边，然后通过将依赖注入值@Value--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>链接mysql链接依赖url</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池学习</title>
      <link href="/posts/ac133265.html"/>
      <url>/posts/ac133265.html</url>
      
        <content type="html"><![CDATA[<p>涉及到线程池之前，我们需要知道创建线程的几种方式，在线程的基础之上，我们进一步学习线程池。</p><h2 id="线程池">线程池</h2><h4 id="线程池是什么？">线程池是什么？</h4><p>线程池是一种池化技术，使用池化技术管理和使用线程的一种机制。</p><p>池化技术：在利用资源之前，我们需要提前准备一些资源，在需要时候重复使用提前准备的资源。</p><p>池化技术（Pooling）是一种常用的优化技术，它的目的是通过<strong>重复使用已经创建的对象或者资源，来避免频繁的创建和销毁对象或者资源所带来的开销</strong>。通过池化技术，可以减少创建和销毁对象的开销，从而提高程序的性能和稳定性。在计算机领域中，池化技术通常用于以下几个方面：</p><ol><li><p>数据库连接池：<strong>通过重复使用已经创建的数据库连接</strong>，避免频繁地创建和销毁数据库连接所带来的开销。</p></li><li><p>线程池：<strong>通过重复使用已经创建的线程</strong>，避免频繁地创建和销毁线程所带来的开销。</p></li><li><p>对象池：<strong>通过重复使用已经创建的对象</strong>，避免频繁地创建和销毁对象所带来的开销。</p></li><li><p>内存池：<strong>通过重复使用已经分配的内存</strong>，避免频繁地分配和释放内存所带来的开销。</p></li></ol><p>在实际应用中，池化技术可以帮助我们提高程序的性能和稳定性，因此在设计和开发程序时，可以考虑采用池化技术来优化程序的性能。</p><h4 id="线程池的使用方式">线程池的使用方式</h4><ul><li>通过ThreadPoolExecutor创建的线程池；</li><li>通过Executors创建的线程池。</li></ul><p><strong>线程池的创建方式总共包含以下7种（其中6种是通过Executors 创建的，1种是通过<a href="https://so.csdn.net/so/search?q=ThreadPoolExecutor&amp;spm=1001.2101.3001.7020">ThreadPoolExecutor</a>创建的）：</strong></p><ul><li>Executors.<strong>newFixedThreadPool</strong>：创建一个<strong>固定大小</strong>的线程池，可以控制并发的线程数，超出的线程会在队列中等待；</li><li>Executors.<strong>newCachedThreadPool</strong>：创建一个<strong>可缓存</strong>的线程池，若线程超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程；</li><li>Executors.<strong>newScheduledThreadPool</strong>：创建一个可以<strong>执行延迟任务</strong>的线程池；</li><li>Executors.<strong>newSingleThreadExecutor</strong>：创建<strong>单个线程</strong>的线程池，它可以保证先进先出的执行顺序</li><li>Executors.<strong>newSingleThreadScheduledExecutor</strong>：创建一个<strong>可以执行延迟任务</strong>的单个线程的线程池；</li><li>Executors.<strong>newWorkStealingPool</strong>：创建一个<strong>抢占式执行</strong>的线程池；</li><li>ThreadPoolExecutor：<strong>手动创建线程池</strong> 的方式，它最多包含了7个参数可供设置，最少可设置5个参数。</li></ul><h3 id="Executors">Executors</h3><h4 id="创建固定数量的线程池">创建固定数量的线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//创建一个包含5个线程的线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//给予10个资源分配给5个线程去分</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i ++) &#123;</span><br><span class="line">threadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;线程名称:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行完毕后记得关闭。预防占用资源</span></span><br><span class="line">threadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line"><span class="comment">//创建5个线程</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//使用线程池执行任务，也给线程池添加任务</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span> ; i ++) &#123;</span><br><span class="line"><span class="comment">//使用Callable据接口来创建线程</span></span><br><span class="line">Future&lt;Integer&gt; result = threadPool.submit(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">9</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;随机数：&quot;</span> + num);</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;线程池的返回结果：&quot;</span> + result.get());</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//执行完毕后记得关闭。预防占用资源</span></span><br><span class="line">threadPool.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述两种方式，我发现向线程池中添加任务的方式有两种：</p><ul><li>execute : 只执行不带返回值的任务</li><li>submit：可以执行又返回值的任务或者没有返回值的任务。</li></ul><h4 id="线程池工厂">线程池工厂</h4><p>在上面的执行过程中，可以看到没有设置线程名称时候，他就会是一个默认名，线程工厂可以让我们自定义线程名称或者优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//1.创建线程工厂</span></span><br><span class="line">        ThreadFactory threadFactory=<span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                <span class="comment">//设置线程命名规则</span></span><br><span class="line">                thread.setName(<span class="string">&quot;我的线程-&quot;</span>+r.hashCode());</span><br><span class="line">                <span class="comment">//设置线程优先级</span></span><br><span class="line">                thread.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>, threadFactory);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            threadPool.submit(()-&gt;&#123;</span><br><span class="line">                <span class="comment">//任务</span></span><br><span class="line">                <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程池开始执行了：&quot;</span>+thread.getName()+<span class="string">&quot; &quot;</span>+thread.getPriority());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当程序执行完毕后记得关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>线程池开始执行了：我的线程-1826771953 10<br>线程池开始执行了：我的线程-455659002 10<br>线程池开始执行了：我的线程-245257410 10<br>线程池开始执行了：我的线程-1705736037 10<br>线程池开始执行了：我的线程-1406718218 10</p></blockquote><h4 id="带缓存的线程池">带缓存的线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">1000</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> finalI=i;</span><br><span class="line">            threadPool.submit(()-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i:&quot;</span>+finalI+<span class="string">&quot;|线程名称：&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当程序执行完毕后记得关闭线程池</span></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此我们发现，我们给线程一千个任务的时候，他并不会创建1000个线程，我们通过执行发现最多会创建100多个线程，然后会进行复用。</p><p>故此我们在这里总结一下：</p><p>线程池中的线程也不能无限制地被创建。线程池中的线程数量应该根据实际情况进行适当的设置，以便充分利用系统资源，提高系统的性能和稳定性。如果线程池中的线程数量过多，会导致系统资源的耗尽，从而导致系统的性能下降或崩溃。另外，线程的创建和销毁也会带来一定的开销，如果线程池中的线程数量过多，会增加线程的创建和销毁开销，从而降低系统的性能和稳定性。</p><p>因此，在实际应用中，需要根据实际情况来设置线程池的大小，以满足应用的需要，并保证系统的性能和稳定性。一般来说，线程池中的线程数量应该根据系统的 CPU 核心数、内存大小、任务类型和系统负载等因素来进行设置，以达到最优的效果。</p><h4 id="执行定时任务的线程池">执行定时任务的线程池</h4><p>延迟执行一次：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加任务的时间：&quot;</span>+ LocalDate.now());</span><br><span class="line">        scheduleTest(service);<span class="comment">//只执行一次的定时任务</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只执行一次的定时任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> service</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduleTest</span><span class="params">(ScheduledExecutorService service)</span> &#123;</span><br><span class="line">        <span class="comment">//执行定时任务(延迟3秒执行)</span></span><br><span class="line">        service.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行了任务：&quot;</span>+LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//当循环执行完毕后记得关闭线程池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本延迟执行任务，只能执行一次。</p><p>创建这个线程池有3个参数</p><ul><li>执行任务</li><li>延迟n秒执行</li><li>配合执行的时间单位</li></ul><p><strong>固定频率执行</strong></p><p>我们可以让线程以以固定频率间隔n秒执行，创建这个线程池有四个参数：</p><ol><li>执行任务</li><li>延迟n秒执行</li><li>执行定时任务的频率</li><li>配合3执行的时间单位</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加任务的时间：&quot;</span>+ LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2S之后开始执行定时任务，定时任务每4s执行一次</span></span><br><span class="line">        service.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行任务：&quot;</span>+LocalDateTime.now());</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">2</span>,<span class="number">4</span>,TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//由于是定时任务，故而不能够让他关闭，我们需要通过循环来控制关闭，这里我们就不在描述</span></span><br><span class="line">        <span class="comment">// service.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo7</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> &#123;</span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;添加任务的时间：&quot;</span>+ LocalDateTime.now());</span><br><span class="line"><span class="comment">//    //2S之后开始执行定时任务，定时任务每4s执行一次</span></span><br><span class="line"><span class="comment">//    service.scheduleAtFixedRate(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public void run() &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;执行任务：&quot;+LocalDateTime.now());</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                Thread.sleep(1000);</span></span><br><span class="line"><span class="comment">//            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;,2,4,TimeUnit.SECONDS);</span></span><br><span class="line">    <span class="comment">//2s之后开始执行，每次执行间隔4s</span></span><br><span class="line">    service.scheduleWithFixedDelay(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行任务：&quot;</span>+LocalDateTime.now());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">2</span>,<span class="number">4</span>,TimeUnit.SECONDS);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Java 中，Timer 类提供了两个方法用于定时执行任务，分别是 <strong>scheduleAtFixedRate() 和 scheduleWithFixedDelay()</strong>。这两个方法都可以实现定时执行任务的功能，但它们的执行方式略有不同，具体区别如下：</p><ol><li><p>scheduleAtFixedRate() 方法：该方法是按照固定的时间间隔执行任务，它会按照指定的时间间隔不断地执行任务，无论上一次任务是否执行完成，也不考虑任务的执行时间，即使任务的执行时间超过了时间间隔，也会按照指定的时间间隔再次执行任务。</p></li><li><p>scheduleWithFixedDelay() 方法：该方法是在任务执行完成后，等待指定的时间间隔再次执行任务，它会在任务执行完成后，等待指定的时间间隔，然后再次执行任务，考虑了任务的执行时间。也就是说，该方法会在上一次任务执行完成后，等待指定的时间间隔，然后再次执行任务。</p></li></ol><p>因此，如果需要按照固定的时间间隔执行任务，无论任务是否执行完成，都需要按照指定的时间间隔再次执行任务，可以使用 scheduleAtFixedRate() 方法；如果需要在任务执行完成后，等待指定的时间间隔再次执行任务，可以使用 scheduleWithFixedDelay() 方法。</p><h4 id="单线程的线程池">单线程的线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo8</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> finalI=i;</span><br><span class="line">executorService.submit(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;任务名：&quot;</span>+finalI+<span class="string">&quot;线程名：&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//老样子执行完毕后记得关闭</span></span><br><span class="line">executorService.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单线程的线程池和单线程有什么区别？以及其各自的作用？</p><p>单线程的线程池和单线程之间有以下几点区别：</p><ol><li><p>线程池是一种可以管理和调度多个线程的机制，可以重复利用线程，从而避免频繁创建和销毁线程的开销，提高程序的性能和稳定性。而单线程则只能执行一个任务，无法进行任务的并行处理。</p></li><li><p>线程池中的线程数量可以根据实际需求进行动态调整，可以增加或减少线程的数量，以适应不同的负载和任务类型。而单线程则只能处理一个任务，无法进行线程数量的动态调整。</p></li><li><p>线程池可以管理和调度多个任务。</p></li></ol><h4 id="定时任务的单线程线程池">定时任务的单线程线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo9</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ScheduledExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;执行任务的时间：&quot;</span> + LocalDateTime.now());</span><br><span class="line">service.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;执行任务：&quot;</span> + LocalDateTime.now());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行任务 2秒后执行 ，单位 TimeUnit.Seconds秒</span></span><br><span class="line">&#125;, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//当定时任务执行完毕后记得关闭</span></span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="根据当前CPU生成线程池">根据当前CPU生成线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//根据当前电脑的CPU来创建线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newWorkStealingPool();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">100</span>; i ++ ) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">finaIi</span>  <span class="operator">=</span> i ;</span><br><span class="line">service.submit(()-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;任务：&quot;</span> + finaIi + <span class="string">&quot;线程名：&quot;</span> + Thread.currentThread());</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断线程是否</span></span><br><span class="line"><span class="keyword">while</span>(!service.isTerminated()) &#123;</span><br><span class="line"><span class="comment">//执行完毕后记得关闭线程池</span></span><br><span class="line">service.shutdown();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ThreadPoolExecutor">ThreadPoolExecutor</h3><h4 id="ThreadPoolExecutor和Executors比较"><strong>ThreadPoolExecutor和Executors</strong>比较</h4><p>都是Java中用于生成线程池的类，它们有以下几个区别：</p><ol><li><p>ThreadPoolExecutor是一个<strong>更底层的类</strong>，它提供了更多的配置选项，如线程池的核心线程数、最大线程数、任务队列等，可以更加灵活地控制线程池的行为。<strong>而Executors则是在ThreadPoolExecutor基础上进行了封装</strong>，<strong>提供了一些预定义的线程池配置选项，如newFixedThreadPool、newCachedThreadPool等</strong>，方便用户快速创建线程池。</p></li><li><p>ThreadPoolExecutor可以通过<strong>自定义RejectedExecutionHandler来处理任务被拒绝执行的情况</strong>，而<strong>Executors只提供了一些简单的拒绝策略</strong>，如抛出异常、丢弃任务等。</p></li><li><p><strong>Executors生成的线程池通常是无界队列的</strong>，如果任务数量过多，可能会导致内存溢出等问题。而<strong>ThreadPoolExecutor则可以通过配置有界队列或者拒绝</strong>策略来避免这种情况。</p></li><li><p>在Java 8之前，Executors生成的线程池中的工作线程都是<strong>非守护线程</strong>，即使主线程结束，工作线程也会继续执行。而ThreadPoolExecutor则可以通过设置工作线程为守护线程来避免这种情况。</p></li></ol><p>ThreadPoolExecutor和Executors各自可以解决的问题也有所差异。ThreadPoolExecutor适合于需要更精细的线程池配置、需要自定义拒绝策略、需要有界队列等情况。而Executors则适合于快速创建线程池，且任务数量不会过多的情况。需要根据具体场景选择合适的类来生成线程池。</p><h4 id="Executors存在的问题">Executors存在的问题</h4><p>虽然Executors可以快速创建线程池，但在一些情况下可能会存在问题，如下：</p><ol><li><p><strong>FixedThreadPool</strong>和<strong>SingleThreadExecutor</strong>的线程数是固定的，如果任务数量过多，会导致队列中的任务堆积，从而占用大量内存，甚至导致OOM异常。</p></li><li><p>CachedThreadPool的最大线程数是<strong>Integer.MAX_VALUE</strong>，如果<strong>任务数量过多，会创建大量线程，占用大量系统资源，导致系统崩溃</strong>。</p></li><li><p>Executors生成的线程池中的工作线程都是<strong>非守护线程</strong>，即使<strong>主线程结束，工作线程也会继续执行。如果应用程序没有显式地终止线程池，会导致应用程序无法正常退出，从而导致内存泄漏等问题。</strong></p></li><li><p>Executors提供的拒绝策略有一些局限性，<strong>例如在任务被拒绝后，无法重新提交任务等</strong>。</p></li></ol><p>因此，对于不同的应用场景，应该选择合适的线程池类型或者直接使用ThreadPoolExecutor来手动创建线程池，以避免出现上述问题。</p><h4 id="ThreadPoolExecutor的介绍">ThreadPoolExecutor的介绍</h4><p>ThreadPoolExecutor是Java中用于创建线程池的类，它有以下几个参数：</p><ol><li><p><strong>corePoolSize</strong>：线程池的核心线程数，即线程池中始终存在的线程数。如果线程池中的线程数小于corePoolSize，则会创建新的线程来执行任务，直到线程数等于corePoolSize。</p></li><li><p><strong>maximumPoolSize</strong>：线程池的最大线程数，即线程池中最多能存在的线程数。如果任务数量超过了线程池的容量，则会根据拒绝策略处理这些任务。</p></li><li><p><strong>keepAliveTime</strong>：线程池中非核心线程的空闲存活时间。如果线程池中的线程数大于corePoolSize，并且某个线程空闲的时间超过了keepAliveTime，则该线程会被销毁直到线程池中的线程数等于corePoolSize。</p></li><li><p><strong>TimeUnit</strong>：keepAliveTime的时间单位，例如TimeUnit.SECONDS。</p></li><li><p><strong>workQueue</strong>：线程池中的任务队列，用于存储等待执行的任务。可以选择不同类型的队列，如有界队列和无界队列。</p></li><li><p><strong>threadFactory</strong>：线程工厂，用于创建新的线程。可以自定义线程的名称、优先级等属性。</p></li><li><p><strong>handler</strong>：拒绝策略，用于处理无法执行的任务。可以选择不同的策略，如抛出异常、丢弃任务、等待一段时间再重试等。</p></li></ol><p>这些参数的具体作用如下：</p><blockquote><ol><li>通过corePoolSize和maximumPoolSize来控制线程池中的工作线程数量，以达到最优的性能和资源利用效率。</li><li>通过keepAliveTime和workQueue来控制线程池中线程的存活时间和任务的排队策略，以避免任务堆积和资源浪费。</li><li>通过threadFactory可以自定义线程的属性，如线程名称等。</li></ol></blockquote><p>当我们使用ThreaPoolExecutor创建线程池的时候，默认最少使用5个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ThreadFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line"><span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line"><span class="number">2</span>,</span><br><span class="line"><span class="number">5</span>,</span><br><span class="line"><span class="number">10</span>,</span><br><span class="line">TimeUnit.SECONDS,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;Runnable&gt;(<span class="number">2</span>),</span><br><span class="line">factory,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt; <span class="number">6</span> ; i ++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">finaIi</span> <span class="operator">=</span> i ;</span><br><span class="line">executor.submit(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span> * finaIi);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;任务：&quot;</span> + finaIi);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//执行循环完毕后关闭线程池</span></span><br><span class="line">executor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线程池的执行流程">线程池的执行流程</h4><p>线程池的执行流程如下：</p><ol><li><p>首先，线程池会创建一些初始的核心线程，并将它们放入工作队列中。</p></li><li><p>当有任务进来时，线程池会从工作队列中选取一个线程来执行任务。</p></li><li><p>如果此时线程池中的线程数小于核心线程数(corePoolSize)且有空闲线程，则会立即创建新的线程来执行任务。</p></li><li><p>如果此时线程池中的线程数已经达到了核心线程数，且工作队列已满，则会将任务提交到线程池的任务队列中。</p></li><li><p>如果此时任务队列已满，且线程池中的线程数小于最大线程数(maximumPoolSize)，则会创建新的线程来执行任务。</p></li><li><p>如果此时线程池中的线程数已经达到了最大线程数，且任务队列已满，则会按照拒绝策略(RejectedExecutionHandler)来处理任务。常见的拒绝策略有：抛出异常、丢弃任务、等待一段时间再重试等。</p></li><li><p>当某个线程执行完任务后，会从任务队列中取出下一个任务继续执行，直到线程池关闭或者出现异常。</p></li></ol><p>需要注意的是，线程池的执行流程是异步的，任务的执行顺序是不确定的。线程池在执行任务时，会根据任务的优先级、执行时间等因素来选择执行顺序，具体的执行流程会根据不同的线程池实现而有所差异。</p><h4 id="拒绝策略">拒绝策略</h4><p>目前线程池的拒绝策略共计有5种，其中有四种JDK提供的和一种自定义拒绝策略。</p><p>线程池的拒绝策略指的是当线程池中的线程已经全部被占用，队列也已满，无法继续接受新的任务时，应该如何处理这些被拒绝的任务。常见的线程池拒绝策略包括：</p><ol><li><strong>AbortPolicy（默认策略）</strong>：直接抛出RejectedExecutionException异常，表示拒绝执行该任务。</li><li><strong>CallerRunsPolicy</strong>：由调用线程处理该任务，即在提交任务的线程中直接执行该任务。这种策略可能会降低整个系统的吞吐量，因为提交任务的线程可能不是专门用来处理任务的线程，而是业务线程。</li><li><strong>DiscardPolicy</strong>：直接丢弃该任务，不做任何处理。</li><li><strong>DiscardOldestPolicy</strong>：抛弃最早加入队列的任务，并尝试再次提交当前任务。</li><li><strong>自定义拒绝策略</strong>：用户可以根据业务场景，自定义拒绝策略，例如将任务记录到日志中、将任务放到消息队列中等等。</li></ol><p>选择合适的线程池拒绝策略，可以更好地保障系统的稳定性和可靠性。</p><p>第一种<strong>AbortPolicy</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ThreadFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line"><span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line"><span class="number">2</span>,</span><br><span class="line"><span class="number">2</span>,</span><br><span class="line"><span class="number">10</span>,</span><br><span class="line">TimeUnit.SECONDS,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">2</span>),</span><br><span class="line">factory,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy() <span class="comment">//拒绝策略</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; <span class="number">5</span>; i ++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">finaIi</span> <span class="operator">=</span> i;</span><br><span class="line">executor.submit(()-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>*finaIi);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;任务：&quot;</span> + finaIi);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//执行循环完毕后关闭线程池</span></span><br><span class="line">executor.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种<strong>CallerRunsPolicy()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动方式创建线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ThreadFactory factory=<span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ThreadPoolExecutor executor=<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">2</span>),</span><br><span class="line">            factory,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());  <span class="comment">//拒绝策略</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> finalI=i;</span><br><span class="line">            executor.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>*finalI);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;任务：&quot;</span>+finalI);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行循环完毕后关闭线程池</span></span><br><span class="line">executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种：<strong>DiscardPolicy</strong> ()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ThreadFactory factory=<span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ThreadPoolExecutor executor=<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">10</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">2</span>),</span><br><span class="line">                factory,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy()</span><br><span class="line">                );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> finalI=i;</span><br><span class="line">            executor.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>*finalI);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;任务：&quot;</span>+finalI);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行循环完毕后关闭线程池</span></span><br><span class="line">executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四种：<strong>DiscardOldestPolicy()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ThreadFactory factory=<span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ThreadPoolExecutor executor=<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">10</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">2</span>),</span><br><span class="line">                factory,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy() <span class="comment">//拒绝策略</span></span><br><span class="line">                );</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> finalI=i;</span><br><span class="line">            executor.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>*finalI);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;任务：&quot;</span>+finalI);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行循环完毕后关闭线程池</span></span><br><span class="line">executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第五种：自定义拒绝策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ThreadFactory factory=<span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                Thread thread=<span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                <span class="keyword">return</span> thread;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ThreadPoolExecutor executor=<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">2</span>,</span><br><span class="line">        <span class="number">10</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">2</span>),</span><br><span class="line">                factory,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">RejectedExecutionHandler</span>() &#123;  <span class="comment">//自定义拒绝策略</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我执行了自定义拒绝策略&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> finalI=i;</span><br><span class="line">            executor.submit(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>*finalI);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;任务：&quot;</span>+finalI);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行循环完毕后关闭线程池</span></span><br><span class="line">executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池的状态">线程池的状态</h3><p>线程池的状态通常包括以下几种：</p><ol><li><p><strong>RUNNING</strong>：线程池处于运行状态，可以接受新任务并处理已有的任务。</p></li><li><p><strong>SHUTDOWN</strong>：线程池处于关闭状态，不再接受新任务，但会处理已有的任务。</p></li><li><p><strong>STOP</strong>：线程池处于停止状态，不再接受新任务，也不会处理已有的任务，会中断正在执行的任务。</p></li><li><p><strong>TIDYING</strong>：线程池正在整理线程池中的线程，例如删除已经停止的线程。</p></li><li><p><strong>TERMINATED</strong>：线程池已经终止，不再接受任何任务。</p></li></ol><p>线程池的状态可以通过ThreadPoolExecutor类的getState()方法获取，返回一个枚举类型的值，表示当前线程池的状态。在使用线程池的过程中，需要根据当前线程池的状态，避免不必要的操作，保证线程池的稳定性和可靠性</p><ol><li>RUNNING状态的例子：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Task executed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(<span class="string">&quot;Current thread pool state: &quot;</span> + executor.getState());</span><br><span class="line"><span class="comment">// 输出：Current thread pool state: RUNNING</span></span><br></pre></td></tr></table></figure><p>这个例子中，线程池处于RUNNING状态，因为线程池已经创建成功，可以接受新任务并处理已有的任务。</p><ol start="2"><li>SHUTDOWN状态的例子：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">executor.shutdown();</span><br><span class="line">System.out.println(<span class="string">&quot;Current thread pool state: &quot;</span> + executor.getState());</span><br><span class="line"><span class="comment">// 输出：Current thread pool state: SHUTDOWN</span></span><br></pre></td></tr></table></figure><p>这个例子中，线程池处于SHUTDOWN状态，因为调用了executor.shutdown()方法，线程池不再接受新任务，但会处理已有的任务。</p><ol start="3"><li>STOP状态的例子：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Task executed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">executor.shutdown();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    executor.awaitTermination(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Current thread pool state: &quot;</span> + executor.getState());</span><br><span class="line"><span class="comment">// 输出：Current thread pool state: STOP</span></span><br></pre></td></tr></table></figure><p>这个例子中，线程池处于STOP状态，因为调用了executor.shutdown()方法后，线程池不再接受新任务，并且中断正在执行的任务。</p><ol start="4"><li>TIDYING状态的例子：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">executor.shutdown();</span><br><span class="line"><span class="keyword">while</span> (!executor.isTerminated()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Current thread pool state: &quot;</span> + executor.getState());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Current thread pool state: TIDYING</span></span><br><span class="line"><span class="comment">// Current thread pool state: TERMINATED</span></span><br></pre></td></tr></table></figure><p>这个例子中，线程池处于TIDYING状态，因为调用了executor.shutdown()方法后，线程池正在整理线程池中的线程，例如删除已经停止的线程。</p><ol start="5"><li>TERMINATED状态的例子：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">60</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">executor.shutdown();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    executor.awaitTermination(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;Current thread pool state: &quot;</span> + executor.getState());</span><br><span class="line"><span class="comment">// 输出：Current thread pool state: TERMINATED</span></span><br></pre></td></tr></table></figure><p>这个例子中，线程池处于TERMINATED状态，因为线程池已经终止，不再接受任何任务。在调用executor.shutdown()方法后，等待所有任务执行完毕并且所有线程都被回收后，线程池进入TERMINATED状态。</p><h4 id="关闭线程池的方法">关闭线程池的方法</h4><p>ThreadPoolExecutor类提供了两种关闭线程池的方法，分别是shutdown()和shutdownNow()。这两种方法的区别如下：</p><ol><li><p>shutdown()方法：调用该方法后，线程池会拒绝新的任务提交，但会继续处理已经提交的任务，直到所有任务都被完成。在所有任务完成后，线程池才会真正关闭，并释放所有资源。如果在调用shutdown()方法之后，继续提交新的任务，这些任务会被拒绝并抛出RejectedExecutionException异常。</p></li><li><p>shutdownNow()方法：调用该方法后，线程池会拒绝新的任务提交，并尝试中断正在执行的任务。在中断任务的过程中，如果任务响应中断，则任务会被成功中断并从任务队列中移除。如果任务无法响应中断，则任务会继续执行。在所有任务都被中断或已经完成后，线程池会真正关闭，并释放所有资源。如果在调用shutdownNow()方法之后，继续提交新的任务，这些任务会被拒绝并抛出RejectedExecutionException异常。</p></li></ol><p>因此，shutdown()方法是<strong>优雅地关闭线程池，等待所有任务都被完成后再关闭线程</strong>池，而shutdownNow()方法是<strong>强制关闭线程池</strong>，立即停止所有任务的执行，并尝试中断正在执行的任务。选择哪个方法取决于业务需求，如果需要优雅地关闭线程池，可以使用shutdown()方法，如果需要立即停止所有任务的执行，可以使用shutdownNow()方法。</p>]]></content>
      
      
      <categories>
          
          <category> java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/2013454d.html"/>
      <url>/posts/2013454d.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard fomalhaut1998 %&#125; | &#123;% ghcard fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'Amap'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客刷题笔记1</title>
      <link href="/posts/135de23b.html"/>
      <url>/posts/135de23b.html</url>
      
        <content type="html"><![CDATA[<h2 id="笔试题和算法题1">笔试题和算法题1</h2><ol><li>HashMap如何解决哈希冲突？</li></ol><p><a href="https://blog.csdn.net/qq_41167306/article/details/123610211">HashMap是由数组+链表组成的，jdk1.8后加入了红黑树。它使用链地址法来解决哈希冲突，这样我们可以将具有相同哈希值的对象组织成一个链表放在hash值所对应的bucket下</a></p><ol start="2"><li>java中数组复制效率对比</li></ol><p>在Java语言中，有几种数组复制方法，包括System.arraycopy、clone、Arrays.copyOf和for循环。其中，System.arraycopy的效率最高，其次是clone，然后是Arrays.copyOf，最后是for循环。</p><ol start="3"><li>java中二维数组创建的正确语句</li></ol><p>float f <code>[][]</code> = new float<code>[6][6]</code></p><p>float  <code>[]f[]</code> = new float<code>[6][6]</code></p><p>float  <code>[][]f</code> = new float<code>[6][6]</code></p><p>float  <code>[][]f</code> = new float<code>[6][]</code></p><ol start="4"><li>如何保证在多线程环境下保证线程顺序执行又保证线程安全</li></ol><p>在多线程环境下，可以使用多种方法来保证线程顺序执行并保证线程安全。例如，可以使用Thread类中的<code>join</code>方法来保证多个线程按指定的顺序执行。此外，还可以使用CountDownLatch、CyclicBarrier、Semaphore等并发工具类来实现线程的同步和顺序执行。</p><ol><li><p>join方法：join方法是Thread类中的一个方法，它可以让当前线程等待调用join方法的线程执行完成后再继续执行。例如，如果线程A调用了线程B的join方法，那么线程A会等待线程B执行完成后再继续执行。</p></li><li><p>CountDownLatch：CountDownLatch是一个并发工具类，它允许一个或多个线程等待其他线程完成操作。它的构造函数接受一个int类型的参数，表示需要等待的线程数量。当一个线程完成操作时，它可以调用CountDownLatch的countDown方法来减少计数器的值。其他线程可以调用CountDownLatch的await方法来等待计数器减为0。</p></li><li><p>CyclicBarrier：CyclicBarrier也是一个并发工具类，它允许一组线程互相等待，直到所有线程都到达某个屏障点。它的构造函数接受一个int类型的参数，表示需要等待的线程数量。当一个线程到达屏障点时，它会调用CyclicBarrier的await方法来等待其他线程。当所有线程都到达屏障点时，屏障将打开，所有线程都将继续执行。</p></li><li><p>Semaphore：Semaphore是一个计数信号量，它可以用来控制对共享资源的访问。它的构造函数接受一个int类型的参数，表示允许同时访问共享资源的最大线程数量。当一个线程需要访问共享资源时，它可以调用Semaphore的acquire方法来获取许可。如果当前没有可用的许可，那么该线程将阻塞，直到有可用的许可为止。当一个线程完成对共享资源的访问后，它可以调用Semaphore的release方法来释放许可。</p></li></ol><p>这些方法都可以用来保证多个线程按指定顺序执行并保证线程安全。</p><ol start="5"><li>针对jdk1.7,不属于JVM堆内存中的区域，</li></ol><p>java7，字符串常量池从方法区移到堆中。java8 整个常量池从方法区中移除。方法区使用元空间（MetaSpace）实现 。</p><ol start="6"><li><p>关于jvm的一些看法,</p><ol><li>JVM大体分为堆、栈、方法区和程序计数器四个部分。其中堆和方法区对线程共享，栈和程序计数器对线程隔离。</li><li>堆：存放数组和对象实例 ,- 栈：存放局部变量和数据类型 ,- 方法区：存放静态变量、常量、类信息和代码,程序计数器是一个比较小的内存区域，用于指示当前线程所执行的字节码执行 到了第几行，是线程隔离的 ,原则上讲，所有的对象都是在堆区上分配内存，是线程之间共享的 , Java方法执行内存模型，用于存储局部变量，操作数栈，动态链接，方法出口等信息，是线程隔离的 ,</li></ol></li><li><p>TreeSet使用二叉树对元素进行排序</p></li><li><p>读写锁的一些知识：</p></li></ol><p>CopyOnWriteArrayList适用于写少读多的并发场景 ，ReadWriteLock即为读写锁，他要求写与写之间互斥，读与写之间互斥，    读与读之间可以并发执行。在读多写少的情况下可以提高效率 ，ConcurrentHashMap是同步的HashMap，读写都加锁，volatile只保证多线程操作的可见性，不保证原子性</p><ol start="9"><li>Servlet中HttpServletRequest.getParameter获取的参数</li></ol><p>由客户端浏览器和web容器配置共同决定编码。</p><ol start="10"><li><p>成员内部类前面可以修饰public,protected,private.</p></li><li><p>在接口interface主体内声明常量的<code>public static int answer = 42;</code></p></li><li><p>在java7中能做switch()参数的类型：</p><ol><li>int 型</li><li>枚举类型</li><li>字符串类型(String ) jdk7以后新增</li><li>short</li><li>char</li><li>long</li></ol><p>不能作为switch的类型：</p><ol><li>float</li><li>double</li><li>boolean</li></ol></li><li><p>jre判断程序是否执行结束的标准：</p><p>所有前台线程执行完毕</p><p>后台线程：指为其他线程提供服务的线程，也称为守护线程。JVM的垃圾回收线程就是一个后台线程。 前台线程：是指接受后台线程服务的线程，其实前台后台线程是联系在一起，就像傀儡和幕后操纵者一样的关系。傀儡是前台线程、幕后操纵者是后台线程。由前台线程创建的线程默认也是前台线程。可以通过isDaemon()和setDaemon()方法来判断和设置一个线程是否为后台线程。</p></li><li><pre><code class="language-java">//以下代码输出什么  nullpublic class Base&#123;    private String baseName = &quot;base&quot;;    public Base()&#123;        callName();    &#125;     public void callName()&#123;        System. out. println(baseName);    &#125;     static class Sub extends Base&#123;        private String baseName = &quot;sub&quot;;        public void callName()&#123;            System. out. println (baseName) ;        &#125;    &#125;    public static void main(String[] args)&#123;        Base b = new Sub();    &#125;&#125;</code></pre></li></ol><p>(1) <strong>父类静态代码块</strong>(包括静态初始化块，静态属性，但不包括静态方法)</p><p>(2) <strong>子类静态代码块</strong>(包括静态初始化块，静态属性，但不包括静态方法   )</p><p>(3) <strong>父类非静态代码块</strong>(   包括非静态初始化块，非静态属性   )</p><p>(4) <strong>父类构造函数</strong></p><p>(5) <strong>子类非静态代码块</strong>   (   包括非静态初始化块，非静态属性   )</p><p>(6) <strong>子类构造函数</strong></p><p>​    其中：类中静态块按照声明顺序执行，并且(1)和(2)不需要调用new类实例的时候就执行了(意思就是在类加载到方法区的时候执行的)</p><p>2.其次，需要理解子类覆盖父类方法的问题，也就是<strong>方法重写实现多态</strong>问题。</p><p>​    Base b = new Sub();<strong>它为多态的一种表现形式，声明是Base,实现是Sub类，</strong>   <strong>理解为</strong>       <strong>b</strong>     <strong>编译时表现为Base类特性，运行时表现为Sub类特性。</strong></p><p>​    当子类覆盖了父类的方法后，意思是父类的方法已经被重写，<strong>题中</strong>     <strong>父类初始化调用的方法为子类实现的方法，子类实现的方法中调用的baseName为子类中的私有属性。</strong></p><p>​    由1.可知，此时只执行到步骤4.,子类非静态代码块和初始化步骤还没有到，子类中的baseName还没有被初始化。所以此时   baseName为空。   所以为null。</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA全家桶激活激活码</title>
      <link href="/posts/fd5ae9cb.html"/>
      <url>/posts/fd5ae9cb.html</url>
      
        <content type="html"><![CDATA[<h1>IDEA激活方式</h1><ol><li><p>先从官网[<a href="https://www.jetbrains.com/">https://www.jetbrains.com/</a>]下载2022.1的IDEA系列安装包。</p></li><li><p>下载相关破解包破解工具</p><ol><li>补丁：<a href="https://pan.baidu.com/s/1KK7351Xjagc09klN-BaGYw">https://pan.baidu.com/s/1KK7351Xjagc09klN-BaGYw</a>  提取码: 6t6t</li><li>无限速蓝奏云网盘链接：<a href="https://wwe.lanzoul.com/ikV6Szw3mre">https://wwe.lanzoul.com/ikV6Szw3mre</a></li><li>注意这个激活包是全家桶激活</li><li>安装相关软件，选择不要立即启动，之后解压补丁文件，推荐解压到非中文文件目录下，注意这个文件不要删除，因为idea激活全靠这个文件。</li><li>进入<code>ja-netfilter-all\scripts</code>选择<code>install-current-user.vbs</code>运行，点击确认窗口，然后等待done</li><li>出现done窗口后，进入软件，输入激活码，一般到这部就激活成功了。</li><li>参考页面：<a href="http://www.itmind.net/14363.html">http://www.itmind.net/14363.html</a></li><li>参考页面：<a href="http://www.itmind.net/14605.html">http://www.itmind.net/14605.html</a></li></ol></li><li><p>IDEA-py激活码</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">IHMWLMSEAL-eyJsaWNlbnNlSWQiOiJJSE1XTE1TRUFMIiwibGljZW5zZWVOYW1lIjoidHJlbmRzIHJhYmJpcyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMi0wOCIsInBhaWRVcFRvIjoiMjAyMy0wMi0wOCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUFBDIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMi0wOCIsInBhaWRVcFRvIjoiMjAyMy0wMi0wOCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAyLTA4IiwicGFpZFVwVG8iOiIyMDIzLTAyLTA4IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBTSSIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDItMDgiLCJwYWlkVXBUbyI6IjIwMjMtMDItMDgiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUENXTVAiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAyLTA4IiwicGFpZFVwVG8iOiIyMDIzLTAyLTA4IiwiZXh0ZW5kZWQiOnRydWV9XSwibWV0YWRhdGEiOiIwMTIwMjIwMjA4UFNBTjAwMDAwNSIsImhhc2giOiJUUklBTDozMzQzMzQ3ODMiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0</span>=<span class="string">-TT/mvlYqIE07j8qgnrhSSVpMtD4buKsRuntPuB17Zb8KodU2SUcb8byLpLG1pU+xEIIyG3Scu/ypjXmQ9w4iyvOT+NYGmeeHFMHnknQVEhhUvDZjTMNXPct03KeHcjxJX8jMSsuRkTooePx1beXjHTuxcyiO8qJcNOOl/97pT45kGTqSJohat0Xe7oiwrE6u3JZhfSdmYV9iJxz6XGNeoPMPnXbH17yoP75eXUqQJzUGxqdeHyKVHSUUJTGfO3IHgjN9y2TwYET5oFjRy1qSMRf4vXpPCK7tnfqhCGISQiDCm+ETB133CcmArxlRVlKdbAIM/7W++eOn5AfW/CNvgg==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span></span><br></pre></td></tr></table></figure><ol start="4"><li>IDEA-java激活码</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">4W9NP3KV9E-eyJsaWNlbnNlSWQiOiI0VzlOUDNLVjlFIiwibGljZW5zZWVOYW1lIjoic2NyaXAgd2FuZSIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjpmYWxzZX0seyJjb2RlIjoiUERCIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQV1MiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFBTIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQUEMiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBSQiIsImZhbGxiYWNrRGF0ZSI6IjIwMjMtMDEtMjQiLCJwYWlkVXBUbyI6IjIwMjMtMDEtMjQiLCJleHRlbmRlZCI6dHJ1ZX0seyJjb2RlIjoiUFNXIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfSx7ImNvZGUiOiJQU0kiLCJmYWxsYmFja0RhdGUiOiIyMDIzLTAxLTI0IiwicGFpZFVwVG8iOiIyMDIzLTAxLTI0IiwiZXh0ZW5kZWQiOnRydWV9LHsiY29kZSI6IlBDV01QIiwiZmFsbGJhY2tEYXRlIjoiMjAyMy0wMS0yNCIsInBhaWRVcFRvIjoiMjAyMy0wMS0yNCIsImV4dGVuZGVkIjp0cnVlfV0sIm1ldGFkYXRhIjoiMDEyMDIyMDEyMVBTQU4wMDAwMDUiLCJoYXNoIjoiVFJJQUw6LTYyNTA2MDI4NyIsImdyYWNlUGVyaW9kRGF5cyI6NywiYXV0b1Byb2xvbmdhdGVkIjpmYWxzZSwiaXNBdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlfQ</span>=<span class="string">=-WlwI3NBiapY7em4MmP7qdZcTK2wvAt5f7FNwaH65H6SBvWnFGpe8M2VrSWCEBIGFQpv+VFJLghJKLjaRUcVOY6ttC6G4uKTpuPzELgcckez+/9DPrYj+alvLYFpS6UWy4uqzsjC/sHgcbNiCQjZQMVhj8Wflv9ts8SfWUqTwtciG8eBrzbyipXOVrRn5Wpk3l6ifL71HZsMy3bDLU8Lkt3UQBNVFZhXWBcNyY/WB9CQGX+6aXtbFA9p/hjbTZL050UoeM30rz0UkzPmfiIupbb3KNPKPArQkU8gw6pF7AcRSLuU3HNqq8RDbrXDYSXY9vtoD3Oi18ijlagVANrhjpQ==-MIIETDCCAjSgAwIBAgIBDTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTIwMTAxOTA5MDU1M1oXDTIyMTAyMTA5MDU1M1owHzEdMBsGA1UEAwwUcHJvZDJ5LWZyb20tMjAyMDEwMTkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCUlaUFc1wf+CfY9wzFWEL2euKQ5nswqb57V8QZG7d7RoR6rwYUIXseTOAFq210oMEe++LCjzKDuqwDfsyhgDNTgZBPAaC4vUU2oy+XR+Fq8nBixWIsH668HeOnRK6RRhsr0rJzRB95aZ3EAPzBuQ2qPaNGm17pAX0Rd6MPRgjp75IWwI9eA6aMEdPQEVN7uyOtM5zSsjoj79Lbu1fjShOnQZuJcsV8tqnayeFkNzv2LTOlofU/Tbx502Ro073gGjoeRzNvrynAP03pL486P3KCAyiNPhDs2z8/COMrxRlZW5mfzo0xsK0dQGNH3UoG/9RVwHG4eS8LFpMTR9oetHZBAgMBAAGjgZkwgZYwCQYDVR0TBAIwADAdBgNVHQ4EFgQUJNoRIpb1hUHAk0foMSNM9MCEAv8wSAYDVR0jBEEwP4AUo562SGdCEjZBvW3gubSgUouX8bOhHKQaMBgxFjAUBgNVBAMMDUpldFByb2ZpbGUgQ0GCCQDSbLGDsoN54TATBgNVHSUEDDAKBggrBgEFBQcDATALBgNVHQ8EBAMCBaAwDQYJKoZIhvcNAQELBQADggIBAB2J1ysRudbkqmkUFK8xqhiZaYPd30TlmCmSAaGJ0eBpvkVeqA2jGYhAQRqFiAlFC63JKvWvRZO1iRuWCEfUMkdqQ9VQPXziE/BlsOIgrL6RlJfuFcEZ8TK3syIfIGQZNCxYhLLUuet2HE6LJYPQ5c0jH4kDooRpcVZ4rBxNwddpctUO2te9UU5/FjhioZQsPvd92qOTsV+8Cyl2fvNhNKD1Uu9ff5AkVIQn4JU23ozdB/R5oUlebwaTE6WZNBs+TA/qPj+5/we9NH71WRB0hqUoLI2AKKyiPw++FtN4Su1vsdDlrAzDj9ILjpjJKA1ImuVcG329/WTYIKysZ1CWK3zATg9BeCUPAV1pQy8ToXOq+RSYen6winZ2OO93eyHv2Iw5kbn1dqfBw1BuTE29V2FJKicJSu8iEOpfoafwJISXmz1wnnWL3V/0NxTulfWsXugOoLfv0ZIBP1xH9kmf22jjQ2JiHhQZP7ZDsreRrOeIQ/c4yR8IQvMLfC0WKQqrHu5ZzXTH4NO3CwGWSlTY74kE91zXB5mwWAx1jig+UXYc2w4RkVhy0//lOmVya/PEepuuTTI4+UJwC7qbVlh5zfhj8oTNUXgN0AOc+Q0/WFPl1aw5VV/VrO8FCoB15lFVlpKaQ1Yh+DVU8ke+rt9Th0BCHXe0uZOEmH0nOnH/0onD</span></span><br></pre></td></tr></table></figure><p>其他软件：</p><p><a href="http://www.itmind.net/collect">http://www.itmind.net/collect</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程面试题</title>
      <link href="/posts/42904f32.html"/>
      <url>/posts/42904f32.html</url>
      
        <content type="html"><![CDATA[<h1>java多线程面试题</h1><h3 id="java中守护线程和本地线程的区别？">java中守护线程和本地线程的区别？</h3><p>java守护线程（Daemon）也称作精灵线程，本地线程也叫做用户线程（user）</p><p>,任何线程都可以被设置为守护线程，反之全为用户线程，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.setDeamon(<span class="literal">true</span>);<span class="comment">//设置为精灵西线程</span></span><br></pre></td></tr></table></figure><p>必须在Thread.start()之前调用，否则运行会抛出异常，二者唯一的区别是，判断jvm何时离开，Daemon为其他线程服务，当全部的用户线程全部撤离，那么Daemon没有可以服务的线程，jvm就可以撤离。</p><p>比如Jvm中的垃圾回收线程是一个守护线程，当所有的线程已经撤销，不在生成垃圾，那么守护线程没事情可干，当你垃圾回收线程是java虚拟机上仅存的线程时候，java虚拟机会自动离开。</p><h3 id="线程与进程的区别">线程与进程的区别</h3><p>进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。</p><p>一个程序至少有一个进程，一个进程至少一个线程。</p><h3 id="什么是多线程的上下文切换">什么是多线程的上下文切换</h3><p>多线程会共同使用一组计算机的CPU，而线程数大于给程序分配的CPU数量，为了让各个线程都有执行的机会，就需要轮转使用cpu,不同的线程切换使用cpu发生的切换数据等就是上下文切换。</p><h3 id="死锁和活锁的区别，死锁和饥饿的区别">死锁和活锁的区别，死锁和饥饿的区别</h3><p>死锁：指两个或两个以上的进程在执行过程中争抢资源造成的一种互相等待的情况，若无外力作用，他们将会无法推进下去。</p><p><strong>产生死锁的必要条件：</strong></p><ol><li>互斥条件：所谓互斥，进程在某一时间内独占资源。</li><li>请求和保持条件： 一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相连的循环等待资源关系。</li></ol><p><strong>活锁：</strong> 任务或者执行者没有被阻塞，由于某些条件没有满足，导致一种重复尝试，失败，尝试，失败。</p><p>活锁和死锁的区别在于：处于活锁的实体是在不断改变状态，所谓活，而处于死锁的实体表现为等待；活锁有可能自行解开，死锁不能。</p><p><strong>饥饿：</strong> 一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执行的状态。</p><p><strong>java导致饥饿的原因：</strong></p><ol><li>高优先级吞噬所有的低优先级线程CPU时间。</li><li>线程被永久堵塞在一个等待进入同步块的状态，因为其它的线程总是能在他之前持续地对该同步块进行访问。</li><li>线程在等待一个本身也处于永久等待完成的对象（比如调用这个对象的wait方法），因为其它线程总是被持续的获得唤醒。</li></ol><h3 id="java中线程调度的算法是什么：">java中线程调度的算法是什么：</h3><p>采用时间片轮转的方式，可以设置线程的优先级，会映射到下层的系统上面的优先级，如非特别需要，尽量不要使用。可能会造成线程饥饿。</p><h3 id="什么是线程组，为什么在java不推荐使用">什么是线程组，为什么在java不推荐使用</h3><p>ThreadGroup类，可以把线程归属到某一个线程组中，线程组可以有线程对象也可以有线程组，组中还可以有线程，这样的组织结构有点类似于树的形式。</p><p>为什么不推荐？</p><ol><li>线程组ThreadGroup现象中比较常用的方法stop,resume,suspend等方法，由于这几个方法会导致线程安全问题，故而被官方废弃掉了，所以线程本身的应用价值就大打折扣了。</li><li>其不是线程安全，这在使用的过程中获取的信息不是全部及时有效的，这样就降低了其统计价值。</li></ol><h3 id="什么是-Executors-框架？">什么是 Executors 框架？</h3><p>Executor 框架是一个根据一组执行策略调用，调度，执行和控制的异步任务的框</p><p>架。</p><p>无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的的</p><p>解决方案，因为可以限制线程的数量并且可以回收再利用这些线程。利用</p><p>Executors 框架可以非常方便的创建一个线程池。</p><h3 id="为什么使用Executor框架">为什么使用Executor框架</h3><p>每次执行任务线程，new Thread(）比较消耗性能，创建一个线程是比较耗时的，耗资源的。</p><p>调用new Thread()创建的线程缺乏管理，被称为野线程，而且可以无限制创建，线程与线程之间的相互竞争也会导致占用过多系统资源而导致系统瘫痪，而且线程之间的频繁交替也会消耗很多的系统资源。</p><p>而且使用 new Thread()启动的线程不利于拓展，比如定时执行，定期执行，定时定期执行，线程中断都不便实现。</p><h3 id="java中Executor和Executors的区别">java中Executor和Executors的区别</h3><p>Executor 工具类的不同方法按照我们的需求去创建不同的线程池，来满足业务的需求，</p><p>Executor接口对象能执行我们的线程任务</p><p>ExecutorService接口继承Executor接口并进行拓展，提供了更多的方法，我们能获得任务执行的状态，并且可以获得任务的返回值。</p><p>使用ThreadPoolExecutor可以创建自定义线程池。</p><p>Euture 表示异步计算的结果，他提供了检查计算是否完成的方法，以等待计算的完成，并可以get()方法或的计算的结果。</p><h3 id="什么是原子操作？java中Concurrency-API中有哪些原子类">什么是原子操作？java中Concurrency API中有哪些原子类</h3><p>原子操作：不可中断的一个或一系列操作</p><p>处理器使用基于缓存加锁或总线加锁的方式来实现多处理器之间的原子操作</p><p>java中可以通过锁和循环CAS的方式来实现原子操作，CAS操作 – Compare &amp; Set ，或是</p><p>Compare &amp; Swap,现在几乎所有的CPU指令都支持CAS的原子操作。</p><p>原子操作时是一个不受其他操作影响的任务单元，原子操作是在多线程下避免数据不一致的手段。</p><p>int ++ 并不是一个原子操作，所以当一个线程读到他的值并加一的时候，另一个线程可能读到之前的值，这就会导致引发错误。</p><p>为了解决这个问题，jdk1.5之前使用同步技术来解决这一点，到JDK1.5出现了java.util.concurrent.atomic包提供了int和long类型的原子包装。它可以自动的保证对于他们的操作时原子的并且不需要同步。</p><p>java.util.concurrent 这个包里边提供了一组的原子类，基本特性是多线程下，有多个线程同时置信你个这些类的实例包含的反复，具有排他性，当某个线程进入方法，执行其中的指令，不会被其他的线程打断，而别的线程就像自旋锁一样，一直等待该方法的执行完成，才由JVM从等待队列中选择一个另一个线程进入。</p><p>原子类：AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference</p><p>原子数组：AtomicIntegerArray，AtomicLongArray，AtomicReferenceArray </p><p>原子属性更新器：：AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，</p><p>AtomicReferenceFieldUpdater</p><p>解决ABA问题的原子类：AtomicMarkableReference（通过引入一个 boolean</p><p>来反映中间有没有变过），AtomicStampedReference（通过引入一个 int 来累</p><p>加来反映中间有没有变过）</p><h3 id="并发编程的三要素">并发编程的三要素</h3><ol><li>原子性</li></ol><p>指一·个或多个操作，要么全部执行要么全部不执行</p><ol start="2"><li>可见性</li></ol><p>可见性指多个线程操作一个共享变量时，其中一个线程对变量进行修改后，其他线程可以立即看到修改的结果</p><ol start="3"><li>有序性</li></ol><p>即程序的执行顺序按照代码的先后顺序来执行</p><h3 id="创建线程的方式三种：">创建线程的方式三种：</h3><p>一般上线程是三种</p><ol><li><p>继承Thread类</p><p>简单使用方便</p></li><li><p>实现runnable方法</p><p>线程类实现了Runnable接口，Callable接口，还可以继承其他类</p><p>在这种方式之下，多个线程可以共享同一个target对象，故而适合多个相同线程来处理同一份资源的情况，从而可以将CPU和代码和数据分开。形成清晰的模型，较好的体现了面向对象的思想。</p></li><li><p>通过Callable和Future创建线程一般使用Callable将会带返回值，如果你希望有返回值的那就使用Callable</p><p>Callable重写的是call()方法，Runable重写的是run方法</p></li><li><p>通过线程池创建</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/posts/b7fb4495.html"/>
      <url>/posts/b7fb4495.html</url>
      
        <content type="html"><![CDATA[<h1>music</h1><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div>]]></content>
      
      
      <categories>
          
          <category> music </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
